(function () {
  const za = window;
  let b = 89;
  var Ka = 141;
  if (Ka > 8) {
    Ka = 189;
  }
  const ob = function (a) {
    let c = "";
    for (let d = 0; d < a.length; d++) {
      c += za.String.fromCharCode(a[d] ^ b++ % 255);
    }
    return c;
  };
  var n = 46;
  if (n >= 13) {
    n = 11;
  }
  var Wc = 204;
  if (Wc === 11) {
    Wc = 87;
  }
  var Ef = 127;
  if (Ef > 1) {
    Ef = 230;
  }
  var Uf = 89;
  if (Uf > 6) {
    Uf = 178;
  }
  var vg = 232;
  if (vg == 6) {
    vg = 41;
  }
  ΔⵠᐃᐃⲆⲆΔ = [[0, 105, 13, 37, 62, 51, 9, 21, 5, 36, 49, 20, 7, 49, 50, 85], [8, 61, 94, 25, 55, 54, 37, 57, 43, 37, 31, 26, 20, 62, 38, 69], [35, 23, 23, 15, 31, 63, 66, 189], [226, 176, 235, 244, 223, 232, 214, 181], [235, 221, 205, 251], [238, 201, 201, 229], [243, 213, 213, 253, 207, 193, 224, 165], [192, 194, 209, 246, 203, 217, 167, 157], [194, 207, 245, 208, 199, 149, 253, 196, 251, 242, 241, 192, 207, 192, 253, 253, 208, 234, 253, 132, 239, 225, 130, 212, 218, 221, 134, 129], [217, 249, 134, 183], [160, 149, 242, 172, 159, 244, 145, 155, 147, 157, 254, 167, 151, 150, 133, 160, 179, 191, 176, 233], [182, 228, 129, 232, 140, 157, 226, 166, 188, 134, 141, 144, 131, 208, 215, 217], [134, 212, 139, 222, 179, 187, 214, 209], [143, 221, 173, 152, 168, 192, 159, 196, 144, 167, 202, 197], [155, 200, 206, 136, 167, 166, 78, 123, 91, 84, 96, 105], [98, 79, 100, 126, 80, 90, 49, 48], [87, 60, 90, 125, 75, 75, 70, 121, 67, 80, 94, 108, 120, 118, 74, 100], [125, 114, 118, 91, 120, 123, 117, 24], [66, 20, 98, 89, 78, 108, 121, 16], [116, 103, 102, 72, 107, 107, 102, 69, 84, 5, 12, 4], [89, 124, 122, 12, 93, 13, 21, 124], [23, 6, 47, 120], [28, 42, 113, 60, 46, 3, 1, 112], [23, 23, 18, 38, 48, 27, 63, 104], [15, 101, 32, 41, 0, 12, 105, 109, 9, 14, 93, 92], [48, 36, 34, 85, 60, 54, 85, 84], [60, 60, 0, 24, 10, 43, 24, 51, 17, 29, 62, 29, 19, 38, 69, 68], [24, 73, 73, 10, 39, 39, 214, 251, 216, 210, 185, 184], [229, 234, 222, 250, 208, 220, 202, 247, 212, 222, 173, 172], [203, 160, 222, 249, 207, 207, 202, 245, 207, 168, 206, 241, 253, 242, 246, 215, 247, 228, 226, 208, 196, 202, 254, 208], [201, 227, 230, 193, 204, 232, 137, 217, 232, 242, 137, 136], [212, 240, 212, 204, 224, 236, 250, 196, 235, 210, 134, 181, 161, 133, 150, 179, 144, 170, 142, 186, 174, 156, 154, 143, 170, 137, 130, 161, 176, 132, 129, 232], [181, 229, 142, 233], [128, 233, 138, 237, 136, 152, 140, 149, 184, 187, 148, 147, 132, 138, 190, 185, 176, 134, 182, 151, 180, 183, 161, 204], [168, 193, 162, 197, 167, 197, 193, 140, 158, 188, 170, 201, 154, 65, 60, 63], [90, 55, 79, 106, 94, 80, 91, 102, 90, 98, 91, 99, 85, 125, 71, 107, 70, 38, 44, 39, 116, 117, 87, 118], [66, 68, 95, 105, 73, 77, 119, 91, 64, 22, 73, 80, 69, 79, 20, 23], [79, 100, 103, 70, 118, 2, 100, 15], [105, 99, 0, 94, 110, 85, 65, 86, 97, 125, 0, 3], [93, 7, 120, 52, 32, 2, 11, 118, 30, 16, 3, 122], [40, 33, 27, 58, 45, 99, 11, 62], [10, 102, 108, 35, 53, 53, 15, 48, 63, 29, 96, 99], [59, 40, 43, 10, 1, 10, 43, 22, 3, 47, 5, 28, 9, 11, 80, 83], [12, 67, 35, 11, 18, 35, 64, 24, 22, 47, 35, 79], [24, 79, 47, 8, 28, 193, 188, 191], [218, 234, 211, 235, 221, 229, 223, 243], [233, 219, 203, 186, 221, 215, 253, 232, 247, 211, 211, 227, 206, 170, 204, 167], [248, 241, 203, 228, 251, 247, 144, 206], [250, 151, 239, 202, 254, 240, 251, 198, 249, 158, 235, 222, 205, 215, 140, 143], [233, 236, 221, 218, 238, 136, 247, 204, 217, 235, 140, 214, 221, 173, 144, 255], [144, 147, 240, 246, 136, 141, 143, 179, 168, 161, 139, 251], [154, 152, 155, 164, 177, 131, 185, 172, 141, 137, 228, 231], [129, 177, 177, 173, 189, 166, 171, 142, 186, 215, 180, 219], [180, 189, 187, 167, 185, 189, 208, 211], [140, 194, 157, 135], [170, 172, 167, 128, 174, 159, 196, 199], [162, 206, 187, 141, 98, 64, 63, 62], [93, 104, 80, 105, 105, 94, 63, 90, 85, 85, 92, 96], [116, 86, 43, 69, 66, 80, 88, 67, 124, 81, 80, 107, 126, 112, 125, 34], [66, 118, 116, 87, 70, 22, 108, 18], [74, 110, 19, 93, 79, 108, 19, 18], [84, 92, 116, 64, 80, 98, 99, 10], [97, 84, 108, 11, 101, 108, 3, 2], [25, 44, 46, 54, 30, 4, 123, 122], [43, 14, 50, 35, 21, 127, 24, 32, 50, 99, 42, 56, 14, 13, 31, 106], [2, 52, 54, 46, 6, 28, 99, 98], [4, 38, 52, 87, 0, 32, 44, 15, 11, 91, 60, 24, 13, 58, 91, 3], [18, 67, 71, 31, 22, 24, 36, 27, 34, 56, 71, 70], [31, 16, 56, 10, 218, 198, 187, 247], [229, 183, 208, 178, 217, 187, 179, 224, 214, 220, 179, 178], [202, 252, 212, 248, 206, 196, 171, 170], [251, 170, 200, 226, 254, 175, 234, 243], [195, 147, 236, 218, 254, 242, 240, 210], [202, 238, 147, 195, 246, 234, 248, 196], [211, 131, 228, 131, 225, 216, 224, 207, 220, 238, 236, 193, 216, 248, 214, 211, 153, 150, 144, 175, 167, 162, 251, 250], [145, 145, 156, 251, 174, 254, 140, 188, 137, 137, 185, 238], [142, 141, 152, 189, 129, 129, 152, 183], [184, 149, 148, 175, 130, 176, 223, 222], [189, 215, 158, 139, 177, 177, 160, 161, 142, 131, 188, 131, 147, 159, 168, 155, 150, 180, 203, 202], [155, 148, 172, 129, 152, 186, 199, 121, 91, 83, 62, 57], [97, 65, 62, 77, 80, 82, 89, 100, 91, 88, 69, 93], [72, 74, 93, 100, 119, 113, 42, 37], [64, 40, 99, 116, 124, 73, 46, 76, 123, 99, 30, 25], [70, 97, 97, 25, 74, 24, 125, 71], [78, 29, 109, 67, 80, 101, 125, 88], [111, 88, 125, 78, 91, 111, 117, 83, 100, 102, 117, 4, 35, 112, 17, 40], [39, 1, 126, 62, 42, 15, 29, 57, 23, 15, 114, 109], [53, 96, 59, 36, 12, 100, 48, 101], [56, 13, 110, 41, 7, 6, 21, 53, 59, 58, 11, 84], [52, 11, 11, 6, 63, 61, 7, 25, 9, 42, 54, 64, 32, 42, 57, 13, 44, 46, 28, 69], [29, 23, 23, 16, 25, 9, 66, 189], [227, 176, 182, 254, 225, 193, 190, 255], [234, 185, 217, 224, 238, 207, 178, 173], [243, 213, 255, 238, 241, 209, 193, 237, 195, 194, 210, 161], [254, 243, 201, 202, 195, 144, 150, 209, 255, 241, 233, 152], [248, 242, 225, 213, 244, 246, 196, 141], [210, 223, 229, 206, 214, 241, 142, 205, 218, 136, 237, 233, 231, 230, 215, 240], [160, 154, 141, 139, 156, 147, 243, 245], [144, 155, 246, 241], [175, 252, 250, 187, 178, 191, 234, 163], [135, 187, 175, 174, 128, 130, 138, 238, 147, 155, 153, 153, 130, 143, 165, 209], [135, 161, 177, 218, 179, 189, 156, 209], [180, 220, 151, 198, 188, 136, 186, 201], [150, 155, 161, 143, 155, 189, 189, 150, 167, 175, 61, 60], [90, 50, 61, 111, 100, 53, 112, 122, 80, 92, 66, 61], [95, 87, 70, 122, 115, 68, 45, 81, 116, 37, 45, 41, 64, 67, 116, 45], [122, 71, 97, 28], [123, 16, 110, 73, 127, 127, 122, 69], [79, 122, 17, 16], [74, 103, 122, 89, 80, 93, 122, 70, 111, 111, 106, 85], [89, 124, 68, 85, 90, 120, 26, 55, 33, 46, 116, 120], [36, 117, 124, 116], [43, 19, 30, 33, 44, 23, 29, 108], [4, 97, 2, 60, 7, 15, 22, 35, 0, 12, 109, 52, 60, 23, 11, 92], [59, 81, 34, 16, 63, 85, 62, 26, 59, 60, 89, 29, 12, 56, 54, 65, 19, 36, 77, 0, 36, 25, 50, 17, 24, 44, 41, 64], [47, 39, 214, 234, 227, 212, 188, 184], [231, 181, 222, 188, 233, 252, 177, 176], [236, 215, 198, 161, 200, 196, 197, 168], [244, 164, 210, 233, 192, 204, 169, 173, 199, 199, 242, 209, 192, 145, 144, 152], [199, 240, 249, 148], [201, 198, 149, 157, 247, 247, 226, 221], [232, 235, 254, 204, 212, 132, 241, 132], [224, 214, 208, 206, 220, 249, 142, 241, 167, 148, 188, 169], [156, 169, 130, 165, 144, 147, 188, 161], [173, 135, 154, 167, 182, 148, 237, 191, 180, 229, 175, 228], [185, 182, 138, 183, 186, 158, 221, 220], [184, 132, 217, 216], [133, 213, 190, 217, 190, 216, 166, 157, 180, 184, 197, 193, 171, 171, 166, 133, 148, 197, 204, 196], [152, 188, 170, 136, 164, 51, 83, 109], [90, 92, 79, 108], [100, 79, 101, 127, 81, 123, 48, 51], [85, 87, 71, 120, 113, 38, 71, 122, 65, 78, 83, 80, 74, 46, 36, 106, 124, 103, 24, 87, 121, 115, 16, 22], [69, 26, 28, 64, 73, 30, 24, 30, 117, 104, 89, 2, 81, 99, 99, 67, 83, 105, 4, 7], [88, 81, 107, 68, 92, 7, 120, 55, 32, 118, 19, 19, 34, 16, 11, 38], [41, 11, 33, 59, 21, 5, 33, 36, 50, 3, 97, 107], [13, 106, 31, 42, 57, 59, 96, 99], [6, 82, 39, 23, 58, 86, 51, 21, 50, 90, 39, 5, 49, 59, 63, 95, 13, 55, 39, 25, 37, 25, 51, 5, 19, 47, 47, 0], [33, 43, 72, 21], [37, 216, 233, 245, 226, 220, 207, 234, 228, 255, 180, 183], [209, 203, 219, 228, 237, 162, 195, 254, 194, 204, 195, 253, 246, 207, 160, 223, 194, 196, 207, 246], [197, 205, 152, 200, 199, 252, 232, 155], [253, 249, 148, 151], [201, 158, 152, 195, 246, 231, 227, 222], [208, 135, 227, 223, 212, 139, 235, 195, 218, 235, 136, 208], [229, 173, 248, 183, 167, 133, 248, 251], [158, 250, 240, 191, 145, 153, 244, 255, 171, 151, 135, 171, 129, 230, 147, 166, 181, 191, 228, 231], [185, 139, 139, 164, 188, 210, 167, 140, 185, 181, 216, 219], [132, 175, 175, 147, 136, 222, 184, 211], [139, 183, 167, 198, 151, 177, 179, 133, 150, 175, 157, 143], [152, 187, 187, 206, 97, 64, 63, 62], [102, 66, 63, 52], [108, 78, 51, 101, 86, 63, 118, 99, 65, 35, 106, 123, 119, 38, 91, 42], [65, 119, 76, 114, 69, 112, 102, 115, 67, 86, 31, 30], [71, 22, 112, 78, 113, 113, 96, 82, 117, 117, 69, 18], [82, 3, 7, 90, 110, 98, 108, 65, 91, 84, 108, 10, 94, 80, 70, 73, 25, 22, 19, 126], [39, 119, 16, 119, 30, 36, 12, 56, 40, 26, 24, 13, 52, 23, 0, 35, 54, 2, 3, 106], [1, 107, 34, 45, 63, 111, 11, 98], [3, 38, 91, 25, 5, 61, 52, 23, 10, 91, 94, 86], [15, 95, 56, 95, 36, 38, 30, 0, 22, 50, 26, 13, 34, 46, 52, 13, 30, 16, 44, 5], [226, 214, 238, 179, 222, 221, 204, 202, 233, 222, 187, 251, 232, 204, 179, 178], [202, 163, 196, 163, 198, 194, 238, 251, 250, 206, 204, 238, 248, 213, 208, 220, 197, 247, 240, 203, 254, 149, 147, 207, 202, 254, 255, 150], [206, 159, 155, 197, 233, 230, 135, 196, 214, 242, 240, 130, 220, 254, 210, 194, 222, 142, 232, 209, 161, 128, 255, 254], [166, 247, 243, 171, 171, 167, 128, 189, 175, 170, 243, 242], [180, 150, 190, 167, 142, 128, 128, 162, 130, 152, 231, 230], [190, 239, 235, 166, 186, 185, 172, 147, 129, 136, 179, 218], [137, 190, 223, 145, 136, 170, 168, 154, 148, 182, 158, 155, 144, 178, 163, 202], [162, 190, 150, 129, 152, 186, 184, 117, 88, 48, 85, 74, 103, 52, 85, 100, 107, 75, 54, 49], [110, 60, 89, 32, 66, 69, 38, 36, 79, 78, 93, 42, 64, 77, 108, 33], [79, 115, 103, 86, 120, 122, 114, 94, 104, 77, 97, 81, 74, 71, 109, 25], [116, 28, 22, 74], [80, 0, 101, 1, 86, 126, 125, 84, 90, 9, 118, 1], [92, 118, 117, 44, 27, 37, 126, 121], [38, 43, 1, 120, 19, 27, 118, 113], [20, 124, 118, 37, 11, 7, 63, 33, 55, 59, 1, 33, 8, 13, 110, 50, 63, 25, 10, 93], [2, 80, 53, 23, 63, 49, 41, 88, 51, 61, 57, 38, 15, 3, 61, 28, 20, 51, 78, 73], [17, 49, 33, 2, 29, 59, 70, 65], [30, 77, 45, 249, 227, 176, 247, 232, 208, 181, 213, 189, 235, 205, 222, 177], [238, 198, 197, 230, 245, 213, 170, 164, 240, 206, 213, 244], [250, 221, 221, 229, 254, 172, 201, 234, 195, 204, 242, 153], [199, 225, 158, 194, 200, 221, 150, 145], [206, 195, 249, 196, 211, 129, 233, 216, 228, 132, 207, 208, 218, 137, 246, 129], [223, 141, 253, 240, 160, 149, 250, 177, 166, 177, 250, 245], [168, 146, 153, 160, 175, 159, 242, 237], [139, 138, 187, 184, 140, 161, 234, 229], [186, 157, 157, 165, 135, 137, 234, 208, 181, 143, 218, 143, 191, 183, 218, 213], [191, 216, 189, 133, 184, 220, 214, 154, 144, 192, 165, 196], [150, 155, 206, 139, 155, 189, 194, 145, 167, 149, 90, 105, 91, 48, 86, 115, 101, 96, 53, 52], [105, 102, 90, 101, 84, 71, 124, 69, 118, 84, 82, 37, 76, 70, 37, 36], [120, 76, 112, 104], [68, 88, 118, 91, 70, 100, 72, 80, 127, 127, 122, 89, 72, 25, 24, 16], [77, 29, 102, 66, 104, 100, 122, 5], [111, 5, 126, 76, 111, 124, 68, 85, 91, 105, 18, 116, 33, 4, 17, 120], [37, 117, 30, 60, 16, 10, 113, 112], [45, 124, 6, 43, 49, 20, 2, 32, 12, 22, 101, 100], [62, 28, 48, 41, 4, 14, 93, 92], [7, 39, 33, 88], [5, 10, 62, 29, 8, 88, 54, 1, 63, 93, 24, 1, 16, 52, 37, 72], [44, 48, 46, 75, 27, 44, 50, 17, 43, 56, 236, 181, 216, 212, 252, 214, 223, 223, 218, 249, 232, 252, 177, 176], [219, 202, 169, 219, 198, 255, 198, 193], [245, 223, 210, 245, 254, 246, 202, 232, 250, 218, 242, 205, 248, 206, 226, 148, 196, 239, 249, 148], [243, 153, 196, 197, 205, 196, 254, 199, 232, 244, 226, 247, 210, 246, 133, 132], [226, 138, 133, 200, 228, 231, 163, 252], [161, 241, 172, 181, 156, 169, 154, 133, 144, 147, 167, 240], [151, 253, 168, 167, 177, 225, 130, 132, 143, 143, 138, 182], [184, 182, 154, 239, 191, 136, 132, 137, 134, 164, 221, 156], [188, 160, 209, 131, 142, 188, 221, 129, 140, 129, 161, 204], [150, 171, 186, 153, 149, 156, 128, 145, 152, 150, 152, 204, 167, 87, 101, 110], [90, 99, 56, 59], [99, 95, 60, 121, 105, 62, 67, 124], [110, 71, 36, 121, 73, 76, 125, 70, 77, 127, 36, 39], [66, 75, 83, 104, 124, 87, 28, 31], [71, 22, 99, 86, 67, 111, 69, 95, 113, 91, 16, 19], [76, 2, 127, 90, 81, 115, 96, 11], [85, 111, 0, 8, 97, 106, 111, 72], [90, 20, 8, 127], [33, 19, 3, 49, 36, 15, 37, 63, 17, 59, 112, 115], [21, 23, 7, 59, 55, 3, 54, 107], [4, 15, 108, 106, 22, 8, 7, 28, 60, 14, 43, 10, 6, 53, 88, 91], [62, 63, 59, 1], [49, 52, 5, 25, 13, 67, 59, 66, 16, 3, 72, 75], [45, 47, 76, 17, 33, 43, 44, 67], [29, 215, 184, 233, 226, 211, 223, 179], [222, 186, 176, 255, 233, 225, 219, 228, 235, 215, 199, 249], [202, 166, 253, 254, 244, 243, 223, 170], [254, 200, 216, 163], [198, 146, 152, 209, 193, 151, 236, 155], [242, 197, 255, 196, 249, 244, 197, 217], [204, 130, 247, 198, 208, 243, 205, 218, 226, 213, 255, 138, 225, 237, 128, 131], [238, 173, 173, 172, 144, 147, 240, 246, 137, 162, 155, 136, 168, 162, 135, 166, 170, 129, 236, 239], [178, 147, 131, 166, 141, 234, 177, 234], [186, 155, 177, 171, 187, 161, 220, 223], [135, 163, 220, 214, 190, 191, 158, 215], [178, 222, 187, 158, 141, 177, 204, 207], [144, 198, 163, 154, 173, 185, 196, 199], [168, 144, 179, 174, 84, 102, 63, 62], [102, 66, 106, 114, 82, 92, 68, 99, 111, 76, 51, 50], [113, 86, 126, 125, 117, 84, 43, 42], [123, 119, 113, 38], [120, 90, 114, 107, 122, 118, 27, 18, 64, 100, 27, 26], [75, 68, 124, 81, 79, 106, 23, 90, 83, 3, 103, 14], [109, 7, 78, 71, 98, 110, 15, 11, 107, 124, 3, 2], [25, 115, 58, 51, 30, 18, 115, 119, 27, 14, 28, 59, 22, 127, 38, 127], [50, 22, 62, 38, 14, 3, 4, 33], [59, 106, 8, 51, 56, 21, 8, 37], [52, 54, 36, 83, 5, 36, 91, 90], [12, 62, 95, 0, 54, 58, 52, 31, 18, 28, 36, 24], [16, 50, 79, 58, 26, 74, 30, 23, 31, 22, 48, 23, 227, 179, 215, 190], [222, 205, 204, 239, 236, 185, 230, 255, 213, 218, 234, 227], [202, 214, 254, 233, 247, 210, 238, 255, 253, 200, 167, 166], [253, 240, 167, 239, 194, 198, 159, 158], [242, 242, 202, 210, 204, 237, 239, 153, 253, 245, 228, 214, 233, 233, 217, 142], [237, 134, 252, 219, 225, 225, 232, 215, 237, 211, 232, 210, 154, 172, 148, 186], [166, 146, 128, 247, 145, 251, 173, 246], [149, 149, 156, 255, 137, 134, 156, 161], [141, 187, 128, 231, 188, 158, 227, 174, 191, 170, 227, 226], [129, 182, 211, 139, 190, 215, 176, 179, 138, 190, 211, 157, 136, 170, 134, 159, 146, 156, 150, 181, 150, 152, 176, 158, 154, 190, 172, 144], [157, 170, 203, 117, 91, 90, 73, 77, 83, 67, 54, 69], [94, 79, 58, 65, 94, 70, 93, 32, 114, 84, 89, 120, 118, 78, 65, 116, 122, 41, 74, 33], [127, 89, 38, 74, 64, 16, 117, 79], [124, 20, 95, 68, 112, 114, 97, 127, 119, 121, 97, 0], [83, 101, 117, 0], [108, 97, 121, 8, 88, 98, 97, 80], [95, 105, 6, 43, 27, 19, 126, 121], [39, 117, 5, 36, 43, 45, 118, 113], [40, 15, 114, 109], [50, 21, 43, 60, 48, 7, 106, 101], [0, 13, 35, 47], [57, 41, 98, 93], [50, 53, 86, 84, 40, 28, 45, 42, 10, 4, 33, 4, 8, 63, 82, 77], [40, 37, 61, 68, 20, 33, 78, 13], [29, 72, 61, 5, 31, 25, 66, 189], [216, 213, 251, 232, 230, 232, 214, 181], [232, 221, 190, 246, 215, 214, 197, 160, 192, 255, 197, 249, 247, 165, 221, 244], [192, 194, 217, 235, 199, 201, 170, 203, 240, 144, 203, 212, 199, 225, 246, 149], [240, 153, 253, 213, 206, 156, 150, 201], [231, 229, 223, 193, 209, 242, 250, 193, 232, 226, 241, 197, 228, 230, 212, 253], [162, 138, 137, 168, 159, 171, 171, 252], [144, 248, 179, 160, 148, 150, 133, 133, 176, 133, 226, 184, 183, 229, 129, 232], [136, 130, 145, 165, 132, 134, 179, 163, 133, 181, 185, 137, 191, 190, 174, 213], [176, 135, 210, 135, 136, 191, 210, 205], [171, 179, 206, 201], [145, 177, 206, 172, 157, 178, 177, 140, 159, 147, 99, 60], [96, 68, 61, 109, 92, 70, 53, 52], [83, 92, 94, 102, 92, 87, 74, 125, 112, 125, 70, 88, 119, 79, 86, 41, 64, 76, 41, 113, 125, 120, 29, 28], [65, 17, 98, 23, 124, 118, 21, 20], [78, 115, 98, 65, 77, 68, 118, 95, 104, 100, 1, 5], [84, 112, 1, 87], [89, 86, 106, 85, 100, 126, 125, 124], [33, 112, 2, 60, 34, 6, 117, 116], [46, 121, 32, 38, 42, 8, 55, 108], [8, 20, 56, 47, 15, 101, 97, 44, 56, 54, 10, 55, 58, 30, 93, 92], [58, 82, 93, 84, 4, 9, 42, 25, 8, 12, 81, 80], [12, 56, 54, 69, 36, 52, 77, 68, 47, 69, 16, 40, 24, 73, 16, 8, 26, 55, 205, 188], [225, 177, 194, 241, 229, 192, 240, 229], [232, 185, 185, 249, 234, 215, 194, 253], [243, 196, 161, 226, 242, 207, 201, 164], [249, 245, 251, 160], [252, 173, 149, 216, 248, 244, 226, 206, 195, 255, 230, 153, 243, 243, 254, 193, 247, 157, 216, 217, 208, 222, 208, 217], [239, 133, 129, 210, 224, 234, 129, 128], [231, 141, 249, 183, 163, 241, 168, 169], [158, 246, 241, 190, 171, 156, 248, 240], [148, 162, 188, 162, 176, 149, 134, 185, 179, 159, 137, 228], [185, 232, 142, 232, 188, 152, 181, 220], [187, 208, 174, 137, 191, 191, 186, 133, 184, 188, 148, 129, 140, 184, 166, 132, 150, 178, 201, 200], [151, 160, 205, 148, 152, 140, 193, 192], [157, 71, 56, 49], [96, 55, 87, 127, 101, 58, 125, 102, 93, 75, 91, 58, 107, 81, 44, 47], [71, 38, 95, 103, 77, 79, 87, 42], [65, 91, 36, 106, 70, 119, 77, 87], [66, 124, 107, 100, 68, 70, 99, 66, 78, 125, 16, 19], [76, 93, 93, 92, 82, 124, 100, 11], [85, 127, 0, 84, 118, 104, 124, 3], [92, 114, 23, 114, 21, 3, 41, 50, 29, 31, 112, 123, 47, 13, 112, 115], [21, 98, 7, 98, 5, 19, 57, 34, 13, 9, 100, 103], [57, 110, 104, 40, 60, 39, 55, 23], [1, 35, 51, 11, 3, 41, 84, 87], [50, 52, 63, 6, 13, 26, 56, 79], [41, 70, 35, 70, 35, 47, 21, 9, 25, 59, 17, 4, 37, 215, 207, 244, 225, 233, 215, 252], [229, 223, 223, 226, 232, 191, 219, 247, 213, 198, 195, 254, 246, 220, 196, 171], [245, 245, 223, 238, 193, 205, 160, 163], [198, 146, 201, 202, 192, 207, 235, 208, 253, 239, 252, 151], [207, 193, 148, 221, 203, 231, 128, 222], [210, 227, 128, 195, 237, 224, 243, 226, 218, 235, 239, 142, 222, 129, 252, 255], [145, 145, 244, 151, 145, 142, 162, 247], [145, 254, 181, 184, 150, 189, 151, 161, 130, 131, 173, 161, 182, 159, 156, 231], [130, 139, 232, 176, 189, 167, 180, 223], [176, 179, 212, 142, 189, 218, 188, 215], [137, 171, 212, 132, 182, 168, 163, 130, 145, 198, 193, 203], [148, 203, 187, 137, 154, 164, 172, 195], [89, 86, 122, 116, 101, 66, 67, 58], [82, 78, 76, 59, 85, 92, 51, 50], [115, 118, 47, 46], [76, 36, 47, 110, 124, 81, 72, 107, 68, 47, 84, 119, 67, 19, 119, 30], [71, 72, 31, 22, 74, 68, 123, 22], [117, 64, 120, 25, 81, 102, 100, 74, 101, 6, 96, 78, 92, 84, 108, 110, 94, 74, 3, 2], [34, 115, 119, 40, 39, 40, 0, 41, 43, 122, 24, 35, 47, 35, 31, 114], [51, 99, 62, 61, 54, 50, 107, 106], [1, 107, 99, 46, 56, 21, 20, 41, 2, 32, 95, 94], [7, 34, 32, 30, 11, 91, 60, 44, 14, 42, 87, 7, 20, 48, 79, 78], [22, 71, 67, 27, 26, 20, 43, 70], [37, 79, 71, 10, 218, 212, 187, 178, 224, 194, 208, 254, 217, 222, 191, 229, 238, 202, 219, 178], [243, 214, 234, 251, 241, 194, 220, 255, 193, 171, 238, 200, 197, 197, 204, 243], [195, 204, 244, 206, 246, 226, 202, 221, 204, 238, 236, 222, 245, 159, 251, 146], [228, 223, 228, 199, 237, 216, 224, 206], [219, 241, 236, 193, 221, 252, 131, 130], [162, 243, 247, 176, 166, 247, 128, 172], [145, 190, 247, 246], [175, 255, 247, 254, 179, 188, 156, 191], [142, 231, 128, 231, 138, 142, 162, 183, 190, 138, 136, 170, 132, 164, 168, 214, 183, 178, 183, 218], [178, 177, 176, 135, 142, 131, 191, 210], [170, 195, 164, 195, 165, 152, 207, 198, 154, 148, 168, 139, 158, 144, 154, 68, 99, 69, 111, 104, 103, 104, 85, 91, 83, 93, 69, 60], [110, 61, 93, 120, 114, 124, 66, 41], [76, 36, 46, 109, 122, 40, 34, 111, 71, 79, 34, 29], [120, 79, 101, 78, 68, 20, 67, 81, 75, 25, 125, 89, 119, 107, 97, 70, 83, 117, 10, 77], [84, 97, 2, 66, 93, 125, 125, 73, 100, 12, 106, 125], [27, 21, 118, 46, 39, 116, 21, 36, 31, 28, 1, 6, 28, 124, 118, 36, 50, 21, 106, 33, 15, 1, 98, 104], [0, 13, 9, 55, 12, 108, 39, 8, 2, 81, 46, 89], [48, 85, 53, 17, 8, 61, 94, 2], [14, 3, 57, 8, 21, 37, 37, 14, 17, 51, 49, 13, 24, 45, 74, 20, 25, 57, 19, 246, 227, 233, 217, 253, 220, 209, 182, 228], [211, 205, 178, 191, 239, 233, 178, 173], [200, 160, 251, 248, 204, 164, 228, 165], [251, 221, 247, 230, 249, 223, 162, 157], [195, 144, 150, 211, 199, 225, 225, 157], [243, 199, 211, 218, 207, 157, 230, 141], [235, 128, 203, 194, 236, 219, 241, 203, 232, 136, 130, 200, 222, 249, 134, 186, 160, 154, 145, 168, 145, 245, 133, 164, 170, 167, 141, 252, 172, 153, 246, 165], [176, 224, 133, 225], [176, 146, 158, 229], [187, 157, 183, 169, 135, 136, 187, 144, 187, 170, 177, 139], [129, 212, 161, 152, 141, 171, 214, 209], [183, 220, 185, 192], [168, 165, 185, 142], [150, 177, 177, 141, 155, 151, 151, 137, 167, 206, 49, 119, 88, 68, 82, 118], [101, 52, 90, 97, 110, 76, 89, 48], [84, 97, 90, 103, 112, 66, 41, 40], [76, 122, 116, 106, 126, 92, 74, 100], [71, 113, 118, 17, 70, 100, 29, 80], [116, 73, 126, 92, 115, 24, 126, 93, 76, 29, 4, 12], [81, 0, 126, 95], [85, 5, 64, 73, 99, 9, 105, 0], [100, 13, 22, 113, 23, 46, 18, 63, 37, 0, 113, 60, 41, 121, 26, 4, 20, 24, 22, 58, 8, 11, 29, 104], [52, 58, 97, 106], [56, 28, 26, 40, 4, 108, 54, 9, 56, 81, 49, 88], [5, 85, 81, 16, 14, 42, 81, 80]];
  Math.floor(246[246 .ᐃᐃⲆΔᐃᐃⵠⵠᐃ]);
  Math.floor(147[147 .ΔⵠᐃΔⲆⲆⲆ]);
  const Gg = 11;
  const l = 18;
  const g = 16;
  const u = true;
  const d = 3;
  const v = 100;
  const c = 14;
  const m = 19;
  const p = undefined;
  const C = -8;
  const T = -4;
  const ph = false;
  const f = 10;
  const y = 20;
  const w = 18;
  const z = 4;
  const k = 9;
  const A = 12;
  const x = 255;
  const J = 8;
  const M = 7;
  const B = 17;
  const D = 2;
  const E = 4;
  const I = 13;
  const P = 15;
  const Q = 18;
  const S = 12;
  const F = 9;
  const R = 6;
  const j = 4;
  const L = 1 << 11;
  const G = 6;
  const W = 4096;
  const O = 5;
  const N = 2;
  const q = 4;
  const H = 4;
  const U = 4;
  const Y = p;
  const K = 1;
  const V = 11;
  const X = 12;
  let Z = p;
  const _ = 0;
  let ie;
  let aj;
  let bj;
  const cj = 4;
  let ae;
  let dj;
  let ej = Y;
  const fj = 0;
  let le = Y;
  const gj = 17;
  let ue = [];
  const be = 2;
  let de;
  let hj = "_";
  let ij;
  let jj = Y;
  let kj = Y;
  const lj = u;
  const Te = 20;
  let fe;
  let mj;
  let nj = p;
  let oj = Y;
  const pj = 13;
  let ke;
  let qj;
  let rj;
  let sj = Y;
  const tj = 11;
  let Be;
  let uj;
  let vj = Y;
  let wj = Y;
  const xj = 8;
  const Qe = lj;
  const _e = 14;
  let Fe;
  let yj;
  const zj = ph;
  let Le = p;
  let Aj = Y;
  let Bj = Y;
  let Cj;
  let Dj = p;
  const Ej = 19;
  const He = 15;
  let Ue = p;
  const Fj = 16;
  const Ke = 10;
  const Ve = 100;
  const Xe = 7;
  const Ze = 100;
  let $e;
  let Gj = p;
  let Hj = p;
  const Ij = 256;
  let ni = p;
  const Jj = 11;
  let ai;
  const Kj = 17;
  let si;
  var Lj = za.Math.acos;
  za.Math.acos = za.Math.asin;
  za.Math.asin = Lj;
  var li = za.Math.cos;
  za.Math.cos = za.Math.sin;
  za.Math.sin = li;
  const gi = 255;
  const ui = 8;
  const bi = 9;
  let di;
  let Mj = p;
  const Nj = 255;
  let mi = p;
  const Oj = 18;
  let Ci;
  let Pj = p;
  const Qj = 12;
  let zi = Y;
  const Rj = u;
  const wi = 6;
  const Pi = 4;
  let ki;
  const Sj = 9;
  const xi = 5;
  const Ji = 19;
  let Mi = p;
  const Tj = 20;
  const Di = p;
  let Ei = Di;
  let Uj = Di;
  const Vj = 3;
  const Qi = ph;
  let _i;
  let Wj = p;
  let Xj = Y;
  let Yj = 0;
  if (!za.WebAssembly || !za.WebAssembly.instantiate) {
    ΔΔⲆΔΔⵠᐃΔⵠ();
  }
  const Zj = {
    Date: Date
  };
  const Gi = 17;
  za.WebAssembly.instantiate(Uint8Array.from(za.atob(""), function (a) {
    return a.charCodeAt(0);
  }), Zj).then(async function (a) {
    Z = a.instance;
    ie = Z.exports;
    aj = ie.memory;
    bj = aj.buffer;
    ae = ie.__pin;
    ej = ie.__unpin;
    dj = ie.__new;
    le = ie.__collect;
    hj = "_";
    for (let b = 0; b < 31; b++) {
      ue[b] = ie[hj + b];
    }
    de = ie.__rtti_base;
    jj = new Float32Array(bj);
    kj = new Float64Array(bj);
    ij = new BigUint64Array(bj);
    fe = new Uint32Array(bj);
    mj = new Uint16Array(bj);
    nj = new Uint8Array(bj);
    oj = new BigInt64Array(bj);
    sj = new Int32Array(bj);
    ke = new Int16Array(bj);
    qj = new Int8Array(bj);
    di = ue[15];
    rj = ue[8];
    zi = ue[24];
    Mj = ue[1];
    $e = ue[6];
    Le = ue[13];
    yj = ue[10];
    Wj = ue[16];
    uj = ue[17];
    Ei = ue[11];
    Mi = ue[22];
    wj = ue[25];
    Cj = ue[3];
    mi = ue[2];
    Gj = ue[14];
    Bj = ue[21];
    Ci = ue[4];
    si = ue[9];
    Aj = ue[23];
    Xj = ue[29];
    ni = ue[28];
    Uj = ue[26];
    Ue = ue[19];
    Be = ue[30];
    Pj = ue[12];
    ki = ue[20];
    ai = ue[27];
    Hj = ue[18];
    Dj = ue[0];
    vj = ue[7];
    Fe = ue[5];
    Yj = 1;
    if (_i) {
      await _i();
    }
  });
  const Wi = 11;
  const Oi = 0;
  const Ni = function (a) {
    return fe[(de + 4 >>> 2) + (a << 1)];
  };
  const qi = 10;
  function Hi(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const Ui = 2;
  const Yi = 14;
  const Ki = 1;
  function Vi(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return jj;
        case 3:
          return kj;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return qj;
          } else {
            return nj;
          }
        case 1:
          if (b) {
            return ke;
          } else {
            return mj;
          }
        case 2:
          if (b) {
            return sj;
          } else {
            return fe;
          }
        case 3:
          if (b) {
            return oj;
          } else {
            return ij;
          }
      }
    }
  }
  const Xi = 15;
  function Zi(b) {
    const c = fe[b + C >>> 2];
    const d = Ni(c);
    const e = Hi(d);
    let f = d & 4 ? b : fe[b + 4 >>> 2];
    const g = d & 2 ? fe[b + 12 >>> 2] : fe[f + T >>> 2] >>> e;
    return Vi(e, d & L, d & 4096).subarray(f >>>= e, f + g);
  }
  const $i = 16;
  const $j = 19;
  const _j = 7;
  const ak = 5;
  function bk(a, b, c, d, e) {
    Xj(Qq, a, b, c, d, e);
    return ((1 + (Tb(Pq[0], Pq[1], Pq[2], Pq[3], Pq[4], Pq[0]) ^ Tb(Pq[1], Pq[2], Pq[3], Pq[4], Pq[0], Pq[1]))) * 16807 + 0) % 2147483647;
  }
  const ck = 6;
  const dk = 100;
  const ek = 7;
  const fk = zj;
  const gk = 14;
  const hk = 12;
  function ik(a) {
    return function (b, c, d, e, f) {
      const i = ((23873 + b) * 214013 + 2531011) % 4294967296;
      const a = c ^ 17707;
      const j = (36573 + d) % 65318;
      const k = (16 << (e & 255)) + (24 << (e >> 8 & 255)) + (0 << (e >> 24 & 255)) + (8 << (e >> 16 & 255));
      const h = (61935 + f) % 65449;
      const l = Pb(i, a, j, k, h, i);
      (function (b, c, d, e) {
        const f = ~(b & 52891) & b | ~(b & 52891) & 52891;
        const g = c ^ 57580;
        const a = ~(d & 41499) & (d | 41499);
        const i = ~(e & 1971) & (e | 1971);
        const j = function (b, c, d, e, f) {
          const g = ((33619 + b) * 22695477 + 1) % 4294967296;
          const a = (c | 1937) & ~(c & 1937);
          const i = ((f + 12254) * 1664525 + 1013904223) % 4294967296;
          const j = function (b, c, d, e) {
            const f = ~(b & 8936) & (b | 8936);
            const g = (8 << (c >> 8 & 255)) + (0 << (c & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 24 & 255));
            const a = ~(d & 58931) & 58931 | ~(d & 58931) & d;
            const i = (16 << (e >> 16 & 255)) + (0 << (e >> 8 & 255)) + (24 << (e >> 24 & 255)) + (8 << (e & 255));
            const j = Mn(f, g);
            (function (b, c, d, e) {
              const f = (2531011 + (43613 + b) * 214013) % 4294967296;
              const g = c ^ 46297;
              const a = d ^ 24553;
              const i = ~(e & 41391) & (e | 41391);
              const j = zb(f, g, a, i);
              const h = function (b, c, d, e) {
                const f = (b | 24923) & ~(b & 24923);
                const g = ((34330 + c) * 214013 + 2531011) % 4294967296;
                const a = ~(d & 38765) & (d | 38765);
                const i = (2147483587 + (e + 20531) * 2147483629) % 2147483647;
                const j = Mn(f, g);
                const h = function (b, c, d, e, f, g) {
                  const a = ~(b & 37221) & b | ~(b & 37221) & 37221;
                  const i = (2531011 + (49275 + f) * 214013) % 4294967296;
                  const j = (0 << (g >> 16 & 255)) + (24 << (g >> 24 & 255)) + (8 << (g >> 8 & 255)) + (16 << (g & 255));
                  const h = wb(a, ~(c & 20609) & (c | 20609), (2531011 + (25343 + d) * 214013) % 4294967296, ~(e & 26785) & (e | 26785));
                  Gr(i, j, a);
                  return h ^ 25341;
                }(a, i, f, g, a, i);
                return ((44220 + (j ^ h)) * 1664525 + 1013904223) % 4294967296;
              }(f, g, a, i);
            })(a, i, f, g);
            return j ^ 36301;
          }(g, a, ~(d & 3393) & d | ~(d & 3393) & 3393, ((e + 42343) * 22695477 + 1) % 4294967296);
          rt(i, g, a);
          return ~(j & 33191) & (j | 33191);
        }(f, g, a, i, f);
        const h = Gr(g, a, i);
      })(a, j, k, h);
      return ~(l & 46075) & 46075 | ~(l & 46075) & l;
    }(a, 30563, 56904, 14665, 38647);
  }
  const jk = 256;
  function kk(b, c, d, e) {
    const f = ~(b & 37266) & (b | 37266);
    const g = (2531011 + (672 + c) * 214013) % 4294967296;
    const a = (24 << (d >> 16 & 255)) + (16 << (d & 255)) + (0 << (d >> 8 & 255)) + (8 << (d >> 24 & 255));
    const i = ~(e & 12699) & (e | 12699);
    const j = function (b, c, d, e) {
      const f = (0 << (b >> 8 & 255)) + (8 << (b >> 24 & 255)) + (24 << (b >> 16 & 255)) + (16 << (b >> 0 & 255));
      const g = ~(c & 62841) & (c | 62841);
      const a = d ^ 21040;
      const i = e ^ 23651;
      const j = ut(f, g);
      wt(a, i, f, g);
      return ~(j & 49817) & j | ~(j & 49817) & 49817;
    }(f, g, a, i);
    const h = wt(f, g, a, i);
    return (0 << ((j ^ h) >> 24 & 255)) + (8 << ((j ^ h) >> 8 & 255)) + (16 << ((j ^ h) >> 0 & 255)) + (24 << ((j ^ h) >> 16 & 255));
  }
  const lk = "development";
  const mk = 15;
  const nk = 17;
  const ok = 12;
  const pk = 19;
  const qk = "production";
  const rk = 255;
  const sk = 13;
  function tk(a) {
    this.ⵠᐃᐃᐃ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⵠᐃᐃᐃ - 1));
  }
  tk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ⵠᐃᐃᐃ;
    return this.state / this.ⵠᐃᐃᐃ;
  };
  tk.prototype.ⵠⲆΔΔⲆⵠⲆ = function (a) {
    this.state = a;
  };
  ⲆⵠΔᐃⵠⵠⵠ = 10000;
  const uk = 8;
  ⵠⵠⵠᐃΔⲆᐃ = [];
  var vk = new tk();
  const wk = 10;
  vk.ⵠⲆΔΔⲆⵠⲆ(new Date().getTime());
  for (var xk = 0; xk < ⲆⵠΔᐃⵠⵠⵠ; xk++) {
    ⵠⵠⵠᐃΔⲆᐃ.push(vk.random());
  }
  function yk(a, b) {
    const c = ~(a & 39798) & (a | 39798);
    const d = ((3494 + b) * 1103515245 + 12345) % 2147483648;
    return (1 + (4096 + (function (b, c, d, e, f) {
      const g = (b + 44667) % 65382;
      const a = ((18368 + c) * 22695477 + 1) % 4294967296;
      const i = d ^ 5849;
      const j = (0 << (f >> 24 & 255)) + (8 << (f >> 16 & 255)) + (16 << (f & 255)) + (24 << (f >> 8 & 255));
      const h = wb(g, a, i, ((9004 + e) * 1103515245 + 12345) % 2147483648);
      (function (b, c, d, e) {
        const f = (53275 + b) % 65384;
        const g = ~(c & 35440) & c | ~(c & 35440) & 35440;
        const a = (0 << (d & 255)) + (24 << (d >> 16 & 255)) + (8 << (d >> 24 & 255)) + (16 << (d >> 8 & 255));
        const i = (e | 25997) & ~(e & 25997);
        const j = function (b, c, d, e, f, g) {
          const a = (2147483587 + (b + 29197) * 2147483629) % 2147483647;
          const i = g ^ 20125;
          const j = qt(a, (8 << (c >> 16 & 255)) + (0 << (c >> 24 & 255)) + (24 << (c >> 8 & 255)) + (16 << (c & 255)), (1013904223 + (d + 40982) * 1664525) % 4294967296, e ^ 13326, ~(f & 14780) & f | ~(f & 14780) & 14780);
          Cb(i, a);
          return (j | 6046) & ~(j & 6046);
        }(f, g, a, i, f, g);
        kk(a, i, f, g);
      })(j, g, a, i);
      return (h | 62233) & ~(h & 62233);
    }(c, d, c, d, c) ^ br(d, c, d, c, d, c))) * 22695477) % 4294967296;
  }
  function zk(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const l = j ^ 41301;
      const g = ~(k & 12091) & (k | 12091);
      const b = Uk(a, m, n, h, l, g);
      Uk(a, m, n, h, l, g);
      rn(a, m, n, h, l);
      const d = (b | 3006) & ~(b & 3006);
      return ~(d & 24460) & (d | 24460);
    }(f, i, a, j, f, i);
    const h = yn(a, j, f, i, a);
    Uk(j, f, i, a, j, f);
    const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (l | 38630) & ~(l & 38630);
  }
  const Ak = Di;
  function Bk(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function Ck(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = c ^ 63080;
    const j = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const l = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = Bk(f, i, a, j);
      const h = dn(f, i, a, j);
      zk(f, i, a, j);
      const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(l & 63304) & (l | 63304);
    }(i, a, j, k);
    const g = yn(h, i, a, j, k);
    return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ Jn(h, i, a, j, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  function Dk(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const l = (j + 3575) % 65503;
    const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = pn(a, m, n, h, l);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const g = (j | 45652) & ~(j & 45652);
      const n = pn(a, k, m, h, l);
      Ck(g, a, k, m, h);
      $k(l, g, a, k, m, h);
      return n ^ 60048;
    }(g, a, m, n, h, l);
    en(g, a, m, n, h, l);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  function Ek(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const l = Dn(j, a);
    const g = zk(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = Pn(c, d, c);
        Vk(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ Ik(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = tn(a, j, f, i, a);
      Dn(j, f);
      const l = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const Fk = 13;
  const Gk = 4;
  const Hk = 19;
  function Ik(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const l = Bk(i, a, j, k);
    tn(h, i, a, j, k);
    en(h, i, a, j, k, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  const Jk = 100;
  function Kk(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const l = mn(i, a);
    tn(j, k, h, i, a);
    $k(j, k, h, i, a, j);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  const Lk = 255;
  const Mk = 11;
  const Nk = 255;
  const Ok = Qe;
  function Pk(c, e, f, i, j, k) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const m = (1013904223 + (13210 + e) * 1664525) % 4294967296;
    const n = ~(f & 32165) & 32165 | ~(f & 32165) & f;
    const h = (24 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (8 << (i >> 16 & 255)) + (32 << (i >> 32 & 255));
    const l = (1 + (39199 + j) * 22695477) % 4294967296;
    const g = k ^ 33037;
    const b = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = _k(e, f, g, e, f);
      const i = Jn(g, e, f, g, e, f);
      const j = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = $k(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = Ck(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const l = ~(j & 24998) & (j | 24998);
                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = Sk(a, m, n, h);
                const b = tn(l, g, a, m, n);
                const d = Sk(h, l, g, a);
              })(g, e, f, g, e, f);
              dn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            rn(d, c, d, c, d);
            Bk(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          Vk(j, k, h, i);
          const g = Kk(a, j, k, h, i);
        })(c, d, c, d, c);
        mn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(g, e);
      const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
      return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
    }(a, m, n);
    dn(h, l, g, a);
    return ((34159 + (b ^ 2959 ^ Sk(m, n, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  const Qk = 9;
  const Rk = 18;
  function Sk(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = pn(f, i, a, j, f);
      const h = Ek(i, a, j, f, i);
      const l = qm(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    dn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ pn(f, g, a, i, f))) * 214013) % 4294967296;
  }
  const Tk = 14;
  function Uk(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const l = f ^ 7550;
    const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (un(a, j, k, h, l) ^ dn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ rn(h, l, g, a, j))) * 1103515245) % 2147483648;
  }
  function Vk(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = Dk(f, g, a, i, f, g);
    dn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ en(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  const Wk = 3;
  const Xk = 9;
  const Yk = 15;
  const Zk = 20;
  function $k(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const l = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(k & 1090) & (k | 1090);
    const o = Jn(a, m, n, h, l, g);
    Ik(a, m, n, h, l);
    Bk(g, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  function _k(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const l = en(i, a, j, k, h, i);
    const g = Bk(a, j, k, h);
    Pn(i, a, j);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
  }
  function qm(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = en(d, e, d, e, d, e);
    const g = en(d, e, d, e, d, e);
    Bk(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  function en(b, c, d, e, f, g) {
    const a = b ^ 23409;
    const i = c ^ 26380;
    const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = g ^ 42490;
    return ((19056 + (Bk(a, i, d ^ 53590, e ^ 36633) ^ Bk(j, h, a, i))) * 22695477 + 1) % 4294967296;
  }
  const an = String.fromCharCode;
  const nn = an(101);
  const on = an(118);
  const hn = an(97);
  const ln = an(108);
  const gn = 1;
  const bn = 13;
  function dn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const g = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const j = mn(f, g);
    mn(a, i);
    yn(f, g, a, i, f);
    const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
    return (h | 8862) & ~(h & 8862);
  }
  function rn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const l = en(i, a, j, k, h, i);
    const g = $k(a, j, k, h, i, a);
    Bk(j, k, h, i);
    return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  const cn = 4;
  function mn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (un(c, d, c, d, c) ^ tn(d, c, d, c, d))) % 65357 ^ Bk(c, d, c, d))) * 22695477) % 4294967296;
  }
  function pn(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const l = Ck(i, a, j, k, h);
    Jn(i, a, j, k, h, i);
    return ((3037 + (l ^ 57467 ^ yn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const sn = 12;
  function tn(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const l = Jn(i, a, j, k, h, i);
    Jn(a, j, k, h, i, a);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ Bk(j, k, h, i))) * 214013) % 4294967296;
  }
  const fn = 100;
  function un(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const l = tn(j, a, k, m, h);
    const g = rn(j, a, k, m, h);
    Bk(j, a, k, m);
    const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  const vn = 5;
  const wn = 0;
  function yn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const l = Ik(j, a, k, m, h);
    const g = Dn(j, a);
    Ik(k, m, h, j, a);
    const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  const kn = Qe;
  const zn = 100;
  const xn = 18;
  const An = 15;
  const Cn = 7;
  const Bn = 17;
  function Dn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = Kk(d, e, d, e, d);
    const g = un(e, d, e, d, e);
    _k(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  const En = 16;
  const In = ph;
  function Jn(c, d, e, f, i, j) {
    const a = e ^ 8102;
    const k = (24 << (f >> 16 & 255)) + (32 << (f >> 32 & 255)) + (8 << (f >> 24 & 255)) + (16 << (f >> 8 & 255));
    const m = ~(i & 29687) & 29687 | ~(i & 29687) & i;
    const h = (1 + (62237 + j) * 22695477) % 4294967296;
    const l = qm((c + 52483) % 65496, (16 << (d >> 16 & 255)) + (24 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)));
    const g = qm(a, k);
    qm(m, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  function Mn(a, b) {
    const c = a ^ 6309;
    const d = ((b + 52420) * 214013 + 2531011) % 4294967296;
    const e = br(c, d, c, d, c, d);
    rt(c, d, c);
    return ~(e & 23274) & (e | 23274);
  }
  function Pn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = Kk(e, f, g, e, f);
    const h = Kk(g, e, f, g, e);
    Kk(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  ᐃⵠⲆΔ = {
    ᐃⵠᐃⵠⲆⵠΔ: () => new Promise((a, b) => {
      za.grecaptcha.ready(function () {
        za.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (Cf) {
            a(0);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ⵠⲆⲆⲆᐃᐃΔⵠⲆ: function (a) {
      za.open(a, "_blank").focus();
    },
    ᐃⵠᐃᐃⲆΔᐃ: function (a) {
      za.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ΔⵠᐃΔⲆΔⵠ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return Qi;
        }
      }
      return Rj;
    },
    ⲆⵠᐃⲆᐃⲆᐃⲆⵠ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ΔⵠᐃΔⲆΔⵠ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return fk;
        }
      }
      return Ok;
    },
    ΔⲆΔΔΔⲆᐃ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ⲆⵠⵠΔᐃᐃΔ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⵠΔⵠᐃᐃⲆⲆⵠⵠ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⲆⲆⲆⲆᐃⲆΔ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⲆⵠΔⲆⵠᐃᐃ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ⵠΔΔᐃᐃⲆᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⵠΔⲆⲆⲆⲆⵠ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ⲆᐃΔᐃⲆᐃⵠ: function (a, b) {
      return Math.asin(this.ⲆⲆⲆⲆᐃⲆΔ(a, b) / (this.ⲆⵠΔⲆⵠᐃᐃ(a) * this.ⲆⵠΔⲆⵠᐃᐃ(b))) * this.sign(this.ⵠΔΔᐃᐃⲆᐃ(a, b));
    },
    ⵠⵠⲆΔΔⵠⵠ: function (a) {
      ⵠⵠⲆᐃⵠⵠⲆ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⵠⵠⲆᐃⵠⵠⲆ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⵠᐃᐃᐃⵠⲆΔ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ⲆΔⲆᐃⲆᐃⵠ: function (a, b) {
      return this.ⲆᐃΔᐃⲆᐃⵠ({
        x: 1,
        y: 0
      }, this.ⲆⵠⵠΔᐃᐃΔ(a, b));
    },
    ⲆⵠᐃⲆ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ⲆᐃⵠⲆⲆΔⲆ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⲆⵠΔⵠΔᐃⲆ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ΔⵠⵠᐃᐃΔⲆ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ᐃΔⵠⲆΔΔⲆΔⵠ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ᐃᐃⲆⵠⲆⵠΔᐃΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⲆⲆⲆΔᐃ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ᐃⵠⲆⵠⵠⵠⲆ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ⵠΔΔⵠᐃᐃΔ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ΔⲆⲆⵠⵠΔⵠ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⲆᐃΔⵠⵠΔΔⵠᐃ: function (b, c, d) {
      var e = this.ΔⲆⲆⵠⵠΔⵠ();
      var f = this.ΔⲆⲆⵠⵠΔⵠ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ᐃⲆᐃⵠᐃⲆⲆΔΔ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ᐃⲆᐃ = d;
    },
    ΔⵠᐃⵠⵠᐃⵠΔΔ: function (a) {
      Ⲇᐃⵠ = [];
      Ⲇᐃⵠ.push.apply(Ⲇᐃⵠ, a);
      var b = [];
      while (Ⲇᐃⵠ.length > 0) {
        var c = Math.floor(Math.random() * Ⲇᐃⵠ.length);
        b.push(Ⲇᐃⵠ[c]);
        Ⲇᐃⵠ.splice(c, 1);
      }
      return b;
    },
    ΔΔⲆⵠᐃᐃⵠ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ⵠⲆᐃⵠΔᐃⵠ: function (b) {
      if (typeof b !== "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ᐃⲆᐃΔΔᐃⲆ: function (a) {
      return a * (2 - a);
    },
    ᐃⵠᐃΔΔⲆⵠ: function (a) {
      return --a * a * a + 1;
    },
    ⲆⵠⲆⵠⵠ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ⲆⲆᐃᐃⲆΔⲆ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ΔᐃΔᐃⵠᐃⲆΔᐃ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ΔΔⲆᐃᐃⵠⲆ: function (a) {
      return 1 - --a * a * a * a;
    },
    ⲆⲆᐃⲆⵠΔⵠ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ⲆΔⲆΔ: function (b, c, d, e, f, g) {
      this.ⲆᐃΔ = b;
      this.ⵠΔⵠ = c;
      this.max = d;
      this.min = e;
      this.ⲆΔⵠⲆⲆⲆᐃ = f;
      this.ⵠΔⲆⵠΔΔᐃ = g;
      this.ᐃΔⵠΔΔⲆΔ = 0;
      this.ᐃΔΔ = function () {
        if (this.ⲆᐃΔ) {
          if ((a = this.ⵠΔⵠ + xx * this.ⲆΔⵠⲆⲆⲆᐃ) > this.max) {
            this.ⵠΔⵠ = this.max;
            this.ⲆᐃΔ = In;
            return lj;
          }
          this.ⵠΔⵠ = a;
        } else {
          var a;
          if ((a = this.ⵠΔⵠ - xx * this.ⵠΔⲆⵠΔΔᐃ) < this.min) {
            this.ⵠΔⵠ = this.min;
            this.ⲆᐃΔ = true;
          } else {
            this.ⵠΔⵠ = a;
          }
        }
      };
      return fk;
    },
    Ⲇᐃⵠⵠᐃ: function (b, c, d, e, f, g) {
      this.ᐃⲆᐃᐃᐃ = b;
      this.ⵠⵠⵠⵠΔ = c;
      this.ⵠⲆⲆⵠΔ = d;
      this.ΔⲆΔᐃΔ = e;
      this.x = f;
      this.ⲆⵠⲆⲆⲆ = g;
      this.ᐃⵠⲆⵠΔᐃⵠ = function () {
        this.x = this.ⲆᐃⲆΔᐃᐃΔᐃᐃ;
        this.ⵠⵠⵠⵠΔ = 0;
      };
      this.ᐃΔᐃⵠΔⵠᐃ = function (a) {
        if (a !== this.ⲆⵠⲆⲆⲆ) {
          this.ⲆⵠⲆⲆⲆ = a;
          this.ΔⲆΔᐃΔ = this.x;
          this.ⵠⵠⵠⵠΔ = 0;
        }
        if (this.ⲆⵠⲆⲆⲆ !== this.x) {
          this.ⵠⵠⵠⵠΔ += xx;
          if (this.ⵠⵠⵠⵠΔ > this.ⵠⲆⲆⵠΔ) {
            this.x = this.ⲆⵠⲆⲆⲆ;
          } else {
            var b = this.ᐃⲆᐃᐃᐃ(this.ⵠⵠⵠⵠΔ / this.ⵠⲆⲆⵠΔ);
            this.x = this.ΔⲆΔᐃΔ + (this.ⲆⵠⲆⲆⲆ - this.ΔⲆΔᐃΔ) * b;
          }
        }
      };
    },
    ⲆⲆᐃⵠⵠᐃΔ: function (b, c, d, e, f, g, a, i, j) {
      this.ᐃⲆᐃᐃᐃ = b;
      this.ⵠⵠⵠⵠΔ = c;
      this.ⵠⲆⲆⵠΔ = d;
      this.ΔⲆΔᐃΔ = e;
      this.ᐃⲆΔΔⲆ = f;
      this.x = g;
      this.y = a;
      this.ⲆⵠⲆⲆⲆ = i;
      this.ΔᐃⵠΔᐃⵠⲆ = j;
      this.ᐃΔᐃⵠΔⵠᐃ = function (a) {
        if (a.x != this.ⲆⵠⲆⲆⲆ || a.y != this.ΔᐃⵠΔᐃⵠⲆ) {
          this.ⲆⵠⲆⲆⲆ = a.x;
          this.ΔᐃⵠΔᐃⵠⲆ = a.y;
          this.ΔⲆΔᐃΔ = this.x;
          this.ᐃⲆΔΔⲆ = this.y;
          this.ⵠⵠⵠⵠΔ = 0;
        }
        if (this.ⲆⵠⲆⲆⲆ != this.x || this.ΔᐃⵠΔᐃⵠⲆ != this.y) {
          this.ⵠⵠⵠⵠΔ += xx;
          if (this.ⵠⵠⵠⵠΔ > this.ⵠⲆⲆⵠΔ) {
            this.x = this.ⲆⵠⲆⲆⲆ;
            this.y = this.ΔᐃⵠΔᐃⵠⲆ;
          } else {
            var b = this.ᐃⲆᐃᐃᐃ(this.ⵠⵠⵠⵠΔ / this.ⵠⲆⲆⵠΔ);
            this.x = this.ΔⲆΔᐃΔ + (this.ⲆⵠⲆⲆⲆ - this.ΔⲆΔᐃΔ) * b;
            this.y = this.ᐃⲆΔΔⲆ + (this.ΔᐃⵠΔᐃⵠⲆ - this.ᐃⲆΔΔⲆ) * b;
          }
        }
      };
    },
    ⵠⵠⵠⵠᐃⵠΔ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ᐃᐃᐃᐃⲆⵠΔ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⵠᐃᐃⵠΔ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⲆⵠⵠⲆⵠᐃᐃ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ᐃⲆᐃ && Qe;
    },
    ⵠⲆΔΔⲆᐃⲆ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ᐃᐃⵠⵠᐃΔΔ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ⵠᐃⵠᐃⵠⲆΔ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const Fn = 12;
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ᐃⲆⲆΔᐃᐃΔⲆᐃ;
  };
  const Qn = u;
  function jn(a) {
    return za.String.fromCharCode(a);
  }
  const Ln = 255;
  const Gn = 1;
  const Rn = 2;
  const On = Qe;
  const Nn = fk;
  (function (a) {
    var b = In;
    if (typeof ᐃᐃᐃⵠᐃᐃⵠ === "function" && ᐃᐃᐃⵠᐃᐃⵠ.ⵠⵠⵠΔⵠⲆⵠ) {
      ᐃᐃᐃⵠᐃᐃⵠ(a);
      b = On;
    }
    if (typeof ⲆⲆⵠⲆⲆΔⵠ === "object") {
      ΔᐃⵠΔΔᐃⵠΔᐃ.exports = a();
      b = true;
    }
    if (!b) {
      var c = za.ᐃᐃⲆⵠ;
      var d = za.ᐃᐃⲆⵠ = a();
      d.ΔⵠᐃⲆⲆᐃᐃⵠⲆ = function () {
        za.ᐃᐃⲆⵠ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; arguments.length > a; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document !== "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ᐃⲆᐃⲆⲆⲆⲆ, j)).expires === "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ΔⲆⲆΔᐃⵠᐃⲆᐃ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; l < n.length; l++) {
            var p = n[l].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⵠΔⲆΔⲆⲆᐃⲆⲆ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ᐃⲆᐃⲆⲆⲆⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ⵠᐃⲆᐃⵠⲆᐃⲆᐃ = a;
      return d;
    }(function () { });
  });
  var qn = document.getElementById("game_canvas");
  var Hn = qn.getContext("2d");
  var Sn = qn.width;
  const Tn = 8;
  const Kn = Y;
  function Un(a) {
    const b = function () {
      for (let a = 0; a < 5; a++) {
        za.addEventListener("click", function () {
          b();
        });
      }
    };
    b();
  }
  const Vn = 19;
  const Wn = 11;
  const Xn = 6;
  var Zn = qn.height;
  var $n = qn.width / 2;
  var _n = qn.height / 2;
  var eo = {
    x: $n,
    y: _n
  };
  const io = 1;
  var ro = 1;
  var aq = 1;
  var bq = -1;
  const cq = 11;
  const go = 10;
  const uo = 12;
  const bo = 4;
  var vo;
  var dq = "J" + aa;
  var eq = "S" + xa;
  var fq = za;
  const Co = u;
  const To = 256;
  var fo;
  var gq = (Qo = "O") + "N";
  const hq = 256;
  var wo = fq;
  const Po = 3;
  const ko = 20;
  const Ao = 17;
  const xo = 5;
  const Jo = 13;
  const Mo = 14;
  var Bo;
  eq = "N";
  const iq = 19;
  const Eo = 9;
  var Io = "J";
  const jq = 256;
  var Qo = "O" + aa;
  const kq = 255;
  const Fo = 18;
  const Ro = lj;
  var jo;
  var lq = wo;
  const Go = ph;
  const Wo = 11;
  var Oo;
  var mq = lq;
  gq = "N" + undefined;
  var qo = mq;
  const Ho = Di;
  const Uo = 15;
  var Yo;
  const nq = 9;
  const Vo = 8;
  const Xo = 2;
  const Zo = 4;
  const $o = 100;
  var ea = qo;
  const ia = 12;
  var ta;
  const oq = 12;
  const oa = 16;
  var aa;
  var pq = ea;
  const sa = 16;
  const ha = 0;
  const la = 2;
  var ua;
  const qq = 7;
  const da = 19;
  const va = 11;
  var ca = pq;
  const rq = 15;
  const pa = 9;
  Io = "O";
  ca = pq;
  var Ca = "S";
  const sq = 10;
  ;
  var fa = ca;
  const ya = 1;
  const wa = 100;
  var Pa;
  var tq = fa;
  const Aa = Ho;
  var xa = "J" + Ca;
  const Ja = 6;
  qn.oncontextmenu = function () {
    return false;
  };
  const Ma = 3;
  dq = "J";
  const Ba = 11;
  const Da = 0;
  function Ea(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ᐃⲆⵠᐃᐃᐃᐃ = 1;
    return b;
  }
  const uq = u;
  const Sa = {};
  Sa.get = function (a, b) {
    if (b !== "ΔⲆᐃΔΔᐃᐃΔⲆ") {
      const a = za.setInterval;
      const b = a;
      const c = function () {
        a(c, 2500);
        b(c, 6884);
      };
      c();
    }
    return za.Reflect.get(...arguments);
  };
  const Qa = 20;
  const _a = In;
  const Fa = 13;
  const Ra = 1;
  const ja = 7;
  const La = 14;
  const Ga = 2;
  const Wa = p;
  const Oa = 14;
  vo = fo = xa + (Io += dq = eq);
  const Na = 19;
  const qa = 12;
  const Ha = 17;
  Qo = gq;
  function Ua(a) {
    const b = Math.floor;
    let c = 0;
    Math.floor = function (a) {
      for (let b = 0; b < 4656; b++) {
        c += b;
      }
      return b(a);
    };
  }
  const Ya = 6;
  const Va = 18;
  gq = aa;
  aa = xa;
  const Xa = 255;
  const Za = 16;
  Qo = xa;
  const $a = 9;
  jo = Oo = xa + Io;
  eq = Io + dq;
  Yo = vo;
  const vq = 8;
  Qo = xa + Io;
  ta = fo;
  gq = xa + Io;
  ua = Bo = vo;
  Io = aa = xa;
  const wq = Qn;
  const xq = 2;
  const yq = 5;
  Ca = fo;
  const zq = 6;
  Pa = vo;
  dq = Qo;
  var Aq = za.devicePixelRatio || 1;
  const Bq = 4;
  var Cq = Hn.ⵠᐃⲆΔⲆⲆΔⲆⲆ || Hn.ᐃⵠΔⵠⵠⲆΔΔⵠ || Hn.ⲆⲆᐃΔΔⵠᐃⵠᐃ || Hn.ⲆⵠΔΔⲆΔᐃⵠⲆ || Hn.ᐃⲆΔⵠᐃⲆⲆᐃᐃ || 1;
  function Dq() {
    if (qn.width != za.innerWidth) {
      qn.width = za.innerWidth;
      Sn = qn.width;
      $n = qn.width / 2;
    }
    if (za.innerHeight != qn.height) {
      qn.height = za.innerHeight;
      Zn = qn.height;
      _n = qn.height / 2;
    }
    eo = {
      x: $n,
      y: _n
    };
    var a = qn.width;
    var b = qn.height;
    aq = bq === -1 ? Aq / Cq : bq;
    qn.width = aq * a;
    qn.height = aq * b;
    qn.style.width = a + "px";
    qn.style.height = b + "px";
    Hn.scale(aq, aq);
    if (qx) {
      qx.ⲆⲆᐃ.ⲆⵠΔⲆᐃᐃⵠ = a;
      qx.ⲆⲆᐃ.ᐃΔΔⲆᐃᐃΔ = b;
    }
    if (Dx.ΔᐃᐃᐃΔ) {
      Dx.ᐃΔΔ();
    } else if (mx.ΔᐃᐃᐃΔ) {
      mx.ᐃΔΔ();
    } else if (sx.ΔᐃᐃᐃΔ) {
      sx.ᐃΔΔ();
    } else if (rx.ΔᐃᐃᐃΔ) {
      rx.ᐃΔΔ();
    }
  }
  const Eq = ph;
  const Fq = 10;
  var Gq = document.getElementById("game_body");
  Gq.ondragstart = function () {
    return false;
  };
  Gq.ondrop = function () {
    return Go;
  };
  const Hq = 19;
  Gq.onresize = Dq;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; a.length > c && !za.requestAnimationFrame; ++c) {
      za.requestAnimationFrame = za[a[c] + "RequestAnimationFrame"];
      za.cancelAnimationFrame = za[a[c] + "CancelAnimationFrame"] || za[a[c] + "CancelRequestAnimationFrame"];
    }
    if (!za.requestAnimationFrame) {
      za.requestAnimationFrame = function (c, d) {
        var e = new Date().getTime();
        var f = Math.max(0, 16 - (e - b));
        var a = za.setTimeout(function () {
          c(e + f);
        }, f);
        b = e + f;
        return a;
      };
    }
    za.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const Iq = 100;
  function Jq(b, c, d) {
    const e = ((b + 6956) * 2147483629 + 2147483587) % 2147483647;
    const f = (16 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)) + (24 << (c & 255)) + (8 << (c >> 16 & 255));
    const g = ~(d & 65461) & (d | 65461);
    const a = function (b, c, d, e) {
      const f = ~(b & 29941) & b | ~(b & 29941) & 29941;
      const g = (2531011 + (c + 15136) * 214013) % 4294967296;
      const a = d ^ 12884;
      const i = ((e + 42579) * 1664525 + 1013904223) % 4294967296;
      const j = zb(f, g, a, i);
      (function (b, c, d, e, f) {
        const g = ~(d & 64883) & d | ~(d & 64883) & 64883;
        const a = (8 << (e >> 24 & 255)) + (24 << (e & 255)) + (0 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
        const h = lx(b ^ 45030, c ^ 19845);
        lx(g, a);
      })(f, g, a, i);
      return ~(j & 23381) & j | ~(j & 23381) & 23381;
    }(e, f, g, e);
    Ir(f, g, e, f, g, e);
    return a ^ 50977;
  }
  const Kq = 8;
  const Lq = p;
  function Mq(a, b) {
    si(Qq, a, b);
    const c = rr(Pq[0], Pq[1], Pq[0]);
    const d = function (b, c, d, e) {
      Wj(Qq, b, c, d, e);
      const f = function (a, b) {
        Cj(Qq, a, b);
        const c = Ct(Pq[0], Pq[1], Pq[0], Pq[1], Pq[0]);
        const d = bk(Pq[1], Pq[0], Pq[1], Pq[0], Pq[1]);
        return ((217 + (c ^ d)) * 16807 + 0) % 2147483647;
      }(Pq[0], Pq[1]);
      const g = rr(Pq[2], Pq[3], Pq[0]);
      return ((116 + (f ^ g)) * 8121 + 28411) % 134456;
    }(Pq[1], Pq[0], Pq[1], Pq[0]);
    return (8 << ((c ^ d) >> 16 & 255)) + (16 << ((c ^ d) >> 24 & 255)) + (0 << ((c ^ d) >> 8 & 255)) + (24 << ((c ^ d) & 255));
  }
  const Nq = fk;
  const Oq = 12;
  let Pq = Aa;
  let Qq = Kn;
  const Rq = _i;
  const Sq = 15;

  /*
  *****************
  *SCRIPT VARIABLE*
  *****************
*/

  (function () {
    function e(t, r, n) {
      function i(a, s) {
        if (!r[a]) {
          if (!t[a]) {
            var u = "function" == typeof require && require;
            if (!s && u) return u(a, !0);
            if (o) return o(a, !0);
            var d = Error("Cannot find module '" + a + "'");
            throw d.code = "MODULE_NOT_FOUND", d
          }
          var m = r[a] = {
            exports: {}
          };
          t[a][0].call(m.exports, function (e) {
            return i(t[a][1][e] || e)
          }, m, m.exports, e, t, r, n)
        }
        return r[a].exports
      }
      for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
      return i
    }
    return e
  })()({
    1: [function (e, t, r) {
      let n = e("worker-timers");
      window.workerTimers = n
    }, {
      "worker-timers": 4
    }],
    2: [function (e, t, r) {
      var n, i;
      n = this, i = function (e) {
        "use strict";
        var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
          a = new WeakMap,
          s = (r = (t = a, function (e, r) {
            return t.set(e, r), r
          }), n = a, function (e) {
            var t = n.get(e),
              i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
            if (!e.has(i)) return r(e, i);
            if (e.size < 536870912) {
              for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
              return r(e, i)
            }
            if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
            for (; e.has(i);) i = Math.floor(Math.random() * o);
            return r(e, i)
          }),
          u = (i = s, function (e) {
            var t = i(e);
            return e.add(t), t
          });
        e.addUniqueNumber = u, e.generateUniqueNumber = s
      }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
    }, {}],
    3: [function (e, t, r) {
      var n, i;
      n = this, i = function (e, t) {
        "use strict";
        var r = function e(r) {
          var n = new Map([
            [0, function () { }]
          ]),
            i = new Map([
              [0, function () { }]
            ]),
            o = new Map,
            a = new Worker(r);
          return a.addEventListener("message", function (e) {
            var t, r = e.data;
            if (void 0 !== (t = r).method && "call" === t.method) {
              var a = r.params,
                s = a.timerId,
                u = a.timerType;
              if ("interval" === u) {
                var d = n.get(s);
                if ("number" == typeof d) {
                  var m = o.get(d);
                  if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                } else if (void 0 !== d) d();
                else throw Error("The timer is in an undefined state.")
              } else if ("timeout" === u) {
                var f = i.get(s);
                if ("number" == typeof f) {
                  var c = o.get(f);
                  if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                } else if (void 0 !== f) f(), i["delete"](s);
                else throw Error("The timer is in an undefined state.")
              }
            } else if (null === (l = r).error && "number" == typeof l.id) {
              var l, v = r.id,
                p = o.get(v);
              if (void 0 === p) throw Error("The timer is in an undefined state.");
              var h = p.timerId,
                w = p.timerType;
              o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
            } else throw Error(r.error.message)
          }), {
            clearInterval: function e(r) {
              var i = t.generateUniqueNumber(o);
              o.set(i, {
                timerId: r,
                timerType: "interval"
              }), n.set(r, i), a.postMessage({
                id: i,
                method: "clear",
                params: {
                  timerId: r,
                  timerType: "interval"
                }
              })
            },
            clearTimeout: function e(r) {
              var n = t.generateUniqueNumber(o);
              o.set(n, {
                timerId: r,
                timerType: "timeout"
              }), i.set(r, n), a.postMessage({
                id: n,
                method: "clear",
                params: {
                  timerId: r,
                  timerType: "timeout"
                }
              })
            },
            setInterval: function e(r, i) {
              var o = t.generateUniqueNumber(n);
              return n.set(o, function () {
                r(), "function" == typeof n.get(o) && a.postMessage({
                  id: null,
                  method: "set",
                  params: {
                    delay: i,
                    now: performance.now(),
                    timerId: o,
                    timerType: "interval"
                  }
                })
              }), a.postMessage({
                id: null,
                method: "set",
                params: {
                  delay: i,
                  now: performance.now(),
                  timerId: o,
                  timerType: "interval"
                }
              }), o
            },
            setTimeout: function e(r, n) {
              var o = t.generateUniqueNumber(i);
              return i.set(o, r), a.postMessage({
                id: null,
                method: "set",
                params: {
                  delay: n,
                  now: performance.now(),
                  timerId: o,
                  timerType: "timeout"
                }
              }), o
            }
          }
        };
        e.load = r
      }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
    }, {
      "fast-unique-numbers": 2
    }],
    4: [function (e, t, r) {
      var n, i;
      n = this, i = function (e, t) {
        "use strict";
        var r, n, i = (r = t.load, n = null, function () {
          if (null !== n) return n;
          var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
            type: "application/javascript; charset=utf-8"
          }),
            t = URL.createObjectURL(e);
          return n = r(t), setTimeout(function () {
            return URL.revokeObjectURL(t)
          }), n
        }),
          o = function e(t) {
            return i().clearInterval(t)
          },
          a = function e(t) {
            return i().clearTimeout(t)
          },
          s = function e(t, r) {
            return i().setInterval(t, r)
          },
          u = function e(t, r) {
            return i().setTimeout(t, r)
          };
        e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
      }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
    }, {
      "worker-timers-broker": 3
    }]
  }, {}, [1]);

  let Settings = {
    AutoSpike: {
      e: false,
      k: "Space",
      m: true,
      p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
    },
  };

  window.Utils = {
    initUI: () => {
      let gui = new guify({
        title: "pew",
        theme: {
          name: "loux",
          colors: {
            panelBackground: "rgb(0,0,0)",
            componentBackground: "rgb(127, 135, 20)",
            componentForeground: "rgb(227, 240, 39)",
            textPrimary: "rgb(239, 255, 0)",
            textSecondary: "rgb(255,255,255)",
            textHover: "rgb(43, 16, 159)"
          },
          font: {
            fontFamily: "Baloo Paaji",
            fontSize: "20px",
            fontWeight: "1"
          }
        },
        align: "right",
        width: 550,
        barMode: "none",
        panelMode: "none",
        opacity: .9 /*.6*/,
        root: document.body,
        open: false
      });

      gui.Register({
        type: "folder",
        label: "AutoSpike",
        open: false
      });

      gui.Register([{
        type: "button",
        label: "Set AutoSpike Key",
        action: data => {
          Utils.controls.setKeyBind("AutoSpike")
        }
      }, {
        type: "display",
        label: "AutoSpike Key:",
        object: Settings.AutoSpike,
        property: "k"
      }, {
        type: "checkbox",
        label: "AutoSpike 2",
        object: Settings.AutoSpike,
        property: "m",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "1",
        object: Settings.AutoSpike.p,
        property: "0",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "2",
        object: Settings.AutoSpike.p,
        property: "1",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "3",
        object: Settings.AutoSpike.p,
        property: "2",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "4",
        object: Settings.AutoSpike.p,
        property: "3",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "5",
        object: Settings.AutoSpike.p,
        property: "4",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "6",
        object: Settings.AutoSpike.p,
        property: "5",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "7",
        object: Settings.AutoSpike.p,
        property: "6",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }], {
        folder: "AutoSpike"
      });
    },
    controls: null,
    controller: class {
      setKeyBind(callback) {
        Settings[callback].k = "Press any key";
        let click = 0;
        document.addEventListener("keydown", function abc(event) {
          click++;
          if (click >= 1) {
            if (event.code == "Escape") {
              Settings[callback].k = "NONE"
            } else {
              Settings[callback].k = event.code
            }
            document.removeEventListener("keydown", abc);
            Utils.saveSettings()
          }
        })
      }
    },
    saveSettings: () => {
      for (let HACK in Settings) {
        localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
      }
    },
    loadSettings: () => {
      for (let HACK in Settings) {
        let data = localStorage.getItem(HACK + "loux");
        if (data) Settings[HACK] = JSON.parse(data)
      }
    },
    LoadHack: () => {
      window.Utils.loadSettings();
      Settings.AutoSpike.e = false;
      window.Utils.controls = new window.Utils.controller;
      let script = document.createElement("script");
      script.onload = function () {
        window.Utils.initUI()
      };
      script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
      document.body.appendChild(script);
      setTimeout(() => {
        let mainFlakes = document.getElementById("snowflakeContainer");
        if (mainFlakes) {
          mainFlakes.nextElementSibling.remove();
          mainFlakes.previousElementSibling.remove();
          for (let i = 0; i < mainFlakes.childNodes.length; i++) {
            mainFlakes.childNodes[i].remove()
          }
          mainFlakes.remove()
        }
      }, 1e4)
    }
  };

  function LouxInterval() {
    if (ΔⵠⲆⵠ.ᐃᐃⵠⵠ && ΔⵠⲆⵠ.ᐃᐃⵠⵠ.readyState === 1 && qx && qx.ΔⵠⲆΔᐃ) {
      let myPlayer = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      if (myPlayer) {
        if (Settings.AutoSpike.e) {
          var spikeid;
          for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
            var CurrentSpike = SpikeP[i];
            switch (CurrentSpike) {
              case "Reidite Spike":
                CurrentSpike = 219;
                break;
              case "Amethyst Spike":
                CurrentSpike = 123;
                break;
              case "Diamond Spike":
                CurrentSpike = 170;
                break;
              case "Gold Spike":
                CurrentSpike = 169;
                break;
              case "Stone Spike":
                CurrentSpike = 168;
                break;
              case "Wood Spike":
                CurrentSpike = 160;
                break;
              case "Wood Wall":
                CurrentSpike = 162;
                break;
              case "Nothing":
                CurrentSpike = -1;
                break
            }
            if (CurrentSpike === -1 || !qx.ⵠⲆΔⲆ.ⵠᐃⵠ[CurrentSpike]) continue;
            spikeid = CurrentSpike;
            break
          }
          if (spikeid) {
            let PInumb = 2 * Math.PI;
            let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
            if (Settings.AutoSpike.m) {
              for (let ang = 1; ang <= 15; ang++) {
                ΔⵠⲆⵠ.ᐃᐃⵠⵠ.send(JSON.stringify([15, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                ΔⵠⲆⵠ.ᐃᐃⵠⵠ.send(JSON.stringify([15, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]));
              }
            }
            ΔⵠⲆⵠ.ᐃᐃⵠⵠ.send(JSON.stringify([15, spikeid, MYPLAYERANGLE, 0]))
          }
        }
      }
    }
  }

  /*
  *********
  ***END***
  *********
  */

  _i = async function () {
    Qq = ae(Dj(12));
    Pq = Zi(Qq);
    if (Rq) {
      Rq();
    }

    await window.gapi.load("auth2", Vx);

    let MainHackInterval;
    setTimeout(() => {
      MainHackInterval = workerTimers.setInterval(LouxInterval, 80);
    }, 7000);

    window.Utils.LoadHack();
  };
  const Tq = 14;
  const Uq = {};
  Uq.get = function (a, b) {
    if (b !== "ⵠⲆⲆⵠΔΔⵠ") {
      const a = Math.floor;
      let b = 0;
      const c = function (c) {
        for (let a = 0; a < 2276; a++) {
          b += a;
        }
        return a(c);
      };
      Math.floor = c;
    }
    return za.Reflect.get(...arguments);
  };
  const Vq = On;
  const Wq = 5;
  const Xq = 18;
  const Yq = 9;
  const Zq = 3;
  function $q(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function _q(a) {
    return za.String.fromCharCode(a);
  }
  const ar = 1;
  function br(b, c, d, e, f, g) {
    const a = (1 + (42647 + d) * 22695477) % 4294967296;
    const h = ((21469 + b) * 1103515245 + 12345) % 2147483648 ^ 14163;
    return ((65373 + ((6458 + ((16 << ((h ^ a) & 255)) + (0 << ((h ^ a) >> 8 & 255)) + (24 << ((h ^ a) >> 16 & 255)) + (8 << ((h ^ a) >> 24 & 255)) ^ 48957 ^ ~(f & 40121) & (f | 40121))) % 65514 ^ (8 << (g & 255)) + (0 << (g >> 8 & 255)) + (16 << (g >> 24 & 255)) + (24 << (g >> 16 & 255)))) * 1103515245 + 12345) % 2147483648;
  }
  var dr = navigator.language || navigator.userLanguage;
  const er = 13;
  const fr = Qn;
  var gr = -new Date().getTimezoneOffset() / 60;
  var hr = "Europe";
  const ir = 12368350;
  const jr = 12368350 .ⵠΔⲆᐃΔⵠⵠ;
  const kr = `const ᐃⵠⵠⲆΔⲆⵠⲆΔ = (typeof ⲆⲆᐃΔᐃΔᐃ === "${jr}") ? 1 : 0; return ᐃⵠⵠⲆΔⲆⵠⲆΔ;`;
  const lr = 20;
  var mr = "South America";
  const nr = 17;
  const or = 18;
  var pr = hr;
  const qr = 16;
  function rr(a, b, c) {
    Ue(Qq, a, b, c);
    return (13862 + ((~(Pq[0] & 27472) & 27472 | ~(Pq[0] & 27472) & Pq[0]) ^ Pq[2])) % 65447;
  }
  if (gr >= -2 && gr <= 2) {
    pr = hr;
  } else if (gr > 2 && gr <= 5) {
    pr = "Russia";
  } else if (gr > 5 && gr <= 9) {
    pr = "Asia";
  } else if (gr > 9) {
    pr = "Australia";
  } else if (gr >= -5 && gr < -2) {
    pr = dr === "pt-BR" || dr === "pt-br" || dr === "pt" || dr === "pt-pt" ? mr : "North America";
  } else if (gr < -5) {
    pr = dr === "pt-BR" || dr === "pt-br" || dr === "pt" || dr === "pt-pt" ? mr : "West America";
  }
  const sr = 256;
  const tr = 2;
  function ur(a, b, c, d) {
    Pj(Qq, a, b, c, d);
    return ((248 + (function (a, b, c, d) {
      Fe(Qq, a, b, c, d);
      const e = function (a, b, c) {
        ki(Qq, a, b, c);
        const d = gb(Pq[0], Pq[1], Pq[2]);
        const e = Tb(Pq[0], Pq[1], Pq[2], Pq[0], Pq[1], Pq[2]);
        return (16 << ((d ^ e) >> 24 & 255)) + (24 << ((d ^ e) >> 8 & 255)) + (0 << ((d ^ e) & 255)) + (8 << ((d ^ e) >> 16 & 255));
      }(Pq[0], Pq[1], Pq[2]);
      Ar(Pq[3], Pq[0], Pq[1]);
      return ~(e & 35838) & 35838 | ~(e & 35838) & e;
    }(Pq[0], Pq[1], Pq[2], Pq[3]) ^ gb(Pq[0], Pq[1], Pq[2]))) * 75 + 74) % 65537;
  }
  const vr = 0;
  const wr = Nn;
  function xr(b, c, d, e, f) {
    Uj(Qq, b, c, d, e, f);
    const g = rr(Pq[0], Pq[1], Pq[2]);
    Sb(Pq[3], Pq[4], Pq[0]);
    return ~(g & 22953) & g | ~(g & 22953) & 22953;
  }
  function Ar(a, b, c) {
    yj(Qq, a, b, c);
    const d = function (b, c, d, e) {
      Aj(Qq, b, c, d, e);
      const f = function (b, c, d, e, f) {
        Hj(Qq, b, c, d, e, f);
        const g = Tb(Pq[0], Pq[1], Pq[2], Pq[3], Pq[4], Pq[0]);
        const a = Mq(Pq[1], Pq[2]);
        return ((27 + (g ^ a)) * 75 + 74) % 65537;
      }(Pq[0], Pq[1], Pq[2], Pq[3], Pq[0]);
      const g = Mq(Pq[1], Pq[2]);
      return (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) + (0 << ((f ^ g) & 255));
    }(Pq[0], Pq[1], Pq[2], Pq[0]);
    const e = vt(Pq[1], Pq[2], Pq[0]);
    return (24 << ((d ^ e) >> 8 & 255)) + (8 << ((d ^ e) >> 24 & 255)) + (16 << ((d ^ e) >> 16 & 255)) + (0 << ((d ^ e) & 255));
  }
  const Br = 8;
  var tk = {
    ⵠᐃⵠᐃᐃⲆᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor((b - 1) * Math.random());
      this.ⵠΔⵠⵠⲆ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const Cr = 14;
  const Dr = 11;
  var Er = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  const Fr = Di;
  function Gr(b, c, d) {
    const e = b ^ 12303;
    const f = (c | 27771) & ~(c & 27771);
    const g = (d | 35661) & ~(d & 35661);
    return (12345 + (20387 + (Ww(e, f, g, e, f) ^ function (b, c, d, e) {
      const f = ~(b & 4141) & (b | 4141);
      const g = (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c & 255));
      const a = ~(d & 20852) & (d | 20852);
      const i = (0 << (e >> 24 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e & 255)) + (8 << (e >> 16 & 255));
      const j = function (c, d, e, f, i, j) {
        const a = (16 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (8 << (c & 255));
        const k = (d | 24232) & ~(d & 24232);
        const m = (8 << (e >> 16 & 255)) + (24 << (e & 255)) + (0 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const h = ((18601 + i) * 214013 + 2531011) % 4294967296;
        const l = ((15266 + j) * 2147483629 + 2147483587) % 2147483647;
        const g = function (b, c, d, e) {
          const f = (2531011 + (b + 54366) * 214013) % 4294967296;
          const g = (8 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (16 << (c & 255)) + (0 << (c >> 8 & 255));
          const a = ((d + 62275) * 214013 + 2531011) % 4294967296;
          const i = (e + 2766) % 65335;
          const j = function (b, c, d, e) {
            const f = ~(d & 45728) & 45728 | ~(d & 45728) & d;
            const g = ~(e & 29441) & (e | 29441);
            const a = Mn(((14431 + b) * 22695477 + 1) % 4294967296, (2147483587 + (c + 40672) * 2147483629) % 2147483647);
            const h = yk(f, g);
            return (24 << ((a ^ h) & 255)) + (16 << ((a ^ h) >> 16 & 255)) + (8 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 8 & 255));
          }(f, g, a, i);
          Pr(f, g, a, i);
          return j ^ 49266;
        }(a, k, m, (16 << (f >> 24 & 255)) + (8 << (f >> 8 & 255)) + (0 << (f & 255)) + (24 << (f >> 16 & 255)));
        const n = qt(h, l, a, k, m);
        return (24 << ((g ^ n) >> 24 & 255)) + (16 << ((g ^ n) >> 16 & 255)) + (0 << ((g ^ n) >> 8 & 255)) + (8 << ((g ^ n) & 255));
      }(f, g, a, i, f, g);
      const h = rt(a, i, f);
      return ((26446 + (j ^ h)) * 1103515245 + 12345) % 2147483648;
    }(g, e, f, g))) * 1103515245) % 2147483648;
  }
  function Hr(b, c, d) {
    const e = ((b + 34873) * 214013 + 2531011) % 4294967296;
    const f = (1013904223 + (d + 10221) * 1664525) % 4294967296;
    const g = Mn(e, ((44207 + c) * 1664525 + 1013904223) % 4294967296);
    const a = function (a, b) {
      const c = a ^ 11060;
      const d = ~(b & 261) & (b | 261);
      const e = eb(c, d, c, d, c);
      Ww(d, c, d, c, d);
      return (e | 42146) & ~(e & 42146);
    }(f, e);
    return (0 << ((g ^ a) >> 8 & 255)) + (24 << ((g ^ a) >> 16 & 255)) + (8 << ((g ^ a) & 255)) + (16 << ((g ^ a) >> 24 & 255));
  }
  function Ir(c, d, e, f, i, j) {
    const a = c ^ 37721;
    const k = ~(d & 33190) & d | ~(d & 33190) & 33190;
    const m = (2147483587 + (601 + e) * 2147483629) % 2147483647;
    const h = (8 << (f >> 16 & 255)) + (24 << (f & 255)) + (16 << (f >> 24 & 255)) + (0 << (f >> 8 & 255));
    const l = (0 << (i & 255)) + (24 << (i >> 8 & 255)) + (8 << (i >> 16 & 255)) + (16 << (i >> 24 & 255));
    const g = (8 << (j >> 16 & 255)) + (24 << (j >> 24 & 255)) + (16 << (j >> 8 & 255)) + (0 << (j & 255));
    const n = eb(a, k, m, h, l);
    ef(g, a, k, m, h, l);
    return n ^ 15416;
  }
  const Jr = 2;
  const Kr = 7;
  const Lr = Qe;
  const Mr = 255;
  const Nr = 19;
  const Or = 6;
  function Pr(b, c, d, e) {
    const f = b ^ 39571;
    const g = c ^ 28840;
    const a = ~(d & 26911) & 26911 | ~(d & 26911) & d;
    const i = e ^ 3911;
    const j = Ir(f, g, a, i, f, g);
    Jq(a, i, f);
    return ~(j & 11355) & 11355 | ~(j & 11355) & j;
  }
  var Qr = 0;
  var Sr = {
    ᐃᐃⲆⲆⲆ: ["#133A2B", "#042b30"],
    ⵠⲆΔᐃⲆΔΔⲆΔ: ["#EBF2F0", "#136167"],
    ΔᐃᐃⲆⲆᐃⵠ: ["#4EB687", "#187484"],
    ΔΔᐃⵠⲆΔᐃ: ["#664516", "#13474C"],
    ΔΔⵠᐃΔᐃᐃ: ["#FCEFBB", "#0F4D48"],
    ⲆΔⲆⲆⵠΔᐃ: ["#C1AA7E", "#0F423D"],
    ⲆᐃⲆᐃΔΔⲆ: ["#594837", "#163A3A"],
    ΔΔᐃⵠⲆⲆᐃ: ["#A5D6D6", "#539CA0"],
    ΔᐃⲆⵠΔ: ["#0B6A84", "#09373F"],
    ⲆΔⵠⲆⵠᐃⵠ: ["#2A8B9B", "#0F464C"],
    ⲆΔᐃⵠⲆⵠΔ: ["#A9D6D3", "#115E60"],
    ΔΔⲆⵠⲆᐃⲆ: ["#ECF7F9", "#539CA0"],
    ⵠⵠΔⲆⵠⲆᐃ: ["#FFF", "#FFF"],
    ⲆᐃⲆⵠΔᐃⲆ: ["#FFF", "#FFF"],
    ΔΔⲆΔΔⵠᐃ: ["#1C9BA4", "#00272F"],
    ΔᐃⲆⵠⲆ: ["#2D2017", "#031C1E"],
    ΔΔⵠ: 0,
    ⲆᐃⲆ: 1,
    ΔⵠⵠⵠⲆⲆΔⲆⵠ: 2300,
    ᐃΔⵠᐃⵠΔⲆᐃⲆ: 2290,
    ΔᐃΔⲆⲆᐃΔ: 34,
    ⲆⵠⲆⵠᐃᐃᐃ: 5,
    ⲆΔᐃΔⲆⵠᐃ: 68,
    ᐃΔⲆΔΔΔⲆ: 34,
    ⲆᐃΔΔⵠⲆⲆ: 5,
    ᐃΔᐃᐃᐃΔᐃ: 1,
    ᐃᐃⵠⵠⵠⲆᐃ: 0.6,
    ⲆΔᐃⵠᐃⵠⲆ: 0.25,
    ΔᐃᐃᐃᐃⵠΔ: 50,
    ⵠᐃᐃⲆⲆⲆΔ: 10,
    ⲆᐃⵠⲆⵠΔᐃ: 75,
    ⵠⲆⵠⲆΔⲆΔ: 20,
    ΔᐃᐃⲆⲆⵠΔ: 5,
    ᐃⲆⵠⵠᐃ: 0,
    ᐃΔΔⵠⵠ: 1,
    ΔΔⵠᐃⲆ: 2,
    ΔΔΔᐃⵠ: 3,
    ΔⵠⵠΔⵠ: 4,
    ᐃΔⵠⵠΔ: 5,
    ᐃΔⵠⲆⵠ: 6,
    ⲆⵠⲆᐃᐃ: 7,
    ΔΔᐃⵠⲆ: 8,
    ᐃⲆⵠΔⲆ: 9,
    ᐃⵠᐃⵠⲆ: 10,
    ᐃⲆᐃΔΔ: 11,
    ⵠᐃᐃΔᐃ: 12,
    ⲆΔᐃⵠΔ: 13,
    Ⲇᐃᐃⵠᐃ: 14,
    ⵠⵠⲆΔᐃ: 15,
    ⵠΔΔⲆⲆ: 16,
    ⲆⲆⵠᐃⲆ: 17,
    ⲆΔᐃᐃΔ: 18,
    ⵠⵠᐃΔⲆ: 19,
    ⵠⵠⵠⵠⵠ: 20,
    ᐃⲆΔΔΔ: 21,
    ᐃΔⲆᐃΔ: 22,
    ⵠⵠΔᐃⵠ: 23,
    ΔᐃᐃⲆᐃ: 24,
    ᐃΔⵠΔᐃ: 25,
    ᐃΔⲆⲆⵠ: 26,
    ⲆⲆᐃⲆⵠ: 27,
    ᐃᐃΔΔᐃ: 28,
    ᐃᐃⵠΔ: 29,
    ⵠⵠΔⲆⲆ: 30,
    ΔⵠⲆᐃΔ: 31,
    ᐃⵠΔᐃΔ: 32,
    ⲆⵠΔᐃⵠ: 33,
    ⵠⵠᐃᐃᐃ: 34,
    ⲆⵠΔΔⵠ: 35,
    ⵠᐃⲆΔⲆ: 36,
    ⵠⲆᐃⵠΔ: 37,
    ᐃᐃⲆΔⵠ: 38,
    ΔⵠⲆΔⲆ: 39,
    ΔⲆⵠⵠⲆ: 40,
    ⲆⵠᐃⵠⲆ: 41,
    ᐃⲆᐃⲆᐃ: 42,
    ΔΔⲆⲆᐃ: 43,
    ⵠᐃΔᐃᐃ: 44,
    ΔΔΔⵠⲆ: 45,
    ΔᐃⵠΔⲆ: 46,
    ᐃᐃⲆⲆᐃ: 47,
    ᐃⵠΔΔⵠ: 48,
    Ⲇⵠᐃⵠⵠ: 49,
    ⲆΔⵠⵠⲆ: 50,
    ⵠΔⲆⲆⲆ: 51,
    ᐃΔᐃΔΔ: 52,
    ᐃΔⲆᐃⵠ: 53,
    ⵠᐃΔΔⵠ: 54,
    ⲆΔⵠᐃΔ: 55,
    ΔⲆΔᐃᐃ: 56,
    ⵠⵠⲆⲆⲆ: 57,
    ⲆⲆⵠⲆⲆ: 58,
    ⵠⲆⵠⵠᐃ: 59,
    ᐃΔΔΔᐃ: 60,
    ⵠⲆⲆΔⲆ: 61,
    ᐃⵠⵠⲆⵠ: 62,
    ᐃΔᐃᐃⵠ: 63,
    ᐃᐃΔΔΔ: 64,
    ΔΔⵠΔⵠ: 65,
    ⲆⵠΔⵠᐃ: 66,
    ⵠⵠⲆᐃⵠ: 67,
    Δᐃᐃᐃᐃ: 68,
    ᐃⲆⵠⵠΔ: 69,
    ⵠⲆΔⲆᐃ: 70,
    ᐃⵠⵠⲆΔ: 71,
    ⲆΔⵠΔⲆ: 72,
    ᐃΔΔᐃΔ: 73,
    ᐃⲆΔⲆᐃ: 74,
    Ⲇⵠⵠᐃⵠ: 75,
    ᐃⵠᐃⲆᐃ: 76,
    ΔᐃⵠⲆⵠ: 77,
    ⵠⵠΔΔⲆ: 78,
    ΔⲆΔⵠΔ: 79,
    ᐃⲆⲆΔⲆ: 80,
    ᐃⵠⵠⲆᐃ: 81,
    ⲆᐃⲆᐃΔ: 82,
    ⲆⲆᐃΔⲆ: 83,
    ⵠΔᐃᐃⵠ: 84,
    ⲆⲆⲆᐃⲆ: 85,
    ΔᐃᐃΔΔ: 86,
    ᐃⵠᐃΔΔ: 87,
    ᐃⵠΔⵠᐃ: 88,
    ΔⲆᐃⲆⲆ: 89,
    ΔΔⲆⲆⵠ: 90,
    ⵠⵠⵠⵠⲆ: 91,
    ⵠᐃⵠΔⲆ: 92,
    ᐃΔᐃⵠⲆ: 93,
    ᐃⲆΔΔⵠ: 94,
    ⵠᐃᐃⲆᐃ: 95,
    ᐃᐃⲆᐃΔ: 96,
    ΔⵠⵠⲆⵠ: 97,
    ⵠⲆⲆΔΔ: 98,
    ⵠΔᐃᐃᐃ: 99,
    ᐃᐃᐃⲆᐃⲆᐃⵠΔ: 100,
    ΔⵠⲆᐃᐃ: 101,
    ⲆⲆⵠⵠⵠ: 102,
    ⲆᐃᐃᐃⲆ: 103,
    ᐃᐃⵠⲆⵠ: 104,
    ⲆⵠᐃΔⵠ: 105,
    ⵠⵠⵠᐃⲆ: 106,
    ΔⲆⵠΔⲆ: 107,
    ⲆⵠΔΔⲆ: 108,
    ᐃⵠᐃⵠ: 109,
    ⵠⵠⲆΔΔ: 110,
    Δⵠᐃᐃ: 111,
    ΔΔⲆΔ: 112,
    ΔᐃⵠⲆⲆΔΔ: 113,
    ⵠᐃⲆⵠᐃ: 114,
    ΔΔΔⵠᐃΔⲆ: 115,
    ⵠᐃΔⵠΔ: 116,
    ⵠⲆΔΔΔ: 117,
    ⲆᐃΔᐃⲆⲆⵠ: 118,
    ΔΔⵠΔⲆⵠᐃ: 119,
    ⲆᐃᐃⲆⵠ: 120,
    ᐃᐃᐃⵠ: 121,
    ᐃᐃᐃᐃᐃ: 122,
    ⵠⵠᐃⲆⵠ: 123,
    ⵠΔⵠΔⵠⲆᐃ: 124,
    ⵠⲆⵠⲆⵠ: 125,
    ⲆᐃΔⲆΔ: 126,
    ᐃΔᐃΔⲆ: 127,
    ΔΔⵠⵠⲆ: 128,
    ⵠⵠⲆᐃⲆ: 129,
    ⲆⵠⲆⲆᐃ: 130,
    Ⲇⵠᐃⵠᐃ: 131,
    ᐃⲆΔᐃᐃ: 132,
    ᐃⲆⵠΔⵠ: 133,
    ΔᐃᐃⲆΔ: 134,
    ⵠⲆⲆⵠⵠ: 135,
    ΔⲆⲆⵠⵠ: 136,
    ᐃⵠΔⲆⵠ: 137,
    ⲆⵠΔᐃΔ: 138,
    ᐃᐃⵠⵠΔ: 139,
    ⲆᐃΔΔⲆΔⵠ: 140,
    ⲆᐃⵠⲆΔ: 141,
    ⵠⲆⵠⵠⵠⵠⵠ: 142,
    ⵠΔⲆΔⲆᐃⵠ: 143,
    ᐃᐃΔⵠⵠⲆⲆ: 144,
    ΔⵠΔΔΔᐃᐃ: 145,
    ⵠΔⲆΔΔ: 146,
    ᐃⵠᐃⲆⲆ: 147,
    ⲆᐃⵠⵠΔ: 148,
    ⲆⲆⵠᐃΔ: 149,
    ᐃⵠⵠᐃⵠ: 150,
    ΔΔⵠᐃⵠ: 151,
    ⲆⵠⲆΔᐃ: 152,
    ᐃⵠΔⲆΔ: 153,
    ᐃᐃⲆⵠⵠ: 154,
    ᐃΔᐃᐃᐃ: 155,
    ⲆⵠⲆⵠΔ: 156,
    ΔΔᐃΔⵠ: 157,
    ΔΔΔⲆⲆ: 158,
    ΔᐃΔⲆᐃ: 159,
    ⲆⵠⵠΔᐃ: 160,
    ⵠⲆᐃᐃΔ: 161,
    ⲆⲆⲆⵠΔ: 162,
    ΔΔⲆⵠⵠ: 163,
    ⲆⲆΔⵠᐃ: 164,
    ᐃⲆⵠᐃⵠ: 165,
    ⵠΔⲆΔᐃΔⲆ: 166,
    ⵠΔᐃⵠⲆ: 167,
    ⵠⵠΔⵠⵠ: 168,
    ΔⲆΔΔᐃ: 169,
    ⲆⲆᐃⵠⲆ: 170,
    ΔΔⵠᐃᐃΔᐃ: 171,
    ΔⵠⲆΔΔⵠΔ: 172,
    ⲆᐃᐃΔⵠΔᐃ: 173,
    ᐃΔᐃΔᐃ: 174,
    ΔⲆⲆⵠᐃᐃᐃ: 175,
    ΔΔⵠⲆⲆΔⲆ: 176,
    ⵠᐃⲆⲆⵠⵠᐃ: 177,
    ᐃⲆⲆⵠⲆⵠΔ: 178,
    ⵠⵠΔΔᐃΔⲆ: 179,
    ᐃᐃΔΔⵠΔᐃ: 180,
    ΔΔⵠΔⵠⲆⲆ: 181,
    ΔᐃᐃΔⲆᐃᐃ: 182,
    ⵠᐃⲆᐃᐃ: 183,
    ᐃᐃΔⵠΔ: 184,
    ΔⵠᐃΔⲆ: 185,
    ⵠΔᐃΔⵠ: 186,
    ⲆᐃΔΔⵠ: 187,
    ΔᐃⲆΔⵠᐃⲆ: 188,
    ᐃⵠΔⲆⲆ: 189,
    ⲆⲆⵠⲆⵠ: 190,
    ⵠΔⵠΔᐃΔᐃ: 191,
    ᐃᐃᐃⲆΔ: 192,
    ΔⲆᐃⵠΔⲆΔ: 193,
    ᐃᐃᐃᐃⲆ: 194,
    Δᐃⵠⵠⵠ: 195,
    ⵠΔᐃⲆⵠⲆⲆ: 196,
    ΔⲆᐃᐃⲆᐃᐃ: 197,
    ᐃᐃΔⵠᐃ: 198,
    ΔΔⵠΔⲆ: 199,
    ⲆⵠⵠᐃⲆⵠⵠ: 200,
    ⵠⵠⲆⵠΔ: 201,
    ⲆⵠΔⲆ: 202,
    ⲆΔΔΔᐃ: 203,
    ΔᐃⵠᐃΔᐃΔ: 204,
    ΔᐃⵠⵠΔ: 205,
    ⲆᐃⲆⵠⵠⵠᐃ: 206,
    ᐃⵠⵠᐃⲆ: 207,
    ⵠΔᐃⵠⵠΔⵠ: 208,
    ⲆΔⵠⲆⲆ: 209,
    ⲆⵠΔᐃⲆᐃⵠ: 210,
    ΔΔΔᐃⵠᐃᐃ: 211,
    ΔᐃΔᐃⲆ: 212,
    ᐃᐃⵠⵠᐃ: 213,
    ⲆᐃᐃΔΔ: 214,
    ⲆᐃⲆΔⵠ: 215,
    ⵠⵠᐃⲆⲆ: 216,
    ⵠᐃᐃⵠⲆ: 217,
    ᐃᐃⵠᐃⵠ: 218,
    ⵠⲆᐃᐃⵠ: 219,
    ᐃᐃⵠᐃᐃ: 220,
    ΔⵠⵠᐃΔ: 221,
    ⵠⵠⵠΔⲆ: 222,
    ᐃᐃΔⵠⲆ: 223,
    ᐃΔΔⵠⲆ: 224,
    ⵠⵠᐃⲆᐃⵠⵠ: 225,
    ΔᐃᐃⲆᐃⲆⲆ: 226,
    ΔⲆᐃᐃΔ: 227,
    ᐃⲆΔΔⲆⲆⵠ: 228,
    Δⵠⵠⵠⵠ: 229,
    ⲆΔⵠΔΔ: 230,
    ⵠⵠⲆⲆΔ: 231,
    ᐃⵠⵠᐃᐃ: 232,
    ᐃᐃⲆᐃᐃ: 233,
    ⵠⵠᐃⵠΔᐃΔ: 234,
    ᐃΔⵠⵠⲆ: 235,
    ⵠⲆⵠⲆΔ: 236,
    ⵠⵠΔⵠⲆ: 237,
    ⲆⵠΔⵠⲆ: 238,
    ⵠΔΔΔⲆ: 239,
    ⵠΔⵠᐃⲆ: 240,
    ᐃᐃΔᐃᐃ: 241,
    ⵠᐃΔⲆΔ: 242,
    ᐃⵠᐃⵠᐃⵠᐃ: 243,
    ⵠᐃΔᐃⲆ: 244,
    ΔΔⲆⲆΔ: 245,
    ΔⲆⲆⲆΔΔᐃ: 246,
    ⲆΔΔᐃⲆ: 247,
    ⲆᐃᐃⲆᐃ: 248,
    ⲆΔᐃΔⲆⲆⵠ: 249,
    ᐃⵠΔⵠⵠ: 250,
    ⵠⲆⵠᐃⲆ: 251,
    ᐃⲆⲆⵠᐃᐃᐃ: 252,
    ⲆΔΔⲆⲆΔⵠ: 253,
    ᐃⲆᐃᐃΔᐃΔ: 254,
    ⵠⲆⵠᐃⵠΔᐃ: 255,
    ⵠᐃΔⵠᐃⵠⵠ: 256,
    ΔᐃⲆᐃⵠᐃⲆ: 257,
    ⵠᐃᐃᐃⲆΔᐃ: 258,
    ΔΔⲆΔᐃΔΔ: 259,
    ΔΔᐃⲆᐃ: 260,
    ΔⵠⵠΔΔⲆⵠ: 261,
    ⲆΔΔΔⵠΔⲆ: 262,
    ΔⲆᐃⲆΔΔΔ: 263,
    ⲆⵠⵠⲆᐃ: 264,
    ⲆΔᐃⲆⲆΔΔ: 265,
    ΔⵠⲆΔⵠⲆⲆ: 266,
    ᐃⵠΔⲆⲆⵠΔ: 267,
    ⲆⵠΔΔⲆⲆⲆ: 268,
    ΔⵠⵠⲆΔⲆⵠ: 269,
    ΔⲆⲆᐃⲆⵠΔ: 270,
    ⲆᐃᐃⲆΔᐃⲆ: 271,
    ᐃⲆΔΔΔⲆΔ: 272,
    ⵠⵠᐃΔᐃⲆᐃ: 273,
    ⲆᐃⵠΔⲆⵠⲆ: 274,
    ᐃⲆⵠⲆⲆⲆⲆ: 275,
    ΔⵠΔΔΔᐃⵠ: 276,
    ⲆᐃⲆΔΔⵠᐃ: 277,
    ⲆⵠΔⵠΔⲆⲆ: 278,
    ⵠᐃΔⵠ: 279,
    ᐃᐃᐃΔΔ: 280,
    ᐃᐃⲆᐃⲆΔΔ: 281,
    ᐃΔᐃⲆΔⵠΔ: 282,
    ΔΔ: 283,
    ⵠΔⵠᐃⵠⲆᐃ: 284,
    ⲆΔⲆⲆⲆ: 285,
    ⲆᐃΔⵠⵠ: 286,
    ΔᐃⵠⵠᐃΔⲆ: 287,
    ΔᐃⲆΔⵠ: 288,
    ⵠᐃⵠⵠⵠΔΔ: 289,
    ΔΔᐃⵠⲆⲆⲆ: 290,
    Ⲇᐃⵠⵠⵠᐃⵠ: 291,
    ΔᐃⲆⵠΔⵠᐃ: 292,
    ΔⵠⵠᐃⵠΔᐃ: 293,
    ⵠΔⵠΔⵠ: 294,
    ⲆⵠⲆᐃⵠⲆᐃ: 295,
    ΔⵠⵠⲆΔⲆᐃ: 296,
    ΔΔᐃᐃᐃᐃⵠ: 297,
    ΔⲆⵠᐃⲆⲆⲆ: 298,
    ᐃⵠⲆΔⲆ: 299,
    ΔΔᐃᐃΔⲆⵠ: 300,
    ᐃᐃⵠΔⲆⵠⵠ: 301,
    ⵠᐃⵠᐃⲆᐃⵠ: 302,
    ΔᐃⵠⵠⲆⵠⵠ: 303,
    ⵠᐃⲆΔΔᐃⲆ: 304,
    ΔᐃⵠᐃΔⵠΔ: 305,
    ΔᐃⲆΔΔⵠⲆ: 306,
    ⲆΔⲆⲆᐃ: 307,
    ΔΔΔᐃΔΔᐃ: 308,
    ᐃⲆⵠᐃᐃᐃΔ: 309,
    ⲆⵠⵠⵠᐃΔⵠ: 310,
    ⵠⲆⵠᐃΔⲆᐃ: 311,
    ⵠⲆⲆᐃⲆΔⵠ: 312,
    ΔΔⲆⲆⲆᐃⵠ: 313,
    ᐃΔⲆΔᐃᐃⵠ: 314,
    ᐃᐃⲆⵠΔⲆΔ: 315,
    ΔⵠⲆⲆⲆⲆⲆ: 316,
    ⵠⵠⲆⲆᐃΔⲆ: 317,
    ᐃⲆⲆⲆΔⲆΔ: 318,
    ΔⲆⵠᐃᐃⲆⵠ: 319,
    ⵠⵠΔᐃΔᐃᐃ: 320,
    ᐃⲆΔᐃⲆ: 321,
    ⵠⵠⲆΔᐃᐃⲆ: 322,
    ΔᐃⲆⲆⵠᐃΔ: 323,
    ΔⲆⵠᐃΔΔᐃ: 324,
    ᐃⵠⵠΔΔᐃΔ: 325,
    ⵠΔⵠⵠᐃⲆᐃ: 326,
    ᐃᐃᐃⲆⲆⲆⲆ: 327,
    ⵠΔᐃⲆⲆⲆᐃ: 328,
    ⲆⵠⲆⲆᐃᐃΔ: 329,
    ⵠΔΔⲆᐃΔΔ: 330,
    ⲆⵠΔⵠⲆⲆⵠ: 331,
    ⵠᐃΔⵠⵠⵠⲆ: 332,
    ᐃΔⵠΔⵠΔⲆ: 333,
    ⵠⵠⵠⵠΔΔᐃ: 334,
    ᐃⲆᐃΔᐃΔⵠ: 335,
    ᐃⲆΔΔᐃΔᐃ: 336,
    ᐃΔⲆⲆⲆᐃⲆ: 337,
    ᐃⲆᐃΔᐃᐃΔ: 338,
    ⵠⲆⵠⲆᐃᐃⵠ: 339,
    ⲆⵠⵠᐃⲆⲆⵠ: 340,
    ⲆᐃΔⲆᐃⲆᐃ: 341,
    ᐃⵠᐃⵠᐃᐃᐃ: 342,
    ⲆⵠᐃᐃⲆᐃⲆ: 343,
    ΔⵠⵠᐃⵠΔⲆ: 344,
    ᐃⵠⲆⲆⵠΔΔ: 345,
    ΔΔΔΔⵠⲆⲆ: 346,
    ΔⵠᐃⵠⲆᐃⵠⲆⵠ: 347,
    ⲆⲆⲆⲆⲆΔⵠ: 348,
    ⵠⵠΔⵠΔΔⵠ: 349,
    ᐃΔΔᐃⵠΔⵠ: 350,
    ᐃⲆⵠⲆⲆΔΔ: 351,
    ⲆΔⲆⲆΔⲆⲆ: 352,
    ΔⵠⲆΔᐃᐃⲆ: 353,
    ⵠᐃᐃᐃᐃⵠⵠ: 354,
    ⲆᐃΔⵠΔⲆⵠ: 355,
    ⵠⲆΔⲆⲆⵠΔ: 356,
    ᐃⲆⲆΔⲆⲆΔ: 357,
    ⵠᐃᐃⲆⲆΔⵠ: 358,
    ΔΔΔΔΔΔᐃ: 359,
    ⲆⲆⲆⵠᐃΔΔ: 360,
    ⲆᐃⲆⲆⵠⵠΔ: 361,
    ΔᐃᐃⵠⲆᐃᐃ: 362,
    ᐃΔⵠⲆΔⵠⵠ: 363,
    ⵠⵠᐃⲆᐃⲆᐃ: 364,
    ΔΔⲆⲆⲆᐃᐃ: 365,
    ᐃᐃΔᐃᐃⵠⵠ: 366,
    ⲆΔᐃᐃᐃⲆᐃ: 367,
    ⵠⲆΔⲆⵠⵠⵠ: 368,
    ⵠᐃᐃΔⲆⵠᐃ: 369,
    ᐃΔⵠⵠⵠⲆΔ: 370,
    ⵠᐃⲆⵠΔᐃᐃ: 371,
    Ⲇᐃᐃᐃᐃⵠⵠ: 372,
    ⵠⵠⵠⲆᐃⵠⲆ: 373,
    ⲆΔⲆⲆᐃⲆⲆ: 374,
    ⵠⵠᐃᐃⵠΔᐃ: 375,
    ᐃⵠⵠⲆᐃⲆⵠ: 376,
    ⲆᐃΔΔⲆⲆⲆ: 377,
    ⵠᐃⵠⲆⵠⲆᐃ: 378,
    ΔΔᐃⵠⲆᐃᐃ: 379,
    ⵠⲆᐃⲆΔᐃⲆ: 380,
    ᐃⲆᐃΔⵠΔΔ: 381,
    ⵠⲆⵠΔⵠΔᐃ: 382,
    ⵠΔΔⵠΔⲆᐃ: 383,
    ⵠⵠΔᐃᐃᐃⲆ: 384,
    ⲆᐃΔⵠΔⵠⲆ: 385,
    ΔΔⵠⵠᐃᐃⵠ: 386,
    ⵠⲆⵠⲆⲆΔΔ: 387,
    ⲆᐃⵠΔⲆⲆⲆ: 388,
    ⵠⲆΔⵠⲆⲆΔ: 389,
    ΔᐃΔⲆⵠⵠⲆ: 390,
    ᐃⵠⲆᐃΔⲆⲆ: 391,
    ᐃΔⲆⲆΔⵠⲆ: 392,
    ᐃⲆΔΔᐃⵠⵠ: 393,
    ⲆⲆΔΔⵠᐃΔ: 394,
    ΔᐃⲆΔⲆᐃΔ: 395,
    ⵠⵠΔⵠⵠⲆⵠ: 396,
    ΔⲆⵠΔⲆΔΔ: 397,
    ⲆⵠⵠΔⵠⵠᐃ: 398,
    ⲆⵠⵠΔᐃΔΔ: 399,
    ⲆⵠᐃᐃΔᐃΔ: 400,
    ⵠⲆⵠⵠⲆᐃⲆ: 401,
    ⲆᐃⵠⵠⲆⲆᐃ: 402,
    ᐃΔⲆⲆⵠᐃΔ: 403,
    Δᐃⵠⵠⵠⵠⵠ: 404,
    ⵠΔΔⵠᐃΔⵠ: 405,
    ⲆΔᐃᐃᐃⵠᐃ: 406,
    ΔᐃⲆΔᐃⵠΔ: 407,
    ΔΔⲆᐃᐃⲆᐃ: 408,
    ⵠΔⲆⵠΔⵠΔ: 409,
    ⵠΔᐃⲆᐃᐃⲆ: 410,
    ᐃⲆΔⵠⵠⵠΔ: 411,
    ⲆᐃΔᐃᐃⵠΔ: 412,
    ΔⲆᐃΔⲆ: 413,
    ⲆΔⵠⲆᐃⲆΔΔᐃ: 414,
    ⵠⵠᐃΔⵠ: 415,
    ΔⲆΔⵠⲆ: 416,
    ⲆΔΔⵠᐃⲆⵠⲆᐃ: 417,
    ⲆΔᐃΔΔⲆΔ: 418,
    ⵠΔΔⲆΔ: 419,
    ΔⵠΔΔΔⲆΔ: 420,
    ⲆⵠⵠᐃΔΔᐃ: 421,
    ⲆᐃⲆⵠⵠⲆⵠ: 422,
    ᐃⵠΔΔⵠᐃΔ: 423,
    ᐃⵠᐃⲆᐃΔᐃ: 424,
    ⲆΔⵠΔᐃⲆⵠ: 425,
    ᐃⵠΔⵠⲆᐃᐃ: 426,
    ΔᐃⵠΔᐃᐃⲆ: 427,
    ᐃᐃⲆⲆΔᐃⲆ: 428,
    ⲆⲆⵠᐃᐃΔΔ: 429,
    ΔΔᐃᐃΔΔᐃ: 430,
    ᐃᐃⲆΔⵠΔⵠ: 431,
    ΔⲆⵠⵠᐃΔᐃ: 432,
    ⵠΔᐃΔΔΔⲆ: 433,
    ΔⵠᐃⵠⲆᐃⵠ: 434,
    ᐃⲆᐃⲆΔⵠⲆ: 435,
    Δᐃᐃᐃⵠⵠⵠ: 436,
    ⵠᐃⵠᐃⵠΔⵠ: 437,
    ᐃⲆΔⵠᐃⵠⲆ: 438,
    ΔⵠⵠⵠⵠⲆᐃ: 439,
    ΔⲆΔΔⲆⲆᐃ: 440,
    ⵠᐃΔⲆΔⵠⲆ: 441,
    ΔⵠⲆᐃⲆᐃΔ: 442,
    ᐃᐃⵠΔⵠᐃⵠ: 443,
    ⵠΔΔᐃΔᐃΔⵠⲆ: 444,
    ΔᐃⲆᐃΔ: 445,
    ⲆΔⵠⲆⵠⲆⲆ: 446,
    ᐃΔⵠⵠᐃⲆΔ: 447,
    ⵠⲆΔⲆⲆⵠⵠⲆⲆ: 448,
    ⵠᐃⵠΔᐃ: 449,
    ΔΔⵠⲆΔ: 450,
    ⲆᐃⲆⲆΔᐃⵠ: 451,
    ⵠΔᐃⵠᐃⵠⲆ: 452,
    ⵠⵠᐃⵠᐃᐃⲆ: 453,
    ⵠᐃⲆⲆⵠᐃⵠ: 454,
    ⲆᐃⵠΔⵠⲆⲆ: 455,
    Δⵠⵠᐃᐃᐃᐃ: 456,
    ᐃⲆⲆⵠᐃᐃΔ: 457,
    ᐃⵠⵠΔᐃΔⵠ: 458,
    ⲆᐃᐃᐃᐃⲆᐃ: 459,
    ⲆᐃⵠᐃⲆᐃᐃ: 460,
    ⲆᐃᐃⲆᐃᐃΔ: 461,
    ⲆⲆⲆⵠᐃΔⲆ: 462,
    ⵠᐃⵠⲆⵠΔⵠ: 463,
    ⲆⲆⵠᐃⵠᐃΔ: 464,
    ⵠⲆΔᐃΔᐃΔ: 465,
    ⲆᐃΔΔⲆⵠΔ: 466,
    ⵠΔⵠⲆΔⵠΔ: 467,
    ΔΔⲆᐃᐃᐃⲆ: 468,
    ⵠᐃᐃᐃᐃⲆⲆ: 469,
    ᐃΔᐃᐃⵠⲆᐃ: 470,
    ΔΔΔΔΔΔⲆ: 471,
    ⲆⵠⲆⲆᐃΔⵠ: 472,
    ᐃⲆⵠⲆⵠΔⲆ: 473,
    ⲆⲆⲆⵠΔⵠⲆ: 474,
    ΔᐃⵠⵠᐃΔΔ: 475,
    ᐃΔⲆⵠⲆⲆᐃ: 476,
    ⲆΔⵠⵠᐃⲆⵠ: 477,
    ⲆΔⵠⵠⵠΔⵠ: 478,
    ⵠⲆΔⵠᐃⲆΔ: 479,
    ⵠΔⵠⲆⵠⵠⵠ: 480,
    ⵠⵠᐃⲆⲆⵠΔ: 481,
    ⲆⵠⲆⲆᐃⵠⵠ: 482,
    ⵠⲆⵠΔᐃᐃⲆ: 483,
    ΔᐃⵠⵠΔⲆⵠ: 484,
    ᐃⲆᐃᐃⲆⲆΔ: 485,
    ⵠⵠᐃᐃⲆΔⲆ: 486,
    ⵠᐃⲆⲆᐃΔⲆ: 487,
    ᐃⵠⲆⲆⵠⲆⵠ: 488,
    ΔⲆᐃᐃᐃⵠⲆ: 489,
    ᐃᐃΔⵠⲆⲆᐃ: 490,
    ⲆⲆΔᐃΔⵠⲆ: 491,
    ᐃᐃⲆⲆΔᐃΔ: 492,
    ⵠΔᐃᐃΔᐃⵠ: 493,
    ᐃⲆⲆⵠⲆⵠᐃ: 494,
    ᐃΔⲆⲆⵠᐃⵠ: 495,
    ΔΔᐃⵠΔᐃΔ: 496,
    ΔᐃΔΔΔΔⲆ: 497,
    ⲆⲆΔᐃΔⵠⵠ: 498,
    ⲆⲆΔⵠΔΔΔ: 499,
    ᐃΔⵠᐃⵠᐃᐃ: 500,
    ΔⲆᐃΔᐃⵠΔ: 501,
    ΔⵠⲆᐃⲆᐃⵠ: 502,
    ΔⵠⵠΔᐃᐃᐃ: 503,
    ΔⲆⲆΔᐃᐃⲆ: 504,
    ΔΔᐃΔⲆⲆⵠ: 505,
    ΔᐃⵠΔΔᐃᐃ: 506,
    ⵠⲆΔᐃΔᐃΔ: 507,
    ⲆᐃᐃⵠᐃⲆᐃ: 508,
    ᐃΔΔⲆⵠⵠⲆ: 509,
    ΔΔΔΔᐃⲆⵠ: 510,
    ⵠⵠᐃⲆΔⵠⵠ: 511,
    ⵠΔⵠᐃΔᐃᐃ: 512,
    ⲆᐃΔⵠⲆΔᐃ: 513,
    ⵠⲆΔⲆⲆΔⲆ: 514,
    ΔᐃⵠᐃⲆⵠΔ: 515,
    ΔⵠᐃⲆᐃΔⵠ: 516,
    ᐃⵠΔⵠⲆΔΔ: 517,
    ΔⵠΔΔΔΔⲆ: 518,
    ᐃΔⲆᐃⵠΔⵠ: 519,
    ⵠᐃⲆⲆΔⲆΔ: 520,
    ᐃΔⵠᐃᐃⵠⲆ: 521,
    ⲆΔⵠΔⲆᐃⵠ: 522,
    ⲆⵠΔᐃΔᐃⵠ: 523,
    ⲆⵠⲆΔⲆⲆⲆ: 524,
    ᐃΔⵠⲆᐃⲆᐃ: 525,
    ⵠᐃᐃⵠⲆⲆΔ: 526,
    ⲆⲆᐃΔΔⲆΔ: 527,
    ΔⵠᐃᐃⵠᐃⲆ: 528,
    ΔΔⵠⲆᐃⲆᐃ: 529,
    ⲆΔΔⵠⲆᐃⵠ: 530,
    ⲆⵠΔᐃⲆΔᐃ: 531,
    ⲆⵠᐃⲆΔⲆΔ: 532,
    ⵠᐃⲆΔⲆᐃⲆ: 533,
    ⵠⵠⵠᐃⵠΔᐃ: 534,
    ᐃΔΔᐃⵠᐃⲆ: 535,
    ⲆⲆΔⲆⲆⵠᐃ: 536,
    ⲆᐃⵠⵠᐃⲆⲆ: 537,
    ⵠⲆΔⲆⲆⲆᐃ: 538,
    ⵠᐃΔᐃⲆᐃⲆⵠⲆ: 539,
    ΔᐃᐃᐃΔⵠⵠ: 540,
    ⲆᐃᐃᐃⲆΔⵠ: 541,
    ΔᐃⵠⲆⵠΔⲆ: 542,
    ⵠⵠᐃΔⵠⵠⲆ: 543,
    ΔⵠⲆᐃⲆⲆⲆⲆⲆ: 544,
    POINTS: 545,
    ⵠΔᐃΔⲆᐃⵠ: 546,
    ⲆⵠΔΔⲆᐃⵠ: 547,
    ᐃⵠⲆⵠⲆⲆⵠ: 548,
    ᐃⲆⵠᐃⲆⲆⲆ: 549,
    ⵠⲆΔⲆⵠⲆᐃ: 550,
    ᐃΔᐃⲆᐃⵠᐃ: 551,
    ᐃⵠⲆΔⵠⵠᐃ: 552,
    ⵠⵠΔⲆⲆΔᐃ: 553,
    ΔⵠⵠᐃⵠⲆⵠ: 554,
    ⲆΔⲆΔⲆᐃⲆ: 555,
    ⲆΔⲆⲆⵠⵠᐃ: 556,
    ΔᐃᐃΔⲆΔᐃ: 557,
    ᐃⵠΔⲆΔΔᐃ: 558,
    ᐃⲆⵠⵠⵠᐃⵠ: 559,
    ⵠⵠᐃⲆᐃⵠⲆ: 560,
    ⲆΔⵠⵠΔΔⲆ: 561,
    ΔⲆΔᐃⲆⵠⲆ: 562,
    ⵠᐃⲆⵠᐃⵠᐃ: 563,
    ⲆᐃΔΔᐃᐃᐃ: 564,
    ΔΔΔⵠΔᐃⵠ: 565,
    ⵠⲆᐃⲆⲆᐃΔ: 566,
    ⵠᐃⵠⵠᐃᐃΔ: 567,
    ⲆᐃᐃΔΔⲆⲆ: 568,
    ⲆΔⵠΔⵠⲆᐃ: 569,
    ᐃⲆᐃⵠΔⲆⵠ: 570,
    ⲆᐃⵠⲆⵠⲆⵠ: 571,
    ⵠⲆᐃΔⲆⵠⵠ: 572,
    ᐃΔⵠΔΔⵠΔ: 573,
    ⲆⲆⵠⵠΔⲆⲆ: 574,
    ⵠΔⵠⲆᐃΔⲆ: 575,
    ᐃⵠⲆⲆᐃᐃⵠ: 576,
    ΔΔΔᐃᐃⵠΔ: 577,
    ⲆⲆⵠⵠⲆⵠΔ: 578,
    ᐃΔΔⲆᐃⵠⵠ: 579,
    ᐃΔⲆⵠⲆⵠᐃ: 580,
    ᐃᐃΔᐃⵠΔΔ: 581,
    ⲆⲆΔΔⵠⲆΔ: 582,
    ΔⵠΔᐃᐃⵠⵠ: 583,
    ᐃᐃⵠᐃΔᐃⲆ: 584,
    ⵠΔᐃⲆⲆⵠⲆ: 585,
    ⲆᐃΔⲆᐃⵠⲆ: 586,
    ⵠⵠⵠⲆᐃᐃᐃ: 587,
    ⵠΔΔⲆⲆΔⵠ: 588,
    ΔᐃᐃⵠⵠⲆⵠ: 589,
    ⵠⲆᐃⵠΔΔⲆ: 590,
    ⵠΔᐃⵠᐃΔᐃ: 591,
    ⵠᐃΔᐃΔᐃᐃ: 592,
    ⵠᐃⲆⵠᐃᐃⵠᐃⵠ: 593,
    ΔⲆΔⵠⲆΔⲆ: 594,
    ⲆⲆⲆⵠⵠΔⵠᐃⲆ: 595,
    ⵠΔⵠΔⵠⲆⲆ: 596,
    ⵠΔΔⲆΔⵠⲆⲆⲆ: 597,
    ⵠΔⲆᐃⲆⲆΔΔⵠ: 598,
    ᐃⲆΔⲆᐃⵠⵠΔΔ: 599,
    ⲆⲆⵠⵠⵠⲆΔΔᐃ: 600,
    ⲆⲆⲆᐃᐃᐃⵠⲆⵠ: 601,
    ⵠⵠⵠⲆᐃⲆᐃ: 602,
    ⵠΔΔᐃᐃ: 603,
    ΔⵠⲆⵠΔⵠⵠ: 604,
    ⵠⵠⵠᐃᐃⵠⵠ: 605,
    ⲆⲆΔΔᐃⵠΔ: 606,
    ⵠΔⲆᐃⲆⵠΔᐃΔ: 607,
    ΔΔⲆⲆΔᐃΔ: 608,
    ᐃΔᐃⵠΔⵠⵠ: 609,
    ᐃΔⵠᐃⵠΔⲆ: 610,
    ᐃⲆΔⵠΔⲆᐃ: 611,
    ⵠⵠⲆⲆΔⲆⵠ: 612,
    ⲆΔᐃΔⲆᐃᐃ: 613,
    ΔΔΔⵠⲆᐃⵠ: 614,
    ΔΔᐃΔⲆⵠᐃ: 615,
    ᐃΔⵠⲆΔΔΔ: 616,
    ⲆᐃᐃΔⲆⵠΔ: 617,
    ⲆⵠΔⲆⲆⵠᐃ: 618,
    ⵠᐃⵠᐃⵠ: 619,
    ᐃᐃᐃⵠⲆ: 620,
    ⲆⵠᐃΔΔ: 621,
    ᐃᐃΔⲆⵠⵠⲆⲆΔ: 622,
    ⲆⵠᐃⵠᐃΔⲆ: 623,
    ᐃⲆⲆⲆΔΔΔ: 624,
    ⵠᐃⵠⵠⵠⲆᐃ: 625,
    ΔⲆⵠⲆΔⲆΔ: 626,
    ᐃΔΔᐃΔⲆⵠ: 627,
    ΔⲆⵠⲆᐃⵠᐃ: 628,
    ΔᐃⵠᐃⲆⲆᐃ: 629,
    ⵠΔⵠⵠⵠⲆΔ: 630,
    ᐃᐃⵠᐃⲆⲆⲆ: 631,
    ΔⵠΔΔⲆΔᐃ: 632,
    ⲆᐃΔⵠΔᐃⵠ: 633,
    ΔⲆᐃᐃⲆⵠⵠ: 634,
    ⲆⲆⲆᐃᐃᐃᐃ: 635,
    ⵠⵠⵠⵠᐃⲆᐃ: 636,
    ᐃⲆⲆⵠΔ: 637,
    ΔᐃⵠⲆΔⲆⵠ: 638,
    ⲆⲆᐃⵠⲆᐃᐃ: 639,
    ᐃⵠⵠⵠᐃⲆᐃ: 640,
    ⵠᐃᐃⵠⲆΔⲆ: 641,
    ⲆⲆΔⲆⵠⲆᐃ: 642,
    ⵠⵠⵠᐃⲆΔᐃ: 643,
    ⲆⲆⵠᐃΔⲆᐃ: 644,
    ⵠᐃΔΔⵠᐃⵠ: 645,
    ᐃⵠⵠΔΔⲆᐃ: 646,
    ⵠΔΔᐃⵠⲆᐃ: 647,
    ⲆᐃΔᐃⵠⵠΔ: 648,
    ᐃⵠⲆᐃᐃⲆⲆ: 649,
    ᐃᐃⲆΔⵠᐃⲆ: 650,
    ᐃⵠᐃᐃᐃⲆⵠ: 651,
    ⲆⲆⲆⵠΔΔᐃ: 652,
    ⵠⵠⲆⲆΔⵠΔ: 653,
    ΔⵠⲆⵠΔᐃᐃ: 654,
    ⲆᐃᐃΔᐃⵠΔ: 655,
    ᐃᐃΔⲆⲆᐃⵠ: 656,
    ΔᐃΔⵠΔⵠᐃ: 657,
    ⲆΔⲆⵠⵠᐃⵠ: 658,
    ⵠᐃⵠΔᐃΔⵠ: 659,
    ΔⲆⲆⵠᐃⵠᐃ: 660,
    ΔⵠⲆΔΔᐃⲆ: 661,
    ᐃⲆᐃΔⲆΔᐃ: 662,
    ⵠⲆⵠΔΔⵠⵠ: 663,
    ⵠΔⲆΔΔⵠΔ: 664,
    ᐃⵠⲆⲆΔⵠⵠ: 665,
    ⲆΔᐃⲆᐃΔⵠ: 666,
    ⲆⲆΔᐃᐃⲆⲆ: 667,
    ⵠⲆⲆᐃΔⲆᐃ: 668,
    ⲆΔⵠⵠⲆΔⲆ: 669,
    ᐃᐃⵠᐃⲆᐃᐃ: 670,
    ᐃΔⵠᐃΔᐃⲆ: 671,
    ⲆᐃᐃⵠΔⲆⵠ: 672,
    ⲆⲆⵠΔⵠ: 673,
    ⲆΔⲆⵠⵠᐃⲆ: 674,
    ᐃᐃⲆⵠΔⲆᐃ: 675,
    ᐃⵠⲆⵠⵠ: 676,
    ⲆΔⲆⲆΔⵠᐃᐃⲆ: 677,
    ΔΔⲆᐃᐃⲆⲆ: 678,
    ᐃⵠⲆᐃⵠ: 679,
    ᐃΔΔᐃⲆΔᐃ: 680,
    ⵠⵠⲆⲆⵠΔᐃ: 681,
    ⵠⲆⵠⲆⵠⵠᐃ: 682,
    ΔᐃⲆᐃᐃΔᐃ: 683,
    ⲆᐃᐃᐃⲆΔᐃ: 684,
    ᐃΔᐃⲆⲆⲆⵠ: 685,
    ⵠⲆⲆΔⲆⲆᐃ: 686,
    ΔⲆᐃⵠⲆⲆⵠ: 687,
    ᐃΔⲆᐃΔΔⵠ: 688,
    ΔⵠΔΔⵠⲆⲆ: 689,
    ΔᐃᐃᐃⲆᐃΔ: 690,
    Δᐃⵠᐃᐃ: 691,
    ⲆⲆᐃᐃⲆ: 692,
    ⲆᐃΔⲆⵠ: 693,
    ⵠⵠᐃΔᐃ: 694,
    ⲆⲆⲆᐃⵠ: 695,
    ᐃᐃⵠⵠᐃΔᐃ: 696,
    ⵠⵠⲆΔⲆΔΔ: 697,
    ⵠΔᐃⲆⵠⲆᐃ: 698,
    ᐃⵠⲆΔΔⲆΔ: 699,
    ᐃⲆΔᐃᐃⵠᐃ: 700,
    ᐃⵠΔⵠᐃⲆⲆ: 701,
    ᐃⲆᐃⵠΔⲆΔ: 702,
    ΔᐃᐃΔᐃΔΔ: 703,
    ΔΔΔⵠΔΔᐃ: 704,
    ⵠᐃᐃⲆⵠⵠⲆ: 705,
    ΔᐃⲆΔⲆᐃⵠ: 706,
    ⵠⲆⲆΔᐃⲆᐃ: 707,
    ⵠᐃᐃᐃΔᐃᐃ: 708,
    ⵠΔⵠⵠⲆⲆⵠ: 709,
    ᐃⵠⲆᐃⲆⵠΔ: 710,
    ⲆᐃⲆⲆΔΔΔ: 711,
    ΔᐃⲆⲆΔᐃΔ: 712,
    ⵠⲆⵠΔΔⵠⲆ: 713,
    ᐃΔᐃⵠΔΔⵠ: 714,
    ⵠⲆⲆΔⵠⵠᐃ: 715,
    ⵠⲆⲆΔΔᐃⲆ: 716,
    ᐃᐃᐃⵠΔⵠᐃ: 717,
    ΔⲆⵠⵠᐃⵠⲆ: 718,
    ΔΔΔⲆⲆᐃΔ: 719,
    ᐃᐃᐃᐃᐃΔᐃ: 720,
    ᐃᐃᐃⵠΔⵠΔⵠⵠ: 721,
    ⲆⲆⲆⵠⲆΔΔ: 722,
    ΔΔᐃⲆⲆᐃᐃ: 723,
    ⵠⵠⲆⵠᐃΔΔ: 724,
    ᐃΔΔᐃΔᐃΔ: 725,
    ΔⲆⵠⲆΔⵠⲆ: 726,
    ⲆⵠΔⲆΔΔΔ: 727,
    ⲆⲆΔⲆᐃⲆⵠ: 728,
    ᐃⵠⵠⲆΔᐃᐃ: 729,
    ΔᐃⲆᐃⵠⲆⵠ: 730,
    ᐃⵠΔⲆⲆⵠⲆ: 731,
    ΔΔⲆⲆΔΔᐃ: 732,
    ⲆⲆᐃⵠᐃᐃᐃ: 733,
    ΔᐃⲆᐃⲆΔⲆ: 734,
    ⵠΔⲆⲆᐃⲆᐃ: 735,
    ᐃⵠⵠⵠⲆⵠⲆ: 736,
    ⲆⲆⵠᐃⲆⲆⵠ: 737,
    ᐃᐃΔⵠᐃΔⲆ: 738,
    ⲆⲆΔᐃⵠⲆⵠ: 739,
    ΔᐃⲆΔⲆΔΔ: 740,
    ⲆⲆᐃᐃᐃⲆⵠ: 741,
    ⲆΔⵠᐃΔᐃΔ: 742,
    ᐃⵠΔᐃΔΔⵠ: 743,
    ᐃᐃᐃᐃᐃⲆᐃ: 744,
    ᐃΔΔⵠⵠᐃⵠ: 745,
    ᐃⵠⵠⲆᐃⵠⵠ: 746,
    ⵠᐃⵠΔΔΔⵠ: 747,
    ᐃΔⲆⵠΔⲆᐃ: 748,
    ⵠⵠⲆΔⲆᐃᐃ: 749,
    ⲆΔᐃᐃΔⲆΔ: 750,
    ᐃⲆⲆΔⲆᐃΔ: 751,
    ⲆΔⵠΔⵠⲆΔ: 752,
    ⲆⵠᐃⲆᐃᐃⲆ: 753,
    ᐃⲆⵠᐃⵠᐃⲆ: 754,
    ⲆᐃΔᐃⵠᐃⲆ: 755,
    ΔΔⵠⵠΔΔⵠ: 756,
    ᐃⲆᐃⲆⲆΔᐃ: 757,
    ⵠᐃᐃᐃΔⵠⲆ: 758,
    ΔⲆΔΔⲆⵠᐃ: 759,
    ΔⵠⵠⲆⵠⵠᐃ: 760,
    ⲆⵠᐃΔᐃⲆⲆ: 761,
    ΔΔΔΔⵠᐃᐃ: 762,
    ⲆⲆΔΔⲆⵠⵠ: 763,
    ᐃⲆⲆⵠΔⵠⵠ: 764,
    ⲆᐃⲆⵠᐃΔΔ: 765,
    ΔΔⵠΔⲆⲆⵠ: 766,
    ᐃⲆⲆᐃΔⲆΔ: 767,
    ᐃΔⵠⲆΔⲆⲆ: 768,
    ΔⵠᐃΔΔᐃⲆ: 769,
    ⲆᐃᐃᐃΔΔⵠ: 770,
    ᐃΔᐃⲆᐃΔᐃ: 771,
    ⵠᐃⵠΔⲆⲆΔ: 772,
    ᐃⵠⵠⵠⲆᐃᐃ: 773,
    ⵠΔᐃⲆⲆΔᐃ: 774,
    ⵠⲆΔᐃᐃᐃᐃ: 775,
    ⲆⲆⲆⲆⲆⲆᐃ: 776,
    ⲆⲆᐃΔⵠⵠⵠ: 777,
    ⲆⲆΔⵠᐃⲆΔ: 778,
    ᐃⲆⲆΔⵠⵠᐃ: 779,
    ΔⲆᐃⲆⵠΔⲆ: 780,
    ⲆⵠⲆᐃⲆΔⲆ: 781,
    ⲆⵠᐃⵠⵠⲆⵠ: 782,
    ⲆⲆⵠᐃΔⵠΔ: 783,
    ᐃᐃΔⲆⵠᐃⵠ: 784,
    ΔⵠΔᐃᐃᐃΔ: 785,
    ΔᐃⲆΔⵠᐃΔ: 786,
    ΔΔᐃᐃⵠᐃΔ: 787,
    ᐃᐃᐃᐃⵠⲆᐃ: 788,
    ΔⵠᐃΔⵠⲆⵠ: 789,
    ΔⵠΔΔⲆᐃΔ: 790,
    ⵠᐃᐃᐃⵠᐃⵠ: 791,
    ⵠⲆΔΔⲆⵠᐃ: 792,
    ⲆᐃΔᐃΔ: 793,
    ᐃΔⲆⲆᐃⵠΔ: 794,
    ⵠⵠⲆΔⲆᐃⵠ: 795,
    ⲆΔΔⲆⲆ: 796,
    ⵠΔⵠΔΔⵠⲆ: 797,
    Ⲇᐃᐃⵠᐃⵠⵠ: 798,
    ⲆᐃⲆΔⵠⲆⵠ: 799,
    ΔⵠΔⵠⲆⵠⵠ: 800,
    ⵠⲆⵠⵠⲆᐃᐃ: 801,
    ᐃᐃᐃΔᐃ: 802,
    ⲆΔΔΔⵠᐃΔ: 803,
    ᐃΔⵠⲆⲆⵠᐃΔⲆ: 804,
    ᐃᐃΔΔⲆΔⵠᐃΔ: 805,
    ᐃᐃⵠⲆΔᐃᐃΔⲆ: 806,
    ΔⵠⲆᐃⲆⲆⲆᐃⵠ: 807,
    ΔᐃΔᐃⲆΔⵠ: 808,
    ᐃᐃⲆⵠⲆᐃΔ: 809,
    ⲆⵠⲆΔⵠᐃᐃ: 810,
    ᐃⵠΔⲆᐃⵠΔ: 811,
    ⲆᐃⲆᐃᐃⵠΔ: 812,
    ⲆⲆⵠᐃᐃⲆᐃ: 813,
    ⲆⲆⵠᐃⲆᐃⲆ: 814,
    ᐃΔⵠⲆⲆⵠΔ: 815,
    ⲆⲆⲆΔⵠⵠΔ: 816,
    ⵠᐃΔⲆⲆΔⵠ: 817,
    ⵠᐃᐃⲆⵠ: 818,
    ΔⲆⲆᐃΔ: 819,
    ᐃⵠᐃᐃⵠⲆⲆ: 820,
    ΔᐃΔᐃⵠᐃᐃ: 821,
    ⲆᐃⲆᐃΔⲆⲆ: 822,
    ΔⵠⵠΔⵠΔΔ: 823,
    ΔΔΔᐃⵠΔⲆ: 824,
    ΔⵠⲆΔᐃΔⵠ: 825,
    ⵠΔΔΔᐃᐃⵠ: 826,
    ΔⵠⵠᐃⲆⵠᐃ: 827,
    ⵠⲆⵠⵠⲆΔᐃ: 828,
    ⵠⲆᐃΔⵠΔᐃ: 829,
    ΔⵠⲆⲆⵠᐃⲆ: 830,
    ᐃᐃᐃⵠΔΔᐃ: 831,
    ⲆΔΔⵠᐃⵠⲆⵠΔ: 832,
    ᐃᐃⵠᐃⵠⵠⵠᐃΔ: 833,
    ⲆᐃⲆⵠΔᐃᐃ: 834,
    ΔⵠΔⲆᐃⵠⲆ: 835,
    ⲆⵠᐃΔⲆⵠⲆ: 836,
    ΔΔⲆⵠⲆⵠⲆ: 837,
    ΔⲆⵠⵠⵠⲆΔ: 838,
    ⵠⵠⲆⵠᐃΔᐃ: 839,
    ⲆᐃΔⲆⲆⲆⲆ: 840,
    ⲆⲆΔᐃΔⲆᐃ: 841,
    ΔᐃΔΔⲆⲆᐃ: 842,
    ⲆⲆⵠⲆΔⲆΔ: 843,
    ΔΔⵠΔⵠᐃⵠ: 844,
    ⵠⲆΔΔᐃᐃᐃ: 845,
    ΔⵠⲆΔⵠⲆⵠ: 846,
    ᐃⵠΔᐃⵠⲆᐃ: 847,
    ⵠᐃΔᐃⲆΔᐃ: 848,
    ⵠⲆⵠⲆᐃⵠⲆ: 849,
    ⵠᐃⲆᐃᐃⵠΔ: 850,
    ΔⲆⵠⲆᐃⵠⵠ: 851,
    ⵠⲆⵠⲆΔⵠΔⵠΔ: 852,
    ⵠᐃΔᐃΔᐃΔ: 853,
    ⲆΔΔᐃⵠ: 854,
    ᐃᐃⵠⲆᐃΔⵠΔᐃ: 855,
    ΔᐃⲆⲆⵠᐃⵠⵠᐃ: 856,
    ⲆⵠΔⵠⲆΔⵠᐃⵠ: 857,
    ᐃᐃⲆⵠⲆᐃⲆΔᐃ: 858,
    ᐃᐃⵠᐃᐃᐃⵠ: 859,
    ΔⵠⲆⵠᐃⵠΔ: 860,
    ᐃΔⵠΔⲆⵠⲆ: 861,
    ΔᐃΔⲆΔⲆⵠ: 862,
    ΔΔᐃᐃΔⲆᐃ: 863,
    ⵠⲆᐃΔⵠⲆⲆⲆⲆ: 864,
    ⲆⲆᐃᐃΔΔᐃ: 865,
    ⲆᐃΔΔᐃⲆⵠ: 866,
    ᐃΔΔⲆⵠΔΔ: 867,
    ΔΔΔᐃΔⲆⲆ: 868,
    ⲆᐃⵠⲆⵠᐃⵠ: 869,
    ⲆⵠⲆⲆΔΔΔ: 870,
    ᐃᐃᐃᐃⲆⵠⲆ: 871,
    ΔΔΔⲆΔ: 872,
    ⵠΔΔⵠⲆⵠⵠⲆⵠ: 873,
    ⵠⵠᐃⵠⲆⵠᐃ: 874,
    ᐃⲆᐃⲆᐃᐃᐃ: 875,
    ᐃⵠⵠᐃⲆΔΔ: 876,
    ᐃΔᐃᐃΔΔᐃ: 877,
    ΔᐃⵠᐃΔⵠⵠ: 878,
    ΔΔΔⲆⲆΔⵠ: 879,
    ᐃΔⲆΔΔⵠⵠ: 880,
    ᐃᐃⵠᐃᐃⲆᐃ: 881,
    ΔΔΔⲆᐃΔⵠ: 882,
    ⲆᐃⵠⲆΔΔᐃ: 883,
    ⲆⵠⲆⵠⵠⵠⵠ: 884,
    ⲆⲆᐃⵠⲆⲆⵠ: 885,
    ⲆΔᐃⲆⲆᐃΔ: 886,
    ΔⲆᐃⵠⵠ: 887,
    ⵠᐃⲆⵠⲆⵠⵠ: 888,
    ᐃᐃⵠΔⵠᐃᐃ: 889,
    ΔΔⵠⵠⲆᐃⲆ: 890,
    ⲆᐃⵠΔⵠⲆⵠ: 891,
    ΔⵠⵠᐃⲆⵠΔ: 892,
    ΔⲆⲆΔΔΔⲆ: 893,
    ΔⲆᐃⵠΔⵠᐃ: 894,
    ᐃⲆⵠⵠⵠⵠᐃ: 895,
    ⵠᐃⵠᐃΔᐃᐃ: 896,
    ⵠΔᐃⵠΔⲆᐃ: 897,
    ⵠⵠΔᐃⵠΔᐃ: 898,
    ᐃⵠᐃⲆⲆΔᐃ: 899,
    ⵠⲆⵠⵠⵠⵠΔ: 900,
    ⲆⲆΔⲆᐃᐃⵠ: 901,
    ⵠΔⲆⵠⵠⵠΔ: 902,
    ΔⲆᐃᐃᐃᐃⵠ: 903,
    ⲆᐃⲆΔⲆⵠΔ: 904,
    ⵠᐃᐃᐃⲆᐃΔ: 905,
    ⵠⵠⵠΔᐃΔΔ: 906,
    ΔᐃΔⲆᐃᐃᐃ: 907,
    ⲆᐃᐃᐃΔᐃⲆ: 908,
    ᐃⲆⲆΔᐃΔΔ: 909,
    ⵠᐃᐃⵠᐃΔⵠ: 910,
    ⲆᐃⵠⵠᐃΔᐃ: 911,
    ΔᐃΔⲆᐃⲆᐃ: 912,
    ⲆΔⲆΔΔⲆΔ: 913,
    ΔⵠⵠⵠΔⲆᐃⵠⲆ: 914,
    ΔΔⲆⲆⲆⵠⵠᐃᐃ: 915,
    ⵠᐃⲆⲆᐃΔⵠᐃⲆ: 916,
    ΔΔⲆⲆᐃΔᐃΔᐃ: 917,
    ΔⲆⲆΔΔΔⵠ: 918,
    ⵠΔᐃⲆᐃⲆᐃ: 919,
    ᐃⵠᐃΔⵠ: 920,
    ΔⵠⲆΔⵠᐃΔ: 921,
    ⵠᐃⲆΔⵠΔⵠ: 922,
    ᐃⲆΔⵠⲆⵠᐃ: 923,
    ᐃⲆⵠⵠΔΔᐃ: 924,
    ᐃⲆⵠⲆⵠᐃᐃ: 925,
    ⵠΔᐃⵠⲆⲆⵠ: 926,
    ᐃⵠⲆⲆⵠⵠΔ: 927,
    ᐃΔⵠⲆΔᐃᐃ: 928,
    ᐃᐃᐃᐃⲆⲆᐃ: 929,
    ᐃᐃΔⲆᐃⲆⵠ: 930,
    ⲆⵠᐃΔⵠⵠⵠ: 931,
    ⵠᐃΔΔⵠⵠΔ: 932,
    ⵠΔΔⵠΔΔⵠ: 933,
    ⵠⲆⵠⲆⵠⲆⵠ: 934,
    ΔⲆᐃΔᐃᐃⵠ: 935,
    ΔΔΔⵠΔΔⵠ: 936,
    ΔⵠⲆᐃΔⵠΔ: 937,
    ΔⵠⵠᐃⲆⲆⲆ: 938,
    ⵠⲆⲆⵠⵠⵠΔ: 939,
    ᐃⵠⵠⲆᐃⲆᐃᐃΔ: 940,
    ᐃⲆΔⵠΔ: 941,
    ΔᐃⵠΔⵠⵠΔ: 942,
    ⵠⵠᐃΔΔⵠⲆ: 943,
    ⵠᐃΔᐃⵠⵠⲆ: 944,
    ⲆᐃΔΔΔⵠΔ: 945,
    ΔΔⵠΔᐃⵠⲆ: 946,
    Ⲇᐃⵠᐃᐃᐃᐃ: 947,
    ΔᐃⲆΔⵠⵠᐃ: 948,
    ΔΔⵠⵠᐃᐃΔ: 949,
    ⵠΔᐃᐃᐃⲆΔ: 950,
    ⲆΔⵠΔᐃᐃⲆ: 951,
    ΔᐃⲆΔᐃΔⵠ: 952,
    ⲆⲆⵠΔⲆⲆᐃ: 953,
    ⵠΔΔΔᐃΔⵠ: 954,
    ᐃⵠⵠᐃⲆⵠⵠ: 955,
    ⲆΔΔⵠⲆᐃᐃ: 956,
    ⵠΔᐃⲆΔⲆᐃ: 957,
    ΔᐃⵠᐃⲆⵠᐃ: 958,
    ᐃⲆⵠᐃⵠⲆΔ: 959,
    ⵠᐃⵠⲆⲆⵠΔ: 960,
    ⲆΔⵠⲆΔΔΔ: 961,
    ⵠΔᐃⵠᐃⲆⵠ: 962,
    ᐃⲆⲆΔΔΔΔ: 963,
    ⲆⲆΔᐃᐃΔⲆΔⲆ: 964,
    ΔΔⵠΔⲆᐃⲆ: 965,
    ᐃΔⲆⵠⲆⵠΔ: 966,
    ΔΔᐃΔⵠΔᐃ: 967,
    ᐃΔⲆᐃᐃⲆᐃ: 968,
    ΔⲆᐃΔᐃⲆⵠ: 969,
    ᐃΔⵠⲆⲆⲆⵠ: 970,
    ⲆⲆⵠⵠΔᐃⵠ: 971,
    ⲆⵠⲆⵠⲆᐃΔ: 972,
    ᐃᐃΔⲆⲆΔᐃ: 973,
    ⲆΔⲆᐃⲆⲆᐃ: 974,
    ⲆΔΔⲆᐃⲆⵠ: 975,
    ⵠⵠⵠⲆΔⲆⲆ: 976,
    ⵠᐃΔⲆⵠⵠⵠ: 977,
    ΔⵠⲆΔΔᐃΔ: 978,
    ᐃⵠΔᐃᐃⵠⵠ: 979,
    ⲆⵠΔΔΔᐃⵠ: 980,
    ⵠⵠᐃⲆΔⵠⲆ: 981,
    ΔⵠⵠΔⵠⲆΔ: 982,
    ᐃΔⲆΔΔᐃⲆ: 983,
    ΔⵠΔⵠⵠᐃⲆ: 984,
    ΔᐃᐃⵠᐃⲆᐃ: 985,
    ᐃᐃΔⵠΔᐃᐃ: 986,
    ΔⵠΔⵠᐃⲆⵠ: 987,
    ⵠᐃΔⵠⲆⵠⲆ: 988,
    ΔᐃΔⲆⲆ: 989,
    ⲆΔⲆⵠᐃⵠΔ: 990,
    ⲆⵠⵠᐃΔⵠᐃ: 991,
    ⵠΔⲆᐃᐃΔᐃ: 992,
    ΔⵠΔⵠᐃⵠΔ: 993,
    ΔⲆⵠΔⵠΔΔ: 994,
    ⲆⲆⵠⵠⲆᐃⵠ: 995,
    ᐃⲆⵠⲆΔᐃΔ: 996,
    ⵠⲆΔⵠΔᐃᐃ: 997,
    ᐃⵠΔⲆⲆΔᐃ: 998,
    ᐃⵠᐃΔⵠⲆᐃ: 999,
    ᐃⲆⵠⲆⲆᐃⵠ: 1000,
    ΔΔᐃⵠᐃᐃⲆ: 1001,
    ⵠⲆᐃΔⵠᐃΔ: 1002,
    ᐃⲆΔⲆΔⵠΔ: 1003,
    ΔⵠⵠΔᐃⵠⵠ: 1004,
    ⵠⲆΔΔΔᐃⵠ: 1005,
    ⵠⲆΔΔΔⲆᐃ: 1006,
    ᐃⲆΔⵠΔᐃⵠ: 1007,
    ⲆΔᐃⲆᐃⲆᐃ: 1008,
    ᐃⵠⵠⲆⵠⵠᐃ: 1009,
    ΔΔⲆᐃᐃᐃⵠ: 1010,
    ᐃⵠᐃᐃᐃΔᐃ: 1011,
    ᐃⲆᐃᐃⵠⲆᐃ: 1012,
    ⲆΔⲆⵠΔᐃᐃ: 1013,
    ΔᐃᐃᐃΔⲆⲆ: 1014,
    ᐃⵠᐃⵠⵠⵠⵠ: 1015,
    ⵠⵠᐃⵠΔᐃⵠ: 1016,
    ⲆΔⲆᐃⵠⲆⲆ: 1017,
    ⵠⲆⵠⵠⵠΔⵠ: 1018,
    ⵠⵠΔⵠⲆⵠΔ: 1019,
    ᐃΔΔᐃΔΔΔ: 1020,
    ⲆⵠⲆⵠⲆΔᐃ: 1021,
    ΔᐃΔᐃΔⵠΔ: 1022,
    ΔⲆᐃⲆΔᐃⲆ: 1023,
    ᐃⲆⲆⲆ: 1024,
    ⲆΔⲆⲆ: 1025,
    ⲆΔⵠⲆⵠΔᐃ: 1026,
    ᐃⵠᐃⵠᐃᐃⵠ: 1027,
    ⵠΔΔⲆⲆⵠⲆ: 1028,
    ΔⵠΔⵠΔⲆⲆ: 1029,
    ᐃᐃΔᐃᐃⲆⲆ: 1030,
    ᐃⲆⵠⲆⵠⵠⵠ: 1031,
    ⲆⵠⵠΔⵠᐃⵠ: 1032,
    ⲆᐃΔⵠⲆ: 1033,
    ΔᐃⵠᐃΔⲆⵠ: 1034,
    ⲆΔⵠΔⵠ: 1035,
    ⵠᐃΔΔⲆΔᐃ: 1036,
    ΔⵠⵠⵠⲆ: 1037,
    ⲆⲆⲆᐃⲆⲆⲆ: 1038,
    ΔᐃΔⵠΔ: 1039,
    ᐃΔΔΔᐃⲆⵠ: 1040,
    ⵠⲆⵠⵠⵠ: 1041,
    ᐃⵠⵠⵠⲆ: 1042,
    ⵠⵠΔⵠΔᐃⵠ: 1043,
    ᐃᐃⵠⵠⵠᐃΔ: 1044,
    ⲆⵠⲆᐃᐃᐃⲆ: 1045,
    ⵠᐃⵠⲆΔⵠΔ: 1046,
    ⵠⵠᐃᐃᐃᐃᐃ: 1047,
    ΔᐃΔⲆᐃⵠᐃ: 1048,
    ᐃⵠⵠΔᐃΔΔ: 1049,
    ⵠⲆΔⲆᐃᐃΔ: 1050,
    ⵠᐃΔᐃᐃⲆⲆ: 1051,
    ΔᐃΔΔⵠ: 1052,
    ᐃΔⲆΔⲆᐃⲆ: 1053,
    ⵠⵠⲆⲆΔ: 1054,
    ΔⲆⵠΔᐃΔⲆ: 1055,
    ΔⵠⲆⵠⲆⲆΔ: 1056,
    ΔⲆⵠⲆⲆⲆΔ: 1057,
    ⲆΔᐃᐃΔⵠΔ: 1058,
    ΔⲆⲆᐃᐃᐃΔ: 1059,
    ⲆⲆⵠⵠⵠⵠΔ: 1060,
    ᐃⲆΔΔΔΔⲆⵠⲆ: 1061,
    ⵠΔⲆⵠⵠᐃⵠ: 1062,
    ⵠᐃΔᐃⵠᐃⲆ: 1063,
    ⵠΔⲆᐃᐃⵠᐃⵠⵠ: 1064,
    ΔⵠⲆᐃⵠΔⵠ: 1065,
    ΔΔⵠΔᐃᐃᐃ: 1066,
    ⵠⵠⵠᐃⵠᐃⲆ: 1067,
    ΔⲆΔᐃⵠⲆᐃ: 1068,
    ᐃⵠⵠᐃᐃ: 1069,
    ⵠⲆⲆⵠΔᐃΔ: 1070,
    ⲆΔΔᐃᐃⲆⲆ: 1071,
    ⲆⵠⲆΔⲆᐃⲆ: 1072,
    ΔⵠᐃΔᐃᐃⵠ: 1073,
    ⵠΔᐃⵠΔⲆΔ: 1074,
    ⲆⲆΔⲆⲆⵠⲆ: 1075,
    ΔᐃᐃⲆΔΔΔ: 1076,
    ⵠⵠᐃⵠΔⲆΔ: 1077,
    ᐃⲆᐃᐃᐃⵠᐃ: 1078,
    ⵠᐃⲆᐃᐃᐃⲆ: 1079,
    ΔⲆⲆⲆⵠⲆΔ: 1080,
    ΔⵠⲆᐃΔΔᐃ: 1081,
    ΔᐃⲆⲆᐃⲆᐃ: 1082,
    ΔⲆⲆᐃⵠⲆΔ: 1083,
    ᐃᐃⲆᐃᐃ: 1084,
    ⵠᐃⵠᐃⲆΔᐃ: 1085,
    ΔⲆΔΔⲆΔᐃ: 1086,
    ΔⲆᐃⲆⲆⲆᐃ: 1087,
    ⵠⲆⲆⵠⵠᐃⲆ: 1088,
    ⵠⲆΔⵠⵠΔᐃ: 1089,
    ⲆΔᐃΔᐃⵠΔ: 1090,
    ΔΔⵠᐃⲆᐃᐃ: 1091,
    ⵠⵠⲆΔⲆΔᐃ: 1092,
    ᐃΔΔΔⵠⲆΔ: 1093,
    ΔⵠΔΔΔⵠᐃ: 1094,
    ᐃᐃⲆⲆⵠᐃⲆ: 1095,
    ᐃᐃⵠᐃⵠⲆΔ: 1096,
    ᐃΔᐃⲆⲆΔᐃ: 1097,
    ⵠΔⵠⲆⲆᐃⲆ: 1098,
    ᐃΔⵠⵠⲆ: 1099,
    ⲆⵠᐃⲆΔΔⲆ: 1100,
    ᐃⵠⲆᐃⲆⲆΔ: 1101,
    ⵠᐃᐃΔⲆⲆⵠ: 1102,
    ⵠᐃᐃΔΔΔᐃ: 1103,
    ᐃⵠⵠⲆΔⵠⵠ: 1104,
    ⵠⲆⵠⲆΔΔⵠ: 1105,
    ⲆΔᐃⵠΔⲆᐃ: 1106,
    ⲆⵠᐃⵠᐃⲆᐃ: 1107,
    ᐃΔᐃΔΔΔΔ: 1108,
    ΔⵠⵠⲆⵠⲆⲆ: 1109,
    ΔᐃᐃᐃⲆΔⵠ: 1110,
    ⵠⵠᐃⲆΔⵠᐃ: 1111,
    ⲆⲆⲆⵠᐃⲆⲆ: 1112,
    ⲆⵠⲆⲆⲆⲆⲆ: 1113,
    ᐃᐃΔⵠΔᐃΔ: 1114,
    ⵠᐃᐃΔⲆⲆⲆ: 1115,
    ᐃΔⵠΔⵠᐃᐃ: 1116,
    ΔⵠᐃᐃⵠⲆⵠ: 1117,
    ᐃΔⲆⲆΔᐃⵠ: 1118,
    ⲆⲆⲆⲆⵠᐃΔ: 1119,
    ⲆⵠΔⵠⲆ: 1120,
    ⵠᐃⵠⲆⲆⵠⵠ: 1121,
    ᐃⵠⲆⵠⵠⵠⵠ: 1122,
    ⵠⲆⲆⵠΔᐃᐃ: 1123,
    ᐃᐃⲆⲆᐃΔⵠ: 1124,
    Δᐃᐃᐃⵠⵠᐃ: 1125,
    ΔⲆⲆⵠⲆⲆᐃ: 1126,
    ᐃⵠⵠⲆⵠΔᐃ: 1127,
    ⵠⵠⵠᐃᐃΔΔ: 1128,
    ⵠⲆᐃᐃⵠⵠᐃ: 1129,
    ⲆΔⲆⵠⲆⵠᐃ: 1130,
    ΔⵠΔΔⵠᐃᐃ: 1131,
    ᐃᐃⵠⲆΔΔΔ: 1132,
    ΔΔᐃⵠᐃⲆⲆ: 1133,
    ᐃᐃᐃⵠΔΔⲆ: 1134,
    ᐃⵠΔΔⵠᐃᐃ: 1135,
    ⵠᐃⲆⲆΔⲆⵠ: 1136,
    ⲆⲆΔᐃⲆΔⵠ: 1137,
    ⵠΔⵠΔⵠΔᐃ: 1138,
    ᐃΔⲆΔΔⵠⲆ: 1139,
    ᐃΔⲆΔⲆᐃⵠ: 1140,
    ΔⲆⵠΔΔᐃⲆ: 1141,
    ⲆⵠⲆⵠⲆⲆⲆ: 1142,
    ΔⵠΔⲆᐃⵠⵠ: 1143,
    ⲆΔⵠⵠⲆⲆⵠ: 1144,
    ⵠᐃⵠΔΔⲆΔ: 1145,
    ΔᐃⵠΔⵠⵠᐃ: 1146,
    ᐃᐃⵠᐃⲆᐃⲆ: 1147,
    ᐃΔΔᐃᐃⲆᐃ: 1148,
    ⲆⵠΔⵠΔⵠᐃ: ["#E9CF96", "#144940"],
    ᐃⲆᐃⲆΔᐃⵠ: 1149,
    ᐃⲆⵠΔⵠⲆᐃ: 1150,
    ᐃᐃΔΔⲆⵠΔ: 1151,
    ⵠΔΔᐃⵠⵠᐃ: 1152,
    ⲆᐃⵠⵠⵠⲆᐃ: 1153,
    ⲆⵠⵠᐃᐃΔΔ: 1154,
    ⵠᐃᐃⲆΔᐃⵠ: 1155,
    ⲆⵠΔᐃⲆ: 1156,
    ΔⵠᐃᐃᐃⲆΔ: 1157,
    ⲆΔⲆᐃⲆΔⲆ: 1158,
    ⵠⵠᐃᐃᐃⵠΔ: 1159,
    ΔΔⲆⵠΔΔⲆ: 1160,
    ᐃᐃΔⵠⲆⲆΔ: 1161,
    ⲆΔᐃⲆⲆⲆⲆ: 1162,
    ᐃᐃⵠᐃᐃⵠⵠ: 1163,
    ⲆΔⵠⵠⵠΔᐃ: 1164,
    ⲆᐃᐃⲆΔᐃᐃ: 1165,
    ΔⲆⲆⲆᐃⲆⵠ: 1166,
    ΔΔΔⲆⵠⵠⲆ: 1167,
    ⵠⲆⵠΔΔⲆⵠ: 1168,
    ΔⲆⵠᐃᐃᐃⵠ: 1169,
    ᐃⲆⲆᐃⲆΔⲆ: 1170,
    ⲆΔᐃⲆΔⲆⵠ: 1171,
    ᐃᐃᐃⲆⵠⲆⲆ: 1172,
    ΔⵠᐃᐃⲆⲆⵠ: 1173,
    ⲆⵠΔᐃⵠⵠᐃ: 1174,
    ᐃⲆⲆΔᐃⲆΔ: 1175,
    ⵠⵠⵠⲆΔⵠᐃ: 1176,
    ΔⲆⵠⲆⵠⲆᐃ: 1177,
    ΔⵠΔᐃᐃⲆⵠ: 1178,
    ᐃⲆⲆΔⵠᐃΔ: 1179,
    ⵠⲆᐃᐃᐃⲆⲆ: 1180,
    ⵠⲆΔᐃⵠⵠⲆ: 1181,
    ⵠΔᐃⲆⵠΔΔ: 1182,
    ΔⲆⲆⲆⵠⵠΔ: 1183,
    ΔᐃⵠⵠⲆⵠᐃ: 1184,
    ᐃⵠΔᐃⲆⵠⵠ: 1185,
    ᐃᐃⲆⲆⵠⲆⵠ: 1186,
    ⵠⲆᐃⲆⲆΔⲆ: 1187,
    ⲆᐃⲆⵠᐃⲆⲆ: 1188,
    ⵠᐃΔⲆⲆΔΔ: 1189,
    ΔΔΔⵠΔⵠⵠ: 1190,
    ᐃΔⲆΔⵠⵠᐃ: 1191,
    ΔⵠⲆΔΔᐃⵠ: 1192,
    ᐃΔⵠⲆⲆΔᐃ: 1193,
    ᐃⵠⵠᐃᐃⲆᐃ: 1194,
    ⵠⵠⵠᐃⲆⵠⵠ: 1195,
    ⲆⲆΔⲆΔⲆΔ: 1196,
    ᐃΔΔΔⵠⲆᐃ: 1197,
    ᐃΔᐃⵠΔⵠⲆ: 1198,
    ᐃⵠΔⵠΔΔⵠ: 1199,
    ⲆΔΔΔΔᐃΔ: 1200,
    ΔⲆⵠΔⵠⲆⲆ: 1201,
    ⲆⲆᐃᐃᐃΔⵠ: 1202,
    ΔᐃΔᐃΔΔⲆ: 1203,
    ⵠⲆⲆⵠⵠⵠⵠ: 1204,
    ΔⵠⲆⵠΔΔΔ: 1205,
    ⵠᐃⵠⲆΔᐃᐃ: 1206,
    ⵠΔⲆᐃⲆⵠᐃ: 1207,
    ⵠΔᐃⵠΔᐃⲆ: 1208,
    ΔᐃΔᐃΔⲆⲆ: 1209,
    ⲆᐃⲆᐃΔΔⵠ: 1210,
    ⵠⲆᐃⲆΔΔᐃ: 1211,
    ᐃΔⵠΔⵠΔᐃ: 1212,
    ⲆⲆΔⲆΔᐃΔ: 1213,
    ΔⵠΔΔΔⲆᐃ: 1214,
    ᐃᐃΔᐃⵠⲆⲆ: 1215,
    ⵠᐃΔⲆΔⲆⵠ: 1216,
    ⵠⲆΔᐃᐃⲆΔ: 1217,
    ⲆⲆⵠⵠΔ: 1218,
    ⵠⲆⲆⵠⵠΔⲆ: 1219,
    ⲆᐃᐃⲆᐃ: 1220,
    ⵠⵠΔⵠⵠᐃΔ: 1221,
    ᐃᐃⲆᐃᐃᐃⲆ: 1222,
    ᐃⲆⵠΔⲆᐃᐃ: 1223,
    ΔᐃⵠΔⵠΔⵠ: 1224,
    ΔⵠⲆΔⵠΔⵠ: 1225,
    Δⵠⵠᐃⵠⵠᐃ: 1226,
    ΔᐃⵠⲆΔΔᐃ: 1227,
    ⲆⲆᐃᐃᐃΔᐃ: 1228,
    ⵠⲆⵠⵠⵠΔᐃ: 1229,
    ΔⲆΔᐃⵠΔⵠ: 1230,
    ΔⲆⵠᐃΔᐃΔ: 1231,
    ᐃᐃΔΔⵠⵠᐃ: 1232,
    ΔΔⲆⵠΔⲆᐃ: 1233,
    ⲆΔⵠΔΔⵠⲆ: 1234,
    ΔⵠⲆⵠⲆⵠⵠ: 1235,
    ⲆΔⲆⲆΔᐃΔ: 1236,
    ⲆΔᐃΔⲆᐃⲆ: 1237,
    ⵠⵠΔⵠΔⵠⲆ: 1238,
    ⵠⵠΔⵠᐃⵠᐃ: 1239,
    ᐃⵠᐃΔᐃΔᐃ: 1240,
    ΔΔⲆⲆᐃⲆΔ: 1241,
    ⵠᐃΔⵠᐃⲆᐃ: 1242,
    ⵠΔᐃᐃᐃⵠⲆ: 1243,
    ⲆᐃᐃᐃⲆᐃⵠ: 1244,
    ᐃᐃᐃᐃⲆΔⵠ: 1245,
    ΔᐃⲆⵠΔⲆΔ: 1246,
    ΔⵠⵠΔⵠᐃⲆ: 1247,
    ⲆⲆⲆⲆⲆⵠⲆ: 1248,
    Δⵠⵠⵠᐃᐃᐃ: 1249,
    ᐃⲆᐃᐃⲆΔΔ: 1250,
    ⵠⲆⵠⵠⵠᐃᐃ: 1251,
    ⵠⲆⲆᐃΔᐃΔ: 1252,
    ᐃⲆⲆᐃΔⵠⵠ: 1253,
    ⵠⲆᐃᐃⵠⵠⵠ: 1254,
    ΔΔΔΔⲆⲆᐃ: 1255,
    ᐃΔⵠΔΔⲆᐃ: 1256,
    ᐃᐃᐃⲆⵠᐃΔ: 1257,
    ⵠⲆⲆⵠⲆΔⲆ: 1258,
    ΔΔᐃⲆⲆⵠⲆ: 1259,
    ΔᐃᐃⲆⲆΔᐃ: 1260,
    ΔⲆᐃᐃⲆⲆⲆ: 1261,
    ᐃᐃΔᐃⵠⲆΔ: 1262,
    ΔΔᐃΔΔⲆⲆ: 1263,
    ᐃᐃᐃᐃⲆᐃⵠ: 1264,
    ⲆᐃⵠΔΔᐃᐃ: 1265,
    ΔΔⲆⵠⲆⵠⵠ: 1266,
    ΔⵠᐃᐃΔⲆΔ: 1267,
    ΔⵠⲆᐃΔᐃⲆ: 1268,
    ᐃΔᐃⲆΔⲆⲆ: 1269,
    ⵠΔᐃᐃⲆᐃⵠ: 1270,
    ᐃᐃᐃⵠⲆⵠⲆ: 1271,
    ⲆⵠΔⵠᐃΔⵠ: 1272,
    ᐃⵠⵠⵠⵠⵠⲆ: 1273
  };
  const Tr = _a;
  Qr = 0;
  const Ur = zj;
  var Wr = {
    ΔᐃⲆΔⵠ: 0,
    ⲆⲆΔᐃⲆ: 1,
    ⵠⲆΔⵠΔ: 2,
    ⵠᐃⲆⵠᐃ: 3,
    ΔΔᐃⵠⲆ: 4,
    ᐃΔΔⵠⵠ: 5,
    ΔΔΔᐃⵠ: 6,
    ΔⵠⵠΔⵠ: 7,
    ΔⵠⲆᐃΔ: 8,
    ᐃⵠΔᐃΔ: 9,
    ⲆⵠΔΔⵠ: 10,
    ⵠᐃⲆΔⲆ: 11,
    ⵠⲆᐃⵠΔ: 12,
    ᐃᐃⲆΔⵠ: 13,
    ΔⵠⲆΔⲆ: 14,
    ΔΔΔⵠⲆ: 15,
    ΔᐃⵠΔⲆ: 16,
    ⲆΔⵠⵠⲆ: 17,
    ⵠΔⲆⲆⲆ: 18,
    ᐃΔᐃΔΔ: 19,
    ⲆⵠⲆⲆᐃ: 20,
    Ⲇⵠᐃⵠⵠ: 21,
    ᐃΔⲆᐃⵠ: 22,
    ⵠᐃΔΔⵠ: 23,
    ᐃᐃΔΔᐃ: 24,
    ⵠᐃᐃΔᐃ: 25,
    ⲆΔᐃⵠΔ: 26,
    Ⲇᐃᐃⵠᐃ: 27,
    ⵠⵠⲆΔᐃ: 28,
    ⲆⵠΔᐃⵠ: 29,
    ⵠⵠᐃᐃᐃ: 30,
    ⵠΔΔⲆⲆ: 31,
    ⲆⲆⵠᐃⲆ: 32,
    ⲆΔᐃᐃΔ: 33,
    ⵠⵠⲆⲆⲆ: 34,
    ᐃⲆⵠⵠᐃ: 35,
    ᐃΔⵠⵠΔ: 36,
    ᐃΔⵠⲆⵠ: 37,
    ⵠⵠΔⲆⲆ: 38,
    ⵠⵠᐃΔⲆ: 39,
    ⵠⲆⵠᐃⲆ: 40,
    ᐃⲆΔᐃᐃ: 41,
    ⵠᐃΔΔΔ: 42,
    ⲆⲆᐃᐃⵠ: 43,
    ⲆΔⲆⵠΔ: 44,
    ⵠⲆΔᐃΔ: 45,
    ΔΔⵠᐃᐃ: 46,
    ⲆᐃᐃⵠΔ: 47,
    ᐃⲆᐃⵠᐃ: 48,
    ⵠⲆΔΔΔ: 49,
    ⲆⵠΔᐃΔ: 50,
    ⲆᐃⲆΔᐃ: 51,
    ᐃⲆⵠΔⵠ: 52,
    ΔⲆⲆⵠⵠ: 53,
    Δᐃⵠⵠⵠ: 54,
    ⲆⲆⲆⵠΔ: 55,
    ΔΔⲆⵠⵠ: 56,
    ⲆⲆΔⵠᐃ: 57,
    ᐃⲆⵠᐃⵠ: 58,
    ᐃᐃᐃᐃᐃ: 59,
    ⵠᐃᐃⵠⲆ: 60,
    ΔⵠⲆᐃⲆ: 61,
    ΔΔⵠⵠᐃ: 62,
    ⵠⲆⵠΔⲆ: 63,
    ⲆΔⲆΔⵠ: 64,
    ⲆⵠⵠΔⲆ: 65,
    ᐃᐃⵠᐃⵠ: 66,
    ⲆⵠⵠΔᐃ: 67,
    ⵠⵠΔⵠⵠ: 68,
    ΔⲆΔΔᐃ: 69,
    ⲆⲆᐃⵠⲆ: 70,
    ⵠⵠᐃⲆⵠ: 71,
    ⵠⲆᐃᐃⵠ: 72,
    ΔᐃΔᐃⲆ: 73,
    ᐃᐃⵠⵠᐃ: 74,
    ⲆᐃᐃΔΔ: 75,
    ⲆᐃⲆΔⵠ: 76,
    ⵠⵠᐃⲆⲆ: 77,
    ᐃᐃⵠᐃᐃ: 78,
    ⵠΔᐃⵠⲆ: 79,
    ⵠⵠΔᐃⵠ: 80,
    ΔᐃᐃⲆᐃ: 81,
    ⲆᐃⲆᐃΔ: 82,
    ᐃⵠᐃⵠⲆ: 83,
    ᐃⲆᐃΔΔ: 84,
    ΔⲆⵠⵠⲆ: 85,
    ᐃⵠΔⵠᐃ: 86,
    ⲆⲆⵠⲆⲆ: 87,
    ᐃΔⵠΔᐃ: 88,
    ᐃΔⲆⲆⵠ: 89,
    ⲆⲆᐃⲆⵠ: 90,
    ΔΔⲆⲆᐃ: 91,
    ⵠᐃΔᐃᐃ: 92,
    ᐃⵠΔΔⵠ: 93,
    ᐃᐃⲆⲆᐃ: 94,
    ⵠⵠⵠⵠⵠ: 95,
    ᐃⲆΔΔΔ: 96,
    ᐃΔⲆᐃΔ: 97,
    ᐃⲆⲆΔⲆ: 98,
    ᐃⵠⵠⲆᐃ: 99,
    ᐃᐃⵠΔ: 100,
    ⲆᐃᐃⲆⵠ: 101,
    ᐃⵠᐃⲆⲆ: 102,
    ⲆᐃⵠⵠΔ: 103,
    ΔΔΔⲆⲆ: 104,
    ΔᐃΔⲆᐃ: 105,
    ⵠⲆⵠⲆⵠ: 106,
    ⲆⲆⵠⲆⵠ: 107,
    ΔⵠⵠᐃΔ: 108,
    ⲆᐃⵠⲆΔ: 109,
    ΔΔⵠⵠⲆ: 110,
    ᐃΔᐃΔⲆ: 111,
    ⲆⵠⵠᐃⵠⵠⲆ: 112,
    ΔⵠⵠΔᐃᐃΔ: 113,
    ⵠⲆⲆⵠⵠ: 114,
    ΔΔⵠᐃⵠ: 115,
    ⲆⵠⲆΔᐃ: 116,
    ᐃⵠΔⲆΔ: 117,
    ᐃᐃⲆⵠⵠ: 118,
    ᐃΔᐃᐃᐃ: 119,
    ⲆⵠⲆⵠΔ: 120,
    ΔΔᐃΔⵠ: 121,
    ⲆΔⵠᐃΔ: 122,
    ΔⲆΔᐃᐃ: 123,
    ΔΔⲆⲆⲆ: 124,
    ᐃⲆΔᐃΔ: 125,
    ⵠⲆⵠⵠᐃ: 126,
    ᐃΔΔΔᐃ: 127,
    ⵠⲆⲆΔⲆ: 128,
    ᐃⵠⵠⲆⵠ: 129,
    ᐃΔᐃᐃⵠ: 130,
    ᐃᐃΔΔΔ: 131,
    ΔⵠⲆᐃᐃ: 132,
    ΔΔⵠΔⵠ: 133,
    ⲆⲆⵠⵠⵠ: 134,
    ⲆⵠΔⵠᐃ: 135,
    ⲆᐃᐃᐃⲆ: 136,
    ⵠⵠⲆᐃⵠ: 137,
    ᐃᐃⵠⲆⵠ: 138,
    Δᐃᐃᐃᐃ: 139,
    ⲆⵠᐃΔⵠ: 140,
    ᐃⲆⵠⵠΔ: 141,
    ⵠⵠⵠᐃⲆ: 142,
    ⵠⲆΔⲆᐃ: 143,
    ΔⲆⵠΔⲆ: 144,
    ᐃⵠⵠⲆΔ: 145,
    ⲆΔⵠΔⲆ: 146,
    ᐃΔΔᐃΔ: 147,
    ᐃⲆΔⲆᐃ: 148,
    Ⲇⵠⵠᐃⵠ: 149,
    ᐃⵠᐃⲆᐃ: 150,
    ΔᐃⵠⲆⵠ: 151,
    ⵠⵠΔΔⲆ: 152,
    ΔⲆΔⵠΔ: 153,
    ⲆⲆᐃΔⲆ: 154,
    ⵠΔᐃᐃⵠ: 155,
    ⲆⲆⲆᐃⲆ: 156,
    ΔᐃᐃΔΔ: 157,
    ⵠᐃᐃᐃⵠ: 158,
    ⵠΔⵠⵠᐃ: 159,
    ⵠΔᐃᐃⲆ: 160,
    ⵠᐃⲆᐃᐃ: 161,
    ᐃᐃΔⵠᐃ: 162,
    ᐃᐃΔⵠⲆ: 163,
    ᐃΔΔⵠⲆ: 164,
    ΔⲆᐃⲆⲆ: 165,
    ⵠⲆⵠⲆΔ: 166,
    ᐃⲆΔΔⵠ: 167,
    ⵠᐃᐃⲆᐃ: 168,
    ᐃᐃⲆᐃΔ: 169,
    ΔⵠⵠⲆⵠ: 170,
    ⵠⲆⲆΔΔ: 171,
    ⵠΔᐃᐃᐃ: 172,
    ΔΔⲆⲆⵠ: 173,
    ⵠᐃⵠΔⲆ: 174,
    ᐃΔᐃⵠⲆ: 175,
    ⵠⵠⵠⵠⲆ: 176
  };
  Qr = 0;
  var Xr = {
    ᐃⲆⵠⵠᐃ: 0,
    ᐃΔΔⵠⵠ: 1,
    ΔΔⵠᐃⲆ: 2,
    ΔΔΔᐃⵠ: 3,
    ΔⵠⵠΔⵠ: 4,
    ᐃΔⵠⵠΔ: 5,
    ᐃΔⵠⲆⵠ: 6,
    ⲆⵠⲆᐃᐃ: 7,
    ΔΔᐃⵠⲆ: 8,
    ᐃⲆⵠΔⲆ: 9,
    ᐃⵠᐃⵠⲆ: 10,
    ᐃⲆᐃΔΔ: 11,
    ⵠᐃᐃΔᐃ: 12,
    ⲆΔᐃⵠΔ: 13,
    Ⲇᐃᐃⵠᐃ: 14,
    ⵠⵠⲆΔᐃ: 15,
    ⵠΔΔⲆⲆ: 16,
    ⲆⲆⵠᐃⲆ: 17,
    ⲆΔᐃᐃΔ: 18,
    ⵠⵠᐃΔⲆ: 19,
    ⵠⵠⵠⵠⵠ: 20,
    ᐃⲆΔΔΔ: 21,
    ᐃΔⲆᐃΔ: 22,
    ⵠⵠΔᐃⵠ: 23,
    ΔᐃᐃⲆᐃ: 24,
    ᐃΔⵠΔᐃ: 25,
    ᐃΔⲆⲆⵠ: 26,
    ⲆⲆᐃⲆⵠ: 27,
    ᐃᐃΔΔᐃ: 28,
    ᐃᐃⵠΔ: 29,
    ⵠⵠΔⲆⲆ: 30,
    ΔⵠⲆᐃΔ: 31,
    ᐃⵠΔᐃΔ: 32,
    ⲆⵠΔᐃⵠ: 33,
    ⵠⵠᐃᐃᐃ: 34,
    ⲆⵠΔΔⵠ: 35,
    ⵠᐃⲆΔⲆ: 36,
    ⵠⲆᐃⵠΔ: 37,
    ᐃᐃⲆΔⵠ: 38,
    ΔⵠⲆΔⲆ: 39,
    ΔⲆⵠⵠⲆ: 40,
    ⲆⵠᐃⵠⲆ: 41,
    ᐃⲆᐃⲆᐃ: 42,
    ΔΔⲆⲆᐃ: 43,
    ⵠᐃΔᐃᐃ: 44,
    ΔΔΔⵠⲆ: 45,
    ΔᐃⵠΔⲆ: 46,
    ᐃᐃⲆⲆᐃ: 47,
    ᐃⵠΔΔⵠ: 48,
    Ⲇⵠᐃⵠⵠ: 49,
    ⲆΔⵠⵠⲆ: 50,
    ⵠΔⲆⲆⲆ: 51,
    ᐃΔᐃΔΔ: 52,
    ᐃΔⲆᐃⵠ: 53,
    ⵠᐃΔΔⵠ: 54,
    ⲆΔⵠᐃΔ: 55,
    ΔⲆΔᐃᐃ: 56,
    ⵠⵠⲆⲆⲆ: 57,
    ⲆⲆⵠⲆⲆ: 58,
    ⵠⲆⵠⵠᐃ: 59,
    ᐃΔΔΔᐃ: 60,
    ⵠⲆⲆΔⲆ: 61,
    ᐃⵠⵠⲆⵠ: 62,
    ᐃΔᐃᐃⵠ: 63,
    ᐃᐃΔΔΔ: 64,
    ΔΔⵠΔⵠ: 65,
    ⲆⵠΔⵠᐃ: 66,
    ⵠⵠⲆᐃⵠ: 67,
    Δᐃᐃᐃᐃ: 68,
    ᐃⲆⵠⵠΔ: 69,
    ⵠⲆΔⲆᐃ: 70,
    ᐃⵠⵠⲆΔ: 71,
    ⲆΔⵠΔⲆ: 72,
    ᐃΔΔᐃΔ: 73,
    ᐃⲆΔⲆᐃ: 74,
    Ⲇⵠⵠᐃⵠ: 75,
    ᐃⵠᐃⲆᐃ: 76,
    ΔᐃⵠⲆⵠ: 77,
    ⵠⵠΔΔⲆ: 78,
    ΔⲆΔⵠΔ: 79,
    ᐃⲆⲆΔⲆ: 80,
    ᐃⵠⵠⲆᐃ: 81,
    ⲆᐃⲆᐃΔ: 82,
    ⲆⲆᐃΔⲆ: 83,
    ⵠΔᐃᐃⵠ: 84,
    ⲆⲆⲆᐃⲆ: 85,
    ΔᐃᐃΔΔ: 86,
    ᐃⵠᐃΔΔ: 87,
    ᐃⵠΔⵠᐃ: 88,
    ΔⲆᐃⲆⲆ: 89,
    ΔΔⲆⲆⵠ: 90,
    ⵠⵠⵠⵠⲆ: 91,
    ⵠᐃⵠΔⲆ: 92,
    ᐃΔᐃⵠⲆ: 93,
    ᐃⲆΔΔⵠ: 94,
    ⵠᐃᐃⲆᐃ: 95,
    ᐃᐃⲆᐃΔ: 96,
    ΔⵠⵠⲆⵠ: 97,
    ⵠⲆⲆΔΔ: 98,
    ⵠΔᐃᐃᐃ: 99,
    ΔΔⲆⲆΔ: 100,
    ΔⵠⲆᐃᐃ: 101,
    ⲆⲆⵠⵠⵠ: 102,
    ⲆᐃᐃᐃⲆ: 103,
    ᐃᐃⵠⲆⵠ: 104,
    ⲆⵠᐃΔⵠ: 105,
    ⵠⵠⵠᐃⲆ: 106,
    ΔⲆⵠΔⲆ: 107,
    ΔΔΔΔ: 108,
    ⲆᐃⲆⲆ: 109,
    ⵠⵠⲆΔΔ: 110,
    Δⵠᐃᐃ: 111,
    ΔΔⲆΔ: 112,
    ΔᐃⲆΔⵠ: 113,
    ⵠᐃⲆⵠᐃ: 114,
    ⵠⲆⵠᐃⲆ: 115,
    ⵠᐃΔⵠΔ: 116,
    ⵠⲆΔΔΔ: 117,
    ⲆⲆΔᐃⲆ: 118,
    ⵠⲆΔⵠΔ: 119,
    ⲆᐃᐃⲆⵠ: 120,
    ᐃᐃᐃⵠ: 121,
    ᐃᐃᐃᐃᐃ: 122,
    ⵠⵠᐃⲆⵠ: 123,
    ⲆⵠⵠΔⲆ: 124,
    ⵠⲆⵠⲆⵠ: 125,
    ⲆᐃΔⲆΔ: 126,
    ᐃΔᐃΔⲆ: 127,
    ΔΔⵠⵠⲆ: 128,
    ⵠⵠⲆᐃⲆ: 129,
    ⲆⵠⲆⲆᐃ: 130,
    Ⲇⵠᐃⵠᐃ: 131,
    ᐃⲆΔᐃᐃ: 132,
    ᐃⲆⵠΔⵠ: 133,
    ΔᐃᐃⲆΔ: 134,
    ⵠⲆⲆⵠⵠ: 135,
    ΔⲆⲆⵠⵠ: 136,
    ᐃⵠΔⲆⵠ: 137,
    ⲆⵠΔᐃΔ: 138,
    ᐃᐃⵠⵠΔ: 139,
    ᐃᐃⲆⲆⲆ: 140,
    ⲆᐃⵠⲆΔ: 141,
    ᐃΔᐃⵠⵠ: 142,
    ⲆᐃⲆΔᐃ: 143,
    ΔΔⲆⲆⲆ: 144,
    ᐃⲆΔᐃΔ: 145,
    ⵠΔⲆΔΔ: 146,
    ᐃⵠᐃⲆⲆ: 147,
    ⲆᐃⵠⵠΔ: 148,
    ⲆⲆⵠᐃΔ: 149,
    ᐃⵠⵠᐃⵠ: 150,
    ΔΔⵠᐃⵠ: 151,
    ⲆⵠⲆΔᐃ: 152,
    ᐃⵠΔⲆΔ: 153,
    ᐃᐃⲆⵠⵠ: 154,
    ᐃΔᐃᐃᐃ: 155,
    ⲆⵠⲆⵠΔ: 156,
    ΔΔᐃΔⵠ: 157,
    ΔΔΔⲆⲆ: 158,
    ΔᐃΔⲆᐃ: 159,
    ⲆⵠⵠΔᐃ: 160,
    ⵠⲆᐃᐃΔ: 161,
    ⲆⲆⲆⵠΔ: 162,
    ΔΔⲆⵠⵠ: 163,
    ⲆⲆΔⵠᐃ: 164,
    ᐃⲆⵠᐃⵠ: 165,
    ΔⵠⲆᐃⲆ: 166,
    ⵠΔᐃⵠⲆ: 167,
    ⵠⵠΔⵠⵠ: 168,
    ΔⲆΔΔᐃ: 169,
    ⲆⲆᐃⵠⲆ: 170,
    ΔΔⵠⵠᐃ: 171,
    ⵠⲆⵠΔⲆ: 172,
    ⲆΔⲆΔⵠ: 173,
    ᐃΔᐃΔᐃ: 174,
    ΔΔΔΔⵠ: 175,
    ⲆΔᐃⲆΔ: 176,
    ΔⲆⲆⵠⲆ: 177,
    ⵠⲆⲆᐃⵠ: 178,
    ᐃⵠⵠⲆⲆ: 179,
    ⵠᐃᐃᐃⵠ: 180,
    ⵠΔⵠⵠᐃ: 181,
    ⵠΔᐃᐃⲆ: 182,
    ⵠᐃⲆᐃᐃ: 183,
    ᐃᐃΔⵠΔ: 184,
    ΔⵠᐃΔⲆ: 185,
    ⵠΔᐃΔⵠ: 186,
    ⲆᐃΔΔⵠ: 187,
    ⵠᐃΔΔΔ: 188,
    ᐃⵠΔⲆⲆ: 189,
    ⲆⲆⵠⲆⵠ: 190,
    ⲆⲆᐃᐃⵠ: 191,
    ᐃᐃᐃⲆΔ: 192,
    ⲆΔⲆⵠΔ: 193,
    ᐃᐃᐃᐃⲆ: 194,
    Δᐃⵠⵠⵠ: 195,
    Δⵠⵠⵠⵠ: 196,
    ⲆΔⵠΔΔ: 197,
    ᐃᐃΔⵠᐃ: 198,
    ΔΔⵠΔⲆ: 199,
    ⵠⵠΔⵠᐃ: 200,
    ⵠⵠⲆⵠΔ: 201,
    ⲆⵠΔⲆ: 202,
    ᐃΔᐃⲆⵠ: 203,
    ⵠⲆΔᐃΔ: 204,
    ΔᐃⵠⵠΔ: 205,
    ΔΔⵠᐃᐃ: 206,
    ᐃⵠⵠᐃⲆ: 207,
    ⲆᐃᐃⵠΔ: 208,
    ⲆΔⵠⲆⲆ: 209,
    ᐃⲆᐃⵠᐃ: 210,
    ⵠΔΔΔⲆ: 211,
    ΔᐃΔᐃⲆ: 212,
    ᐃᐃⵠⵠᐃ: 213,
    ⲆᐃᐃΔΔ: 214,
    ⲆᐃⲆΔⵠ: 215,
    ⵠⵠᐃⲆⲆ: 216,
    ⵠᐃᐃⵠⲆ: 217,
    ᐃᐃⵠᐃⵠ: 218,
    ⵠⲆᐃᐃⵠ: 219,
    ᐃᐃⵠᐃᐃ: 220,
    ΔⵠⵠᐃΔ: 221,
    ⵠⵠⵠΔⲆ: 222,
    ᐃᐃΔⵠⲆ: 223,
    ᐃΔΔⵠⲆ: 224,
    ΔⲆᐃᐃΔ: 225,
    ⵠⵠⲆⲆΔ: 226,
    ᐃⵠⵠᐃᐃ: 227,
    ᐃᐃⲆᐃᐃ: 228,
    ᐃΔⵠⵠⲆ: 229,
    ⵠⲆⵠⲆΔ: 230,
    ⵠⵠΔⵠⲆ: 231,
    ⵠΔⵠᐃⲆ: 232,
    ΔᐃΔⲆⲆ: 233,
    ᐃᐃΔᐃᐃ: 234,
    ᐃⵠⲆᐃΔⵠΔ: 235,
    ⲆΔΔᐃᐃΔΔ: 236,
    ⵠᐃΔⲆΔ: 237,
    ᐃⲆΔⵠᐃ: 238,
    ⲆᐃᐃⲆᐃ: 239,
    ⵠⵠᐃᐃΔ: 240
  };
  var Yr = {
    ᐃⵠⲆⵠΔ: 3,
    ᐃⲆΔΔᐃ: 2,
    ᐃᐃᐃⲆⲆ: 4,
    ⵠᐃⲆᐃΔ: 1,
    ᐃⲆᐃⲆⲆ: 5,
    ⲆΔⲆᐃᐃ: 0
  };
  var Zr = [];
  const $r = 100;
  Zr[109] = {
    name: "Wood",
    ᐃΔ: 316,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[108] = {
    name: "Stone",
    ᐃΔ: 315,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const _r = 12;
  const as = 15;
  const bs = 7;
  const cs = 5;
  Zr[111] = {
    name: "Gold",
    ᐃΔ: 297,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[112] = {
    name: "Diamond",
    ᐃΔ: 298,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[121] = {
    name: "Amethyst",
    ᐃΔ: 418,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ds = 15;
  const es = 4;
  const fs = 3;
  const gs = 15;
  Zr[2] = {
    name: "Rabbit fur",
    ᐃΔ: 368,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const hs = 16;
  const is = 14;
  Zr[174] = {
    name: "Wolf fur",
    ᐃΔ: 393,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const js = 10;
  Zr[237] = {
    name: "Boar fur",
    ᐃΔ: 1162,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[100] = {
    name: "Firefly",
    ᐃΔ: 1164,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ks = 20;
  const ls = Wa;
  const ms = 11;
  Zr[101] = {
    name: "Wood arrow",
    ᐃΔ: 1166,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const ns = 13;
  const os = 1;
  Zr[102] = {
    name: "Stone arrow",
    ᐃΔ: 1169,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[103] = {
    name: "Gold arrow",
    ᐃΔ: 1172,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[104] = {
    name: "Diamond arrow",
    ᐃΔ: 1175,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[105] = {
    name: "Amethyst arrow",
    ᐃΔ: 1178,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[106] = {
    name: "Reidite arrow",
    ᐃΔ: 1181,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[107] = {
    name: "Dragon arrow",
    ᐃΔ: 1184,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ps = 11;
  Zr[146] = {
    name: "Winter fur",
    ᐃΔ: 505,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[240] = {
    name: "Fur mammoth",
    ᐃΔ: 1233,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[161] = {
    name: "Web",
    ᐃΔ: 305,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const qs = 19;
  Zr[116] = {
    name: "Meat",
    ᐃΔ: 300,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[137] = {
    name: "Fish",
    ᐃΔ: 662,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[129] = {
    name: "Kraken skin",
    ᐃΔ: 624,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[139] = {
    name: "Piranha scales",
    ᐃΔ: 674,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[142] = {
    name: "Ice",
    ᐃΔ: 142,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const rs = 9;
  const ss = 5;
  Zr[126] = {
    name: "Sand",
    ᐃΔ: 609,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[140] = {
    name: "Dirt",
    ᐃΔ: 140,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[110] = {
    name: "Berrie",
    ᐃΔ: 277,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[131] = {
    name: "Flour",
    ᐃΔ: 629,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ts = 17;
  const us = 18;
  const vs = 0;
  Zr[134] = {
    name: "Flour",
    ᐃΔ: 639,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ws = 255;
  Zr[178] = {
    name: "Special fur peasant",
    ᐃΔ: 178,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[179] = {
    name: "Special fur hood",
    ᐃΔ: 179,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const xs = 10;
  Zr[189] = {
    name: "Pumpkin",
    ᐃΔ: 814,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const eh = 100;
  Zr[192] = {
    name: "Garlic",
    ᐃΔ: 840,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[194] = {
    name: "Thornbush",
    ᐃΔ: 850,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ih = 20;
  Zr[205] = {
    name: "Carrot",
    ᐃΔ: 955,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[207] = {
    name: "Tomato",
    ᐃΔ: 965,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[209] = {
    name: "Watermelon",
    ᐃΔ: 972,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[211] = {
    name: "Aloe Vera",
    ᐃΔ: 987,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const th = lj;
  const nh = 19;
  Zr[222] = {
    name: "Penguin Feather",
    ᐃΔ: 1035,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[231] = {
    name: "Hawk Feather",
    ᐃΔ: 1037,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const oh = 2;
  const ah = 7;
  const rh = 8;
  const sh = 6;
  const hh = 10;
  const lh = In;
  const gh = 255;
  Zr[232] = {
    name: "Vulture Feather",
    ᐃΔ: 1039,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const uh = 15;
  Zr[233] = {
    name: "Cactus",
    ᐃΔ: 1154,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[236] = {
    name: "Cactus",
    ᐃΔ: 1160,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const bh = 16;
  const dh = 17;
  Zr[235] = {
    name: "Pitchfork Part",
    ᐃΔ: 1158,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  function vh(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function ch(a) {
    return za.String.fromCharCode(a);
  }
  const mh = 1;
  const Ch = 12;
  const Th = 13;
  const fh = Wa;
  Zr[238] = {
    name: "Emerald Machine",
    ᐃΔ: 1187,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const zh = 14;
  Zr[234] = {
    name: "Emerald",
    ᐃΔ: 1156,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[41] = {
    name: "Christmas Hat",
    ᐃΔ: 880,
    ᐃΔⵠᐃ: 0
  };
  const yh = 100;
  const wh = Qe;
  const Ph = 16;
  Zr[42] = {
    name: "Elf Hat",
    ᐃΔ: 882,
    ᐃΔⵠᐃ: 0
  };
  Zr[201] = {
    name: "Garland",
    ᐃΔ: 870,
    ᐃΔⵠᐃ: 0,
    ΔΔⵠⵠ: 0
  };
  Zr[200] = {
    name: "Candy",
    ᐃΔ: 200,
    ᐃΔⵠᐃ: 0
  };
  const kh = Go;
  Zr[199] = {
    name: "Sugar Cane",
    ᐃΔ: 865,
    ᐃΔⵠᐃ: 0
  };
  const Ah = 5;
  const xh = 256;
  Zr[9] = {
    name: "Pirate Sword",
    ᐃΔ: 860,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[196] = {
    name: "Crab Stick",
    ᐃΔ: 196,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Jh = 13;
  Zr[202] = {
    name: "Reidite",
    ᐃΔ: 938,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[203] = {
    name: "Flame",
    ᐃΔ: 936,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[113] = {
    name: "Campfire",
    ᐃΔ: 302,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[198] = {
    name: "Bed",
    ᐃΔ: 909,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  function Mh(a) {
    return za.String.fromCharCode(a);
  }
  const Bh = 4;
  const Dh = 18;
  Zr[114] = {
    name: "Workbench",
    ᐃΔ: 262,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[0] = {
    name: "Stone sword",
    ᐃΔ: 254,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[1] = {
    name: "Stone pick",
    ᐃΔ: 256,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[115] = {
    name: "Berries bush",
    ᐃΔ: 284,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Eh = Qe;
  Zr[3] = {
    name: "Gold pick",
    ᐃΔ: 295,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ih = 13;
  const Sh = 17;
  Zr[4] = {
    name: "Diamond pick",
    ᐃΔ: 257,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[57] = {
    name: "Wood sword",
    ᐃΔ: 830,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Qh = 19;
  Zr[5] = {
    name: "Gold sword",
    ᐃΔ: 290,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const _h = Vq;
  Zr[6] = {
    name: "Diamond sword",
    ᐃΔ: 291,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Fh = Qi;
  const Rh = 2;
  Zr[8] = {
    name: "Wood pick",
    ᐃΔ: 314,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const jh = 15;
  Zr[162] = {
    name: "Wood wall",
    ᐃΔ: 318,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Lh = 256;
  const Gh = 3;
  Zr[160] = {
    name: "Wood spike",
    ᐃΔ: 320,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Wh = 11;
  Zr[117] = {
    name: "Cooked meat",
    ᐃΔ: 325,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Oh = 6;
  Zr[118] = {
    name: "Big campfire",
    ᐃΔ: 327,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[195] = {
    name: "Bandage",
    ᐃΔ: 304,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[163] = {
    name: "Stone wall",
    ᐃΔ: 263,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Nh = 9;
  Zr[164] = {
    name: "Gold wall",
    ᐃΔ: 265,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[165] = {
    name: "Diamond wall",
    ᐃΔ: 332,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const qh = 20;
  Zr[166] = {
    name: "Wood door",
    ᐃΔ: 268,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Hh = 10;
  Zr[167] = {
    name: "Chest",
    ᐃΔ: 338,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[168] = {
    name: "Stone spike",
    ᐃΔ: 360,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[169] = {
    name: "Gold spike",
    ᐃΔ: 363,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Uh = 11;
  Zr[170] = {
    name: "Diamond spike",
    ᐃΔ: 365,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[171] = {
    name: "Stone door",
    ᐃΔ: 371,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[172] = {
    name: "Gold door",
    ᐃΔ: 374,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[173] = {
    name: "Diamond door",
    ᐃΔ: 377,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Yh = p;
  Zr[10] = {
    name: "Chapka",
    ᐃΔ: 370,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[11] = {
    name: "Big Chapka",
    ᐃΔ: 380,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[12] = {
    name: "Wood spear",
    ᐃΔ: 402,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[13] = {
    name: "Stone spear",
    ᐃΔ: 396,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Kh = 17;
  Zr[14] = {
    name: "Gold spear",
    ᐃΔ: 399,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Vh = 100;
  const Xh = 7;
  Zr[15] = {
    name: "Diamond spear",
    ᐃΔ: 405,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Zh = 15;
  Zr[16] = {
    name: "Dragon spear",
    ᐃΔ: 876,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const $h = 14;
  const el = 15;
  Zr[17] = {
    name: "Dragon spear",
    ᐃΔ: 879,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[18] = {
    name: "Crab spear",
    ᐃΔ: 900,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[197] = {
    name: "Crab loot",
    ᐃΔ: 197,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const il = th;
  Zr[119] = {
    name: "Furnace",
    ᐃΔ: 409,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const tl = 8;
  Zr[23] = {
    name: "Explorer hat",
    ᐃΔ: 421,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[24] = {
    name: "Pirate hat",
    ᐃΔ: 424,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const nl = kh;
  const ol = 1;
  const al = 2;
  const rl = lh;
  const sl = 15;
  const hl = 20;
  const ll = 17;
  Zr[87] = {
    name: "Flower hat",
    ᐃΔ: 1228,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const gl = 19;
  const ul = 0;
  Zr[88] = {
    name: "Fur hat",
    ᐃΔ: 1231,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const bl = 16;
  const dl = 12;
  const vl = 4;
  Zr[58] = {
    name: "Wood helmet",
    ᐃΔ: 827,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[25] = {
    name: "Stone helmet",
    ᐃΔ: 430,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const cl = 3;
  Zr[26] = {
    name: "Gold helmet",
    ᐃΔ: 433,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[27] = {
    name: "Diamond helmet",
    ᐃΔ: 436,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[28] = {
    name: "Book",
    ᐃΔ: 439,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[120] = {
    name: "Paper",
    ᐃΔ: 442,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[29] = {
    name: "Bag",
    ᐃΔ: 367,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const ml = 0;
  const pl = 5;
  Zr[30] = {
    name: "Amethyst sword",
    ᐃΔ: 456,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Cl = Qi;
  const Tl = 11;
  Zr[31] = {
    name: "Amethyst pick",
    ᐃΔ: 460,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const fl = 6;
  const zl = 4;
  const yl = 18;
  Zr[33] = {
    name: "Amethyst spear",
    ᐃΔ: 473,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const wl = 13;
  const Pl = 5;
  Zr[35] = {
    name: "Stone hammer",
    ᐃΔ: 478,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const kl = 7;
  Zr[36] = {
    name: "Gold hammer",
    ᐃΔ: 481,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[37] = {
    name: "Diamond hammer",
    ᐃΔ: 484,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[38] = {
    name: "Amethyst hammer",
    ᐃΔ: 487,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Al = 255;
  Zr[39] = {
    name: "Reidite hammer",
    ᐃΔ: 490,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[122] = {
    name: "Amethyst wall",
    ᐃΔ: 493,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const xl = 17;
  const Jl = 1;
  Zr[123] = {
    name: "Amethyst spike",
    ᐃΔ: 496,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[124] = {
    name: "Amethyst door",
    ᐃΔ: 498,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ml = 20;
  Zr[40] = {
    name: "Cap & scarf",
    ᐃΔ: 503,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[147] = {
    name: "Blue cord",
    ᐃΔ: 515,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[148] = {
    name: "Lock",
    ᐃΔ: 519,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Bl = 17;
  Zr[151] = {
    name: "Resurrection",
    ᐃΔ: 530,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Dl = 2;
  Zr[158] = {
    name: "Lockpick",
    ᐃΔ: 533,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[159] = {
    name: "Totem",
    ᐃΔ: 555,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const El = 5;
  Zr[43] = {
    name: "Amethyst helmet",
    ᐃΔ: 542,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Il = 1;
  Zr[45] = {
    name: "Super hammer",
    ᐃΔ: 551,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[125] = {
    name: "Bridge",
    ᐃΔ: 604,
    ΔΔⵠⵠ: 1,
    ᐃΔⵠᐃ: 1
  };
  const Sl = 256;
  const Ql = 4;
  const _l = 16;
  Zr[221] = {
    name: "Wood Tower",
    ᐃΔ: 1235,
    ΔΔⵠⵠ: 1,
    ᐃΔⵠᐃ: 1
  };
  const Fl = Aa;
  const Rl = 10;
  Zr[127] = {
    name: "Bottle full",
    ᐃΔ: 715,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const jl = 255;
  const Ll = 17;
  Zr[128] = {
    name: "Bottle empty",
    ᐃΔ: 611,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Gl = 5;
  const Wl = 13;
  const Ol = Qi;
  const Nl = 100;
  Zr[46] = {
    name: "Stone shovel",
    ᐃΔ: 618,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[130] = {
    name: "Watering can",
    ᐃΔ: 627,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[132] = {
    name: "Wheat",
    ᐃΔ: 632,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[133] = {
    name: "Cookie",
    ᐃΔ: 635,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[135] = {
    name: "Windmill",
    ᐃΔ: 643,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const ql = 15;
  const Hl = 9;
  Zr[47] = {
    name: "Super diving suit",
    ᐃΔ: 647,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ul = 19;
  Zr[48] = {
    name: "Diving mask",
    ᐃΔ: 650,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[49] = {
    name: "Watering can full",
    ᐃΔ: 654,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[136] = {
    name: "Cake",
    ᐃΔ: 660,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Yl = 15;
  const Kl = 7;
  const Vl = 13;
  const Xl = 1;
  Zr[138] = {
    name: "Foodfish cooked",
    ᐃΔ: 666,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Zl = 20;
  Zr[141] = {
    name: "Plot",
    ᐃΔ: 684,
    ΔΔⵠⵠ: 1,
    ᐃΔⵠᐃ: 1
  };
  const $l = 5;
  Zr[143] = {
    name: "Bread",
    ᐃΔ: 690,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[Xr.ⲆⵠⵠᐃⵠⵠⲆ] = {
    name: "Bottle full (with ice)",
    ᐃΔ: Sr.ΔⵠΔΔⵠᐃⲆᐃⲆ,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[Xr.ΔⵠⵠΔᐃᐃΔ] = {
    name: "Bottle full (with well)",
    ᐃΔ: Sr.ΔⵠⵠⵠᐃΔⵠΔᐃ,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[50] = {
    name: "Gold shovel",
    ᐃΔ: 700,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[51] = {
    name: "Diamond shovel",
    ᐃΔ: 704,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[52] = {
    name: "Amethyst shovel",
    ᐃΔ: 706,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const eg = 12;
  const ig = 10;
  Zr[55] = {
    name: "Spanner",
    ᐃΔ: 711,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const tg = 9;
  Zr[56] = {
    name: "Machete",
    ᐃΔ: 714,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[144] = {
    name: "Bread oven",
    ᐃΔ: 718,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const ng = 3;
  const og = 8;
  Zr[145] = {
    name: "Sandwich",
    ᐃΔ: 730,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[59] = {
    name: "Dragon helmet",
    ᐃΔ: 734,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ag = 7;
  const rg = 18;
  const sg = 100;
  const hg = String.fromCharCode;
  const lg = hg(101);
  const gg = hg(118);
  const ug = hg(97);
  const bg = hg(108);
  Zr[60] = {
    name: "Dragon helmet",
    ᐃΔ: 737,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[90] = {
    name: "Witch",
    ᐃΔ: 740,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[91] = {
    name: "Nimbus",
    ᐃΔ: 743,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[92] = {
    name: "Wand1",
    ᐃΔ: 746,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[93] = {
    name: "Wand2",
    ᐃΔ: 749,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[62] = {
    name: "Dragon sword",
    ᐃΔ: 564,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const dg = 100;
  Zr[63] = {
    name: "Dragon sword",
    ᐃΔ: 567,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const cg = 11;
  Zr[71] = {
    name: "Wood shield",
    ᐃΔ: 1238,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[72] = {
    name: "Stone shield",
    ᐃΔ: 1241,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const mg = 14;
  const pg = 12;
  Zr[73] = {
    name: "Gold shield",
    ᐃΔ: 1244,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[74] = {
    name: "Diamond shield",
    ᐃΔ: 1247,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[75] = {
    name: "Amethyst shield",
    ᐃΔ: 1250,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Cg = 4;
  Zr[76] = {
    name: "Reidite shield",
    ᐃΔ: 1253,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[94] = {
    name: "Wood axe",
    ᐃΔ: 1256,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[95] = {
    name: "Stone axe",
    ᐃΔ: 1259,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Tg = 2;
  const fg = 256;
  Zr[96] = {
    name: "Gold axe",
    ᐃΔ: 1262,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[97] = {
    name: "Diamond axe",
    ᐃΔ: 1265,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[98] = {
    name: "Amethyst axe",
    ᐃΔ: 1268,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[99] = {
    name: "Reidite axe",
    ᐃΔ: 1271,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const zg = 6;
  const yg = 7;
  Zr[64] = {
    name: "Wood bow",
    ᐃΔ: 570,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[65] = {
    name: "Stone bow",
    ᐃΔ: 573,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const wg = 16;
  const Pg = 255;
  const kg = Yh;
  Zr[66] = {
    name: "Gold bow",
    ᐃΔ: 576,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[67] = {
    name: "Diamond bow",
    ᐃΔ: 579,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ag = 5;
  const xg = 20;
  const Jg = 15;
  const Mg = 12;
  const Bg = Ak;
  Zr[68] = {
    name: "Amethyst bow",
    ᐃΔ: 582,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Dg = 11;
  const Eg = 0;
  const Ig = 1;
  const Sg = 14;
  const Qg = String.fromCharCode;
  const _g = Qg(101);
  const Fg = Qg(118);
  const Rg = Qg(97);
  const jg = Qg(108);
  Zr[69] = {
    name: "Reidite bow",
    ᐃΔ: 585,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Lg = 5;
  Zr[70] = {
    name: "Dragon bow",
    ᐃΔ: 588,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[77] = {
    name: "Crown of life",
    ᐃΔ: 758,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[175] = {
    name: "Gem of life",
    ᐃΔ: 176,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Wg = 0;
  const Og = {};
  Og.get = function (a, b) {
    if (b !== "ⲆΔⵠΔ") {
      const a = za.setInterval;
      const b = a;
      const c = function () {
        a(c, 1754);
        b(c, 6752);
      };
      c();
    }
    return za.Reflect.get(...arguments);
  };
  Zr[185] = {
    name: "Orb of the dragon",
    ᐃΔ: 252,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[187] = {
    name: "Orb of the dragon",
    ᐃΔ: 253,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[184] = {
    name: "Cube of the dragon",
    ᐃΔ: 751,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Ng = 255;
  Zr[186] = {
    name: "Cube of the dragon",
    ᐃΔ: 753,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const qg = 19;
  Zr[78] = {
    name: "Crown of luck",
    ᐃΔ: 762,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Hg = 17;
  Zr[176] = {
    name: "Gem of luck",
    ᐃΔ: 177,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[79] = {
    name: "Crown of the angel",
    ᐃΔ: 770,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[177] = {
    name: "Gem of the angel",
    ᐃΔ: 175,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Ug = 8;
  const Yg = 4;
  Zr[149] = {
    name: "Dragon heart",
    ᐃΔ: 521,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Kg = 13;
  Zr[150] = {
    name: "Lava heart",
    ᐃΔ: 523,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[83] = {
    name: "Hood",
    ᐃΔ: 768,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[84] = {
    name: "Peasant",
    ᐃΔ: 772,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Vg = 9;
  Zr[86] = {
    name: "Winter peasant",
    ᐃΔ: 777,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[85] = {
    name: "Winter hood",
    ᐃΔ: 780,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Xg = Aa;
  Zr[180] = {
    name: "Bucket full",
    ᐃΔ: 784,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Zg = 5;
  Zr[181] = {
    name: "Bucket empty",
    ᐃΔ: 785,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[182] = {
    name: "Well",
    ᐃΔ: 791,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const $g = 5;
  Zr[183] = {
    name: "Sign",
    ᐃΔ: 799,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[188] = {
    name: "Pumpkin Seed",
    ᐃΔ: 809,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[191] = {
    name: "Garlic Seed",
    ᐃΔ: 835,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ys = 12;
  Zr[193] = {
    name: "Thorbushes Seed",
    ᐃΔ: 846,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const As = 1;
  Zr[190] = {
    name: "Roof",
    ᐃΔ: 843,
    ΔΔⵠⵠ: 1,
    ᐃΔⵠᐃ: 1
  };
  Zr[61] = {
    name: "Crab Crown",
    ᐃΔ: 912,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Bs = 0;
  Zr[204] = {
    name: "Carrot Seed",
    ᐃΔ: 950,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Cs = 19;
  Zr[206] = {
    name: "Tomato Seed",
    ᐃΔ: 960,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Ds = 255;
  const Es = Ho;
  const Fs = 16;
  const Gs = 256;
  Zr[208] = {
    name: "Watermelon Seed",
    ᐃΔ: 967,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[210] = {
    name: "Aloe Vera Seed",
    ᐃΔ: 982,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const Hs = 10;
  const Is = 0;
  Zr[80] = {
    name: "Cap",
    ᐃΔ: 1138,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Js = 18;
  const Ks = 16;
  Zr[81] = {
    name: "Turban",
    ᐃΔ: 1141,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ls = 100;
  Zr[82] = {
    name: "Pilot Helmet",
    ᐃΔ: 427,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ms = fh;
  const Ns = {};
  Ns.get = function (a, b) {
    if (b !== "ΔⵠⲆΔⲆᐃΔⲆⲆ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          za.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return za.Reflect.get(...arguments);
  };
  Zr[152] = {
    name: "Emerald Machine",
    ᐃΔ: 1196,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[153] = {
    name: "Emerald Machine",
    ᐃΔ: 1200,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[154] = {
    name: "Emerald Machine",
    ᐃΔ: 1204,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Os = 14;
  Zr[155] = {
    name: "Emerald Machine",
    ᐃΔ: 1208,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ps = 17;
  Zr[156] = {
    name: "Emerald Machine",
    ᐃΔ: 1212,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Qs = 3;
  Zr[157] = {
    name: "Emerald Machine",
    ᐃΔ: 1216,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[53] = {
    name: "Pitchfork",
    ᐃΔ: 977,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[212] = {
    name: "Wood Door Spike",
    ᐃΔ: 990,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Rs = 4;
  const Ss = 13;
  Zr[213] = {
    name: "Stone Door Spike",
    ᐃΔ: 993,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ts = 10;
  const Us = 1;
  const Vs = 6;
  Zr[214] = {
    name: "Gold Door Spike",
    ᐃΔ: 996,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Ws = 20;
  const Xs = 11;
  const Ys = 255;
  Zr[215] = {
    name: "Diamond Door Spike",
    ᐃΔ: 999,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[216] = {
    name: "Amethyst Door Spike",
    ᐃΔ: 1002,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[20] = {
    name: "Diamond Fire Protection ",
    ᐃΔ: 922,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const Zs = 14;
  const $s = 2;
  Zr[21] = {
    name: "Amethyst Fire Protection ",
    ᐃΔ: 926,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[22] = {
    name: "Amethyst Fire Protection ",
    ᐃΔ: 930,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const _s = 7;
  const at = Es;
  Zr[19] = {
    name: "Reidite Sword",
    ᐃΔ: 933,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[34] = {
    name: "Reidite Spear",
    ᐃΔ: 944,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[44] = {
    name: "Reidite Helmet",
    ᐃΔ: 947,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[220] = {
    name: "Reidite Door Spike",
    ᐃΔ: 1005,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[218] = {
    name: "Reidite Door",
    ᐃΔ: 1008,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[219] = {
    name: "Reidite Spike",
    ᐃΔ: 1011,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const bt = 2;
  Zr[217] = {
    name: "Reidite Wall",
    ᐃΔ: 1014,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[32] = {
    name: "Reidite pick",
    ᐃΔ: 1019,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[223] = {
    name: "Boat",
    ᐃΔ: 1027,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const ct = 8;
  Zr[224] = {
    name: "Sled",
    ᐃΔ: 1030,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  const dt = 12;
  Zr[89] = {
    name: "Saddle",
    ᐃΔ: 1048,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 1
  };
  Zr[225] = {
    name: "Mount Boar",
    ᐃΔ: 1051,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[226] = {
    name: "Mount King Crab",
    ᐃΔ: 1191,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const et = 0;
  const ft = 100;
  const gt = 5;
  Zr[227] = {
    name: "Mount Baby Dragon",
    ᐃΔ: 1082,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  Zr[228] = {
    name: "Mount Baby Lava",
    ᐃΔ: 1097,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const ht = 10;
  const it = 9;
  Zr[229] = {
    name: "Mount Hawk",
    ᐃΔ: 1112,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const jt = 18;
  Zr[230] = {
    name: "Plane",
    ᐃΔ: 1116,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const kt = 1;
  const lt = 16;
  Zr[54] = {
    name: "Pitchfork 2",
    ᐃΔ: 980,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  const mt = 7;
  Zr[239] = {
    name: "Baby Mammoth",
    ᐃΔ: 1226,
    ΔΔⵠⵠ: 0,
    ᐃΔⵠᐃ: 0
  };
  var nt = undefined;
  var ot = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 0,
    ⵠⵠⵠᐃ: 113,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 1,
    ⵠⵠⵠᐃ: 118,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 2,
    ⵠⵠⵠᐃ: 119,
    time: 1 / 20,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 3,
    ⵠⵠⵠᐃ: 114,
    time: 1 / 6,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 4,
    ⵠⵠⵠᐃ: 8,
    time: 0.3333333333333333,
    ᐃᐃⵠ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 5,
    ⵠⵠⵠᐃ: 1,
    time: 1 / 8,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 6,
    ⵠⵠⵠᐃ: 3,
    time: 1 / 12,
    ᐃᐃⵠ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 7,
    ⵠⵠⵠᐃ: 4,
    time: 1 / 20,
    ᐃᐃⵠ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 8,
    ⵠⵠⵠᐃ: 31,
    time: 1 / 60,
    ᐃᐃⵠ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 9,
    ⵠⵠⵠᐃ: 32,
    time: 1 / 90,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 10,
    ⵠⵠⵠᐃ: 35,
    time: 1 / 10,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 11,
    ⵠⵠⵠᐃ: 36,
    time: 0.06666666666666667,
    ᐃᐃⵠ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 12,
    ⵠⵠⵠᐃ: 37,
    time: 1 / 20,
    ᐃᐃⵠ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 13,
    ⵠⵠⵠᐃ: 38,
    time: 1 / 60,
    ᐃᐃⵠ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 14,
    ⵠⵠⵠᐃ: 39,
    time: 1 / 90,
    ᐃᐃⵠ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 15,
    ⵠⵠⵠᐃ: 45,
    time: 1 / 120,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 16,
    ⵠⵠⵠᐃ: 46,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 17,
    ⵠⵠⵠᐃ: 50,
    time: 0.1,
    ᐃᐃⵠ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 18,
    ⵠⵠⵠᐃ: 51,
    time: 0.05,
    ᐃᐃⵠ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 19,
    ⵠⵠⵠᐃ: 52,
    time: 0.025,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 20,
    ⵠⵠⵠᐃ: 130,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 1,
    e: 0,
    id: 21,
    ⵠⵠⵠᐃ: 49,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 22,
    ⵠⵠⵠᐃ: 53,
    time: 1 / 10,
    ᐃᐃⵠ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 23,
    ⵠⵠⵠᐃ: 54,
    time: 1 / 60,
    ᐃᐃⵠ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 24,
    ⵠⵠⵠᐃ: 28,
    time: 1 / 15,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 25,
    ⵠⵠⵠᐃ: 12,
    time: 1 / 5,
    ᐃᐃⵠ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 26,
    ⵠⵠⵠᐃ: 13,
    time: 1 / 10,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 27,
    ⵠⵠⵠᐃ: 14,
    ᐃᐃⵠ: 1,
    time: 1 / 20
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 28,
    ⵠⵠⵠᐃ: 15,
    time: 1 / 30,
    ᐃᐃⵠ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 29,
    ⵠⵠⵠᐃ: 33,
    time: 1 / 60,
    ᐃᐃⵠ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 30,
    ⵠⵠⵠᐃ: 34,
    time: 1 / 90,
    ᐃᐃⵠ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 31,
    ⵠⵠⵠᐃ: 16,
    time: 0.008333333333333333,
    ᐃᐃⵠ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 32,
    ⵠⵠⵠᐃ: 17,
    time: 0.005,
    ᐃᐃⵠ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 33,
    ⵠⵠⵠᐃ: 18,
    time: 1 / 30,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 34,
    ⵠⵠⵠᐃ: 57,
    time: 1 / 5,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 35,
    ⵠⵠⵠᐃ: 0,
    time: 0.1,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 36,
    ⵠⵠⵠᐃ: 5,
    time: 1 / 20,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 37,
    ⵠⵠⵠᐃ: 6,
    time: 1 / 30,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 38,
    ⵠⵠⵠᐃ: 30,
    time: 1 / 60,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 39,
    ⵠⵠⵠᐃ: 19,
    time: 1 / 90,
    ᐃᐃⵠ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 40,
    ⵠⵠⵠᐃ: 115,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 41,
    ⵠⵠⵠᐃ: 132,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 42,
    ⵠⵠⵠᐃ: 188,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 43,
    ⵠⵠⵠᐃ: 191,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 44,
    ⵠⵠⵠᐃ: 193,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 45,
    ⵠⵠⵠᐃ: 204,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 46,
    ⵠⵠⵠᐃ: 206,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 47,
    ⵠⵠⵠᐃ: 208,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 48,
    ⵠⵠⵠᐃ: 210,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 49,
    ⵠⵠⵠᐃ: 117,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 50,
    ⵠⵠⵠᐃ: 138,
    time: 0.3333333333333333,
    ᐃᐃⵠ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 51,
    ⵠⵠⵠᐃ: 143,
    time: 1 / 3,
    ᐃᐃⵠ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 52,
    ⵠⵠⵠᐃ: 133,
    time: 0.3333333333333333,
    ᐃᐃⵠ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 53,
    ⵠⵠⵠᐃ: 136,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 54,
    ⵠⵠⵠᐃ: 195,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 55,
    ⵠⵠⵠᐃ: 162,
    time: 0.2,
    ᐃᐃⵠ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 56,
    ⵠⵠⵠᐃ: 163,
    time: 1 / 5,
    ᐃᐃⵠ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 57,
    ⵠⵠⵠᐃ: 164,
    time: 0.2,
    ᐃᐃⵠ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 58,
    ⵠⵠⵠᐃ: 165,
    time: 1 / 5,
    ᐃᐃⵠ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 59,
    ⵠⵠⵠᐃ: 122,
    time: 1 / 5,
    ᐃᐃⵠ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 60,
    ⵠⵠⵠᐃ: 217,
    time: 1 / 5,
    ᐃᐃⵠ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 61,
    ⵠⵠⵠᐃ: 166,
    time: 1 / 8,
    ᐃᐃⵠ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 62,
    ⵠⵠⵠᐃ: 171,
    time: 1 / 8,
    ᐃᐃⵠ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 63,
    ⵠⵠⵠᐃ: 172,
    time: 1 / 8,
    ᐃᐃⵠ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 64,
    ⵠⵠⵠᐃ: 173,
    time: 1 / 8,
    ᐃᐃⵠ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 65,
    ⵠⵠⵠᐃ: 124,
    time: 0.125,
    ᐃᐃⵠ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 66,
    ⵠⵠⵠᐃ: 218,
    time: 0.125,
    ᐃᐃⵠ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 67,
    ⵠⵠⵠᐃ: 160,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 68,
    ⵠⵠⵠᐃ: 168,
    time: 0.05,
    ᐃᐃⵠ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 69,
    ⵠⵠⵠᐃ: 169,
    time: 0.05,
    ᐃᐃⵠ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 70,
    ⵠⵠⵠᐃ: 170,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 71,
    ⵠⵠⵠᐃ: 123,
    time: 0.05,
    ᐃᐃⵠ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 72,
    ⵠⵠⵠᐃ: 219,
    time: 0.05,
    ᐃᐃⵠ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 73,
    ⵠⵠⵠᐃ: 212,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 74,
    ⵠⵠⵠᐃ: 213,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 75,
    ⵠⵠⵠᐃ: 214,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 76,
    ⵠⵠⵠᐃ: 215,
    time: 0.05,
    ᐃᐃⵠ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 77,
    ⵠⵠⵠᐃ: 216,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 78,
    ⵠⵠⵠᐃ: 220,
    time: 0.05,
    ᐃᐃⵠ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 79,
    ⵠⵠⵠᐃ: 167,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 80,
    ⵠⵠⵠᐃ: 23,
    time: 1 / 5,
    ᐃᐃⵠ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 81,
    ⵠⵠⵠᐃ: 24,
    time: 0.03333333333333333,
    ᐃᐃⵠ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 82,
    ⵠⵠⵠᐃ: 82,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 83,
    ⵠⵠⵠᐃ: 10,
    time: 1 / 5,
    ᐃᐃⵠ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 84,
    ⵠⵠⵠᐃ: 11,
    time: 0.08333333333333333,
    ᐃᐃⵠ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 85,
    ⵠⵠⵠᐃ: 40,
    time: 1 / 30,
    ᐃᐃⵠ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 86,
    ⵠⵠⵠᐃ: 88,
    time: 1 / 50,
    ᐃᐃⵠ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 87,
    ⵠⵠⵠᐃ: 58,
    time: 1 / 5,
    ᐃᐃⵠ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 88,
    ⵠⵠⵠᐃ: 25,
    time: 1 / 10,
    ᐃᐃⵠ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 89,
    ⵠⵠⵠᐃ: 26,
    time: 1 / 20,
    ᐃᐃⵠ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 90,
    ⵠⵠⵠᐃ: 27,
    time: 1 / 30,
    ᐃᐃⵠ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 91,
    ⵠⵠⵠᐃ: 43,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 92,
    ⵠⵠⵠᐃ: 44,
    time: 1 / 90,
    ᐃᐃⵠ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 93,
    ⵠⵠⵠᐃ: 48,
    time: 1 / 20,
    ᐃᐃⵠ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 94,
    ⵠⵠⵠᐃ: 47,
    time: 1 / 90,
    ᐃᐃⵠ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 95,
    ⵠⵠⵠᐃ: 20,
    time: 1 / 20,
    ᐃᐃⵠ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 96,
    ⵠⵠⵠᐃ: 21,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 97,
    ⵠⵠⵠᐃ: 22,
    time: 1 / 90,
    ᐃᐃⵠ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 98,
    ⵠⵠⵠᐃ: 80,
    time: 1 / 15,
    ᐃᐃⵠ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 99,
    ⵠⵠⵠᐃ: 81,
    time: 1 / 150,
    ᐃᐃⵠ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 100,
    ⵠⵠⵠᐃ: 29,
    time: 0.06666666666666667,
    ᐃᐃⵠ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 101,
    ⵠⵠⵠᐃ: 120,
    time: 1 / 3,
    ᐃᐃⵠ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 102,
    ⵠⵠⵠᐃ: 147,
    time: 0.3333333333333333,
    ᐃᐃⵠ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 103,
    ⵠⵠⵠᐃ: 148,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 104,
    ⵠⵠⵠᐃ: 158,
    time: 1 / 60,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 105,
    ⵠⵠⵠᐃ: 159,
    time: 1 / 10,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 106,
    ⵠⵠⵠᐃ: 125,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 107,
    ⵠⵠⵠᐃ: 190,
    time: 0.2,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 108,
    ⵠⵠⵠᐃ: 221,
    time: 0.06666666666666667,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 109,
    ⵠⵠⵠᐃ: 141,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 110,
    ⵠⵠⵠᐃ: 128,
    time: 0.2,
    ᐃᐃⵠ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 1,
    e: 0,
    id: 111,
    ⵠⵠⵠᐃ: 127,
    time: 0.2,
    ᐃᐃⵠ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 112,
    ⵠⵠⵠᐃ: 127,
    time: 1 / 10,
    ᐃᐃⵠ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 1,
    id: 113,
    ⵠⵠⵠᐃ: 127,
    time: 1 / 3,
    ᐃᐃⵠ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 114,
    ⵠⵠⵠᐃ: 135,
    time: 1 / 10,
    ᐃᐃⵠ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 115,
    ⵠⵠⵠᐃ: 151,
    time: 1 / 20,
    ᐃᐃⵠ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 116,
    ⵠⵠⵠᐃ: 152,
    time: 0.005,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 117,
    ⵠⵠⵠᐃ: 153,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 118,
    ⵠⵠⵠᐃ: 154,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 119,
    ⵠⵠⵠᐃ: 155,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 120,
    ⵠⵠⵠᐃ: 156,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 121,
    ⵠⵠⵠᐃ: 157,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 122,
    ⵠⵠⵠᐃ: 55,
    time: 1 / 10,
    ᐃᐃⵠ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 123,
    ⵠⵠⵠᐃ: 56,
    time: 1 / 10,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 124,
    ⵠⵠⵠᐃ: 144,
    time: 0.1,
    ᐃᐃⵠ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 125,
    ⵠⵠⵠᐃ: 145,
    time: 0.3333333333333333,
    ᐃᐃⵠ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 126,
    ⵠⵠⵠᐃ: 59,
    time: 1 / 120,
    ᐃᐃⵠ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 127,
    ⵠⵠⵠᐃ: 60,
    time: 0.005555555555555556,
    ᐃᐃⵠ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 128,
    ⵠⵠⵠᐃ: 61,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 129,
    ⵠⵠⵠᐃ: 62,
    time: 1 / 120,
    ᐃᐃⵠ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 130,
    ⵠⵠⵠᐃ: 63,
    time: 1 / 180,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 131,
    ⵠⵠⵠᐃ: 64,
    time: 0.05,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 132,
    ⵠⵠⵠᐃ: 101,
    time: 1 / 5,
    ᐃᐃⵠ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 133,
    ⵠⵠⵠᐃ: 65,
    time: 1 / 25,
    ᐃᐃⵠ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 134,
    ⵠⵠⵠᐃ: 102,
    time: 1 / 5,
    ᐃᐃⵠ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 135,
    ⵠⵠⵠᐃ: 66,
    time: 1 / 30,
    ᐃᐃⵠ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 136,
    ⵠⵠⵠᐃ: 103,
    time: 1 / 10,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 137,
    ⵠⵠⵠᐃ: 67,
    time: 1 / 35,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 138,
    ⵠⵠⵠᐃ: 104,
    time: 1 / 10,
    ᐃᐃⵠ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 139,
    ⵠⵠⵠᐃ: 68,
    time: 1 / 40,
    ᐃᐃⵠ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 140,
    ⵠⵠⵠᐃ: 105,
    time: 1 / 15,
    ᐃᐃⵠ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 141,
    ⵠⵠⵠᐃ: 69,
    time: 0.022222222222222223,
    ᐃᐃⵠ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 142,
    ⵠⵠⵠᐃ: 106,
    time: 1 / 15,
    ᐃᐃⵠ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 143,
    ⵠⵠⵠᐃ: 70,
    time: 1 / 50,
    ᐃᐃⵠ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 144,
    ⵠⵠⵠᐃ: 107,
    time: 1 / 20,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 145,
    ⵠⵠⵠᐃ: 71,
    time: 1 / 25,
    ᐃᐃⵠ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 146,
    ⵠⵠⵠᐃ: 72,
    time: 1 / 40,
    ᐃᐃⵠ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 147,
    ⵠⵠⵠᐃ: 73,
    time: 1 / 50,
    ᐃᐃⵠ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 148,
    ⵠⵠⵠᐃ: 74,
    time: 0.014285714285714285,
    ᐃᐃⵠ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 149,
    ⵠⵠⵠᐃ: 75,
    time: 1 / 90,
    ᐃᐃⵠ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 150,
    ⵠⵠⵠᐃ: 76,
    time: 1 / 120,
    ᐃᐃⵠ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 151,
    ⵠⵠⵠᐃ: 77,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 152,
    ⵠⵠⵠᐃ: 78,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 1,
    e: 0,
    id: 153,
    ⵠⵠⵠᐃ: 79,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 154,
    ⵠⵠⵠᐃ: 83,
    time: 1 / 10,
    ᐃᐃⵠ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 155,
    ⵠⵠⵠᐃ: 84,
    time: 0.1,
    ᐃᐃⵠ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 156,
    ⵠⵠⵠᐃ: 85,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 157,
    ⵠⵠⵠᐃ: 86,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ⲆᐃΔ: 1,
    e: 0,
    id: 158,
    ⵠⵠⵠᐃ: 180,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 159,
    ⵠⵠⵠᐃ: 181,
    time: 0.2,
    ᐃᐃⵠ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ⲆᐃΔ: 0,
    e: 0,
    id: 160,
    ⵠⵠⵠᐃ: 182,
    time: 0.1,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 161,
    ⵠⵠⵠᐃ: 183,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 162,
    ⵠⵠⵠᐃ: 198,
    time: 0.05,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 163,
    ⵠⵠⵠᐃ: 223,
    time: 0.02,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 164,
    ⵠⵠⵠᐃ: 224,
    time: 1 / 50,
    ᐃᐃⵠ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 165,
    ⵠⵠⵠᐃ: 89,
    time: 0.05,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 166,
    ⵠⵠⵠᐃ: 230,
    time: 1 / 50,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 167,
    ⵠⵠⵠᐃ: 94,
    time: 0.2,
    ᐃᐃⵠ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 168,
    ⵠⵠⵠᐃ: 95,
    time: 1 / 10,
    ᐃᐃⵠ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 169,
    ⵠⵠⵠᐃ: 96,
    time: 1 / 20,
    ᐃᐃⵠ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 170,
    ⵠⵠⵠᐃ: 97,
    time: 1 / 30,
    ᐃᐃⵠ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 171,
    ⵠⵠⵠᐃ: 98,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ⲆᐃΔ: 0,
    e: 0,
    id: 172,
    ⵠⵠⵠᐃ: 99,
    time: 1 / 90,
    ᐃᐃⵠ: 1
  }];
  const pt = 19;
  function qt(b, c, d, e, f) {
    const i = ~(b & 46450) & 46450 | ~(b & 46450) & b;
    const a = (c + 15823) % 65502;
    const j = (24 << (d >> 24 & 255)) + (8 << (d >> 8 & 255)) + (0 << (d >> 16 & 255)) + (16 << (d & 255));
    const k = (16 << (e >> 0 & 255)) + (24 << (e >> 24 & 255)) + (0 << (e >> 16 & 255)) + (8 << (e >> 8 & 255));
    const h = ~(f & 5631) & (f | 5631);
    const l = kk(i, a, j, k);
    br(h, 0, a, 0, k, h);
    return (l | 45817) & ~(l & 45817);
  }
  function rt(b, c, d) {
    const e = b ^ 17833;
    const f = ~(c & 55809) & 55809 | ~(c & 55809) & c;
    const g = (0 << (d & 255)) + (24 << (d >> 8 & 255)) + (8 << (d >> 24 & 255)) + (16 << (d >> 16 & 255));
    const a = br(e, 0, g, 0, f, g);
    br(e, 0, g, 0, f, g);
    return a ^ 29852;
  }
  const st = 10;
  Qr = 300;
  const tt = 13;
  function ut(a, b) {
    const c = ((35286 + a) * 214013 + 2531011) % 4294967296;
    const d = (b | 42353) & ~(b & 42353);
    const e = Mn(c, d);
    Pr(c, d, c, d);
    return ~(e & 52650) & (e | 52650);
  }
  function vt(a, b, c) {
    rj(Qq, a, b, c);
    return ((41 + (xr(Pq[0], Pq[1], Pq[2], Pq[0], Pq[1]) ^ function (a, b) {
      Mi(Qq, a, b);
      const c = xr(Pq[0], Pq[1], Pq[0], Pq[1], Pq[0]);
      xr(Pq[1], Pq[0], Pq[1], Pq[0], Pq[1]);
      return c ^ 19104;
    }(Pq[2], Pq[0]))) * 8121 + 28411) % 134456;
  }
  function wt(b, c, d, e) {
    const f = ~(b & 21540) & 21540 | ~(b & 21540) & b;
    const g = ~(c & 41632) & c | ~(c & 41632) & 41632;
    const a = (d | 33207) & ~(d & 33207);
    const i = e ^ 62385;
    const j = wb(f, g, a, i);
    wb(f, g, a, i);
    return (j | 38363) & ~(j & 38363);
  }
  ΔⲆⲆⲆ = {
    ᐃⵠᐃⲆᐃΔⲆ: 300,
    ⵠᐃⲆⲆⲆΔᐃ: 301,
    ⵠᐃⵠΔⵠⵠᐃ: 302,
    ᐃΔⵠⲆⵠᐃΔ: 303,
    ᐃⵠⵠᐃΔⵠⵠ: 304,
    ΔΔⵠΔᐃΔᐃ: 305,
    ⵠⲆⵠⲆΔᐃⲆ: 306,
    ΔᐃⲆⲆⲆΔⲆ: 307,
    ⲆⲆⲆΔⵠᐃⵠ: 308,
    ⵠⵠⵠΔᐃⲆⵠ: 309,
    ⵠⵠⵠΔⲆΔⵠ: 310,
    ⲆⵠᐃᐃΔⲆᐃ: 311,
    EMPTY: 312,
    ⲆΔΔⲆⵠᐃᐃ: 313,
    ⵠᐃⵠⲆᐃΔΔ: 314,
    ⵠᐃⵠⲆΔⲆᐃ: 315,
    ⵠᐃΔΔⵠΔⵠ: 316,
    ΔᐃᐃΔⵠᐃᐃ: 317,
    ᐃΔΔⲆⲆᐃᐃ: 318,
    ⲆⵠᐃⲆⲆΔᐃ: 319,
    ⵠΔᐃΔⲆⲆᐃ: 320,
    ⵠᐃΔᐃⵠᐃᐃ: 321,
    ΔΔⲆΔΔ: 322,
    ΔⵠⵠᐃᐃⲆⵠ: 323,
    ᐃΔⲆⲆᐃ: 324,
    ΔⲆⵠᐃᐃΔⲆ: 325,
    ⵠᐃᐃᐃᐃⲆΔ: 326,
    ⲆⵠᐃᐃᐃⲆΔ: 327,
    ΔⵠⲆΔΔⵠⲆ: 328,
    ⲆⵠᐃⵠⵠΔᐃ: 329,
    ⵠⲆᐃᐃᐃⵠⲆ: 330,
    ⵠⲆΔⲆᐃⵠᐃ: 331,
    POINTS: 332,
    ᐃΔⵠⵠΔⵠⵠ: 333,
    ΔᐃΔⵠᐃΔᐃ: 334,
    ΔⵠΔⲆⲆΔⲆ: 335,
    ⲆᐃⲆⲆⲆΔⲆ: 336,
    ᐃᐃᐃᐃⲆⵠⵠ: 337,
    ᐃᐃᐃΔΔⵠΔ: 338,
    ΔᐃᐃⵠⵠΔΔ: 339,
    ΔⵠᐃΔⵠΔΔ: 340,
    ΔⲆⲆᐃᐃᐃⵠ: 341,
    ⵠᐃΔⲆᐃⲆⲆ: 342,
    ᐃⲆΔΔΔⵠΔ: 343
  };
  const xt = 7;
  function zt() {
    kb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    kb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    kb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    kb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    kb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    kb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    kb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    kb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    kb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    kb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    kb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    kb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    kb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    kb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    kb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    kb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    kb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    kb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    kb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    kb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    kb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    kb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    kb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    kb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    kb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    kb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    kb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    kb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    kb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    kb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    kb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    kb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    kb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    kb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    kb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    kb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    kb[232] = ["Vulture Feather", "From a deadly vulture"];
    kb[234] = ["Emerald", "How many golden breads can you get from it?"];
    kb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    kb[80] = ["Turban", "Useful to survive in the desert."];
    kb[81] = ["Ninja outfit", "Essential to survive in the desert"];
    kb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    kb[236] = ["Pilot Glasses"];
    kb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    kb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    kb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    kb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    kb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    kb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    kb[89] = ["Saddle", "Hit a boar with it to tame it."];
    kb[90] = ["Witch Hat", "You're a wizard Starvy!"];
    kb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    kb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    kb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    kb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    kb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    kb[224] = ["Sled", "You are faster with it in the snow"];
    kb[223] = ["Boat", "You are faster with it in the water"];
    kb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    kb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    kb[222] = ["Penguin Feather", "From a deadly cute penguin."];
    kb[231] = ["Hawk Feather", "From a deadly hawk."];
    kb[233] = ["Cactus", "Food : 20", "Water : 10"];
    kb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    kb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    kb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    kb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    kb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    kb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    kb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    kb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    kb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    kb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    kb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    kb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    kb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    kb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    kb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    kb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    kb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    kb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    kb[53] = ["Pitchfork", "Perfect for gathering"];
    kb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    kb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    kb[Xr.ⵠⵠⲆΔⲆⲆΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    kb[Xr.ⲆᐃΔⵠΔΔⵠ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    kb[Xr.ⵠΔᐃⲆᐃⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    kb[Xr.ᐃΔⲆᐃΔΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    kb[Xr.ⵠΔⲆⲆΔⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    kb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    kb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    kb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    kb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    kb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    kb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    kb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    kb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    kb[203] = ["Flame", "It's hot!"];
    kb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    kb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    kb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    kb[202] = ["Reidite", "The ultimate ore"];
    kb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Bt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Bt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Bt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Bt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Bt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Bt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Bt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Bt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Bt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Bt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Bt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Bt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Bt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Bt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Bt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Bt[38] = ["You died crushed by an angry baby mammoth."];
    Bt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Bt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    kb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    kb[341] = "A sandstorm is approaching in a few seconds.";
    kb[340] = "The sandstorm will soon stop.";
    kb[343] = "A blizzard is approaching in a few seconds.";
    kb[342] = "The blizzard will soon stop.";
    kb[328] = " BACK TO THE GAME";
    kb[329] = " Share on Twitter";
    kb[330] = " Share on Facebook";
    kb[331] = "You can buy items on the shop in the next game with your points";
    kb[332] = "points";
    kb[333] = "Score";
    kb[334] = "Kill";
    kb[335] = "Days survived";
    kb[336] = "Building method: Free. Press G to change";
    kb[337] = "Building method: Grid. Press G to change";
    kb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    kb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    kb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    kb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    kb[7] = ["Hand"];
    kb[140] = ["Dirt", "Dirty!"];
    kb[126] = ["Sand", "I got it in my eyes!"];
    kb[109] = ["Wood", "You can't get enough of it!"];
    kb[108] = ["Stone", "Also called a rock"];
    kb[111] = ["Gold", "Be generous, give it to others"];
    kb[112] = ["Diamond", "What will you make with it?"];
    kb[121] = ["Amethyst", "It's Mauve like Lapa"];
    kb[131] = ["Flour", "Used in cooking"];
    kb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    kb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    kb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    kb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    kb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    kb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    kb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    kb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    kb[200] = ["Candies", "Only for children!", "Food: 20"];
    kb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    kb[201] = ["Garland", "Perfect decoration for roofs"];
    kb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    kb[110] = ["Berry", "Berry tasty!", "Food: 10"];
    kb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    kb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    kb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    kb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    kb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    kb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    kb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    kb[194] = ["Thorn bush", "It stings!"];
    kb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    kb[142] = ["Ice", "Useful for making cakes and water"];
    kb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    kb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    kb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    kb[178] = ["Pure Fur", "You're a bread factory"];
    kb[179] = ["Dark Fur", "You get ready to do something wrong"];
    kb[146] = ["Winter Fur", "These animals just wanted a hug..."];
    kb[139] = ["Scales", "It smells like fish!"];
    kb[129] = ["Kraken Skin", "Weren't you too scared?"];
    kb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    kb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    kb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    kb[161] = ["Cord", "Used in crafting Hats and Bag"];
    kb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    kb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    kb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    kb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    kb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    kb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    kb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    kb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    kb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    kb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    kb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    kb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    kb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    kb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    kb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    kb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    kb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    kb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    kb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    kb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    kb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    kb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    kb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    kb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    kb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    kb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    kb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    kb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    kb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    kb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    kb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    kb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    kb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    kb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    kb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    kb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    kb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    kb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    kb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    kb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    kb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    kb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    kb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    kb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    kb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    kb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    kb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    kb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    kb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    kb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    kb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    kb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    kb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    kb[177] = ["Blue Gemstone", "For too kind people"];
    kb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    kb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    kb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    kb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    kb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    kb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    kb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    kb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    kb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    kb[29] = ["Bag", "More space for your items!"];
    kb[120] = ["Paper", "Used in book-crafting"];
    kb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    kb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    kb[148] = ["Lock", "Allow you to lock your chest"];
    kb[158] = ["Lock-pick", "Allows you to unlock one chest"];
    kb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    kb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    kb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    kb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    kb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    kb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    kb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    kb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    kb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    kb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    kb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    kb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    kb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    kb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    kb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    kb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    kb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    kb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    kb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    kb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    kb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    kb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    kb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    kb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    kb[300] = "You cannot join this server";
    kb[301] = "Kicked: ";
    kb[302] = "Your key is already used by someone else";
    kb[303] = "Your key is wrong";
    kb[304] = "You have an old version, you need to clear your cache";
    kb[338] = "Your client version is too recent for this server. The server is being updated";
    kb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    kb[305] = "There are no more new resources";
    kb[306] = "You survived 1 day";
    kb[307] = "You survived ";
    kb[308] = " days";
    kb[309] = "You are dead ;-;";
    kb[310] = "Server cannot find spawn location! Spam the play button!";
    kb[311] = "Server is full! Spam the play button!";
    kb[312] = "Resource is empty";
    kb[313] = "Inventory is full (right-click to empty items)";
    kb[314] = " is dead";
    kb[315] = "This is not the right tool";
    kb[316] = "You joined a team";
    kb[317] = "You are dead";
    kb[318] = " joined the team";
    kb[319] = "Your team was destroyed";
    kb[320] = "You left the team";
    kb[321] = " left the team";
    kb[322] = "Someone stole your token :>";
    kb[323] = "Choose a server";
    kb[324] = "players";
    kb[325] = "total players";
    kb[326] = "players on this mode";
    kb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Bt[0] = ["You were killed for no reason"];
    Bt[1] = ["You starved to death, as the name of the game implies"];
    Bt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Bt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Bt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Bt[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Bt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Bt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Bt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Bt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Bt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Bt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Bt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Bt[13] = ["You died of thirst. Better drink your own piss."];
    Bt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Bt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Bt[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Bt[17] = ["Your skin's falling apart, the sun killed you."];
    Bt[18] = ["Garlic stored in your pockets boiled your brain."];
    Bt[19] = ["As a vampire, don't stand near the garlic cloves."];
    Bt[20] = ["You ate garlic as a vampire, what did you expect?"];
    Bt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ⲆΔᐃΔᐃ = "Uuunnnggg";
    ΔᐃᐃⲆⵠΔⵠ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  function eb(b, c, d, e, f) {
    const g = ((35964 + b) * 2147483629 + 2147483587) % 2147483647;
    const a = f ^ 63342;
    const i = zb(g, ((58442 + c) * 214013 + 2531011) % 4294967296, (d | 10284) & ~(d & 10284), (2147483587 + (e + 44458) * 2147483629) % 2147483647);
    const j = Mn(a, g);
    return (16 << ((i ^ j) >> 8 & 255)) + (8 << ((i ^ j) & 255)) + (0 << ((i ^ j) >> 16 & 255)) + (24 << ((i ^ j) >> 24 & 255));
  }
  function ib(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function tb(a) {
    return za.String.fromCharCode(a);
  }
  const nb = 4;
  function ab() {
    kb[184] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    kb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    kb[328] = " BACK TO THE GAME";
    kb[329] = " Share on Twitter";
    kb[330] = " Share on Facebook";
    kb[331] = "You can buy items on the shop in the next game with your points";
    kb[332] = "points";
    kb[333] = "Score";
    kb[334] = "Kill";
    kb[335] = "Days survived";
    kb[336] = "Building method: Free. Press G to change";
    kb[337] = "Building method: Grid. Press G to change";
    kb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    kb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    kb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    kb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    kb[7] = ["Рука"];
    kb[140] = ["Земля", "Грязно!"];
    kb[126] = ["Песок", "Он в моих глазах!"];
    kb[109] = ["Дерево", "Постоянно нужно больше!"];
    kb[108] = ["Камень", "Твердый"];
    kb[111] = ["Золото", "Будьте щедры, давайте его другим"];
    kb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    kb[121] = ["Аметист", "Он сиреневый, как Lapa"];
    kb[131] = ["Мука", "Используется в готовке"];
    kb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    kb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    kb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    kb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    kb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    kb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    kb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    kb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    kb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    kb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    kb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    kb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    kb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    kb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    kb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    kb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    kb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    kb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    kb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    kb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    kb[194] = ["Колючий Куст", "Это больно!"];
    kb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    kb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    kb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    kb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    kb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    kb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    kb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    kb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    kb[139] = ["Чешуя", "Она пахнет рыбой!"];
    kb[129] = ["Шкура Кракена", "Вы не испугались?"];
    kb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    kb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    kb[114] = ["Верстак", "Необходим для создания многих предметов"];
    kb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    kb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    kb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    kb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    kb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    kb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    kb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    kb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    kb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    kb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    kb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    kb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    kb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    kb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    kb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    kb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    kb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    kb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    kb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    kb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    kb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    kb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    kb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    kb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    kb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    kb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    kb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    kb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    kb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    kb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    kb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    kb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    kb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    kb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    kb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    kb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    kb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    kb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    kb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    kb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    kb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    kb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    kb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    kb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    kb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    kb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    kb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    kb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    kb[185] = ["Шар Дракона", "Даётся за квест"];
    kb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    kb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    kb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    kb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    kb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    kb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    kb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    kb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    kb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    kb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    kb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    kb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    kb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    kb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    kb[120] = ["Бумага", "Используется при создании книги"];
    kb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    kb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    kb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    kb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    kb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    kb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    kb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    kb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    kb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    kb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    kb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    kb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    kb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    kb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    kb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    kb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    kb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    kb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    kb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    kb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    kb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    kb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    kb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    kb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    kb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    kb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    kb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    kb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    kb[300] = "Вы не можете зайти на этот сервер";
    kb[301] = "Выгнаны: ";
    kb[302] = "Ваш ключ уже используется кем-то";
    kb[303] = "Ваш ключ неправильный";
    kb[304] = "У вас старая версия, вам нужно очистить кеш";
    kb[305] = "Ресурсов больше нет";
    kb[306] = "Вы выжили 1 день";
    kb[307] = "Вы выжили ";
    kb[308] = " дней";
    kb[309] = "Вы умерли ;-;";
    kb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    kb[311] = "Сервер заполнен! Спамьте кнопку играть!";
    kb[312] = "Ресурсы закончились";
    kb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    kb[314] = " умер";
    kb[315] = "Это не тот инструмент";
    kb[316] = "Вы вошли в команду";
    kb[317] = "Вы умерли";
    kb[318] = " вошёл в команду";
    kb[319] = "Ваша команда была разрушена";
    kb[320] = "Вы покинули команду";
    kb[321] = " покинул команду";
    kb[322] = "Кто-то использует ваш токен :>";
    kb[323] = "Выберите сервер";
    kb[324] = "игроков";
    kb[325] = "игроков всего";
    kb[326] = "игроков в этом режиме";
    kb[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Bt[0] = ["Вы были убиты без причины"];
    Bt[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    Bt[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Bt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Bt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Bt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Bt[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Bt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Bt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Bt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Bt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Bt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Bt[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Bt[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Bt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Bt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Bt[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Bt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Bt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Bt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Bt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Bt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ⲆΔᐃΔᐃ = "Uuunnnggg";
    ΔᐃᐃⲆⵠΔⵠ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function rb() {
    kb[184] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    kb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    kb[328] = " BACK TO THE GAME";
    kb[329] = " Share on Twitter";
    kb[330] = " Share on Facebook";
    kb[331] = "You can buy items on the shop in the next game with your points";
    kb[332] = "points";
    kb[333] = "Score";
    kb[334] = "Kill";
    kb[335] = "Days survived";
    kb[336] = "Building method: Free. Press G to change";
    kb[337] = "Building method: Grid. Press G to change";
    kb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    kb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    kb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    kb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    kb[7] = ["mão"];
    kb[140] = ["terra", "está sujo!"];
    kb[126] = ["areia", "entrou nos meus olhos!"];
    kb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    kb[108] = ["pedra", "também chamado rocha"];
    kb[111] = ["ouro", "seja generoso, dê para outros"];
    kb[112] = ["diamante", "o que você irá fazer com isso?"];
    kb[121] = ["ametista", "é mauve como lapa"];
    kb[131] = ["farinha", "usada na cozinha"];
    kb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    kb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    kb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    kb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    kb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    kb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    kb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    kb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    kb[200] = ["doces", "apenas para crianças!", "comida: 100"];
    kb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    kb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    kb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    kb[110] = ["berry", "Berry saborosa!", "comida: 10"];
    kb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    kb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    kb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    kb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    kb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    kb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    kb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    kb[194] = ["mato de espinhos", "pica!"];
    kb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    kb[142] = ["gelo", "útil para fazer bolo e água"];
    kb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    kb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    kb[2] = ["pele de coelho", "o coelho era tão fofo..."];
    kb[178] = ["pele pura", "você é uma fábrica de pão"];
    kb[179] = ["pele negra", "você está pronto para fazer algo errado"];
    kb[146] = ["pele de inverno", "ele só queria um abraço"];
    kb[139] = ["escala", "é pequeno como peixe!"];
    kb[129] = ["pele do kraken", "você não está com medo?"];
    kb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    kb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    kb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    kb[161] = ["linha", "usada para fazer chapéus e mochila"];
    kb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    kb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    kb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    kb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    kb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    kb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    kb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    kb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    kb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    kb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    kb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    kb[Xr.ⲆᐃⲆΔⲆⲆΔΔΔ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    kb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    kb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    kb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    kb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    kb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    kb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    kb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    kb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    kb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    kb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    kb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    kb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    kb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    kb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    kb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    kb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    kb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    kb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    kb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    kb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    kb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    kb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    kb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    kb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    kb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    kb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    kb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    kb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    kb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    kb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    kb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    kb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    kb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    kb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    kb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    kb[185] = ["esfera do dragão", "dado na questt"];
    kb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    kb[175] = ["pedra verde", "você não vai trapacear, promete?"];
    kb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    kb[177] = ["pedra azul", "para pessoas muito gentis"];
    kb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    kb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    kb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    kb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    kb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    kb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    kb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    kb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    kb[49] = ["regador", "permite regar as plantas", "dano: 1"];
    kb[29] = ["mochila", "mais espaço para seus itens!"];
    kb[120] = ["papel", "usado para fazer o livro"];
    kb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    kb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    kb[148] = ["fechadura", "permite você trancar seu baú"];
    kb[158] = ["chave", "permite destrancar um baú"];
    kb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    kb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    kb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    kb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    kb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    kb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    kb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    kb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    kb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    kb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    kb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    kb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    kb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    kb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    kb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    kb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    kb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    kb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    kb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    kb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    kb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    kb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    kb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    kb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    kb[300] = "você não pode entrar no servidor";
    kb[301] = "kickado: ";
    kb[302] = "sua chave está em uso por outra pessoa";
    kb[303] = "sua chave está errada";
    kb[304] = "você tem uma versão velha, limpe seu cache";
    kb[305] = "não tem mais recursos";
    kb[306] = "você sobreviveu 1 dia";
    kb[307] = "você sobreviveu ";
    kb[308] = " dias";
    kb[309] = "você está morto ;-;";
    kb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    kb[311] = "servidor está cheio! spam o botão de play!";
    kb[312] = "não tem recursos";
    kb[313] = "inventário está cheio (botão direito para deletar itens)";
    kb[314] = " está morto";
    kb[315] = "essa não é a ferramenta certa";
    kb[316] = "você entrou no time";
    kb[317] = "você está morto";
    kb[318] = "entrou no time";
    kb[319] = "seu time foi destruido";
    kb[320] = "você saiu do time";
    kb[321] = " saiu do time";
    kb[322] = "alguém roubou sua ficha :>";
    kb[323] = "escolha um servidor";
    kb[324] = "jogadores";
    kb[325] = "jogadores totais";
    kb[326] = "jogadores nesse modo";
    kb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Bt[0] = ["você morreu sem motivo"];
    Bt[1] = ["você morreu de fome, como o jogo diz"];
    Bt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Bt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Bt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Bt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Bt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Bt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Bt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Bt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Bt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Bt[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Bt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Bt[13] = ["você morreu de sede. melhor beber sua própria urina."];
    Bt[14] = ["você sabia que você morre afogado? agora você sabe."];
    Bt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Bt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Bt[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Bt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Bt[19] = ["como vampiro, não chegue perto do alho."];
    Bt[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Bt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ⲆΔᐃΔᐃ = "Uuunnnggg";
    ΔᐃᐃⲆⵠΔⵠ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function sb() {
    kb[184] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    kb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    kb[328] = " BACK TO THE GAME";
    kb[329] = " Share on Twitter";
    kb[330] = " Share on Facebook";
    kb[331] = "You can buy items on the shop in the next game with your points";
    kb[332] = "points";
    kb[333] = "Score";
    kb[334] = "Kill";
    kb[335] = "Days survived";
    kb[336] = "Building method: Free. Press G to change";
    kb[337] = "Building method: Grid. Press G to change";
    kb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    kb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    kb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    kb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    kb[7] = ["Mano"];
    kb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    kb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    kb[109] = ["Madera", "¡Nunca hay suficiente!"];
    kb[108] = ["Piedra", "También llamada roca."];
    kb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    kb[112] = ["Diamante", "¿Que vas a hacer con él?"];
    kb[121] = ["Amatista", "Es Mauve como Lapa"];
    kb[131] = ["Harina", "Usada para cocinar."];
    kb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    kb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    kb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    kb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    kb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    kb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    kb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    kb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    kb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    kb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    kb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    kb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    kb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    kb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    kb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    kb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    kb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    kb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    kb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    kb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    kb[194] = ["Planta de Espinas", "¡Te daña!"];
    kb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    kb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    kb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    kb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    kb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    kb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    kb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    kb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    kb[139] = ["Escamas", "¡Huele a pescado!"];
    kb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    kb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    kb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    kb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    kb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    kb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    kb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    kb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    kb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    kb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    kb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    kb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    kb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    kb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    kb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    kb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    kb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    kb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    kb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    kb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    kb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    kb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    kb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    kb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    kb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    kb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    kb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    kb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    kb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    kb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    kb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    kb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    kb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    kb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    kb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    kb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    kb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    kb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    kb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    kb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    kb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    kb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    kb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    kb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    kb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    kb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    kb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    kb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    kb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    kb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    kb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    kb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    kb[185] = ["Esfera del Dragón", "Dada en la misión"];
    kb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    kb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    kb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    kb[177] = ["Gema Azul", "Para gente muy amable"];
    kb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    kb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    kb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    kb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    kb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    kb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    kb[128] = ["Botella Vacia", "La puedes llenar de agua"];
    kb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    kb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    kb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    kb[120] = ["Hoja", "Usada para hacer un libro"];
    kb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    kb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    kb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    kb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    kb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    kb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    kb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    kb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    kb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    kb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    kb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    kb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    kb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    kb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    kb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    kb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    kb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    kb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    kb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    kb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    kb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    kb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    kb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    kb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    kb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    kb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    kb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    kb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    kb[300] = "No puedes unirte a este servidor";
    kb[301] = "Expulsado: ";
    kb[302] = "Tu llave ya está usada";
    kb[303] = "Tu llave está mal";
    kb[304] = "Tienes una versión antigua, limpia tu cache";
    kb[305] = "No hay mas recursos";
    kb[306] = "Has sobrevivido 1 día";
    kb[307] = "Has sobrevivido ";
    kb[308] = " días";
    kb[309] = "Estás muerto ;-;";
    kb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    kb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    kb[312] = "Recurso vacio";
    kb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    kb[314] = " está muerto";
    kb[315] = "Esta no es la herramienta correcta";
    kb[316] = "Te has unido a un equipo";
    kb[317] = "Estás muerto";
    kb[318] = " se unió al equipo";
    kb[319] = "Tu equipo ha sido destruido";
    kb[320] = "Has dejado el equipo";
    kb[321] = " dejo el equipo ";
    kb[322] = "Alguien te robó tu token :>";
    kb[323] = "Elige un servidor";
    kb[324] = "jugadores";
    kb[325] = "total de jugadores";
    kb[326] = "Jugadores en este modo de juego";
    kb[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Bt[0] = ["Has muerto por ninguna razón"];
    Bt[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Bt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Bt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Bt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Bt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Bt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Bt[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Bt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Bt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Bt[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Bt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Bt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Bt[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Bt[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Bt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Bt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Bt[17] = ["Tu piel se cayó, el sol te quemó."];
    Bt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Bt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Bt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Bt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ⲆΔᐃΔᐃ = "Uuunnnggg";
    ΔᐃᐃⲆⵠΔⵠ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function hb(b, c, d, e) {
    Ei(Qq, b, c, d, e);
    const f = function (a, b) {
      ai(Qq, a, b);
      const c = Ct(Pq[0], Pq[1], Pq[0], Pq[1], Pq[0]);
      const d = Ar(Pq[1], Pq[0], Pq[1]);
      return (16 << ((c ^ d) & 255)) + (0 << ((c ^ d) >> 16 & 255)) + (8 << ((c ^ d) >> 8 & 255)) + (24 << ((c ^ d) >> 24 & 255));
    }(Pq[0], Pq[1]);
    const g = bk(Pq[2], Pq[3], Pq[0], Pq[1], Pq[2]);
    return (0 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 8 & 255));
  }
  const lb = 3;
  function gb(a, b, c) {
    Mj(Qq, a, b, c);
    return ((110 + (hb(Pq[0], Pq[1], Pq[2], Pq[0]) ^ hb(Pq[1], Pq[2], Pq[0], Pq[1]))) * 16807 + 0) % 2147483647;
  }
  const ub = 1;
  const bb = 100;
  const db = 256;
  function vb() {
    kb[184] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    kb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    kb[328] = " BACK TO THE GAME";
    kb[329] = " Share on Twitter";
    kb[330] = " Share on Facebook";
    kb[331] = "You can buy items on the shop in the next game with your points";
    kb[332] = "points";
    kb[333] = "Score";
    kb[334] = "Kill";
    kb[335] = "Days survived";
    kb[336] = "Building method: Free. Press G to change";
    kb[337] = "Building method: Grid. Press G to change";
    kb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    kb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    kb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    kb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    kb[7] = ["Hand"];
    kb[140] = ["Boden", "Dreckig!"];
    kb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    kb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    kb[108] = ["Stein", "Auch Fels gennant"];
    kb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    kb[112] = ["Diamant", "Was wirst du daraus machen?"];
    kb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    kb[131] = ["Mehl", "wird fürs Backen gebraucht"];
    kb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    kb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    kb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    kb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    kb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    kb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    kb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    kb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    kb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    kb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    kb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    kb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    kb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    kb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    kb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    kb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    kb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    kb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    kb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    kb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    kb[194] = ["Dornenbusch", "Es sticht!"];
    kb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    kb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    kb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    kb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    kb[2] = ["Hasenfell", "Der Hase war so süß..."];
    kb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    kb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    kb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    kb[139] = ["Schuppen", "Es riecht wie Fisch!"];
    kb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    kb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    kb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    kb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    kb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    kb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    kb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    kb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    kb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    kb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    kb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    kb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    kb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    kb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    kb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    kb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    kb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    kb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    kb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    kb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    kb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    kb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    kb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    kb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    kb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    kb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    kb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    kb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    kb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    kb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    kb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    kb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    kb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    kb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    kb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    kb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    kb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    kb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    kb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    kb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    kb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    kb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    kb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    kb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    kb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    kb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    kb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    kb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    kb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    kb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    kb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    kb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    kb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    kb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    kb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    kb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    kb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    kb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    kb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    kb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    kb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    kb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    kb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    kb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    kb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    kb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    kb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    kb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    kb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    kb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    kb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    kb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    kb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    kb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    kb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    kb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    kb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    kb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    kb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    kb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    kb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    kb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    kb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    kb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    kb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    kb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    kb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    kb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    kb[300] = "Du kannst diesem Server nicht beitreten";
    kb[301] = "Gekickt: ";
    kb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    kb[303] = "Dein Schlüssel ist falsch";
    kb[304] = "Deine Version ist veraltet, säubere dein Cache";
    kb[305] = "Es gibt keine neuen Ressourcen";
    kb[306] = "Du hast einen Tag überlebt";
    kb[307] = "Du hast überlebt ";
    kb[308] = " Tage";
    kb[309] = "Du bist gestorben ;-;";
    kb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    kb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    kb[312] = "Ressource ist leer";
    kb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    kb[314] = " ist gestorben";
    kb[315] = "Das ist nicht das richtige Werkzeug";
    kb[316] = "Du bist einem Team beigetreten";
    kb[317] = "Du bist gestorben";
    kb[318] = " ist dem Team beigetreten";
    kb[319] = "Dein Team wurde zerstört";
    kb[320] = "Du hast das Team verlassen";
    kb[321] = " hat das Team verlassen";
    kb[322] = "Jemand hat dein Token gestohlen :>";
    kb[323] = "Suche dir ein Server aus";
    kb[324] = "Spieler";
    kb[325] = "alle Spieler";
    kb[326] = "Spieler in diesem Modus";
    kb[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Bt[0] = ["Du wurdest ohne Grund getötet"];
    Bt[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Bt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Bt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Bt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Bt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Bt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Bt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Bt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Bt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Bt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Bt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Bt[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Bt[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Bt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Bt[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Bt[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Bt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Bt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Bt[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Bt[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Bt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ⲆΔᐃΔᐃ = "Uuunnnggg";
    ΔᐃᐃⲆⵠΔⵠ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const cb = 6;
  function mb() {
    kb[184] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    kb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    kb[328] = " BACK TO THE GAME";
    kb[329] = " Share on Twitter";
    kb[330] = " Share on Facebook";
    kb[331] = "You can buy items on the shop in the next game with your points";
    kb[332] = "points";
    kb[333] = "Score";
    kb[334] = "Kill";
    kb[335] = "Days survived";
    kb[336] = "Building method: Free. Press G to change";
    kb[337] = "Building method: Grid. Press G to change";
    kb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    kb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    kb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    kb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    kb[7] = ["Ręka"];
    kb[140] = ["Ziemia", "Brudna!"];
    kb[126] = ["Piasek", "Mam go w oczach!"];
    kb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    kb[108] = ["Kamień", "Także nazywany skałą"];
    kb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    kb[112] = ["Diament", "Co z nim zrobisz?"];
    kb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    kb[131] = ["Mąka", "Używana w gotowaniu"];
    kb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    kb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    kb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    kb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    kb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    kb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    kb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    kb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    kb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    kb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    kb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    kb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    kb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    kb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    kb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    kb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    kb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    kb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    kb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    kb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    kb[194] = ["Kolczasty krzew", "Kłuje!"];
    kb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    kb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    kb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    kb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    kb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    kb[178] = ["Skóra", "Jesteś fabryką chleba"];
    kb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    kb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    kb[139] = ["Łuski", "Pachnie jak ryba!"];
    kb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    kb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    kb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    kb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    kb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    kb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    kb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    kb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    kb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    kb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    kb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    kb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    kb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    kb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    kb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    kb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    kb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    kb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    kb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    kb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    kb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    kb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    kb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    kb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    kb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    kb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    kb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    kb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    kb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    kb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    kb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    kb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    kb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    kb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    kb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    kb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    kb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    kb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    kb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    kb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    kb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    kb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    kb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    kb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    kb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    kb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    kb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    kb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    kb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    kb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    kb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    kb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    kb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    kb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    kb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    kb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    kb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    kb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    kb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    kb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    kb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    kb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    kb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    kb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    kb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    kb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    kb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    kb[120] = ["Papier", "Używany w tworzeniu książki"];
    kb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    kb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    kb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    kb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    kb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    kb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    kb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    kb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    kb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    kb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    kb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    kb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    kb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    kb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    kb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    kb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    kb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    kb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    kb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    kb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    kb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    kb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    kb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    kb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    kb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    kb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    kb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    kb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    kb[300] = "Nie możesz dołączyć do tego serwera";
    kb[301] = "Wyrzucony: ";
    kb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    kb[303] = "Twój klucz jest nieprawidłowy";
    kb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    kb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    kb[306] = "Przeżyłeś 1 dzień";
    kb[307] = "Przeżyłeś ";
    kb[308] = " dni";
    kb[309] = "Jesteś martwy ;-;";
    kb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    kb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    kb[312] = "Źródło jest puste";
    kb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    kb[314] = " jest martwy";
    kb[315] = "To nie jest właściwe narzędzie";
    kb[316] = "Dołączyłeś do drużyny";
    kb[317] = "Jesteś martwy";
    kb[318] = " dołączył do drużyny";
    kb[319] = "Twoja drużyna została zniszczona";
    kb[320] = " Opuściłeś drużynę";
    kb[321] = " opuścił drużynę";
    kb[322] = "Ktoś ukradł twój żeton :>";
    kb[323] = "Wybierz serwer";
    kb[324] = "graczy";
    kb[325] = "wszystkich graczy";
    kb[326] = "graczy w tym trybie";
    kb[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Bt[0] = ["Zostałeś zabity bez powodu"];
    Bt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Bt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Bt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Bt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Bt[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Bt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Bt[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Bt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Bt[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Bt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Bt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Bt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Bt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Bt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Bt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Bt[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Bt[17] = ["Twoja skóra odpada, słońce cię zabija."];
    Bt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Bt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Bt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Bt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ⲆΔᐃΔᐃ = "Uuunnnggg";
    ΔᐃᐃⲆⵠΔⵠ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  const pb = 16;
  function Cb(a, b) {
    const c = (12345 + (29010 + a) * 1103515245) % 2147483648;
    const d = ~(b & 56004) & b | ~(b & 56004) & 56004;
    const e = Ir(c, d, c, d, c, d);
    ef(c, d, c, d, c, d);
    return ~(e & 17143) & (e | 17143);
  }
  function Tb(b, c, d, e, f, g) {
    ni(Qq, b, c, d, e, f, g);
    const a = function (b, c, d, e, f, g) {
      uj(Qq, b, c, d, e, f, g);
      const a = Sb(Pq[0], Pq[1], Pq[2]);
      const h = vt(Pq[3], Pq[4], Pq[5]);
      return ((31 + (a ^ h)) * 8121 + 28411) % 134456;
    }(Pq[0], Pq[1], Pq[2], Pq[3], Pq[4], Pq[5]);
    rr(Pq[0], Pq[1], Pq[2]);
    return (a | 15455) & ~(a & 15455);
  }
  const fb = 14;
  function zb(b, c, d, e) {
    const f = ~(b & 57022) & (b | 57022);
    const g = (c | 2789) & ~(c & 2789);
    const a = ~(e & 56573) & 56573 | ~(e & 56573) & e;
    return ((20099 + (Vw(f, g, ~(d & 3694) & 3694 | ~(d & 3694) & d) ^ Vw(a, f, g))) * 1664525 + 1013904223) % 4294967296;
  }
  function yb() {
    kb[184] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    kb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    kb[328] = " RETOUR AU JEU";
    kb[329] = " Partage sur Twitter";
    kb[330] = " Partage sur Facebook";
    kb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    kb[332] = "points";
    kb[333] = "Score";
    kb[334] = "Tués";
    kb[335] = "Jours survécus";
    kb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    kb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    kb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    kb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    kb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    kb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    kb[7] = ["Main"];
    kb[140] = ["Terre", "C'est sale!"];
    kb[126] = ["Sable", "J'en ai dans les yeux"];
    kb[109] = ["Bois", "Tu n'en auras jamais trop!"];
    kb[108] = ["Pierre", "Aussi appelée roche"];
    kb[111] = ["Or", "Sois généreux, donne en aux autres"];
    kb[112] = ["Diamant", "Comme tes yeux! wesh"];
    kb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    kb[131] = ["Farine", "Utile pour la cuisine"];
    kb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    kb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    kb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    kb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    kb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    kb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    kb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    kb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    kb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    kb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    kb[201] = ["Guirlandes", "Utilisable sur les toits"];
    kb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    kb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    kb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    kb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    kb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    kb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    kb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    kb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    kb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    kb[194] = ["Ronces", "Ça pique!"];
    kb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    kb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    kb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    kb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    kb[2] = ["Peau de lapin", "Vous êtes un monstre"];
    kb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    kb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    kb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    kb[139] = ["Écailles", "Ça sent le poisson!"];
    kb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    kb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    kb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    kb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    kb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    kb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    kb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    kb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    kb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    kb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    kb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    kb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    kb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    kb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    kb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    kb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    kb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    kb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    kb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    kb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    kb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    kb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    kb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    kb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    kb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    kb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    kb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    kb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    kb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    kb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    kb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    kb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    kb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    kb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    kb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    kb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    kb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    kb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    kb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    kb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    kb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    kb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    kb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    kb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    kb[185] = ["Orbe du Dragon", "Donné en Quête"];
    kb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    kb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    kb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    kb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    kb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    kb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    kb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    kb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    kb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    kb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    kb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    kb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    kb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    kb[29] = ["Sac", "Plus de place dans ton inventaire!"];
    kb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    kb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    kb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    kb[148] = ["Cadenas", "Pour verrouiller un coffre"];
    kb[158] = ["Clé", "Pour déverrouiller un coffre"];
    kb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    kb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    kb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    kb[190] = ["Toit", "Te cache un peu et te réchauffe"];
    kb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    kb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    kb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    kb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    kb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    kb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    kb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    kb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    kb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    kb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    kb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    kb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    kb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    kb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    kb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    kb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    kb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    kb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    kb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    kb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    kb[300] = "Tu ne peux pas rejoindre le serveur";
    kb[301] = "Expulsé: ";
    kb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    kb[303] = "Ta clé est fausse";
    kb[304] = "Tu as une vieille version, rafraichis tes caches";
    kb[305] = "Il n'y a plus de nouvelles ressources";
    kb[306] = "Tu as survécu 1 jour";
    kb[307] = "Tu as survécu ";
    kb[308] = " jours";
    kb[309] = "Tu es mort ;-;";
    kb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    kb[311] = "Le serveur est complet! Spam le bouton jouer";
    kb[312] = "Cette ressource est vide";
    kb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    kb[314] = " est mort";
    kb[315] = "Ce n'est pas le bon outil";
    kb[316] = "Tu as rejoins une équipe";
    kb[317] = "Tu es mort";
    kb[318] = " a rejoint l'équipe";
    kb[319] = "Ton équipe a été détruite";
    kb[320] = "Tu as quitté l'équipe";
    kb[321] = " a quitté l'équipe";
    kb[322] = "Quelqu'un a volé ton token :>";
    kb[323] = "Choisis un serveur";
    kb[324] = "joueurs";
    kb[325] = "joueurs";
    kb[326] = "joueurs dans ce mode";
    kb[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Bt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Bt[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Bt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Bt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Bt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Bt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Bt[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Bt[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Bt[8] = ["Cet ours voulait juste un câlin."];
    Bt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Bt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Bt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Bt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Bt[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Bt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Bt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Bt[16] = ["Un kraken a 'kraké' tes os."];
    Bt[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Bt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Bt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Bt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Bt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ⲆΔᐃΔᐃ = "Uuunnnggg";
    ΔᐃᐃⲆⵠΔⵠ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  function wb(b, c, d, e) {
    const f = (b | 64876) & ~(b & 64876);
    const g = (2531011 + (c + 37854) * 214013) % 4294967296;
    const a = (24 << (d & 255)) + (0 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (8 << (d >> 8 & 255));
    const i = ~(e & 12196) & e | ~(e & 12196) & 12196;
    const j = Pb(f, g, a, i, f, g);
    jf(a, i);
    return (j | 30849) & ~(j & 30849);
  }
  function Pb(b, c, d, e, f, g) {
    const a = ~(b & 17683) & 17683 | ~(b & 17683) & b;
    const i = (2147483587 + (41534 + f) * 2147483629) % 2147483647;
    const j = g ^ 37859;
    return ((30430 + (zb(a, (1 + (39040 + c) * 22695477) % 4294967296, ((d + 27103) * 1664525 + 1013904223) % 4294967296, (e + 38416) % 65376) ^ Hr(i, j, a))) * 1103515245 + 12345) % 2147483648;
  }
  var kb = [];
  for (var Ab = 0; Ab < 344; Ab++) {
    kb[Ab] = "";
  }
  var Bt = [];
  const Jb = 16;
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  const Mb = 7;
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      zt();
    } else if (a === "Français") {
      yb();
    } else if (a === "Deutsch") {
      vb();
    } else if (a === "Español") {
      sb();
    } else if (a === "Português") {
      rb();
    } else if (a === "Русский") {
      ab();
    } else if (a === "Polski") {
      mb();
    }
    ⵠΔⲆⲆΔ = [];
    qx.ᐃⲆⵠⵠ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  dr = "EN";
  const Bb = 2;
  var Db;
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      dr = "RU";
      break;
    case "en":
      dr = "EN";
      break;
    case "es":
      dr = "SP";
      break;
    case "fr":
      dr = "FR";
      break;
    case "pl":
      dr = "PL";
      break;
    case "de":
      dr = "DE";
      break;
    case "pt":
      dr = "PT";
  }
  function Ct(a, b, c, d, e) {
    vj(Qq, a, b, c, d, e);
    return ((27 + (vt(Pq[0], Pq[1], Pq[2]) ^ bk(Pq[3], Pq[4], Pq[0], Pq[1], Pq[2]))) * 8121 + 28411) % 134456;
  }
  if (dr === "FR") {
    $(".md-languages label button").text("Français");
    Db = yb;
  } else if (dr === "PL") {
    $(".md-languages label button").text("Polski");
    Db = mb;
  } else if (dr === "PT") {
    $(".md-languages label button").text("Português");
    Db = rb;
  } else if (dr === "SP") {
    $(".md-languages label button").text("Español");
    Db = sb;
  } else if (dr === "RU") {
    $(".md-languages label button").text("Русский");
    Db = ab;
  } else if (dr === "DE") {
    $(".md-languages label button").text("Deutsch");
    Db = vb;
  } else {
    $(".md-languages label button").text("English");
    Db = zt;
  }
  const Ib = 20;
  function Sb(a, b, c) {
    wj(Qq, a, b, c);
    return ((40 + (rr(Pq[0], Pq[1], Pq[2]) ^ rr(Pq[0], Pq[1], Pq[2]))) * 75 + 74) % 65537;
  }
  Δᐃ = {
    ⲆⲆᐃⲆᐃⲆΔᐃᐃ: "img/logo.png",
    ⵠᐃⵠΔⲆᐃΔ: "img/mapday.png",
    ΔᐃᐃⵠΔΔΔ: "img/mapnight.png",
    ⵠⲆⲆᐃⲆΔΔⲆⵠ: "img/bigzday.png",
    ᐃΔⵠⲆⵠᐃⲆΔᐃ: "img/bigznight.png",
    ᐃⲆⲆⲆᐃⵠⲆ: "img/bigday-river1.png",
    ᐃΔⲆΔⵠᐃⵠⲆⲆ: "img/bigday-lake.png",
    ⲆΔΔᐃⵠᐃⲆ: "img/bigday-berry.png",
    ⵠᐃᐃΔⵠΔᐃ: "img/bigday-stone1.png",
    ⵠⲆΔⵠⵠΔⲆ: "img/bigday-stone2.png",
    ΔⵠᐃᐃⲆᐃᐃ: "img/bigday-gold1.png",
    ᐃⵠᐃΔΔᐃΔ: "img/bigday-gold2.png",
    ⵠⲆᐃⵠᐃⲆΔ: "img/bigday-emerald1.png",
    ⵠΔᐃᐃⲆΔΔ: "img/bigday-emerald2.png",
    ΔᐃᐃⲆⲆⵠᐃ: "img/bigday-amethyst.png",
    ⵠⵠᐃⲆⵠΔΔ: "img/bigday-bear.png",
    ΔᐃᐃⲆᐃᐃⵠ: "img/bigday-cave.png",
    ΔⵠⵠᐃΔΔⲆ: "img/bigday-diamond.png",
    ᐃΔᐃⵠⲆΔᐃ: "img/bigday-island.png",
    ⲆⲆⵠΔᐃⲆⲆ: "img/bigday-reidite.png",
    ᐃⵠᐃⲆⲆⲆⵠ: "img/bigday-spider.png",
    ΔᐃⲆⲆⲆⲆᐃ: "img/bigday-wolf.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/bigday-fir-tree.png",
    ᐃᐃⲆΔΔᐃᐃ: "img/bigday-fox.png",
    ᐃᐃⵠᐃᐃᐃΔ: "img/bigday-kraken.png",
    ⵠⲆᐃᐃᐃⲆΔ: "img/bigday-piranha.png",
    ⵠΔᐃⵠⵠⵠⲆ: "img/bigday-cactus.png",
    ΔΔᐃⲆᐃᐃΔ: "img/bigday-magma.png",
    ⲆⵠᐃⲆⲆⵠΔ: "img/bigday-river1.png",
    ΔΔΔⵠᐃᐃⵠᐃΔ: "img/bignight-lake.png",
    ⲆⲆⲆᐃΔᐃΔⲆⵠ: "img/bignight-berry.png",
    ᐃⵠΔⲆⵠΔⵠ: "img/bignight-stone1.png",
    ⲆⲆⵠᐃᐃᐃⵠ: "img/bignight-stone2.png",
    ⲆᐃⲆᐃⵠᐃⲆ: "img/bignight-gold1.png",
    ΔⲆⲆΔᐃⵠⵠ: "img/bignight-gold2.png",
    ⵠᐃⲆΔΔᐃⵠ: "img/bignight-emerald1.png",
    ⲆᐃⵠᐃⲆᐃⲆ: "img/bignight-emerald2.png",
    ⵠΔⵠⲆⵠⲆⵠ: "img/bignight-amethyst.png",
    ᐃΔᐃᐃⲆΔᐃ: "img/bignight-bear.png",
    ⵠᐃΔⲆⲆΔᐃ: "img/bignight-cave.png",
    ⵠⲆΔⲆΔΔΔ: "img/bignight-diamond.png",
    ⲆⵠⵠⲆΔⲆⲆ: "img/bignight-island.png",
    ᐃᐃⵠⲆⲆᐃᐃ: "img/bignight-reidite.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/bignight-spider.png",
    ᐃΔⲆⲆΔᐃΔ: "img/bignight-wolf.png",
    ⵠⲆᐃⵠᐃΔⵠ: "img/bignight-fir-tree.png",
    ΔΔᐃᐃΔⵠⵠ: "img/bignight-fox.png",
    ΔⲆⵠⵠⲆᐃΔ: "img/bignight-kraken.png",
    ⲆⵠⲆᐃᐃⲆⲆ: "img/bignight-piranha.png",
    ΔᐃΔⵠᐃᐃⲆ: "img/bignight-cactus.png",
    ⵠⲆⲆᐃᐃΔⵠ: "img/bignight-magma.png",
    ⲆΔΔᐃⲆⲆⲆ: "img/bigday-desert.png",
    ΔⲆⲆⵠᐃΔⵠ: "img/bigday-winter.png",
    ⲆⵠΔⲆΔΔⵠ: "img/bigday-lava.png",
    ⲆΔᐃΔⲆᐃⵠ: "img/bigday-forest.png",
    ⵠᐃΔⵠⲆᐃᐃ: "img/bignight-desert.png",
    ⲆⵠⲆⲆΔⲆᐃ: "img/bignight-winter.png",
    ΔΔᐃΔⵠⵠᐃ: "img/bignight-lava.png",
    ⵠⲆⵠᐃⵠⵠⵠ: "img/bignight-forest.png",
    ᐃᐃⵠΔΔⲆΔ: "img/day-river-wave.png",
    ⵠΔΔⵠΔᐃⲆ: "img/night-river-wave.png",
    ⵠΔⵠⵠΔᐃⵠ: "img/day-fog0.png",
    ⵠΔᐃᐃΔⵠⲆ: "img/day-fog1.png",
    ᐃΔⲆᐃᐃⵠᐃ: "img/day-fog2.png",
    ᐃⵠΔⲆΔᐃⵠ: "img/night-fog0.png",
    ⲆᐃⲆᐃⲆᐃⵠ: "img/night-fog1.png",
    ⲆⲆⵠⲆΔΔⲆ: "img/night-fog2.png",
    ⵠⲆⵠⵠⲆⲆⲆ: "img/day-fogdesert0.png",
    ᐃᐃⲆⲆⵠⲆΔ: "img/day-fogdesert1.png",
    ⲆΔΔⲆΔΔⵠ: "img/day-fogdesert2.png",
    ⲆΔⵠᐃⵠΔⵠ: "img/night-fogdesert0.png",
    ᐃⲆⲆΔΔΔᐃ: "img/night-fogdesert1.png",
    ΔⲆⵠΔΔᐃⵠ: "img/night-fogdesert2.png",
    ΔᐃⲆΔⲆⲆΔ: "img/day-cross-server.png",
    ⲆΔΔⲆⵠⵠⵠ: "img/day-here-server.png",
    ⲆΔᐃⵠⵠΔⲆ: "img/day-finish-server.png",
    ΔΔᐃΔᐃⲆΔ: "img/day-item-server.png",
    Δⵠᐃⵠᐃⵠᐃ: "img/day-skull-server.png",
    ΔⲆΔⵠᐃⵠᐃ: "img/night-cross-server.png",
    ᐃⲆⵠⵠᐃΔᐃ: "img/night-here-server.png",
    ᐃᐃⲆⵠᐃⲆⲆ: "img/night-finish-server.png",
    ⲆΔⲆⲆⵠⲆⵠ: "img/night-item-server.png",
    ⵠᐃⵠⲆᐃⲆⲆ: "img/night-skull-server.png",
    ᐃⵠΔᐃⵠᐃⵠ: "img/day-reidite0.png",
    ⵠⵠⵠⲆΔᐃΔ: "img/night-reidite0.png",
    ΔⲆⵠⲆΔᐃⲆ: "img/day-reidite1.png",
    ΔΔⲆⲆⵠⵠᐃ: "img/night-reidite1.png",
    ⵠᐃⵠᐃⵠⲆᐃ: "img/day-reidite2.png",
    ⲆᐃᐃΔᐃᐃⲆ: "img/night-reidite2.png",
    ᐃⲆⵠΔⵠⵠⵠ: "img/day-lava1.png",
    ᐃⵠᐃⲆΔⵠⵠ: "img/night-lava1.png",
    ⲆⵠΔⲆΔⲆⲆ: "img/day-lava2.png",
    ⵠⲆΔᐃⵠⵠⵠ: "img/night-lava2.png",
    ᐃΔᐃⲆⵠⵠΔ: "img/day-lava3.png",
    Ⲇⵠᐃⵠᐃᐃᐃ: "img/night-lava3.png",
    ⵠⲆΔⲆΔᐃᐃ: "img/day-lava4.png",
    ᐃⲆΔΔΔΔᐃ: "img/night-lava4.png",
    ᐃⵠⲆⵠΔⲆᐃ: "img/day-lava5.png",
    ΔᐃⵠΔⵠᐃΔ: "img/night-lava5.png",
    ⲆᐃΔⲆⲆΔΔ: "img/day-lava6.png",
    ⵠᐃⵠⲆΔᐃⵠ: "img/night-lava6.png",
    ⵠⲆⲆΔᐃᐃⲆ: "img/day-lava-ground1.png",
    ⲆⵠⵠΔΔᐃⲆ: "img/night-lava-ground1.png",
    ᐃⵠΔᐃⵠⵠᐃ: "img/day-lava-ground2.png",
    ᐃⵠⵠΔⲆΔⲆ: "img/night-lava-ground2.png",
    ⲆΔⵠΔΔᐃⵠ: "img/day-lava-ground3.png",
    ΔᐃⲆΔΔⵠΔ: "img/night-lava-ground3.png",
    ΔⲆⵠΔᐃΔΔ: "img/day-lava-ground4.png",
    ⵠΔΔⵠᐃⵠΔ: "img/night-lava-ground4.png",
    ⲆᐃΔᐃⵠⲆΔ: "img/day-lava-ground5.png",
    ⵠᐃΔⲆⲆⲆΔ: "img/night-lava-ground5.png",
    ᐃⵠⵠⲆᐃΔⲆ: "img/day-lava-ground6.png",
    ᐃᐃᐃΔⵠᐃⲆ: "img/night-lava-ground6.png",
    ΔᐃⵠΔⲆΔⲆ: "img/day-fire-mob.png",
    ᐃⵠΔⵠⵠⲆⵠ: "img/night-fire-mob.png",
    ΔⵠⲆΔΔⲆⵠ: "img/hurt-fire-mob.png",
    ⵠⵠΔΔⵠᐃⲆ: "img/day-diamond-protection.png",
    ⲆⵠΔᐃΔᐃⲆ: "img/night-diamond-protection.png",
    ΔⲆⵠⵠΔⲆΔ: "img/day-hand-diamond-protection.png",
    ⵠⲆΔΔⵠⵠᐃ: "img/night-hand-diamond-protection.png",
    ᐃⵠⲆⲆⵠⲆᐃ: "img/inv-diamond-protection-out.png",
    ΔⲆⲆᐃⲆᐃⵠ: "img/inv-diamond-protection-in.png",
    ⵠᐃⲆⲆⲆⵠΔ: "img/inv-diamond-protection-click.png",
    ⲆⵠΔⵠⲆᐃᐃ: "img/day-amethyst-protection.png",
    ΔⵠᐃⵠⲆⵠᐃ: "img/night-amethyst-protection.png",
    ⲆΔΔⲆᐃⲆⲆⲆⲆ: "img/day-hand-amethyst-protection.png",
    ΔⲆᐃᐃΔΔⲆⲆᐃ: "img/night-hand-amethyst-protection.png",
    ⵠⵠⲆΔᐃΔⲆ: "img/inv-amethyst-protection-out.png",
    ⲆΔΔⵠⵠⲆⵠ: "img/inv-amethyst-protection-in.png",
    ⲆᐃⵠⵠⲆᐃⲆ: "img/inv-amethyst-protection-click.png",
    ⵠⲆᐃⲆΔΔⵠ: "img/day-reidite-sword.png",
    ᐃⵠⲆⵠᐃⲆⵠ: "img/night-reidite-sword.png",
    ᐃⵠⵠⵠⵠᐃⲆ: "img/inv-reidite-sword-out.png",
    ⲆⲆΔΔΔⵠⵠ: "img/inv-reidite-sword-in.png",
    ⵠⵠΔΔⵠΔᐃ: "img/inv-reidite-sword-click.png",
    ⵠᐃⵠⲆᐃⵠⲆ: "img/inv-reidite-out.png",
    ᐃΔΔⲆᐃⲆⲆ: "img/inv-reidite-in.png",
    ΔΔⲆⲆⲆΔⵠ: "img/inv-reidite-click.png",
    ΔΔᐃⲆⵠⲆⲆ: "img/inv-flame-out.png",
    ⵠΔᐃⵠⲆⵠᐃ: "img/inv-flame-in.png",
    ⲆⵠⲆⵠᐃᐃΔ: "img/inv-flame-click.png",
    ΔⵠΔⲆⲆⲆⲆ: "img/day-magma-buble0.png",
    ⲆᐃⵠᐃᐃⲆᐃ: "img/night-magma-buble0.png",
    ΔᐃⵠΔᐃΔᐃ: "img/day-magma-buble1.png",
    ⵠⲆΔΔΔΔΔ: "img/night-magma-buble1.png",
    ⲆᐃΔᐃΔᐃⲆ: "img/day-magma-buble2.png",
    ⲆᐃᐃⲆⵠⵠⵠ: "img/night-magma-buble2.png",
    ⲆⲆΔᐃⲆΔΔ: "img/day-lava-dragon.png",
    ᐃᐃΔⲆⵠΔᐃ: "img/night-lava-dragon.png",
    ⵠⵠᐃΔᐃᐃΔΔⲆ: "img/day-fire-dragon.png",
    ⲆᐃΔⲆⵠᐃⵠᐃⵠ: "img/night-fire-dragon.png",
    ⲆⲆⵠᐃⵠᐃΔ: "img/hurt-lava-dragon.png",
    ΔⲆᐃⲆⵠᐃⵠ: "img/day-lava-wing-left.png",
    ΔⲆⵠⲆⲆᐃΔ: "img/night-lava-wing-left.png",
    ΔⲆᐃⲆᐃⲆⵠ: "img/day-lava-wing-right.png",
    ᐃⵠⵠᐃᐃΔⲆ: "img/night-lava-wing-right.png",
    ΔΔⲆᐃᐃᐃⲆ: "img/hurt-lava-wing-left.png",
    ⵠᐃᐃᐃᐃⲆⲆ: "img/hurt-lava-wing-right.png",
    ⵠᐃⲆⵠᐃⲆⲆ: "img/day-reidite-spear.png",
    ⲆⲆᐃⵠᐃⵠⵠ: "img/night-reidite-spear.png",
    ᐃΔⲆⲆᐃΔⵠ: "img/inv-reidite-spear-out.png",
    ⲆⲆᐃⲆᐃΔⲆ: "img/inv-reidite-spear-in.png",
    ᐃΔⲆΔⵠⵠⲆ: "img/inv-reidite-spear-click.png",
    ⲆⲆⵠⲆΔⵠᐃ: "img/day-reidite-helmet.png",
    ⲆΔᐃΔᐃⵠⲆ: "img/night-reidite-helmet.png",
    ΔⵠⵠᐃΔⵠᐃ: "img/inv-reidite-helmet-out.png",
    ΔᐃⲆΔⵠⲆⵠ: "img/inv-reidite-helmet-in.png",
    ΔⲆⵠΔⲆᐃΔ: "img/inv-reidite-helmet-click.png",
    ΔⲆⵠΔⵠⵠⵠ: "img/day-hand-reidite-protection.png",
    ⲆᐃⵠᐃΔⲆᐃ: "img/night-hand-reidite-protection.png",
    ΔΔⲆⵠᐃΔⵠ: "img/day-reidite-protection.png",
    ᐃⲆΔⲆⲆᐃⲆ: "img/night-reidite-protection.png",
    ᐃⵠⲆᐃⵠΔⵠ: "img/inv-reidite-protection-out.png",
    ⲆΔᐃⲆⲆⵠᐃ: "img/inv-reidite-protection-in.png",
    ΔᐃⵠᐃⲆⵠⵠ: "img/inv-reidite-protection-click.png",
    ᐃⵠΔΔΔᐃⲆ: "img/day-lava-dragon-sword.png",
    ᐃᐃΔⲆᐃᐃΔ: "img/night-lava-dragon-sword.png",
    ΔⵠΔᐃᐃⲆⲆ: "img/inv-lava-dragon-sword-out.png",
    ⲆⵠᐃᐃⵠⵠΔ: "img/inv-lava-dragon-sword-in.png",
    ⲆⲆᐃⵠⲆΔΔ: "img/inv-lava-dragon-sword-click.png",
    ΔΔᐃᐃᐃⲆᐃ: "img/day-lava-spear.png",
    ⵠΔᐃᐃᐃⲆⵠ: "img/night-lava-spear.png",
    ⵠᐃⵠⵠᐃᐃⵠ: "img/inv-lava-spear-out.png",
    ⲆΔⵠᐃΔΔⲆ: "img/inv-lava-spear-in.png",
    ⲆΔᐃⵠⵠᐃᐃ: "img/inv-lava-spear-click.png",
    ΔⵠΔⲆⵠΔᐃ: "img/day-lava-helmet.png",
    ΔⵠᐃⲆⲆᐃΔ: "img/night-lava-helmet.png",
    ᐃΔΔᐃⲆⵠⲆ: "img/inv-lava-helmet-out.png",
    ᐃⲆΔΔⵠᐃⲆ: "img/inv-lava-helmet-in.png",
    ⵠⵠⵠⵠⵠᐃᐃ: "img/inv-lava-helmet-click.png",
    ᐃΔΔᐃᐃᐃⲆ: "img/day-witch-hat.png",
    ⲆΔᐃⵠⲆΔᐃ: "img/night-witch-hat.png",
    ΔⵠⲆⵠΔΔⲆ: "img/inv-witch-hat-out.png",
    ⲆΔΔⵠⵠⵠⵠ: "img/inv-witch-hat-in.png",
    ⲆⲆΔⲆΔΔΔ: "img/inv-witch-hat-click.png",
    ⲆⵠᐃⲆⲆⲆΔ: "img/day-nimbus2000.png",
    ⵠᐃⵠⵠΔⲆⲆ: "img/night-nimbus2000.png",
    ⵠⵠΔⵠΔᐃΔ: "img/inv-nimbus2000-out.png",
    ᐃⲆⲆⵠᐃⲆᐃ: "img/inv-nimbus2000-in.png",
    ᐃΔⵠᐃⲆΔᐃ: "img/inv-nimbus2000-click.png",
    ᐃᐃⵠΔΔⲆⵠ: "img/day-accessory1-pacques.png",
    ᐃΔⲆⲆΔⵠᐃ: "img/night-accessory1-pacques.png",
    ⵠᐃⵠⵠⵠΔⲆ: "img/day-accessory2-pacques.png",
    ⲆⵠⲆⵠΔᐃⲆ: "img/night-accessory2-pacques.png",
    ΔⵠⲆΔΔΔΔ: "img/day-accessory3-pacques.png",
    ΔᐃⵠⲆΔᐃⵠ: "img/night-accessory3-pacques.png",
    ⲆᐃᐃΔⲆⵠᐃ: "img/day-accessory5-pacques.png",
    ᐃᐃΔᐃᐃⵠᐃ: "img/night-accessory5-pacques.png",
    ⲆᐃΔⲆⵠⲆⲆ: "img/day-accessory6-pacques.png",
    ⲆⵠᐃᐃⵠᐃΔ: "img/night-accessory6-pacques.png",
    ⵠᐃΔΔΔⵠᐃ: "img/day-accessory7-pacques.png",
    ⵠⲆⲆⲆΔΔΔ: "img/night-accessory7-pacques.png",
    ᐃᐃᐃΔⵠⲆⵠ: "img/day-accessory8-pacques.png",
    ⵠⵠᐃΔᐃⲆΔ: "img/night-accessory8-pacques.png",
    ⲆᐃⵠⵠΔᐃΔ: "img/day-bag-pacques.png",
    ⲆⲆⲆΔⲆᐃⲆ: "img/night-bag-pacques.png",
    ᐃᐃⲆⵠⲆΔⵠ: "img/day-carrot.png",
    ΔⲆⲆᐃⲆⲆΔ: "img/night-carrot.png",
    ⲆⵠⵠⵠΔⲆⵠ: "img/day-carrot-dried.png",
    ᐃⵠᐃⵠⲆᐃᐃ: "img/night-carrot-dried.png",
    ᐃⲆΔᐃⲆᐃᐃ: "img/day-tomato-herb.png",
    ⵠᐃⲆΔⲆⲆⵠ: "img/night-tomato-herb.png",
    ⲆⵠΔⵠⲆⵠⲆ: "img/day-tomato-herb-dried.png",
    ⵠⵠⵠΔⵠΔΔ: "img/night-tomato-herb-dried.png",
    ᐃⵠⵠᐃⵠΔⵠ: "img/day-tomato.png",
    ᐃⲆⵠⲆⲆⲆᐃ: "img/night-tomato.png",
    ᐃΔᐃⵠⲆⲆΔ: "img/inv-carrot-out.png",
    ΔⲆΔᐃᐃⲆᐃ: "img/inv-carrot-in.png",
    ⲆΔⵠᐃᐃΔⵠ: "img/inv-carrot-click.png",
    ⵠᐃⲆᐃⲆΔⲆ: "img/inv-tomato-out.png",
    ᐃΔᐃᐃⲆⵠⵠ: "img/inv-tomato-in.png",
    ⵠⲆⵠΔᐃⲆⲆ: "img/inv-tomato-click.png",
    ⵠᐃΔⵠⲆΔⲆ: "img/day-player0.png",
    ᐃⵠⵠΔΔΔᐃ: "img/night-player0.png",
    ΔΔΔⵠᐃΔⵠ: "img/day-player1.png",
    ⲆⲆᐃΔⲆⲆΔ: "img/night-player1.png",
    ⵠᐃΔΔᐃᐃᐃ: "img/day-player2.png",
    ⵠⵠΔᐃᐃⵠⵠ: "img/night-player22.png",
    ΔⵠΔⵠΔᐃⵠ: "img/day-player3.png",
    ᐃⵠᐃᐃΔⲆΔ: "img/night-player33.png",
    ΔᐃΔⲆΔⲆᐃ: "img/day-player4.png",
    ⵠⵠⵠΔΔⵠⲆ: "img/night-player4.png",
    ⲆᐃⵠᐃⵠᐃⲆ: "img/day-player5.png",
    ΔⵠⲆΔᐃⵠⵠ: "img/night-player5.png",
    ΔᐃⲆΔⲆⲆⵠ: "img/day-player6.png",
    ᐃᐃΔΔⲆᐃⲆ: "img/night-player6.png",
    ᐃⲆⲆΔᐃᐃΔ: "img/day-player7.png",
    ᐃᐃΔⲆΔⲆΔ: "img/night-player7.png",
    ⲆΔΔⵠᐃΔᐃ: "img/day-player8.png",
    ΔⵠΔⵠⲆΔΔ: "img/night-player8.png",
    ΔⲆⲆⵠΔᐃΔ: "img/day-player9.png",
    ⲆᐃⵠᐃΔΔΔ: "img/night-player9.png",
    ⵠᐃΔⲆⵠΔΔ: "img/day-player10.png",
    ᐃⲆⵠⲆⵠⲆⵠ: "img/night-player10.png",
    ⲆᐃⲆᐃⵠⲆⵠ: "img/day-player11.png",
    ᐃᐃⲆⲆⲆⲆΔ: "img/night-player11.png",
    ⵠⲆⲆⲆⵠⲆⵠ: "img/day-player12.png",
    ⵠΔΔᐃⵠⵠⵠ: "img/night-player12.png",
    ⲆᐃΔⲆⵠᐃⲆ: "img/day-player13.png",
    ⵠⲆΔⲆΔΔⵠ: "img/night-player13.png",
    ᐃⲆⵠⵠᐃⵠΔ: "img/day-player14.png",
    ΔⵠΔⵠⲆΔⵠ: "img/night-player14.png",
    ⲆⵠΔⲆⵠⲆΔ: "img/day-player15.png",
    ᐃⲆᐃⲆⵠΔΔ: "img/night-player15.png",
    ᐃⲆΔⵠΔᐃⲆ: "img/day-player16.png",
    ΔᐃΔⵠⲆᐃⲆ: "img/night-player16.png",
    ⵠⲆⲆΔΔΔΔ: "img/day-player17.png",
    ⵠᐃⲆⲆⵠᐃᐃ: "img/night-player17.png",
    ⵠⵠᐃᐃᐃⲆⵠ: "img/day-player18.png",
    ΔⵠⲆᐃⲆΔⵠ: "img/night-player18.png",
    ΔⲆΔⵠᐃΔⲆ: "img/day-player19.png",
    ᐃᐃᐃⵠΔⵠⵠ: "img/night-player19.png",
    ᐃᐃΔⲆᐃΔⲆ: "img/day-hand-player0.png",
    ᐃᐃᐃΔⲆᐃᐃ: "img/night-hand-player0.png",
    ⵠᐃΔⲆΔⲆᐃ: "img/day-hand-player1.png",
    ᐃⵠΔΔᐃᐃΔ: "img/night-hand-player1.png",
    ⵠΔᐃⵠⲆᐃᐃ: "img/day-hand-player2.png",
    ⲆⵠᐃΔⵠⵠΔ: "img/night-hand-player22.png",
    ⲆⲆⵠⵠⲆΔᐃ: "img/day-hand-player3.png",
    ⵠΔⲆΔⵠΔⲆ: "img/night-hand-player33.png",
    ⲆⵠⵠⲆᐃⵠΔ: "img/day-hand-player4.png",
    ⵠΔⵠΔᐃΔΔ: "img/night-hand-player4.png",
    ᐃⲆⵠⲆⵠⲆⲆ: "img/day-hand-player5.png",
    ᐃⲆΔΔⵠᐃᐃ: "img/night-hand-player5.png",
    ΔΔᐃΔⵠⲆᐃ: "img/day-hand-player6.png",
    ΔⲆᐃⵠᐃⲆⵠ: "img/night-hand-player6.png",
    ⲆᐃΔΔΔⲆΔ: "img/day-hand-player7.png",
    ᐃΔᐃⵠⲆΔⲆ: "img/night-hand-player7.png",
    ⵠΔᐃⵠᐃⵠᐃ: "img/day-hand-player8.png",
    ΔΔΔⲆᐃᐃⵠ: "img/night-hand-player8.png",
    ᐃᐃΔⵠΔΔⲆ: "img/day-hand-player9.png",
    ΔⵠⵠⵠᐃΔᐃ: "img/night-hand-player9.png",
    ⵠᐃⲆΔᐃⲆⲆ: "img/day-hand-player10.png",
    ⲆᐃΔᐃⵠⲆⲆ: "img/night-hand-player10.png",
    ΔⵠⵠᐃⲆΔⲆ: "img/day-hand-player11.png",
    ⲆⲆⲆΔΔⵠⵠ: "img/night-hand-player11.png",
    ΔΔΔᐃⵠⵠⵠ: "img/day-hand-player12.png",
    ⵠⵠΔΔⲆΔⲆ: "img/night-hand-player12.png",
    ⲆⵠⵠΔⲆᐃⵠ: "img/day-hand-player13.png",
    ⵠᐃΔΔⵠᐃᐃ: "img/night-hand-player13.png",
    ⲆΔⵠᐃᐃⵠᐃ: "img/day-hand-player14.png",
    ⲆΔⲆⵠⲆΔᐃ: "img/night-hand-player14.png",
    ⵠΔⲆΔⲆΔⲆ: "img/day-hand-player15.png",
    ⵠᐃΔᐃⲆᐃⲆ: "img/night-hand-player15.png",
    ⲆⲆΔΔΔⵠΔ: "img/day-hand-player16.png",
    ⲆⲆⵠⵠΔᐃᐃ: "img/night-hand-player16.png",
    ΔᐃⵠΔⲆΔᐃ: "img/day-hand-player17.png",
    ᐃⵠⲆⵠⵠᐃⲆ: "img/night-hand-player17.png",
    ᐃΔΔᐃⲆⵠΔ: "img/day-hand-player18.png",
    ⵠΔᐃⵠⲆⵠΔ: "img/night-hand-player18.png",
    ΔⲆⲆⵠⵠᐃᐃ: "img/day-hand-player19.png",
    ΔᐃΔⲆᐃⵠⵠ: "img/night-hand-player19.png",
    ⲆⵠⵠᐃᐃⲆⵠ: "img/day-accessory4.png",
    ⵠᐃⲆⵠᐃᐃⵠ: "img/night-accessory4.png",
    ᐃⵠᐃⵠᐃᐃⲆ: "img/day-accessory9.png",
    ⲆΔΔᐃⵠⲆΔ: "img/night-accessory9.png",
    ΔⵠᐃⵠⵠᐃⲆ: "img/day-accessory10.png",
    ᐃΔⵠⲆΔⵠΔ: "img/night-accessory10.png",
    ⲆΔⵠΔⵠⵠⲆ: "img/day-accessory11.png",
    ΔΔΔΔⲆⵠᐃ: "img/night-accessory11.png",
    ΔⵠΔᐃᐃⵠΔ: "img/day-accessory12.png",
    ᐃΔⵠⵠΔⲆΔ: "img/night-accessory12.png",
    ⲆⵠⲆΔⲆⵠⵠ: "img/day-bag.png",
    ⵠΔΔᐃⲆⲆΔ: "img/night-bag.png",
    ⲆᐃΔⵠⲆΔΔ: "img/inv-bag-out.png",
    ⲆΔΔΔⲆΔⲆ: "img/inv-bag-in.png",
    ᐃΔⲆⵠⵠᐃⵠ: "img/inv-bag-click.png",
    ⲆΔΔⵠⲆΔⲆ: "img/day-pitchfork.png",
    ΔⲆΔⵠⲆⲆⲆ: "img/night-pitchfork.png",
    ΔⵠⵠᐃΔᐃᐃ: "img/inv-pitchfork-out.png",
    ΔᐃⵠᐃⲆᐃᐃ: "img/inv-pitchfork-in.png",
    ᐃⲆⲆΔᐃΔᐃ: "img/inv-pitchfork-click.png",
    ⵠⲆΔⲆᐃΔⵠ: "img/inv-wood-spike-door-out.png",
    ⲆⵠᐃⵠⲆⵠⲆ: "img/inv-wood-spike-door-in.png",
    ΔⲆⵠⵠⵠⵠΔ: "img/inv-wood-spike-door-click.png",
    ⵠᐃᐃᐃⵠᐃΔ: "img/inv-stone-spike-door-out.png",
    ΔᐃⵠⲆⲆᐃⲆ: "img/inv-stone-spike-door-in.png",
    ᐃᐃⲆᐃⲆⵠⵠ: "img/inv-stone-spike-door-click.png",
    ⲆⵠⲆᐃⲆⲆᐃ: "img/inv-gold-spike-door-out.png",
    ⲆΔⲆⵠᐃΔΔ: "img/inv-gold-spike-door-in.png",
    ᐃᐃΔΔΔⵠᐃ: "img/inv-gold-spike-door-click.png",
    ᐃⵠⵠᐃⲆᐃΔ: "img/inv-diamond-spike-door-out.png",
    ⵠᐃᐃⵠΔⲆᐃ: "img/inv-diamond-spike-door-in.png",
    ⲆⲆᐃΔΔᐃΔ: "img/inv-diamond-spike-door-click.png",
    ᐃⵠⲆⵠᐃⵠⵠ: "img/inv-amethyst-spike-door-out.png",
    ⵠⲆᐃⵠⲆΔᐃ: "img/inv-amethyst-spike-door-in.png",
    ⵠⵠᐃⲆⲆΔΔ: "img/inv-amethyst-spike-door-click.png",
    ΔⲆⲆⲆᐃⵠᐃ: "img/day-wood-spike-door.png",
    ⲆᐃᐃⲆⵠⲆⵠ: "img/night-wood-spike-door.png",
    ⲆⵠⲆΔᐃⵠᐃ: "img/day-stone-spike-door.png",
    ⵠᐃⵠᐃⵠᐃⵠ: "img/night-stone-spike-door.png",
    ᐃⵠⵠⲆᐃⵠⲆ: "img/day-gold-spike-door.png",
    ᐃⵠⲆⵠΔΔⲆ: "img/night-gold-spike-door.png",
    ⵠΔⵠΔⲆᐃᐃ: "img/day-diamond-spike-door.png",
    ⵠⵠᐃΔΔΔⲆ: "img/night-diamond-spike-door.png",
    ⲆⵠᐃⵠᐃΔⵠ: "img/day-amethyst-spike-door.png",
    ᐃⲆᐃΔⵠⲆⲆ: "img/night-amethyst-spike-door.png",
    ᐃᐃΔᐃⵠΔⵠ: "img/inv-reidite-spike-door-out.png",
    ΔΔΔᐃΔⲆⵠ: "img/inv-reidite-spike-door-in.png",
    ⲆΔⵠᐃᐃⵠΔ: "img/inv-reidite-spike-door-click.png",
    ⵠⵠΔᐃᐃⵠΔ: "img/inv-reidite-door-out.png",
    ⵠⵠΔᐃⲆΔⲆ: "img/inv-reidite-door-in.png",
    ΔᐃⲆⵠΔΔⲆ: "img/inv-reidite-door-click.png",
    ᐃᐃⲆⵠΔᐃᐃ: "img/inv-reidite-spike-out.png",
    ᐃΔⲆΔᐃΔⲆ: "img/inv-reidite-spike-in.png",
    ΔⲆⵠⲆⵠΔΔ: "img/inv-reidite-spike-click.png",
    ⲆⵠⵠⲆⵠⵠⲆ: "img/inv-reidite-wall-out.png",
    ⵠΔᐃⲆΔΔⲆ: "img/inv-reidite-wall-in.png",
    ΔΔⲆⵠⵠⵠⲆ: "img/inv-reidite-wall-click.png",
    ⵠⵠⲆⲆΔⲆΔ: "img/day-reidite-wall.png",
    ⵠᐃⵠⲆⲆᐃᐃ: "img/night-reidite-wall.png",
    ⲆⲆⵠΔⲆⲆⵠ: "img/day-reidite-door.png",
    ⵠⲆᐃᐃⲆⲆΔ: "img/night-reidite-door.png",
    ⵠᐃⵠΔⵠΔᐃ: "img/day-reidite-spike.png",
    ᐃⲆΔᐃΔⲆⲆ: "img/night-reidite-spike.png",
    ᐃⵠΔΔᐃΔΔ: "img/day-reidite-spike-door.png",
    ⵠⲆᐃⲆᐃΔᐃ: "img/night-reidite-spike-door.png",
    ΔᐃΔᐃⵠΔᐃ: "img/inv-reidite-pickaxe-out.png",
    ΔⵠⲆΔⲆΔⲆ: "img/inv-reidite-pickaxe-in.png",
    ᐃΔΔᐃΔⵠΔ: "img/inv-reidite-pickaxe-click.png",
    ⵠⲆᐃⵠᐃᐃΔ: "img/day-reidite-pickaxe.png",
    ⲆⲆⲆΔⲆⵠΔ: "img/night-reidite-pickaxe.png",
    ᐃⲆⵠΔⲆΔᐃ: "img/inv-reidite-hammer-out.png",
    ᐃⵠᐃⲆΔΔΔ: "img/inv-reidite-hammer-in.png",
    ΔⵠΔⲆⵠᐃⲆ: "img/inv-reidite-hammer-click.png",
    ᐃⵠⲆᐃⲆΔⲆ: "img/day-reidite-hammer.png",
    ⵠΔⵠⲆⵠⲆᐃ: "img/night-reidite-hammer.png",
    Δᐃᐃⵠᐃᐃⵠ: "img/day-watermelon1.png",
    ⵠⵠᐃᐃᐃᐃⲆ: "img/night-watermelon1.png",
    ᐃⲆΔᐃⵠΔⲆ: "img/day-watermelon-dried1.png",
    ΔⲆΔⲆᐃⵠΔ: "img/night-watermelon-dried1.png",
    ⵠⲆᐃᐃⵠΔⲆ: "img/inv-watermelon-out.png",
    ΔⵠⵠⲆΔᐃᐃ: "img/inv-watermelon-in.png",
    ⲆⵠⵠΔⵠᐃᐃ: "img/inv-watermelon-click.png",
    ⵠⵠᐃΔⵠⵠΔ: "img/day-boat.png",
    ᐃⲆⲆΔᐃⲆⲆ: "img/night-boat.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/day-boat-wave.png",
    ΔΔᐃΔⲆⲆⲆ: "img/night-boat-wave.png",
    ⲆⵠᐃΔΔⵠⲆ: "img/inv-boat-out.png",
    ⵠⲆⵠⵠᐃΔᐃ: "img/inv-boat-in.png",
    ᐃΔⲆⲆⵠⲆΔ: "img/inv-boat-click.png",
    ⲆⲆᐃⵠᐃΔⲆ: "img/day-plane.png",
    ᐃᐃΔⲆⵠᐃΔ: "img/night-plane.png",
    ΔⲆⵠⵠΔⵠⵠ: "img/inv-plane-out.png",
    ⵠⲆᐃⵠⵠΔⲆ: "img/inv-plane-in.png",
    ⲆΔⲆⲆΔⲆⵠ: "img/inv-plane-click.png",
    ⲆⲆΔΔΔΔⲆ: "img/day-sled.png",
    ᐃᐃΔⲆⲆΔΔ: "img/night-sled.png",
    ᐃᐃⵠⵠᐃⲆᐃ: "img/day-sled-wave.png",
    ΔΔⵠᐃⵠⲆⵠ: "img/night-sled-wave.png",
    ΔᐃⲆⲆᐃⲆΔ: "img/inv-sled-out.png",
    Δⵠᐃᐃᐃᐃⵠ: "img/inv-sled-in.png",
    ᐃⲆᐃΔⵠⵠᐃ: "img/inv-sled-click.png",
    ΔΔⵠⵠᐃⵠᐃ: "img/day-pirate-hat.png",
    ΔⲆΔⲆⵠΔⵠ: "img/night-pirate-hat.png",
    ⵠⲆⲆⲆⲆⵠΔ: "img/inv-pirate-hat-out.png",
    ⲆⲆᐃᐃⲆᐃⵠ: "img/inv-pirate-hat-in.png",
    ΔᐃΔΔⲆⲆⲆ: "img/inv-pirate-hat-click.png",
    ᐃⵠΔΔᐃΔⲆ: "img/day-penguin.png",
    ΔᐃⲆᐃΔⵠᐃ: "img/night-penguin.png",
    ΔᐃⵠᐃΔⲆⵠ: "img/hurt-penguin.png",
    ⲆΔⵠΔⵠ: "img/inv-penguin-feather-click.png",
    ΔⵠⵠⵠⲆ: "img/inv-hawk-feather-click.png",
    ⲆΔⲆⵠᐃΔⵠ: "img/day-boar1.png",
    ⲆⵠⵠΔⲆⲆⲆ: "img/day-boar1-tamed.png",
    ΔⲆΔⲆⵠⵠΔ: "img/day-boar1-angry.png",
    ⲆᐃⲆᐃΔⲆⵠ: "img/night-boar1.png",
    ᐃⵠⵠΔⵠⵠᐃ: "img/night-boar1-tamed.png",
    ⵠⵠᐃⵠⵠΔⲆ: "img/night-boar1-angry.png",
    ⲆᐃⵠΔⲆᐃⲆ: "img/inv-mount-boar-out.png",
    ΔⵠⲆΔᐃⲆⲆ: "img/inv-mount-boar-in.png",
    ⲆΔᐃᐃᐃᐃⲆ: "img/inv-mount-boar-click.png",
    ⲆⵠⲆᐃᐃᐃⲆ: "img/day-hurt-boar1.png",
    ᐃⲆΔΔⲆⲆⵠ: "img/boar1-step.png",
    ΔᐃΔΔⵠΔΔ: "img/day-saddle1.png",
    ⲆⵠⲆⲆⲆⲆᐃ: "img/night-saddle1.png",
    ⲆΔᐃᐃⲆΔⲆ: "img/inv-saddle-out.png",
    ⵠᐃⵠⵠⵠⵠΔ: "img/inv-saddle-in.png",
    ⵠΔⲆᐃⲆⲆΔ: "img/inv-saddle-click.png",
    ΔΔⲆΔᐃᐃⵠ: "img/day-magic-wand0.png",
    ⲆᐃᐃⲆⲆᐃⲆ: "img/night-magic-wand0.png",
    ᐃᐃⲆᐃⵠᐃⲆ: "img/day-light-wand1.png",
    ΔᐃⵠⵠⲆⵠΔ: "img/night-light-wand1.png",
    ⲆΔΔⲆⵠᐃⲆ: "img/inv-magic-wand0-out.png",
    ΔⵠΔⵠΔⲆⵠ: "img/inv-magic-wand0-in.png",
    ⲆⵠΔΔᐃᐃⲆ: "img/inv-magic-wand0-click.png",
    ⵠΔᐃⲆⲆΔⵠ: "img/day-magic-wand1.png",
    ⲆᐃᐃᐃΔᐃᐃ: "img/night-magic-wand1.png",
    ⲆⵠᐃⲆᐃΔⵠ: "img/day-light-wand0.png",
    ⵠΔᐃΔᐃⵠᐃ: "img/night-light-wand0.png",
    ᐃΔᐃⲆⲆⲆᐃ: "img/inv-magic-wand1-out.png",
    ⲆⵠⲆΔⵠᐃⵠ: "img/inv-magic-wand1-in.png",
    ⲆΔᐃⵠᐃⵠⵠ: "img/inv-magic-wand1-click.png",
    ΔᐃⵠᐃᐃⵠⲆ: "img/day-firefly.png",
    ΔⲆⲆⵠΔⵠⵠ: "img/night-firefly.png",
    ΔⲆⲆⲆΔΔᐃ: "img/hurt-firefly.png",
    ⲆⲆⲆⵠⲆᐃⵠ: "img/inv-firefly-out.png",
    ⲆᐃΔⲆΔⵠⵠ: "img/inv-firefly-in.png",
    ⵠⲆⲆⵠᐃⲆⵠ: "img/inv-firefly-click.png",
    ᐃⵠΔⲆΔⵠΔ: "img/day-baby-dragon.png",
    ΔᐃΔᐃᐃⲆⵠ: "img/night-baby-dragon.png",
    ᐃᐃΔΔᐃⵠᐃ: "img/day-baby-dragon-angry.png",
    ᐃᐃⵠᐃΔᐃⵠ: "img/night-baby-dragon-angry.png",
    ΔⲆⵠⲆΔΔⵠ: "img/day-baby-dragon-tamed.png",
    ᐃΔⲆⵠⲆᐃᐃ: "img/night-baby-dragon-tamed.png",
    ⲆⲆⲆΔΔⵠΔ: "img/day-wing-dragon-left-angry.png",
    Ⲇⵠᐃᐃⵠⵠⵠ: "img/night-dragon-wing-left-angry.png",
    ⲆᐃⲆᐃⵠⵠⲆ: "img/day-wing-dragon-right-angry.png",
    ᐃⲆΔⲆᐃᐃᐃ: "img/night-dragon-wing-right-angry.png",
    ΔⵠᐃⵠⲆⵠⲆ: "img/day-wing-dragon-left-tamed.png",
    ΔΔΔᐃⲆⲆᐃ: "img/night-dragon-wing-left-tamed.png",
    ᐃⵠⵠΔⵠΔᐃ: "img/day-wing-dragon-right-tamed.png",
    ᐃⵠⲆᐃᐃᐃΔ: "img/night-wing-dragon-right-tamed.png",
    ⵠⵠⲆΔᐃⲆⵠ: "img/day-wing-dragon-left.png",
    ⲆⲆⵠΔΔⲆᐃ: "img/night-dragon-wing-left.png",
    ⵠⵠⵠⵠᐃΔⵠ: "img/day-wing-dragon-right.png",
    ⵠⵠⲆᐃⵠΔΔ: "img/night-wing-dragon-right.png",
    ⵠⵠᐃⵠΔⲆΔ: "img/hurt-baby-dragon.png",
    ᐃⲆᐃᐃᐃⵠᐃ: "img/hurt-baby-dragon-wing-left.png",
    ⵠᐃⲆᐃᐃᐃⲆ: "img/hurt-baby-dragon-wing-right.png",
    ⲆⵠΔᐃⵠᐃⵠ: "img/inv-baby-dragon-out.png",
    ᐃⲆⵠⲆⲆⵠᐃ: "img/inv-baby-dragon-in.png",
    ΔⲆⵠᐃⵠⲆΔ: "img/inv-baby-dragon-click.png",
    ΔⵠᐃΔⲆⲆᐃ: "img/day-baby-lava.png",
    ᐃΔⵠΔⲆⵠⵠ: "img/night-baby-lava.png",
    ⲆᐃⵠⲆᐃⲆᐃ: "img/day-baby-lava-angry.png",
    ᐃᐃᐃⲆⲆᐃᐃ: "img/night-baby-lava-angry.png",
    ΔⲆᐃᐃⲆⲆᐃ: "img/day-baby-lava-tamed.png",
    ΔΔΔⲆΔᐃⲆ: "img/night-baby-lava-tamed.png",
    ΔΔᐃᐃⵠᐃⵠ: "img/day-wing-lava-left-angry.png",
    ᐃⵠᐃⲆΔⲆΔ: "img/night-wing-lava-left-angry.png",
    ΔⲆΔΔⵠᐃⲆ: "img/day-wing-lava-right-angry.png",
    ᐃⲆΔΔΔⲆᐃ: "img/night-wing-lava-right-angry.png",
    ⲆⵠⵠⵠⲆᐃⵠ: "img/day-wing-lava-left-tamed.png",
    ⲆᐃⵠΔΔⵠⲆ: "img/night-wing-lava-left-tamed.png",
    ⲆΔⲆⵠᐃᐃⲆ: "img/day-wing-lava-right-tamed.png",
    ⲆᐃΔΔᐃΔΔ: "img/night-wing-lava-right-tamed.png",
    ⲆⵠⵠⲆᐃⲆⵠ: "img/day-wing-lava-left.png",
    ⵠΔΔⵠΔΔᐃ: "img/night-wing-lava-left.png",
    ⵠᐃᐃΔⵠΔⲆ: "img/day-wing-lava-right.png",
    ΔⲆⲆⲆΔⵠⲆ: "img/night-wing-lava-right.png",
    ⵠⵠⲆΔⲆΔᐃ: "img/hurt-baby-lava.png",
    ᐃΔΔΔⵠⲆΔ: "img/hurt-baby-lava-wing-left.png",
    ΔⵠΔΔΔⵠᐃ: "img/hurt-baby-lava-wing-right.png",
    ΔⲆᐃΔᐃᐃⲆ: "img/inv-baby-lava-out.png",
    ΔⲆⵠⵠⵠⵠᐃ: "img/inv-baby-lava-in.png",
    ⲆⲆⵠᐃⵠΔⲆ: "img/inv-baby-lava-click.png",
    ΔⵠᐃⲆΔᐃⲆ: "img/day-falcon.png",
    ᐃⲆⵠΔᐃᐃⵠ: "img/night-falcon.png",
    ⲆΔⲆΔⲆΔⲆ: "img/day-falcon-angry.png",
    ᐃΔⵠᐃⲆᐃⵠ: "img/night-falcon-angry.png",
    ⲆⲆⲆⵠⵠⵠⲆ: "img/day-falcon-ground.png",
    ᐃΔⵠⵠΔⲆⲆ: "img/night-falcon-ground.png",
    ΔⵠΔΔΔⲆⲆ: "img/day-falcon-ground-angry.png",
    ΔⲆⵠⲆΔⲆⵠ: "img/night-falcon-ground-angry.png",
    ⵠᐃⲆΔΔⵠᐃ: "img/day-falcon-wings-left.png",
    ⲆⲆⵠΔΔΔΔ: "img/night-falcon-wings-left.png",
    ⵠⵠⵠⵠΔΔⵠ: "img/day-falcon-wings-right.png",
    ⲆⵠⲆΔΔⲆᐃ: "img/night-falcon-wings-right.png",
    ΔⲆΔⵠᐃⵠⲆ: "img/day-falcon-angry-wings-left.png",
    ⵠⲆⲆⲆᐃᐃⵠ: "img/night-falcon-angry-wings-left.png",
    ΔⲆⵠⵠΔⵠΔ: "img/day-falcon-angry-wings-right.png",
    ΔᐃⲆⵠⵠⵠⲆ: "img/night-falcon-angry-wings-right.png",
    ⵠⵠᐃΔᐃᐃⲆ: "img/day-falcon-wings-left-tamed.png",
    ⵠⵠΔⵠᐃᐃⲆ: "img/night-falcon-wings-left-tamed.png",
    ⵠⲆΔⵠᐃΔⵠ: "img/day-falcon-wings-right-tamed.png",
    ⵠΔᐃⵠⵠᐃⵠ: "img/night-falcon-wings-right-tamed.png",
    ΔΔⵠΔΔⲆᐃ: "img/day-falcon-tamed.png",
    ⵠⲆⲆΔΔΔᐃ: "img/night-falcon-tamed.png",
    ⵠᐃᐃΔⲆⲆⲆ: "img/hurt-falcon-ground.png",
    ⲆⵠᐃⵠᐃⲆᐃ: "img/hurt-falcon.png",
    ᐃΔᐃΔΔΔΔ: "img/hurt-falcon-wings-left.png",
    ΔⵠⵠⲆⵠⲆⲆ: "img/hurt-falcon-wings-right.png",
    ΔⵠᐃΔᐃⵠⲆ: "img/inv-falcon-out.png",
    ΔΔⲆΔⲆΔⲆ: "img/inv-falcon-in.png",
    ᐃᐃⵠⵠⲆⵠⵠ: "img/inv-falcon-click.png",
    ⵠⵠᐃⵠᐃᐃⵠ: "img/day-crab-boss.png",
    ⵠΔⵠⵠⵠⲆⵠ: "img/night-crab-boss.png",
    ΔⵠᐃⵠᐃⲆᐃ: "img/day-crab-boss-angry.png",
    ᐃΔⲆⵠᐃΔΔ: "img/night-crab-boss-angry.png",
    ΔΔⵠⵠⵠΔⲆ: "img/day-crab-boss-tamed.png",
    ᐃⵠⲆΔⲆᐃΔ: "img/night-crab-boss-tamed.png",
    ΔᐃᐃⵠⲆⲆⲆ: "img/day-crab-boss-claw-left-attack.png",
    ⵠΔΔⵠⵠⲆⲆ: "img/night-crab-boss-claw-left-attack.png",
    ᐃᐃⵠΔᐃᐃⲆ: "img/day-crab-boss-claw-right-attack.png",
    ΔⵠⲆⵠⵠᐃΔ: "img/night-crab-boss-claw-right-attack.png",
    ⵠⵠΔⵠᐃᐃᐃᐃᐃ: "img/day-crab-boss-claw-left-tamed.png",
    ⲆⵠΔⲆⲆⲆⵠⲆⲆ: "img/night-crab-boss-claw-left-tamed.png",
    ⵠΔΔΔⵠⵠⲆⵠⵠ: "img/day-crab-boss-claw-right-tamed.png",
    ΔᐃΔΔⲆⵠⵠΔⲆ: "img/night-crab-boss-claw-right-tamed.png",
    ᐃⵠΔᐃΔⵠᐃ: "img/day-crab-boss-claw-left.png",
    ᐃᐃΔⲆΔΔⲆ: "img/night-crab-boss-claw-left.png",
    ΔᐃΔⲆΔᐃΔ: "img/day-crab-boss-claw-right.png",
    ΔΔᐃᐃΔⲆⲆ: "img/night-crab-boss-claw-right.png",
    ΔⵠⲆⵠⲆⲆΔ: "img/hurt-crab-boss.png",
    ΔⲆⵠⲆⲆⲆΔ: "img/hurt-crab-boss-claw-left.png",
    ⲆΔᐃᐃΔⵠΔ: "img/hurt-crab-boss-claw-right.png",
    ΔⵠⲆᐃⵠΔⵠ: "img/heal-crab-boss.png",
    ΔΔⵠΔᐃᐃᐃ: "img/heal-crab-boss-claw-left.png",
    ⵠⵠⵠᐃⵠᐃⲆ: "img/heal-crab-boss-claw-right.png",
    ⵠⵠᐃⵠΔᐃΔ: "img/crab-step.png",
    ᐃⵠⲆΔΔⲆᐃ: "img/inv-crab-boss-out.png",
    ⲆⲆᐃⵠⲆⲆᐃ: "img/inv-crab-boss-in.png",
    ⵠᐃΔⲆᐃⲆΔ: "img/inv-crab-boss-click.png",
    ⲆⵠΔᐃⵠᐃΔ: "img/day-cactus10.png",
    ⲆⵠⵠⵠⵠᐃΔ: "img/night-cactus10.png",
    ΔⵠⲆⵠᐃΔⵠ: "img/inv-cactus-out.png",
    ᐃⵠⲆΔⵠⲆᐃ: "img/inv-cactus-in.png",
    ᐃⵠⵠⵠⲆᐃⲆ: "img/inv-cactus-click.png",
    ⲆⲆⲆⵠᐃᐃⲆ: "img/day-scorpion.png",
    ⲆᐃΔΔΔΔᐃ: "img/night-scorpion.png",
    ᐃⲆᐃΔⲆⵠᐃ: "img/day-scorpion-hand-left.png",
    ⲆⵠᐃⲆⵠᐃᐃ: "img/night-scorpion-hand-left.png",
    ⵠⵠᐃᐃⲆⵠⲆ: "img/day-scorpion-hand-right.png",
    ᐃⵠⵠⵠΔΔᐃ: "img/night-scorpion-hand-right.png",
    ⲆΔⵠⵠⲆⲆⵠ: "img/hurt-scorpion.png",
    ᐃᐃⵠᐃⲆᐃⲆ: "img/hurt-scorpion-hand-left.png",
    ᐃΔΔᐃᐃⲆᐃ: "img/hurt-scorpion-hand-right.png",
    ⲆⵠⲆⲆᐃⲆⲆ: "img/day-vulture.png",
    ⵠⵠΔΔⲆΔᐃ: "img/night-vulture.png",
    ⵠΔⲆᐃΔᐃⲆ: "img/day-vulture-angry.png",
    ΔΔᐃⵠΔⵠⵠ: "img/night-vulture-angry.png",
    ᐃΔⲆⵠΔΔᐃ: "img/day-vulture-ground.png",
    ΔⲆⲆᐃⲆⲆⲆ: "img/night-vulture-ground.png",
    ⲆΔᐃⲆⵠⵠⵠ: "img/day-vulture-ground-angry.png",
    ᐃⵠⲆΔᐃⵠΔ: "img/night-vulture-ground-angry.png",
    ᐃⲆⵠⲆᐃΔⲆ: "img/day-vulture-wings-left.png",
    ⲆᐃΔΔΔᐃⵠ: "img/night-vulture-wings-left.png",
    ⵠΔⵠᐃⲆⵠⲆ: "img/day-vulture-wings-right.png",
    ⲆⵠᐃⲆⵠⲆΔ: "img/night-vulture-wings-right.png",
    ΔⵠⲆⵠⵠⲆⲆ: "img/day-vulture-angry-wings-left.png",
    ⵠⲆᐃᐃⲆⲆⲆ: "img/night-vulture-angry-wings-left.png",
    ΔⵠΔⵠᐃⲆᐃ: "img/day-vulture-angry-wings-right.png",
    ⲆᐃⲆⵠⲆᐃⵠ: "img/night-vulture-angry-wings-right.png",
    ΔΔⵠᐃⵠΔΔ: "img/day-vulture-wings-left-tamed.png",
    ᐃⵠⲆΔᐃΔⵠ: "img/night-vulture-wings-left-tamed.png",
    ⲆΔᐃⲆΔᐃⵠ: "img/day-vulture-wings-right-tamed.png",
    ⲆΔΔⵠⵠⵠΔ: "img/night-vulture-wings-right-tamed.png",
    ΔⲆᐃⲆⲆΔΔ: "img/day-vulture-tamed.png",
    ΔⵠᐃⵠᐃⲆΔ: "img/night-vulture-tamed.png",
    ⵠᐃⲆⲆΔⲆⵠ: "img/hurt-vulture-ground.png",
    ⵠⵠⵠᐃᐃΔΔ: "img/hurt-vulture.png",
    ⵠⲆᐃᐃⵠⵠᐃ: "img/hurt-vulture-wings-left.png",
    ⲆΔⲆⵠⲆⵠᐃ: "img/hurt-vulture-wings-right.png",
    ᐃᐃᐃᐃΔᐃⲆ: "img/day-aloe-vera.png",
    ⲆΔⲆΔΔΔⵠ: "img/night-aloe-vera.png",
    ⵠᐃⵠᐃⵠⵠᐃ: "img/inv-aloe-vera-out.png",
    ⲆⵠΔΔⲆΔᐃ: "img/inv-aloe-vera-in.png",
    ⲆᐃᐃΔⵠᐃⲆ: "img/inv-aloe-vera-click.png",
    ᐃⲆΔᐃⵠⲆⲆ: "img/day-aloe-vera-grown.png",
    ⲆⵠΔⵠⵠⵠⵠ: "img/night-aloe-vera-grown.png",
    ⵠΔᐃᐃΔⵠΔ: "img/day-aloe-vera-dried.png",
    ⵠΔᐃᐃⲆⵠᐃ: "img/night-aloe-vera-dried.png",
    ⲆΔᐃΔⲆΔⲆ: "img/day-turban1.png",
    ⵠⲆⲆⵠⵠΔΔ: "img/night-turban1.png",
    ᐃⵠⵠΔΔΔⵠ: "img/day-turban2.png",
    ⲆᐃⵠⲆⵠⲆⲆ: "img/night-turban2.png",
    ⲆᐃⲆᐃΔⵠⲆ: "img/inv-turban2-out.png",
    ΔΔᐃΔᐃᐃΔ: "img/inv-turban2-in.png",
    ᐃΔⵠΔᐃᐃⲆ: "img/inv-turban2-click.png",
    ⲆᐃᐃΔⵠⲆⲆ: "img/inv-turban1-out.png",
    ᐃⲆᐃⵠⵠⵠΔ: "img/inv-turban1-in.png",
    ⵠⵠᐃᐃᐃᐃⵠ: "img/inv-turban1-click.png",
    ⲆᐃΔᐃⵠⲆᐃ: "img/day-pitchfork2.png",
    ᐃᐃᐃΔᐃⵠᐃ: "img/night-pitchfork2.png",
    ⲆᐃⵠⲆΔⵠⵠ: "img/inv-pitchfork2-out.png",
    ⵠΔΔⵠⵠᐃⲆ: "img/inv-pitchfork2-in.png",
    ⲆⵠΔⵠⵠΔⵠ: "img/inv-pitchfork2-click.png",
    ⵠΔΔⵠⵠᐃᐃ: "img/inv-gold-fork-click.png",
    ⵠⲆⲆΔⵠΔⵠ: "img/inv-pilot-glasses-click.png",
    ΔΔΔᐃΔⲆᐃ: "img/day-pilot-helmet.png",
    ⲆᐃⵠⲆⵠᐃΔ: "img/night-pilot-helmet.png",
    ᐃΔⵠⲆⵠⵠΔ: "img/inv-pilot-helmet-out.png",
    ⲆⵠⵠᐃⵠᐃΔ: "img/inv-pilot-helmet-in.png",
    ᐃⵠⲆᐃΔⲆΔ: "img/inv-pilot-helmet-click.png",
    ᐃᐃⲆⲆⵠⲆⵠⵠⵠ: "img/day-sandworm0.png",
    ⵠᐃΔΔⲆΔⲆ: "img/day-sandworm1.png",
    ⵠᐃΔΔⵠᐃΔ: "img/day-sandworm2.png",
    ᐃⵠⵠⲆⲆΔΔᐃⲆ: "img/night-sandworm0.png",
    ⲆΔΔⵠⵠⲆΔ: "img/night-sandworm1.png",
    ⲆΔⲆⵠΔⲆΔ: "img/night-sandworm2.png",
    ᐃⲆᐃⲆΔᐃⵠ: "img/hurt-sandworm0.png",
    ᐃᐃΔΔⲆⵠΔ: "img/hurt-sandworm1.png",
    ⲆᐃⵠⵠⵠⲆᐃ: "img/hurt-sandworm2.png",
    ΔᐃΔⵠΔ: "img/inv-vulture-feather-click.png",
    ᐃᐃΔᐃⲆⵠⲆ: "img/day-emerald0.png",
    ⵠᐃΔΔⲆⵠⵠ: "img/night-emerald0.png",
    ⵠⵠⲆⲆΔᐃⲆ: "img/day-emerald1.png",
    ⲆΔⵠⵠⲆΔΔ: "img/night-emerald1.png",
    ⲆΔⲆⵠⵠⵠΔ: "img/day-emerald2.png",
    ᐃⵠⲆⲆΔⲆⵠ: "img/night-emerald2.png",
    ⲆⵠΔᐃⲆ: "img/inv-emerald-click.png",
    ΔⲆᐃⲆⵠᐃⲆ: "img/inv-sworm-juice-out.png",
    ᐃΔΔⲆⵠⵠⵠ: "img/inv-sworm-juice-in.png",
    ΔΔⲆⲆⲆⵠΔ: "img/inv-sworm-juice-click.png",
    ΔⵠⲆⵠᐃΔΔ: "img/day-point-machine.png",
    ⲆᐃΔᐃⵠⵠⲆ: "img/night-point-machine.png",
    ΔⲆΔΔᐃᐃᐃ: "img/day-point-machine-hole.png",
    ΔᐃⵠⵠⵠⲆΔ: "img/night-point-machine-hole.png",
    ΔᐃⵠⵠⲆΔΔ: "img/day-point-machine-ground.png",
    ⲆᐃⲆⵠⲆⲆᐃ: "img/night-point-machine-ground.png",
    ΔᐃΔᐃⵠᐃⲆ: "img/day-point-machine-rotate.png",
    ⲆΔᐃΔⵠⵠᐃ: "img/night-point-machine-rotate.png",
    ⲆⵠᐃᐃΔᐃᐃ: "img/inv-point-machine-out.png",
    ⲆⵠⲆⵠⲆᐃⲆ: "img/inv-point-machine-in.png",
    Ⲇᐃⵠⵠⵠᐃᐃ: "img/inv-point-machine-click.png",
    ⵠᐃⲆΔⲆⲆⲆ: "img/day-extractor-machine0-stone.png",
    ΔⵠⲆⵠⵠΔⲆ: "img/night-extractor-machine0-stone.png",
    ᐃⲆΔᐃⵠⵠⵠ: "img/day-extractor-machine-stone.png",
    ᐃⲆⲆΔⲆⲆⲆ: "img/night-extractor-machine-stone.png",
    ⵠⲆⵠᐃⲆᐃⵠ: "img/inv-extractor-machine-stone-out.png",
    ⵠᐃᐃΔⲆᐃⵠ: "img/inv-extractor-machine-stone-in.png",
    ΔⵠΔⵠⲆⲆΔ: "img/inv-extractor-machine-stone-click.png",
    ⵠⲆΔΔΔⲆⲆ: "img/day-extractor-machine0-gold.png",
    ᐃⲆᐃΔⲆᐃΔ: "img/night-extractor-machine0-gold.png",
    ⲆΔⲆΔⵠⵠⵠ: "img/day-extractor-machine-gold.png",
    ΔᐃⲆΔΔΔΔ: "img/night-extractor-machine-gold.png",
    ⲆⲆΔⵠⵠᐃⵠ: "img/inv-extractor-machine-gold-out.png",
    ⲆΔᐃⵠⲆⲆᐃ: "img/inv-extractor-machine-gold-in.png",
    ᐃᐃⵠΔΔΔⲆ: "img/inv-extractor-machine-gold-click.png",
    ᐃᐃⲆⵠⵠᐃΔ: "img/day-extractor-machine0-diamond.png",
    ⵠⲆΔΔⲆⵠΔ: "img/night-extractor-machine0-diamond.png",
    ⲆΔᐃᐃᐃⲆⵠ: "img/day-extractor-machine-diamond.png",
    ᐃΔΔΔⵠᐃⲆ: "img/night-extractor-machine-diamond.png",
    ᐃⲆᐃⲆᐃᐃⵠ: "img/inv-extractor-machine-diamond-out.png",
    ⲆⲆⵠⲆᐃᐃⲆ: "img/inv-extractor-machine-diamond-in.png",
    ⵠᐃⵠΔᐃᐃⲆ: "img/inv-extractor-machine-diamond-click.png",
    ΔⵠΔΔⵠᐃΔ: "img/day-extractor-machine0-amethyst.png",
    ΔᐃⲆΔᐃⲆⵠ: "img/night-extractor-machine0-amethyst.png",
    ⲆⲆⵠⲆᐃⵠᐃ: "img/day-extractor-machine-amethyst.png",
    ΔΔᐃᐃᐃΔᐃ: "img/night-extractor-machine-amethyst.png",
    ⵠⵠⲆⵠⲆᐃⵠ: "img/inv-extractor-machine-amethyst-out.png",
    ⵠⲆⲆⵠⲆᐃᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ΔⵠΔⲆᐃΔⵠ: "img/inv-extractor-machine-amethyst-click.png",
    ΔⵠΔⵠᐃΔⲆ: "img/day-extractor-machine0-reidite.png",
    ⲆⵠᐃᐃⲆⲆⵠ: "img/night-extractor-machine0-reidite.png",
    ⵠΔⵠΔⵠΔΔ: "img/day-extractor-machine-reidite.png",
    ⵠᐃⲆⲆⵠⵠΔ: "img/night-extractor-machine-reidite.png",
    ⵠᐃⲆΔΔᐃᐃ: "img/inv-extractor-machine-reidite-out.png",
    ⵠᐃⲆⵠᐃᐃᐃ: "img/inv-extractor-machine-reidite-in.png",
    ᐃᐃΔΔⵠⵠⲆ: "img/inv-extractor-machine-reidite-click.png",
    ᐃᐃΔⲆⲆᐃⵠ: "img/extractor-cases.png",
    ΔΔⲆᐃⲆᐃⵠ: "img/day-golden-hen.png",
    ΔⵠⵠⲆⵠⲆⵠ: "img/night-golden-hen.png",
    ⵠΔᐃᐃΔᐃΔ: "img/day-golden-chicken.png",
    ᐃᐃⲆⵠⵠΔΔ: "img/night-golden-chicken.png",
    ΔᐃΔᐃΔⵠΔ: "img/hurt-golden-hen.png",
    ΔⲆᐃⲆΔᐃⲆ: "img/hurt-golden-chicken.png",
    ΔⲆΔⵠⲆΔΔ: "img/logo-interface.png",
    Δᐃᐃⵠᐃᐃᐃ: "img/forest-mode-hover.png",
    ⵠⲆᐃⲆΔⵠΔ: "img/normal-mode-hover.png",
    ΔΔⲆⲆⲆⲆΔ: "img/vampire-mode-hover.png",
    ΔΔⵠⵠⲆⲆⲆ: "img/zombie-mode-hover.png",
    ᐃᐃⵠⵠⲆⲆΔ: "img/community-mode-hover2.png",
    ᐃΔⵠᐃΔᐃᐃ: "img/experimental-mode-hover.png",
    ⵠΔⲆⵠᐃⲆⵠ: "img/zombie-mode-out.png",
    ᐃⵠΔⲆᐃⲆⵠ: "img/zombie-mode-in.png",
    ⲆᐃᐃⵠᐃᐃΔ: "img/zombie-mode-click.png",
    ᐃᐃⲆⵠᐃᐃⵠ: "img/vampire-mode-out.png",
    ΔⵠⵠⲆⵠⵠⵠ: "img/vampire-mode-in.png",
    ⲆⲆⲆⵠⲆⲆΔ: "img/vampire-mode-click.png",
    ᐃⵠᐃᐃⵠⵠⵠ: "img/normal-mode-out.png",
    ΔⲆⲆⲆⵠⲆⲆ: "img/normal-mode-in.png",
    ᐃⲆΔᐃΔⵠⲆ: "img/normal-mode-click.png",
    ᐃᐃⲆᐃⵠⵠᐃ: "img/forest-mode-out.png",
    ᐃⲆⲆᐃΔΔΔ: "img/forest-mode-in.png",
    ᐃᐃΔΔΔᐃᐃ: "img/forest-mode-click.png",
    ᐃⵠᐃΔᐃⲆΔ: "img/community-mode-out.png",
    ⲆⲆᐃⲆᐃⲆᐃ: "img/community-mode-in.png",
    ⲆΔⵠᐃⲆΔΔ: "img/community-mode-click.png",
    ⲆᐃⵠⵠᐃΔⲆ: "img/experimental-modes-out.png",
    ΔᐃⲆⲆΔΔⲆ: "img/experimental-modes-in.png",
    ⵠⲆⲆⵠᐃΔⵠ: "img/experimental-modes-click.png",
    ⲆⲆⵠᐃⵠΔΔ: "img/youtube-button-out.png",
    ᐃᐃⲆⵠⲆⵠⵠ: "img/youtube-button-in.png",
    ΔⲆΔⵠⵠᐃΔ: "img/youtube-button-click.png",
    ⲆΔΔⲆΔⵠΔ: "img/wiki-button-out.png",
    ⵠⲆᐃⲆⵠᐃΔ: "img/wiki-button-in.png",
    ΔⲆⲆⵠᐃⵠⲆ: "img/wiki-button-click.png",
    ⲆⲆΔᐃⵠⵠⵠ: "img/twitter-button-out.png",
    ⵠⵠΔᐃⲆⲆΔ: "img/twitter-button-in.png",
    ⲆⵠᐃⲆⵠΔΔ: "img/twitter-button-click.png",
    ⲆⲆᐃΔΔᐃⲆ: "img/facebook-button-out.png",
    ᐃⵠⵠⵠΔᐃⵠ: "img/facebook-button-in.png",
    ⵠⲆⲆΔⵠΔΔ: "img/facebook-button-click.png",
    ᐃⵠⲆⵠΔΔⵠ: "img/reddit-button-out.png",
    ΔΔΔⲆⵠΔⵠ: "img/reddit-button-in.png",
    ΔⵠΔⲆⵠᐃⵠ: "img/reddit-button-click.png",
    ΔⵠⵠΔΔΔΔ: "img/discord-button-out.png",
    ΔΔⲆΔⵠⲆΔ: "img/discord-button-in.png",
    ⵠⵠΔΔᐃΔⵠ: "img/discord-button-click.png",
    ΔΔⵠΔⵠⲆⵠ: "img/merch-button-out.png",
    ΔΔᐃⲆⵠᐃΔ: "img/merch-button-in.png",
    ⲆⲆᐃᐃⲆⲆⵠ: "img/merch-button-click.png",
    ⲆᐃΔᐃⵠΔΔᐃⵠ: "img/terminal-button-out.png",
    ΔⵠᐃᐃΔᐃΔΔⵠ: "img/terminal-button-in.png",
    ΔΔᐃⲆᐃⲆⲆΔⲆ: "img/terminal-button-click.png",
    ⲆⵠⵠⲆⲆⵠᐃ: "img/restart-out.png",
    ᐃⵠΔⵠΔⲆΔ: "img/restart-in.png",
    ᐃⲆΔΔⲆΔⲆ: "img/restart-click.png",
    ⲆⲆⲆᐃⲆⵠᐃ: "img/guide-out.png",
    ⵠΔΔⲆΔᐃⲆ: "img/guide-in.png",
    ᐃᐃΔⵠⵠⲆΔ: "img/guide-click.png",
    ⲆΔΔᐃΔⲆΔ: "img/copy-paste-out.png",
    ᐃΔⲆΔᐃᐃⲆ: "img/copy-paste-in.png",
    ΔⵠᐃⵠⲆᐃΔ: "img/copy-paste-click.png",
    ΔΔⵠⲆΔᐃⵠ: "img/link-buttons-bg.png",
    ⵠⵠᐃᐃⲆⲆⲆ: "img/changelog-box2.png",
    ᐃⵠⲆΔΔⲆⵠ: "img/changelog_31.png",
    ⲆⵠⲆⵠΔⵠⲆ: "img/banner-taming.png",
    ᐃᐃⲆⲆⲆⲆᐃ: "img/profile-button-out.png",
    ᐃᐃᐃΔΔΔⲆ: "img/profile-button-in.png",
    Ⲇᐃᐃᐃⵠᐃⵠ: "img/profile-button-click.png",
    ΔⵠⵠⵠⵠⵠⲆ: "img/login-button-out.png",
    ⵠⵠΔΔΔΔᐃ: "img/login-button-in.png",
    ΔⲆⵠⵠΔΔΔ: "img/login-button-click.png",
    ᐃΔᐃΔⵠᐃⲆ: "img/login-google-out.png",
    ΔΔⲆⲆⲆⵠᐃ: "img/login-google-in.png",
    ⲆⲆⲆᐃⵠΔΔ: "img/login-google-click.png",
    ⲆᐃΔᐃᐃΔⲆ: "img/login-facebook-out.png",
    ΔⲆⲆᐃⲆᐃᐃ: "img/login-facebook-in.png",
    ΔⲆᐃΔΔΔᐃ: "img/login-facebook-click.png",
    ᐃⲆⲆΔⵠΔᐃ: "img/account-box.png",
    ⲆⲆΔΔⵠΔⵠⵠⲆ: "img/account-under-maintenance.png",
    ᐃΔⵠⲆᐃᐃᐃ: "img/close-button-account-out.png",
    ⲆⵠᐃⵠΔᐃⲆ: "img/close-button-account-in.png",
    ᐃΔΔΔⲆⵠΔ: "img/close-button-account-click.png",
    ΔᐃΔⲆΔⲆⲆ: "img/play-button-out.png",
    ⲆⲆⲆΔⲆᐃΔ: "img/play-button-in.png",
    ⵠⵠⲆΔⵠⲆⵠ: "img/play-button-click.png",
    ⵠΔⵠᐃᐃⲆᐃⵠⲆ: "img/app-store-badge.png",
    ΔΔΔⵠⵠⵠⵠⲆᐃ: "img/play-store-badge.png",
    ⵠⲆΔΔᐃⲆΔΔⵠ: "img/mobile-boxad.png",
    ᐃⵠⵠⵠᐃⵠⲆ: "img/modify-name-out.png",
    ᐃⲆⲆΔⵠΔⵠ: "img/modify-name-in.png",
    ⵠᐃⲆⵠⵠⲆΔ: "img/modify-name-click.png",
    ⵠΔⲆⲆΔᐃⵠ: "img/copy-id-button-out.png",
    ⵠⵠⵠᐃⲆᐃΔ: "img/copy-id-button-hover.png",
    ⲆΔⲆⲆⵠᐃᐃ: "img/copy-id-button-active.png",
    ᐃⲆⲆΔⲆᐃⲆ: "img/yes-button-out.png",
    ᐃⲆΔᐃⵠΔⵠ: "img/yes-button-in.png",
    ΔᐃᐃⵠΔΔᐃ: "img/yes-button-click.png",
    ᐃᐃᐃΔᐃⲆⵠ: "img/yes-300-button-out.png",
    ⵠΔⲆᐃΔᐃΔ: "img/yes-300-button-in.png",
    ᐃᐃΔᐃⵠⲆᐃ: "img/yes-300-button-click.png",
    ⲆΔⲆΔⵠᐃᐃ: "img/no-button-out.png",
    ⵠⵠⵠⵠⲆΔⲆ: "img/no-button-in.png",
    ⵠᐃⲆᐃⲆⲆⲆ: "img/no-button-click.png",
    ⲆⲆΔΔᐃΔΔ: "img/no-thanks-button-out.png",
    ⵠⲆⲆⵠᐃⵠⵠ: "img/no-thanks-button-in.png",
    ⵠⲆΔⵠⵠᐃⵠ: "img/no-thanks-button-click.png",
    ᐃⲆΔΔᐃΔⲆ: "img/shop-button-out.png",
    ⲆᐃᐃΔΔⵠΔ: "img/shop-button-in.png",
    ᐃᐃᐃⲆⲆⵠⲆ: "img/shop-button-click.png",
    ᐃⲆⵠⵠᐃᐃⲆ: "img/logout-out.png",
    ᐃΔΔⲆⲆⲆᐃ: "img/logout-in.png",
    ᐃᐃΔΔⵠⲆⲆ: "img/logout-click.png",
    ΔⵠᐃᐃⲆᐃΔ: "img/terms-button-out.png",
    ᐃⲆⵠΔΔᐃⵠ: "img/terms-button-in.png",
    ᐃⵠⵠΔⲆᐃᐃ: "img/terms-button-click.png",
    ⲆⵠΔⵠⵠᐃⵠ: "img/tutorial-icon.png",
    ᐃᐃΔⲆⵠΔⲆ: "img/skins-icon.png",
    ⲆᐃΔⵠᐃⵠⵠ: "img/shop-icon.png",
    ⵠⵠΔⲆⵠⲆΔⵠΔ: "img/paint-icon.png",
    ⲆⵠΔΔᐃⵠΔ: "img/leaderboard-icon.png",
    ΔᐃⵠⲆⲆΔⲆ: "img/start-icon.png",
    ΔⵠⵠⲆᐃᐃΔ: "img/profile-icon.png",
    ΔᐃΔᐃΔⵠᐃ: "img/server-access-icon2.png",
    ⵠⵠⲆⲆⵠᐃⲆ: "img/button-homepage-bg-out.png",
    ΔⵠⲆΔΔⲆⲆ: "img/button-homepage-bg-in.png",
    ⲆΔΔⲆⲆᐃⵠ: "img/button-homepage-bg-click.png",
    ᐃⵠΔᐃΔΔᐃ: "img/button-bottom-homepage-bg-out.png",
    ⵠⲆΔⵠⲆΔΔ: "img/button-bottom-homepage-bg-in.png",
    ᐃᐃᐃᐃⲆⵠᐃ: "img/button-bottom-homepage-bg-click.png",
    ᐃⲆΔΔᐃᐃᐃ: "img/lvl-player.png",
    ⲆΔΔᐃⲆⵠᐃ: "img/avatar-player.png",
    ᐃⲆⵠᐃⲆⲆΔ: "img/avatar-player1.png",
    ᐃΔᐃᐃⲆᐃⵠ: "img/avatar-player2.png",
    ᐃⵠⵠᐃΔᐃᐃ: "img/avatar-player3.png",
    ΔⵠⵠⲆⲆⲆΔ: "img/avatar-player4.png",
    ΔΔΔⲆᐃⲆⵠ: "img/avatar-player5.png",
    ᐃᐃⲆⵠⲆᐃᐃ: "img/avatar-player6.png",
    ⵠⵠᐃⲆΔΔΔ: "img/avatar-player7.png",
    ΔᐃΔⵠⵠⲆΔ: "img/avatar-player8.png",
    ⵠᐃᐃⵠᐃΔΔ: "img/avatar-player9.png",
    ΔᐃΔΔⲆᐃⲆ: "img/avatar-player10.png",
    ΔΔᐃⵠΔⵠⲆ: "img/avatar-player11.png",
    ᐃⵠⲆΔⵠΔⲆ: "img/avatar-player12.png",
    ᐃΔΔⵠΔᐃᐃ: "img/avatar-player13.png",
    ⲆΔⵠᐃⵠⵠⲆ: "img/avatar-player14.png",
    ⲆΔΔᐃⲆΔⵠ: "img/avatar-player14.png",
    ⵠⵠⵠᐃᐃᐃⵠ: "img/avatar-player14.png",
    ΔᐃⵠⲆᐃΔΔ: "img/avatar-player14.png",
    ⵠⲆΔⲆΔΔⵠⲆΔ: "img/golden-bread.png",
    ΔⲆᐃΔⵠᐃⲆ: "img/buy-bread-out.png",
    ⵠΔᐃᐃⲆⲆⵠ: "img/buy-bread-in.png",
    ⲆⵠΔᐃⵠⲆΔ: "img/buy-bread-click.png",
    ΔΔᐃΔΔⵠⵠ: "img/gauge.png",
    ⵠᐃᐃᐃⵠᐃᐃⵠΔ: "img/season-4-out.png",
    ⲆⲆⵠⵠⲆΔⵠⵠⲆ: "img/season-4-in.png",
    ⵠᐃᐃⵠᐃⲆᐃⵠᐃ: "img/season-4-click.png",
    ᐃⲆᐃᐃΔᐃΔΔⲆ: "img/season4-box.png",
    ᐃΔⲆΔⲆᐃΔⲆΔ: "img/season-5-out.png",
    ᐃᐃΔⵠⲆᐃᐃⲆΔ: "img/season-5-in.png",
    ᐃⵠᐃⲆΔΔᐃⵠⵠ: "img/season-5-click.png",
    ⲆⵠⲆⵠⵠⲆΔΔⲆ: "img/season5-box.png",
    ᐃⵠⵠⲆⵠⵠⵠ: "img/season-6-out.png",
    ᐃⲆΔⵠΔᐃΔ: "img/season-6-in.png",
    ΔΔᐃⵠⵠⲆΔ: "img/season-6-click.png",
    ΔΔⲆⲆⲆᐃⲆ: "img/season6-box.png",
    ⵠΔⲆΔⵠⵠᐃ: "img/profile3-box.png",
    ᐃⲆⲆⵠⵠΔⵠ: "img/skins-box.png",
    ⵠⲆᐃⵠⲆⲆᐃ: "img/shop-box.png",
    ⲆⲆⲆᐃᐃᐃⵠⲆⲆ: "img/private-server-box.png",
    Ⲇⵠⵠᐃⵠⵠᐃ: "img/location-box.png",
    ⲆⵠᐃⵠᐃⵠⲆ: "img/server-duration-box.png",
    ᐃⲆⲆⵠⲆΔΔ: "img/tutorial-box.png",
    ΔⲆⵠᐃΔⵠᐃ: "img/leaderboard2-box.png",
    ⲆᐃⵠΔⵠᐃⵠ: "img/buy-breads-box.png",
    ⲆⵠⲆⲆΔⵠᐃ: "img/bag-box.png",
    ᐃΔᐃⲆⲆⲆⲆ: "img/deadbox-box.png",
    ⵠⵠⵠⵠᐃΔᐃ: "img/book-box.png",
    ΔⵠⵠⲆⲆⲆᐃ: "img/accessories-box.png",
    ΔΔΔⲆΔᐃᐃ: "img/customskin-box.png",
    ⲆᐃⲆΔᐃⵠⲆ: "img/bag-lasts.png",
    ⵠⵠⵠΔΔᐃΔ: "img/server-lasts.png",
    ⲆⲆᐃᐃⵠᐃⲆ: "img/server-access-box3.png",
    ⲆΔⲆᐃΔΔⵠ: "img/lootbox-box.png",
    ⵠᐃᐃΔΔᐃⵠ: "img/change-nickname0.png",
    ᐃⲆⲆᐃⵠⵠᐃ: "img/change-nickname1.png",
    ᐃⵠΔⲆⵠᐃΔ: "img/cheating-box.png",
    ᐃⲆⵠᐃⲆΔᐃᐃᐃ: "img/daily-quest-box.png",
    ⲆⲆⲆᐃⲆᐃⵠᐃΔ: "img/daily-5-bread.png",
    ⵠⲆⵠⵠⲆⵠⵠΔⵠ: "img/daily-10-bread.png",
    ⲆⵠΔⲆΔᐃⵠᐃΔ: "img/daily-valid.png",
    ⵠⵠⲆⵠⲆⲆΔ: "img/normal-profile-out.png",
    ᐃᐃⲆⵠⲆᐃⵠ: "img/normal-profile-in.png",
    ΔᐃΔᐃⵠⲆΔ: "img/normal-profile-click.png",
    ΔᐃΔΔⲆᐃⵠ: "img/forest-profile-out.png",
    ᐃΔᐃⵠⲆⲆⲆ: "img/forest-profile-in.png",
    ΔⵠᐃⲆⵠᐃΔ: "img/forest-profile-click.png",
    ⲆᐃⲆΔᐃΔⲆ: "img/zombie-profile-out.png",
    ᐃⵠⵠⲆⵠⵠⲆ: "img/zombie-profile-in.png",
    ᐃⲆΔⲆΔᐃⲆ: "img/zombie-profile-click.png",
    ΔⵠΔⵠᐃⵠⵠ: "img/vampire-profile-out.png",
    ⲆΔᐃᐃⵠⵠΔ: "img/vampire-profile-in.png",
    ΔΔᐃⵠᐃⲆΔ: "img/vampire-profile-click.png",
    ⲆⲆᐃⵠⵠΔᐃ: "img/total-profile-out.png",
    ΔⵠⵠΔⲆⵠⲆ: "img/total-profile-in.png",
    ΔΔΔⵠⵠⲆⲆ: "img/total-profile-click.png",
    ᐃⵠᐃⲆⲆⵠⲆ: "img/season1-out.png",
    ⵠᐃΔⵠᐃᐃᐃ: "img/season1-in.png",
    ⵠⲆΔΔᐃᐃⵠ: "img/season1-click.png",
    ᐃⵠⵠⲆⵠᐃᐃ: "img/season2-out.png",
    Ⲇᐃⵠⵠᐃᐃᐃ: "img/season2-in.png",
    ᐃⵠⵠᐃⵠⲆᐃ: "img/season2-click.png",
    ⵠᐃⵠΔⵠⲆᐃ: "img/season3-out.png",
    ᐃⵠⲆΔᐃᐃⲆ: "img/season3-in.png",
    ᐃⲆΔⵠⵠᐃⵠ: "img/season3-click.png",
    ⲆᐃᐃᐃⲆⵠᐃ: "img/season4-out.png",
    ΔⵠΔΔΔΔⵠ: "img/season4-in.png",
    ΔᐃⲆᐃΔⲆⲆ: "img/season4-click.png",
    ⵠᐃᐃΔⲆᐃᐃ: "img/season5-out.png",
    ⵠᐃⵠᐃⲆⲆᐃ: "img/season5-in.png",
    ΔⵠⲆⵠⵠⵠᐃ: "img/season5-click.png",
    ᐃΔⲆΔⵠⲆⵠ: "img/season6-out.png",
    ΔⲆΔⵠᐃⲆΔ: "img/season6-in.png",
    ⲆΔⲆⲆᐃⵠΔ: "img/season6-click.png",
    ⲆⲆᐃᐃΔᐃᐃ: "img/locked-skin-alert.png",
    ⵠⵠⵠΔΔⲆᐃ: "img/locked-custom-alert.png",
    ⲆⵠⲆⲆᐃΔⲆ: "img/bg-red-locked.png",
    ⵠⵠΔⲆΔⵠⲆ: "img/skin-button-out.png",
    ΔⵠⵠΔⲆⲆᐃ: "img/skin-button-in.png",
    ⲆⲆⵠΔΔⵠⲆ: "img/skin-button-click.png",
    ⵠΔⵠᐃΔᐃⵠ: "img/accessory-button-out.png",
    ΔⵠᐃⵠᐃΔΔ: "img/accessory-button-in.png",
    ΔᐃΔⵠⵠᐃΔ: "img/accessory-button-click.png",
    ⲆⵠⲆⲆⵠⲆᐃ: "img/bag-button-out.png",
    ᐃⵠⲆΔⵠᐃᐃ: "img/bag-button-in.png",
    ⵠⲆⵠΔΔⲆΔ: "img/bag-button-click.png",
    ⲆΔⵠᐃⵠΔᐃ: "img/book-button-out.png",
    ⵠⲆᐃᐃᐃⵠⵠ: "img/book-button-in.png",
    ⵠⵠⵠΔⵠⵠⵠ: "img/book-button-click.png",
    ΔⲆᐃΔⵠΔⵠ: "img/deadbox-button-out.png",
    ΔⲆⵠⲆⵠⵠⵠ: "img/deadbox-button-in.png",
    ᐃⲆΔⵠⲆⲆᐃ: "img/deadbox-button-click.png",
    ᐃⲆΔⵠⲆΔΔ: "img/loot-button-out.png",
    ΔᐃⲆⵠΔΔⵠ: "img/loot-button-in.png",
    ᐃΔΔΔⵠΔⲆ: "img/loot-button-click.png",
    ᐃΔΔᐃΔⵠᐃ: "img/free-item-out.png",
    ⲆᐃΔⲆᐃⵠᐃ: "img/free-item-in.png",
    ΔΔⲆΔⵠⲆⵠ: "img/free-item-click.png",
    ᐃΔⵠⵠ: "img/wood-item-out.png",
    ᐃΔΔⵠ: "img/wood-item-in.png",
    ᐃᐃⲆΔ: "img/wood-item-click.png",
    ⲆⲆΔⲆⵠⲆⲆ: "img/stone-item.png",
    ΔⵠᐃΔᐃΔΔ: "img/stone-item-in.png",
    ᐃΔⵠᐃⲆΔΔ: "img/stone-item-click.png",
    ΔᐃⵠⲆᐃⲆΔ: "img/gold-item.png",
    ⵠᐃΔᐃΔⵠΔ: "img/gold-item-in.png",
    ⲆᐃΔⲆΔⵠΔ: "img/gold-item-click.png",
    ΔⵠⲆᐃⵠΔᐃ: "img/diamond-item.png",
    ⲆΔᐃⵠΔⲆⵠ: "img/diamond-item-in.png",
    ΔⲆⵠᐃⲆⲆΔ: "img/diamond-item-click.png",
    ⵠᐃᐃⲆⵠΔⵠ: "img/amethyst-item.png",
    ΔᐃᐃⲆΔⵠⲆ: "img/amethyst-item-in.png",
    ᐃΔΔⲆⲆΔᐃ: "img/amethyst-item-click.png",
    ⵠⵠΔᐃΔΔⲆ: "img/reidite-item.png",
    ⲆⲆⲆᐃᐃᐃΔ: "img/reidite-item-in.png",
    ΔⲆΔⵠⵠⲆⵠ: "img/reidite-item-click.png",
    ⵠⲆⵠⵠΔᐃΔ: "img/special-item-out.png",
    ΔΔⵠⲆΔΔⵠ: "img/special-item-in.png",
    ⵠΔⲆᐃⵠⵠⵠ: "img/special-item-click.png",
    ΔⵠᐃᐃⲆⲆᐃ: "img/level-item-out.png",
    ⵠᐃⲆⲆᐃⲆᐃ: "img/level-item-in.png",
    ⲆᐃⲆΔⵠᐃⲆ: "img/level-item-click.png",
    ᐃⲆⵠΔᐃⵠⵠ: "img/skin-previous-out.png",
    ⵠΔᐃΔΔᐃⲆ: "img/skin-previous-in.png",
    ΔⲆᐃΔᐃΔΔ: "img/skin-previous-click.png",
    ΔᐃΔΔⵠᐃⵠ: "img/skin-next-out.png",
    ⵠⲆⲆΔⲆᐃᐃ: "img/skin-next-in.png",
    ΔΔᐃΔᐃᐃⵠ: "img/skin-next-click.png",
    ⲆⵠᐃΔⲆ: "img/back-button-out.png",
    ⵠᐃΔᐃΔ: "img/back-button-in.png",
    ΔᐃΔᐃᐃ: "img/back-button-click.png",
    ⲆᐃᐃΔⲆⲆⵠ: "img/get-more-button-out.png",
    ⲆⲆΔΔΔΔΔ: "img/get-more-button-in.png",
    ΔᐃⵠⵠⲆΔᐃ: "img/get-more-button-click.png",
    ᐃⲆᐃⲆⵠΔⲆ: "img/currency1-out.png",
    ᐃᐃⲆⵠᐃᐃᐃ: "img/currency1-in.png",
    ⲆⲆΔΔᐃᐃΔ: "img/currency1-click.png",
    ᐃΔⵠᐃΔⲆᐃ: "img/currency2-out.png",
    ⵠⵠⵠΔⵠᐃⵠ: "img/currency2-in.png",
    ᐃⵠᐃΔᐃⲆⵠ: "img/currency2-click.png",
    ⵠᐃΔΔΔⲆᐃ: "img/currency3-out.png",
    ⲆⲆⲆΔΔⲆΔ: "img/currency3-in.png",
    ᐃⲆⵠⵠΔᐃΔ: "img/currency3-click.png",
    ⲆᐃΔⲆⵠΔΔ: "img/currency4-out.png",
    ᐃⵠΔⵠᐃΔΔ: "img/currency4-in.png",
    ⲆΔΔΔᐃᐃⲆ: "img/currency4-click.png",
    ᐃⲆⵠⵠᐃᐃⵠ: "img/currency5-out.png",
    ᐃⲆⲆⵠⲆⵠⵠ: "img/currency5-in.png",
    ᐃΔⵠΔⲆⲆΔ: "img/currency5-click.png",
    ᐃΔΔⵠΔⵠᐃ: "img/price1-out.png",
    ΔⵠⵠᐃⲆⲆⵠ: "img/price1-in.png",
    ⲆᐃΔᐃΔⵠᐃ: "img/price1-click.png",
    ΔⲆᐃⲆΔⲆⲆ: "img/price2-out.png",
    ΔⲆⵠΔΔⲆΔ: "img/price2-in.png",
    ⲆⲆⵠⲆⵠΔΔ: "img/price2-click.png",
    ⲆᐃⵠΔⵠΔᐃ: "img/price3-out.png",
    ⵠⵠᐃΔⲆΔⵠ: "img/price3-in.png",
    ᐃⵠΔᐃΔᐃⵠ: "img/price3-click.png",
    ᐃᐃΔⲆⲆⵠⲆ: "img/price4-out.png",
    ⵠΔⲆⲆⲆᐃΔ: "img/price4-in.png",
    ⵠᐃΔᐃⲆⲆᐃ: "img/price4-click.png",
    ⲆᐃΔⲆᐃΔⲆ: "img/price5-out.png",
    ⵠΔⵠⲆΔᐃⲆ: "img/price5-in.png",
    ΔΔⲆⵠⵠΔᐃ: "img/price5-click.png",
    ΔⲆⲆⵠⲆⲆᐃⲆᐃ: "img/buy-private-server-out.png",
    ⵠⲆᐃᐃΔΔⲆᐃᐃ: "img/buy-private-server-in.png",
    ΔⵠᐃᐃⲆᐃⲆᐃⵠ: "img/buy-private-server-click.png",
    ⵠᐃⲆΔΔⵠⵠ: "img/atlanta-button-out.png",
    ⵠⲆᐃΔΔⲆⵠ: "img/atlanta-button-in.png",
    ΔⵠᐃⵠΔⵠᐃ: "img/atlanta-button-click.png",
    ⵠⵠᐃⲆⲆⲆⲆ: "img/los-angeles-button-out.png",
    ⵠᐃⵠΔⲆⵠᐃ: "img/los-angeles-button-in.png",
    ΔᐃⵠⲆᐃᐃⲆ: "img/los-angeles-button-click.png",
    ⵠⵠⵠⲆᐃⲆΔ: "img/sydney-button-out.png",
    ΔⵠᐃΔΔΔᐃ: "img/sydney-button-in.png",
    ᐃⲆⵠⵠᐃᐃᐃ: "img/sydney-button-click.png",
    ΔΔᐃⲆΔΔⲆ: "img/frankfurt-button-out.png",
    ᐃΔⵠᐃⲆΔⵠ: "img/frankfurt-button-in.png",
    ⵠⲆⲆⵠⲆΔⵠ: "img/frankfurt-button-click.png",
    ᐃΔⵠⲆΔⵠᐃ: "img/osaka-button-out.png",
    ⲆⲆΔⵠᐃᐃᐃ: "img/osaka-button-in.png",
    ΔᐃⵠΔΔΔⵠ: "img/osaka-button-click.png",
    ⵠΔⵠᐃⲆᐃᐃⲆⲆ: "img/yes-location-out.png",
    ⲆᐃᐃⲆᐃⲆⲆⵠᐃ: "img/yes-location-in.png",
    ⵠⲆⲆΔⲆΔⲆΔⵠ: "img/yes-location-click.png",
    ΔⲆⵠⵠⲆΔⲆ: "img/3days-button-out.png",
    ⵠⵠᐃΔⲆᐃⵠ: "img/3days-button-in.png",
    ⲆΔⲆᐃᐃⵠᐃ: "img/3days-button-click.png",
    ᐃᐃⵠᐃⲆⲆΔ: "img/7days-button-out.png",
    ⲆΔⵠΔΔᐃⲆ: "img/7days-button-in.png",
    ⲆⲆⲆⵠⵠⵠᐃ: "img/7days-button-click.png",
    ΔΔⲆⲆΔᐃⲆ: "img/30days-button-out.png",
    ⵠⲆᐃⲆⵠⵠΔ: "img/30days-button-in.png",
    ΔᐃⲆⲆⵠΔΔ: "img/30days-button-click.png",
    ⲆⲆᐃΔⲆⵠⵠ: "img/90days-button-out.png",
    ᐃⵠᐃⵠⵠΔΔ: "img/90days-button-in.png",
    ⲆⵠᐃΔⵠΔᐃ: "img/90days-button-click.png",
    ⵠⵠᐃᐃᐃᐃΔ: "img/spin1.png",
    ⵠΔⵠΔⲆⲆΔ: "img/spin2.png",
    ⵠⵠⲆⵠᐃᐃⵠ: "img/spin3.png",
    ᐃⵠΔΔΔⲆⵠ: "img/spin4.png",
    ⲆⵠⲆⲆᐃᐃⵠ: "img/spin5.png",
    ⵠᐃⵠⲆΔΔⲆ: "img/spin6.png",
    ΔⲆⲆᐃᐃᐃⲆ: "img/arrow-spin.png",
    ᐃᐃⲆΔⵠΔⲆ: "img/spin-button-1-out.png",
    ⲆᐃΔⵠⵠΔⲆ: "img/spin-button-1-in.png",
    ᐃⵠⲆΔᐃⲆⵠ: "img/spin-button-1-click.png",
    ᐃⲆΔΔⵠⲆᐃ: "img/spin-button-2-out.png",
    ⵠⵠΔⲆⵠⵠΔ: "img/spin-button-2-in.png",
    ΔⲆΔᐃΔⵠⵠ: "img/spin-button-2-click.png",
    ⲆᐃⵠⲆΔⵠΔ: "img/spin-button-3-out.png",
    ⲆᐃⲆⲆΔᐃΔ: "img/spin-button-3-in.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/spin-button-3-click.png",
    ⵠⵠᐃΔⵠⲆΔ: "img/spin-button-4-out.png",
    ⵠᐃΔⵠⲆⵠᐃ: "img/spin-button-4-in.png",
    Ⲇⵠᐃᐃᐃᐃⵠ: "img/spin-button-4-click.png",
    ᐃᐃΔᐃΔᐃⲆ: "img/spin-button-5-out.png",
    ⵠΔⲆⵠΔᐃΔ: "img/spin-button-5-in.png",
    ⵠⲆᐃⵠᐃⲆⲆ: "img/spin-button-5-click.png",
    ᐃⵠΔⵠᐃⵠᐃ: "img/spin-light.png",
    ΔⲆⲆⲆⵠᐃⵠ: "img/tuto-wiki-out.png",
    ⵠⲆᐃⲆᐃΔⵠ: "img/tuto-wiki-in.png",
    ⲆⵠⲆᐃⵠΔΔ: "img/tuto-wiki-click.png",
    ⵠΔΔᐃⲆΔⲆ: "img/tuto-previous-out.png",
    ⲆΔⵠⲆΔᐃᐃ: "img/tuto-previous-in.png",
    ΔΔⵠⵠⵠᐃᐃ: "img/tuto-previous-click.png",
    ΔᐃΔⲆⲆⲆⵠ: "img/tuto-next-out.png",
    ᐃⲆᐃΔⵠᐃⲆ: "img/tuto-next-in.png",
    ᐃⵠᐃΔⲆⵠᐃ: "img/tuto-next-click.png",
    ᐃᐃⲆⵠⵠⵠᐃ: "img/time-leaderboard-out.png",
    ᐃᐃᐃⵠᐃⲆⵠ: "img/time-leaderboard-in.png",
    ⲆⵠⲆⲆΔⲆⵠ: "img/time-leaderboard-click.png",
    ⵠⲆⵠᐃΔΔⵠ: "img/score-leaderboard-out.png",
    ΔⲆΔⲆⲆᐃⲆ: "img/score-leaderboard-in.png",
    ΔΔᐃⲆᐃᐃᐃ: "img/score-leaderboard-click.png",
    ⵠᐃᐃⵠΔΔΔ: "img/lvl-leaderboard-out.png",
    ΔΔⵠⲆΔᐃΔ: "img/lvl-leaderboard-in.png",
    ⵠⲆⲆⲆᐃΔΔ: "img/lvl-leaderboard-click.png",
    ᐃⲆΔⲆⵠⵠⲆ: "img/kill-leaderboard-out.png",
    ΔᐃᐃΔⲆⲆΔ: "img/kill-leaderboard-in.png",
    ᐃⵠⲆΔⲆΔⵠ: "img/kill-leaderboard-click.png",
    ΔΔᐃⵠᐃⵠⲆ: "img/all-leaderboard-out.png",
    ΔⵠⵠΔⵠⲆⲆ: "img/all-leaderboard-in.png",
    ΔᐃⲆᐃᐃⲆΔ: "img/all-leaderboard-click.png",
    ⲆΔⵠⲆⵠⲆⵠ: "img/today-leaderboard-out.png",
    ᐃⲆⵠᐃΔΔΔ: "img/today-leaderboard-in.png",
    ᐃⵠⵠⲆΔⵠᐃ: "img/today-leaderboard-click.png",
    ᐃⲆⲆᐃⵠⲆⵠ: "img/week-leaderboard-out.png",
    ⵠⵠᐃⵠⵠⵠΔ: "img/week-leaderboard-in.png",
    ᐃⲆᐃᐃΔᐃⵠ: "img/week-leaderboard-click.png",
    ᐃᐃΔᐃⵠⵠᐃ: "img/season1-out.png",
    ΔⵠᐃᐃⲆⵠⵠ: "img/season1-in.png",
    ⵠⲆΔΔΔΔⵠ: "img/season1-click.png",
    ΔᐃΔⵠⲆⵠᐃ: "img/season2-out.png",
    ⵠⵠⵠᐃᐃΔⵠ: "img/season2-in.png",
    ᐃΔⲆⲆᐃⲆΔ: "img/season2-click.png",
    ᐃΔΔΔⲆⵠᐃ: "img/season3-out.png",
    ⲆⲆⵠⲆⵠΔⲆ: "img/season3-in.png",
    ᐃⲆΔΔⵠΔⲆ: "img/season3-click.png",
    ᐃᐃΔᐃΔΔⵠ: "img/season4-out.png",
    ⲆⵠⵠⲆᐃⵠⲆ: "img/season4-in.png",
    ᐃⵠΔᐃⲆⲆΔ: "img/season4-click.png",
    ⲆΔⲆⲆᐃΔⲆ: "img/season5-out.png",
    ᐃΔⵠⵠΔⵠᐃ: "img/season5-in.png",
    ᐃⲆⵠᐃⵠᐃᐃ: "img/season5-click.png",
    ⲆΔΔᐃⵠⵠⲆ: "img/season6-out.png",
    ⲆⲆᐃⵠΔᐃᐃ: "img/season6-in.png",
    ⵠⲆⵠⲆⲆⲆⲆ: "img/season6-click.png",
    ᐃΔⲆⵠⲆΔΔ: "img/total-lead-out.png",
    ΔΔⵠᐃⵠᐃΔ: "img/total-lead-in.png",
    ⲆᐃᐃⲆⵠⲆⲆ: "img/total-lead-click.png",
    ⲆⲆⵠᐃⲆᐃⵠ: "img/normal-lead-out.png",
    ⲆⵠⲆᐃᐃⵠΔ: "img/normal-lead-in.png",
    ᐃⵠⲆΔΔᐃΔ: "img/normal-lead-click.png",
    ⵠⲆᐃⵠⵠⲆⲆ: "img/forest-lead-out.png",
    ΔΔΔⲆⲆⲆⲆ: "img/forest-lead-in.png",
    ⲆᐃᐃⵠⵠΔⲆ: "img/forest-lead-click.png",
    ΔⲆⲆΔᐃᐃᐃ: "img/vampire-lead-out.png",
    ᐃᐃⵠⵠᐃⲆΔ: "img/vampire-lead-in.png",
    ΔΔⵠΔⵠᐃΔ: "img/vampire-lead-click.png",
    ᐃⵠᐃᐃΔΔᐃ: "img/zombie-lead-out.png",
    ᐃⲆᐃⲆΔᐃᐃ: "img/zombie-lead-in.png",
    ᐃΔΔΔΔⵠⵠ: "img/zombie-lead-click.png",
    ᐃᐃᐃΔᐃⲆᐃ: "img/day-level5.png",
    ⲆᐃᐃᐃᐃΔΔ: "img/night-level5.png",
    ⲆⲆᐃⲆᐃⲆΔ: "img/day-level10.png",
    ΔⵠΔⵠⲆᐃⲆ: "img/night-level10.png",
    ᐃΔⵠᐃⲆⲆΔ: "img/day-level15.png",
    ⲆⲆᐃⲆⵠᐃΔ: "img/night-level15.png",
    ΔⲆⲆⵠⵠᐃⲆ: "img/day-level20.png",
    ⲆᐃⲆⵠΔⲆΔ: "img/night-level20.png",
    ⵠⲆᐃΔⲆⵠΔ: "img/day-level25.png",
    ᐃΔᐃᐃΔⲆⵠ: "img/night-level25.png",
    ⲆⲆⵠⲆΔΔᐃ: "img/day-level30.png",
    ΔⲆⵠⲆᐃΔᐃ: "img/night-level30.png",
    ⵠⲆᐃᐃⵠᐃⵠ: "img/day-level35.png",
    ΔᐃᐃΔⵠⵠΔ: "img/night-level35.png",
    ᐃΔⲆⲆⵠⲆⵠ: "img/day-level40.png",
    ⵠᐃⵠⲆⲆⲆᐃ: "img/night-level40.png",
    ᐃⵠⵠΔⲆⵠᐃ: "img/day-level45.png",
    ᐃⲆᐃΔΔᐃⵠ: "img/night-level45.png",
    ΔᐃⵠᐃⵠⲆΔ: "img/day-level50.png",
    ⵠⵠΔⲆΔᐃⵠ: "img/night-level50.png",
    ⲆΔⵠᐃⲆⲆΔ: "img/day-level55.png",
    ⵠΔⵠⲆΔⵠⲆ: "img/night-level55.png",
    ΔᐃᐃⲆᐃΔⵠ: "img/day-level60.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/night-level60.png",
    ΔⲆⲆⵠⲆᐃΔ: "img/day-skin-devast0.png",
    ᐃⲆⲆᐃⵠᐃΔ: "img/night-skin-devast0.png",
    ⲆᐃⲆⲆⵠⵠᐃ: "img/day-hand-devaster.png",
    ΔⲆΔᐃⲆⲆⲆ: "img/night-hand-devaster.png",
    ⵠΔΔⲆⵠΔΔ: "img/day-skin-star0.png",
    Δⵠⵠᐃᐃⵠᐃ: "img/night-skin-star0.png",
    ⵠⵠⲆᐃᐃΔⵠ: "img/day-hand-star0.png",
    ⵠⵠⲆⵠΔᐃⵠ: "img/night-hand-star0.png",
    ⵠΔⲆᐃᐃⵠΔ: "img/day-vampire.png",
    ⲆⲆⲆᐃᐃΔᐃ: "img/night-vampire.png",
    ⵠΔΔΔⵠⲆᐃ: "img/day-hand-vampire.png",
    ᐃΔᐃΔΔⵠⵠ: "img/night-hand-vampire.png",
    ⲆⵠΔᐃΔⲆⲆ: "img/day-zombie.png",
    ᐃⲆⵠΔⲆⵠΔ: "img/night-zombie.png",
    ⵠⵠⲆᐃⵠⵠⵠ: "img/day-hand-zombie.png",
    ΔⵠᐃΔⵠᐃᐃ: "img/night-hand-zombie.png",
    ΔⵠᐃΔΔΔⵠ: "img/day-skin113.png",
    ΔⵠΔᐃⲆⵠΔ: "img/night-skin113.png",
    ⲆⵠⵠΔⲆΔΔ: "img/day-hand-skin113.png",
    ᐃΔΔΔᐃⲆΔ: "img/night-hand-skin113.png",
    ᐃᐃⲆⲆᐃⲆⲆ: "img/day-skin0.png",
    ⲆΔΔΔⵠΔΔ: "img/night-skin0.png",
    ⵠⵠΔⵠⲆΔⲆ: "img/day-skin1.png",
    ΔⵠⵠⵠⵠΔⲆ: "img/night-skin1.png",
    ᐃΔΔᐃΔⲆΔ: "img/day-skin2.png",
    ᐃΔⲆΔΔⲆⲆ: "img/night-skin2.png",
    ᐃⵠⲆⵠΔᐃΔ: "img/day-skin3.png",
    ⲆⵠⵠᐃᐃᐃⲆ: "img/night-skin3.png",
    ᐃΔΔᐃᐃᐃⵠ: "img/day-skin4.png",
    ⲆᐃᐃⲆΔᐃⵠ: "img/night-skin4.png",
    ⵠⵠⵠᐃⵠⲆⵠ: "img/day-skin5.png",
    ᐃⵠΔΔΔΔⵠ: "img/night-skin5.png",
    ⲆⵠΔΔΔⵠᐃ: "img/day-skin6.png",
    ᐃⵠᐃᐃᐃΔⵠ: "img/night-skin6.png",
    ᐃᐃⵠᐃᐃⵠⲆ: "img/day-skin7.png",
    ΔⵠᐃⲆΔⵠΔ: "img/night-skin7.png",
    ⲆⵠᐃⵠⵠᐃΔ: "img/day-skin8.png",
    ᐃⲆⲆⵠΔᐃΔ: "img/night-skin8.png",
    ΔΔⵠⵠⵠⵠᐃ: "img/day-skin9.png",
    ⲆⵠΔΔⲆⵠⲆ: "img/night-skin9.png",
    ⵠᐃⵠⲆⵠᐃΔ: "img/day-skin10.png",
    ⵠⲆⵠⲆᐃⲆⲆ: "img/night-skin10.png",
    ᐃⲆⲆⵠᐃⲆΔ: "img/day-skin11.png",
    ⵠⵠΔᐃⵠⲆΔ: "img/night-skin11.png",
    ΔⲆᐃⵠⵠΔΔ: "img/day-skin12.png",
    ΔⲆᐃΔᐃⵠⵠ: "img/night-skin12.png",
    ᐃΔᐃΔᐃΔⲆ: "img/day-skin13.png",
    ΔⲆⵠᐃⲆΔᐃ: "img/night-skin13.png",
    ΔⲆᐃⲆᐃΔᐃ: "img/day-skin14.png",
    ⵠᐃΔⵠᐃᐃⲆ: "img/night-skin14.png",
    ⲆᐃⵠΔⵠⵠᐃ: "img/day-skin15.png",
    ⲆⵠΔⵠᐃⵠⲆ: "img/night-skin15.png",
    ⲆⵠᐃΔᐃⵠⵠ: "img/day-skin16.png",
    ΔⲆⲆᐃⲆΔΔ: "img/night-skin16.png",
    ΔⵠᐃⵠΔΔᐃ: "img/day-skin17.png",
    ⲆΔⵠⵠΔᐃⵠ: "img/night-skin17.png",
    ΔⵠᐃᐃΔΔⲆ: "img/day-skin18.png",
    ⵠᐃᐃΔⵠⵠⵠ: "img/night-skin18.png",
    ⵠΔⵠⲆⲆⲆⲆ: "img/day-skin19.png",
    ΔⲆᐃΔⵠⲆⵠ: "img/night-skin19.png",
    ΔᐃⵠⲆⵠᐃⵠ: "img/day-skin20.png",
    ΔⲆᐃᐃΔᐃⵠ: "img/night-skin20.png",
    ⲆᐃΔΔⵠΔΔ: "img/day-skin21.png",
    ᐃΔⲆⵠⲆⲆⵠ: "img/night-skin21.png",
    ΔⲆⲆⲆᐃΔᐃ: "img/day-skin22.png",
    ᐃⲆⵠⲆΔΔⵠ: "img/night-skin22.png",
    ⲆΔᐃᐃᐃΔⲆ: "img/day-skin23.png",
    ⵠΔⲆᐃΔᐃᐃ: "img/night-skin23.png",
    ⵠΔΔⵠΔΔΔ: "img/day-skin24.png",
    ΔΔᐃⵠΔⲆⲆ: "img/night-skin24.png",
    ᐃⵠΔⵠᐃᐃᐃ: "img/day-skin25.png",
    ⲆΔⲆΔᐃᐃⲆ: "img/night-skin25.png",
    ΔΔᐃΔᐃΔᐃ: "img/day-skin26.png",
    ᐃⵠΔⲆⲆΔⵠ: "img/night-skin26.png",
    ᐃⵠΔΔᐃΔᐃ: "img/day-skin27.png",
    ᐃⲆΔⲆᐃΔⵠ: "img/night-skin27.png",
    ⵠⲆⵠⲆᐃⵠᐃ: "img/day-skin28.png",
    ⲆⲆⵠΔΔⲆⵠ: "img/night-skin28.png",
    ⵠⵠⵠⲆᐃᐃΔ: "img/day-skin29.png",
    ΔⵠᐃᐃⵠΔⲆ: "img/night-skin29.png",
    ΔⲆᐃⵠΔᐃᐃ: "img/day-skin30.png",
    ᐃⲆⲆΔⲆⵠⵠ: "img/night-skin30.png",
    ᐃⵠᐃⵠΔᐃΔ: "img/day-skin31.png",
    ᐃΔᐃᐃᐃⵠⵠ: "img/night-skin31.png",
    ⵠⲆΔΔⵠᐃⲆ: "img/day-skin32.png",
    ⲆᐃᐃⲆⵠᐃⲆ: "img/night-skin32.png",
    ⲆⵠⲆⲆΔΔⵠ: "img/day-skin33.png",
    ΔⵠⲆⵠⲆⲆⵠ: "img/night-skin33.png",
    ⵠᐃⵠⵠⵠⲆⵠ: "img/day-skin34.png",
    ᐃᐃᐃⵠΔⵠΔ: "img/night-skin34.png",
    ⲆⵠⲆⵠⵠⲆⵠ: "img/day-skin35.png",
    ⵠⵠΔΔⲆⲆⲆ: "img/night-skin35.png",
    ⲆΔΔΔΔΔΔ: "img/day-skin36.png",
    ΔΔΔⵠⵠΔⲆ: "img/night-skin36.png",
    ⵠᐃᐃΔᐃᐃᐃ: "img/day-skin37.png",
    ⲆⵠΔⵠᐃΔᐃ: "img/night-skin37.png",
    ΔᐃΔⲆⵠΔⵠ: "img/day-skin38.png",
    ΔⵠⲆᐃⵠⲆⲆ: "img/night-skin38.png",
    ᐃΔΔⵠᐃⲆΔ: "img/day-skin39.png",
    ⲆΔⵠⲆΔΔⵠ: "img/night-skin39.png",
    ⵠᐃⵠΔⵠᐃⵠ: "img/day-skin40.png",
    ⵠΔⲆΔᐃΔᐃ: "img/night-skin40.png",
    ᐃΔⵠΔᐃΔΔ: "img/day-skin41.png",
    ᐃΔⲆⲆⲆᐃΔ: "img/night-skin41.png",
    ᐃΔΔΔⵠⵠⵠ: "img/day-skin42.png",
    ⵠⵠⲆΔΔᐃΔ: "img/night-skin42.png",
    ⲆᐃᐃᐃᐃᐃⲆ: "img/day-skin43.png",
    ⲆᐃᐃΔⲆΔᐃ: "img/night-skin43.png",
    ⵠⲆⲆⲆⵠᐃⵠ: "img/day-skin44.png",
    ⵠⵠΔᐃⵠⵠΔ: "img/night-skin44.png",
    ⵠΔⲆⲆᐃⵠᐃ: "img/day-skin45.png",
    ⵠⲆΔⲆᐃⵠⵠ: "img/night-skin45.png",
    ᐃⲆᐃΔⵠⵠⲆ: "img/day-skin46.png",
    ᐃΔⵠⲆⵠΔⲆ: "img/night-skin46.png",
    ⵠⵠⵠⲆⲆⵠⵠ: "img/day-skin47.png",
    ΔⲆᐃᐃⵠΔⵠ: "img/night-skin47.png",
    ⵠⲆⲆᐃⵠᐃΔ: "img/day-skin48.png",
    ⲆⵠᐃⵠᐃᐃⲆ: "img/night-skin48.png",
    ᐃⵠᐃΔⲆⵠΔ: "img/day-skin49.png",
    ΔⵠⵠᐃⲆᐃΔ: "img/night-skin49.png",
    ΔⲆⵠᐃⲆᐃΔ: "img/day-skin50.png",
    ΔΔⵠⲆᐃΔᐃ: "img/night-skin50.png",
    ΔΔⲆⵠⲆΔⵠ: "img/day-skin51.png",
    ⲆᐃΔⵠⵠⲆᐃ: "img/night-skin51.png",
    ΔⵠΔΔΔⲆⵠ: "img/day-skin52.png",
    ⲆⵠⲆⲆⲆᐃⵠ: "img/night-skin52.png",
    ⲆⲆᐃᐃⲆⲆᐃ: "img/day-skin53.png",
    ΔᐃΔⲆⵠⵠⵠ: "img/night-skin53.png",
    ΔⲆΔⵠᐃⲆⵠ: "img/day-skin54.png",
    ΔⵠΔᐃΔⵠⲆ: "img/night-skin54.png",
    ᐃΔΔΔᐃⵠᐃ: "img/day-skin55.png",
    ᐃᐃᐃᐃᐃⲆΔ: "img/night-skin55.png",
    ΔΔΔⲆⵠⲆΔ: "img/day-skin56.png",
    ⵠⵠΔΔⵠⲆᐃ: "img/night-skin56.png",
    ᐃⲆⲆᐃΔⵠΔ: "img/day-skin57.png",
    ⵠΔᐃᐃⵠΔⲆ: "img/night-skin57.png",
    ⵠΔⲆΔⵠⵠⵠ: "img/day-skin58.png",
    ⵠⵠΔᐃⲆⲆⵠ: "img/night-skin58.png",
    ⲆⲆⲆᐃⵠⲆⲆ: "img/day-skin59.png",
    ⵠΔⲆΔⲆⵠΔ: "img/night-skin59.png",
    ᐃⵠᐃⲆⲆΔⲆ: "img/day-skin60.png",
    ΔⵠⵠⵠΔⵠⵠ: "img/night-skin60.png",
    ᐃᐃⵠⵠΔΔΔ: "img/day-skin61.png",
    ⲆᐃΔⵠⲆΔⵠ: "img/night-skin61.png",
    ⵠΔⵠᐃⵠⵠᐃ: "img/day-skin62.png",
    ᐃᐃᐃⵠΔᐃⲆ: "img/night-skin62.png",
    ⲆᐃⲆΔᐃΔⵠ: "img/day-skin63.png",
    ⵠᐃⵠⲆᐃᐃⲆ: "img/night-skin63.png",
    ᐃⲆᐃᐃΔΔᐃ: "img/day-skin64.png",
    ⲆᐃⲆΔⲆⲆⵠ: "img/night-skin64.png",
    ΔⵠⲆⲆⵠⲆⵠ: "img/day-skin65.png",
    ⲆⵠⲆᐃⵠⲆⵠ: "img/night-skin65.png",
    ΔⲆⵠⵠΔᐃΔ: "img/day-skin66.png",
    ⵠⵠⵠᐃⵠⵠⵠ: "img/night-skin66.png",
    ᐃᐃΔⲆⲆⲆΔ: "img/day-skin67.png",
    ΔⲆⵠⲆΔⲆᐃ: "img/night-skin67.png",
    ᐃⵠᐃⲆⲆΔⵠ: "img/day-skin68.png",
    ΔΔⲆΔⲆΔⵠ: "img/night-skin68.png",
    ΔΔᐃⲆⵠΔⵠ: "img/day-skin69.png",
    ᐃⲆⵠΔᐃΔⲆ: "img/night-skin69.png",
    ⲆΔⵠⲆᐃⵠⵠ: "img/day-skin70.png",
    ⲆᐃᐃᐃΔᐃⵠ: "img/night-skin70.png",
    ΔΔⵠⵠΔⵠⲆ: "img/day-skin71.png",
    ⲆⲆΔᐃᐃⵠⲆ: "img/night-skin71.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/day-skin72.png",
    ΔⲆⵠΔⲆⲆⲆ: "img/night-skin72.png",
    ⲆΔⵠⲆⲆΔⵠ: "img/day-skin73.png",
    ΔⵠⵠᐃⵠᐃΔ: "img/night-skin73.png",
    ⵠΔΔΔᐃⲆⲆ: "img/day-skin74.png",
    ᐃᐃΔᐃⵠᐃⲆ: "img/night-skin74.png",
    ⵠᐃⵠΔⲆⲆⵠ: "img/day-skin75.png",
    ⵠᐃᐃΔΔⲆⵠ: "img/night-skin75.png",
    ΔΔᐃΔᐃⲆⵠ: "img/day-skin76.png",
    ⲆᐃⵠⲆᐃᐃⵠ: "img/night-skin76.png",
    ⲆᐃⲆⲆΔΔⲆ: "img/day-skin77.png",
    ᐃⵠⵠᐃⵠᐃⲆ: "img/night-skin77.png",
    ᐃᐃᐃᐃᐃⲆⵠ: "img/day-skin78.png",
    ⵠⵠΔᐃΔᐃⵠ: "img/night-skin78.png",
    ⲆΔᐃⲆΔⲆⲆ: "img/day-skin79.png",
    ⲆΔΔⵠΔⵠᐃ: "img/night-skin79.png",
    ⵠⵠᐃᐃᐃⲆΔ: "img/day-skin80.png",
    ⲆᐃΔᐃⵠΔⲆ: "img/night-skin80.png",
    ⵠⲆᐃⵠⲆⲆⵠ: "img/day-skin81.png",
    ΔⵠⲆⵠⵠΔΔ: "img/night-skin81.png",
    ⵠΔⲆⵠⲆΔⵠ: "img/day-skin82.png",
    ᐃᐃΔᐃΔΔⲆ: "img/night-skin82.png",
    ΔᐃⲆⵠᐃΔⵠ: "img/day-skin83.png",
    ⲆⵠΔΔᐃⲆⲆ: "img/night-skin83.png",
    ⲆᐃⲆᐃⵠⲆⲆ: "img/day-skin84.png",
    ΔᐃΔⲆᐃᐃⲆ: "img/night-skin84.png",
    ᐃΔⲆⵠⵠΔᐃ: "img/day-skin85.png",
    ᐃᐃⲆΔⵠⵠΔ: "img/night-skin85.png",
    ⵠⵠᐃⵠᐃΔⵠ: "img/day-skin86.png",
    ⵠᐃᐃⵠΔⵠⲆ: "img/night-skin86.png",
    ᐃᐃⵠᐃΔΔᐃ: "img/day-skin87.png",
    ᐃⵠⵠΔⲆⲆΔ: "img/night-skin87.png",
    ᐃⲆΔᐃⲆᐃΔ: "img/day-skin88.png",
    ⵠΔⲆᐃᐃΔⲆ: "img/night-skin88.png",
    ⵠΔΔΔⵠⵠᐃ: "img/day-skin89.png",
    ᐃΔᐃᐃⲆΔΔ: "img/night-skin89.png",
    ⵠΔⵠᐃⲆⲆΔ: "img/day-skin90.png",
    ⵠⲆᐃⲆΔⲆⵠ: "img/night-skin90.png",
    ⲆΔᐃⲆΔⵠⲆ: "img/day-skin91.png",
    ᐃΔΔΔΔⲆⲆ: "img/night-skin91.png",
    ⵠⵠⵠΔΔⲆⲆ: "img/day-skin92.png",
    ⵠⲆΔⲆⲆΔᐃ: "img/night-skin92.png",
    ΔΔⵠΔⵠⲆΔ: "img/day-skin93.png",
    ⵠᐃᐃⵠⵠⵠΔ: "img/night-skin93.png",
    ⲆᐃⲆⵠᐃᐃᐃ: "img/day-skin94.png",
    ⵠⵠⵠΔΔⵠΔ: "img/night-skin94.png",
    ⵠⲆᐃᐃⵠΔΔ: "img/day-skin95.png",
    ᐃⲆΔⲆᐃⵠᐃ: "img/night-skin95.png",
    ⲆΔⲆᐃⵠⵠᐃ: "img/day-skin96.png",
    ⲆⵠⲆΔᐃᐃⵠ: "img/night-skin96.png",
    ΔⵠⲆⲆⲆΔᐃ: "img/day-skin97.png",
    ᐃᐃᐃⲆᐃᐃᐃ: "img/night-skin97.png",
    ᐃΔᐃⲆⲆⲆΔ: "img/day-skin98.png",
    ⵠᐃΔⵠⲆᐃⲆ: "img/night-skin98.png",
    ⲆⲆⵠⵠᐃⵠⵠ: "img/day-skin99.png",
    ᐃⲆⵠΔⵠⲆⲆ: "img/night-skin99.png",
    ⵠⵠᐃΔⵠⲆᐃ: "img/day-skin100.png",
    ⲆⲆᐃⵠΔⲆΔ: "img/night-skin100.png",
    ⵠⲆΔΔⵠΔΔ: "img/day-skin101.png",
    ΔΔⵠΔⵠΔⵠ: "img/night-skin101.png",
    ᐃᐃⵠᐃⲆΔⲆ: "img/day-skin102.png",
    ᐃⲆⲆⵠᐃⵠΔ: "img/night-skin102.png",
    ΔΔⲆⵠᐃⵠⲆ: "img/day-skin103.png",
    ΔⲆΔΔⵠⵠⲆ: "img/night-skin103.png",
    ΔΔᐃⵠΔⲆᐃ: "img/day-skin104.png",
    ΔⲆⲆΔᐃΔⲆ: "img/night-skin104.png",
    ⲆⵠⲆⵠᐃⵠⵠ: "img/day-skin105.png",
    ᐃΔⵠⵠᐃⵠΔ: "img/night-skin105.png",
    ΔⵠᐃⵠⵠⲆΔ: "img/day-skin106.png",
    ⵠⲆⵠΔⲆⵠⲆ: "img/night-skin106.png",
    ᐃᐃΔΔᐃⵠⵠ: "img/day-skin107.png",
    ΔᐃᐃⲆᐃⲆⵠ: "img/night-skin107.png",
    ⵠⲆᐃΔⲆΔⲆ: "img/day-skin108.png",
    ⵠⲆⵠΔᐃΔⲆ: "img/night-skin108.png",
    ⲆᐃᐃᐃΔᐃΔ: "img/day-skin109.png",
    ᐃΔᐃΔᐃⵠⵠ: "img/night-skin109.png",
    ᐃΔᐃⵠᐃⲆⲆ: "img/day-skin110.png",
    ᐃᐃⲆᐃⵠᐃⵠ: "img/night-skin110.png",
    ⵠⵠⲆΔΔΔⵠ: "img/day-skin111.png",
    ⲆᐃᐃⲆΔⲆΔ: "img/night-skin111.png",
    ⲆᐃᐃΔⲆᐃⵠ: "img/day-skin112.png",
    ΔⲆΔⲆⵠΔᐃ: "img/night-skin112.png",
    ⵠⲆⵠΔⲆⲆⵠⲆⵠ: "img/day-skin113.png",
    ΔΔⲆⵠⲆΔⵠⲆⵠ: "img/night-skin113.png",
    ⵠⲆⵠⲆΔᐃᐃ: "img/day-skin114.png",
    ΔᐃΔⵠⲆᐃⵠ: "img/night-skin114.png",
    ⲆᐃᐃΔΔΔΔ: "img/day-skin115.png",
    ΔⲆᐃΔⲆⲆΔ: "img/night-skin115.png",
    ΔᐃΔΔⲆΔⲆ: "img/day-skin116.png",
    ΔΔⵠⲆΔⵠΔ: "img/night-skin116.png",
    ⵠᐃⵠⵠΔΔΔ: "img/day-skin117.png",
    ᐃᐃᐃⵠⲆⲆⵠ: "img/night-skin117.png",
    ΔᐃⵠᐃᐃⲆⲆ: "img/day-skin118.png",
    ᐃⲆᐃΔⵠⲆᐃ: "img/night-skin118.png",
    ⲆⲆⵠᐃⲆⵠΔ: "img/day-skin119.png",
    ᐃⲆⲆᐃⵠⲆᐃ: "img/night-skin119.png",
    ᐃⲆᐃⲆⵠⵠⵠ: "img/day-skin120.png",
    ᐃⲆᐃⵠⵠⲆⲆ: "img/night-skin120.png",
    ΔΔⲆⵠⵠᐃⲆ: "img/day-skin121.png",
    ⲆᐃⵠⲆⵠⲆᐃ: "img/night-skin121.png",
    ⵠⲆᐃⲆΔᐃⵠ: "img/day-skin122.png",
    ᐃⲆᐃⵠⲆᐃⵠ: "img/night-skin122.png",
    ⵠⲆⵠᐃΔⵠⲆ: "img/day-skin123.png",
    ΔᐃⲆᐃⵠⲆᐃ: "img/night-skin123.png",
    ᐃⵠⲆⵠⵠⵠᐃ: "img/day-skin124.png",
    ᐃⵠⲆΔΔΔᐃ: "img/night-skin124.png",
    ⵠΔᐃⲆⵠⵠⵠ: "img/day-skin125.png",
    ᐃⵠⵠᐃᐃΔᐃ: "img/night-skin125.png",
    ΔᐃΔΔᐃⲆⵠ: "img/day-skin126.png",
    ΔΔᐃⲆⲆⵠΔ: "img/night-skin126.png",
    ΔⵠᐃⲆΔⵠⲆ: "img/day-skin127.png",
    ᐃᐃⵠⲆⵠᐃⵠ: "img/night-skin127.png",
    ⲆᐃΔⵠΔΔΔ: "img/day-skin128.png",
    ⲆΔᐃᐃⲆᐃⲆ: "img/night-skin128.png",
    ᐃⲆΔⵠⵠⵠⵠ: "img/day-skin129.png",
    ᐃᐃΔⲆΔⵠᐃ: "img/night-skin129.png",
    ᐃΔΔᐃⲆΔΔ: "img/day-skin130-1.png",
    ΔᐃⲆᐃᐃᐃΔ: "img/night-skin130-1.png",
    ⲆΔⲆΔⲆΔⵠ: "img/day-skin131.png",
    ⲆᐃΔⲆⲆΔⵠ: "img/night-skin131.png",
    ⵠⲆⵠⲆᐃⲆᐃ: "img/day-skin132.png",
    Ⲇⵠᐃᐃᐃᐃᐃ: "img/night-skin132.png",
    ᐃⲆⵠⲆⵠⵠΔ: "img/day-skin133.png",
    ΔΔΔᐃⲆᐃᐃ: "img/night-skin133.png",
    ΔⵠΔⲆⵠⵠΔ: "img/day-skin134.png",
    ⲆᐃΔΔⵠⲆᐃ: "img/night-skin134.png",
    ⲆⵠⵠⲆⵠΔᐃ: "img/day-skin135.png",
    ᐃᐃᐃΔᐃΔⲆ: "img/night-skin135.png",
    ΔΔⵠΔᐃⲆⲆ: "img/day-skin136.png",
    ⲆᐃⵠᐃᐃΔⵠ: "img/night-skin136.png",
    ΔⵠᐃΔⵠᐃⵠ: "img/day-skin137.png",
    ᐃⲆⲆᐃⵠΔⲆ: "img/night-skin137.png",
    ⲆⲆⲆⵠΔᐃⲆ: "img/day-skin138.png",
    ⵠΔⲆⲆⲆⵠΔ: "img/night-skin138.png",
    ΔᐃⵠⲆΔⲆⲆ: "img/day-skin139.png",
    ΔΔⲆΔⲆⲆΔ: "img/night-skin139.png",
    ⲆⲆΔⲆᐃⵠⲆ: "img/day-skin140.png",
    ΔΔΔΔⵠΔᐃ: "img/night-skin140.png",
    ᐃΔᐃΔⵠⲆⵠ: "img/day-skin141.png",
    Ⲇⵠᐃⵠⵠⵠᐃ: "img/night-skin141.png",
    ΔΔΔᐃⲆᐃⲆ: "img/day-skin142.png",
    ᐃᐃⵠΔⲆⲆΔ: "img/night-skin142.png",
    ΔᐃⵠⵠΔⵠⵠ: "img/day-skin143.png",
    ᐃⲆⲆᐃΔᐃⲆ: "img/night-skin143.png",
    ΔⵠᐃΔᐃᐃⲆ: "img/day-skin144.png",
    ΔⵠⲆᐃᐃⵠⲆ: "img/night-skin144.png",
    ⵠΔⲆᐃⲆⵠⲆ: "img/day-skin145.png",
    ⵠᐃⵠⲆᐃᐃΔ: "img/night-skin145.png",
    ⲆⲆⵠⲆⲆⵠⲆ: "img/day-skin146.png",
    ⲆᐃᐃⵠΔᐃᐃ: "img/night-skin146.png",
    ᐃⵠᐃⵠⲆᐃⲆ: "img/day-skin147.png",
    ΔΔΔᐃΔⵠⲆ: "img/night-skin147.png",
    ᐃΔΔᐃᐃⵠⵠ: "img/day-skin148.png",
    ⵠᐃⲆᐃΔⲆⲆ: "img/night-skin148.png",
    ⲆΔᐃᐃᐃⵠⲆ: "img/day-skin149.png",
    ΔᐃⵠΔⲆᐃⵠ: "img/night-skin149.png",
    ⵠⲆᐃⲆᐃⲆᐃ: "img/day-skin150.png",
    ⵠⵠΔΔⵠⲆⲆ: "img/night-skin150.png",
    ΔⲆⵠⵠⲆⵠⲆ: "img/day-skin151.png",
    ᐃΔΔΔⲆΔⲆ: "img/night-skin151.png",
    ΔⲆⵠⵠΔΔⲆ: "img/day-skin152.png",
    ⵠⵠᐃΔΔⲆⵠ: "img/night-skin152.png",
    ΔΔⵠΔᐃⲆⵠ: "img/day-skin153.png",
    ⵠΔⵠΔᐃΔⵠ: "img/night-skin153.png",
    ΔᐃᐃᐃΔⲆᐃ: "img/day-skin154.png",
    ᐃⲆΔⲆⲆⵠΔ: "img/night-skin154.png",
    ᐃⲆⵠΔΔⵠⵠ: "img/day-skin155.png",
    ᐃΔᐃᐃⵠΔᐃ: "img/night-skin155.png",
    ᐃⵠᐃⲆⵠᐃⵠ: "img/day-skin156.png",
    ⲆⵠᐃⵠⲆᐃΔ: "img/night-skin156.png",
    ⲆⲆᐃᐃΔᐃⲆ: "img/day-skin157.png",
    ᐃⵠⲆΔΔΔⲆ: "img/night-skin157.png",
    ⲆΔⲆᐃᐃⵠΔ: "img/day-skin158.png",
    ᐃⵠⵠᐃᐃⵠⲆ: "img/night-skin158.png",
    ⲆᐃᐃΔⵠᐃᐃ: "img/day-skin159.png",
    ⵠΔΔⲆⵠᐃΔ: "img/night-skin159.png",
    ⵠᐃⵠⲆΔⲆΔ: "img/day-skin160.png",
    ΔΔⲆⲆᐃΔΔ: "img/night-skin160.png",
    ᐃⵠⵠⲆᐃᐃⵠ: "img/day-skin161.png",
    ⵠΔΔΔΔᐃᐃ: "img/night-skin161.png",
    ⲆⵠⵠⵠΔⲆᐃ: "img/day-skin162.png",
    ΔⲆⲆⵠⵠᐃΔ: "img/night-skin162.png",
    ⲆⵠΔᐃⵠⵠΔ: "img/day-skin163.png",
    ΔΔⲆΔⲆᐃΔ: "img/night-skin163.png",
    ⵠᐃⲆΔᐃⵠⵠ: "img/day-skin164.png",
    ⵠᐃΔⲆⵠΔⲆ: "img/night-skin164.png",
    ⲆⵠⵠΔⲆⲆΔ: "img/day-skin165.png",
    ⵠΔⲆᐃⵠⵠΔ: "img/night-skin165.png",
    ⵠᐃⵠᐃΔⲆⵠ: "img/day-skin166.png",
    ⲆᐃΔⲆⵠⵠΔ: "img/night-skin166.png",
    ᐃⵠᐃⵠⲆⲆⲆ: "img/day-skin167.png",
    ᐃᐃᐃΔⲆΔⵠ: "img/night-skin167.png",
    ⲆΔΔΔᐃᐃᐃ: "img/day-skin168.png",
    ᐃΔⵠⲆⲆᐃᐃ: "img/night-skin168.png",
    ᐃΔΔⲆⵠⵠᐃ: "img/day-skin169.png",
    ΔᐃᐃⵠⲆⲆᐃ: "img/night-skin169.png",
    ⵠⵠᐃΔⲆⵠᐃ: "img/day-skin170.png",
    ᐃΔᐃᐃΔⵠⵠ: "img/night-skin170.png",
    ⲆΔⲆⵠΔΔᐃ: "img/day-skin171.png",
    ⵠⵠᐃⲆⵠⵠⵠ: "img/night-skin171.png",
    ⲆⲆᐃⲆⵠⲆΔ: "img/day-skin172.png",
    ᐃᐃᐃΔⲆⵠᐃ: "img/night-skin172.png",
    ᐃΔΔΔⲆⵠⲆ: "img/day-skin173.png",
    ⵠⵠⵠᐃⵠΔⵠ: "img/night-skin173.png",
    ᐃᐃᐃⲆⲆΔᐃ: "img/day-skin174.png",
    ᐃΔΔΔᐃⲆᐃ: "img/night-skin174.png",
    ⲆⵠΔⵠᐃᐃⲆ: "img/day-skin175.png",
    ⵠᐃⲆᐃᐃⵠⲆ: "img/night-skin175.png",
    ⲆΔᐃⲆΔᐃᐃ: "img/day-skin176.png",
    ⲆⲆᐃⵠΔⵠⲆ: "img/night-skin176.png",
    ⲆᐃᐃⵠⵠᐃΔ: "img/day-skin177.png",
    ᐃΔⲆᐃⵠⲆᐃ: "img/night-skin177.png",
    ΔΔᐃΔⲆᐃⵠ: "img/day-skin178.png",
    ⲆᐃⲆΔⵠΔΔ: "img/night-skin178.png",
    ⵠⵠⲆⲆⲆΔᐃ: "img/day-skin179.png",
    ᐃΔΔΔⲆᐃᐃ: "img/night-skin179.png",
    ⲆΔⵠΔⵠⵠᐃ: "img/day-skin180.png",
    ᐃᐃᐃⵠΔΔⵠ: "img/night-skin180.png",
    ⲆⲆⲆᐃⵠⵠⵠ: "img/day-skin181.png",
    ᐃᐃᐃΔΔΔΔ: "img/night-skin181.png",
    ⲆⵠⵠᐃΔΔⵠ: "img/day-skin182.png",
    ⵠᐃΔΔⵠⲆⵠ: "img/night-skin182.png",
    ΔΔΔᐃⵠⲆᐃ: "img/day-skin183.png",
    ΔⵠⵠⵠⲆᐃⲆ: "img/night-skin183.png",
    ᐃΔΔΔⵠⵠⲆ: "img/day-skin184.png",
    ⵠΔᐃΔⵠⵠⵠ: "img/night-skin184.png",
    ΔᐃⵠⵠⲆⲆⵠ: "img/day-skin185.png",
    ⲆⲆⵠΔᐃᐃΔ: "img/night-skin185.png",
    ΔⲆᐃᐃΔⲆⵠ: "img/day-skin186.png",
    ΔΔᐃᐃⲆⲆⲆ: "img/night-skin186.png",
    ⲆᐃⵠⲆⵠⵠⲆ: "img/day-skin187.png",
    ⲆᐃⵠⵠΔᐃⵠ: "img/night-skin187.png",
    ⲆᐃΔⲆΔⵠⲆ: "img/day-skin188.png",
    ⲆⵠΔΔⵠⲆⲆ: "img/night-skin188.png",
    ⲆᐃⵠⵠⲆⵠⵠ: "img/day-skin189.png",
    ΔΔⲆᐃΔᐃⲆ: "img/night-skin189.png",
    ⵠᐃⵠⲆᐃⲆΔ: "img/day-skin190.png",
    ΔⵠᐃᐃΔᐃⵠ: "img/night-skin190.png",
    ᐃᐃΔΔⵠⵠΔ: "img/day-skin191.png",
    ⲆΔⲆΔᐃΔⲆ: "img/night-skin191.png",
    ⵠΔⵠᐃⲆⵠᐃ: "img/day-skin192.png",
    ᐃΔᐃⵠⵠⵠΔ: "img/night-skin192.png",
    ΔᐃᐃΔⵠΔΔ: "img/day-skin193.png",
    ᐃⵠⵠⲆΔΔΔ: "img/night-skin193.png",
    ᐃΔᐃΔᐃᐃⵠ: "img/day-skin194.png",
    ΔᐃΔᐃᐃΔⵠ: "img/night-skin194.png",
    ⵠⲆⲆΔⵠⵠⵠ: "img/day-skin195.png",
    ⲆⲆⲆⲆᐃⵠΔ: "img/night-skin195.png",
    ⲆᐃᐃΔΔᐃΔ: "img/day-skin196.png",
    ᐃⲆⲆⵠᐃⲆⲆ: "img/night-skin196.png",
    ᐃΔᐃΔⲆⲆᐃ: "img/day-skin197.png",
    ⲆⲆᐃⲆⲆⲆⲆ: "img/night-skin197.png",
    ᐃᐃᐃΔᐃΔᐃ: "img/day-skin198.png",
    ⵠΔΔΔⲆⲆΔ: "img/night-skin198.png",
    ⲆᐃᐃΔⲆᐃΔ: "img/day-skin199.png",
    ⵠᐃΔᐃᐃⵠⵠ: "img/night-skin199.png",
    ⲆΔᐃⲆⲆΔᐃ: "img/day-skin200.png",
    ⵠⲆΔⲆΔⵠⲆ: "img/night-skin200.png",
    ⲆⵠⲆⵠΔⲆⲆ: "img/day-skin201.png",
    ⵠⵠᐃⲆᐃΔᐃ: "img/night-skin201.png",
    ΔΔᐃᐃΔⵠⲆ: "img/day-skin202.png",
    ΔⵠⲆⲆⵠΔⵠ: "img/night-skin202.png",
    ΔΔΔᐃᐃΔΔ: "img/day-skin203.png",
    ⵠᐃΔⲆΔᐃᐃ: "img/night-skin203.png",
    ᐃᐃⵠⵠⵠᐃⲆ: "img/day-skin204.png",
    ⲆⲆⵠⵠⲆⵠⵠ: "img/night-skin204.png",
    ᐃⵠΔΔᐃⲆⵠ: "img/day-skin205.png",
    ⵠⵠⵠⵠᐃⵠⲆ: "img/night-skin205.png",
    ΔΔⲆⵠΔΔΔ: "img/day-skin206.png",
    ᐃⵠᐃΔⵠΔΔ: "img/night-skin206.png",
    ⲆΔᐃⵠΔⵠⲆ: "img/day-skin207.png",
    ΔⲆⵠΔⲆΔⲆ: "img/night-skin207.png",
    ⲆⲆⲆΔⲆΔⵠ: "img/day-skin208.png",
    ᐃⵠⵠⲆⲆⲆⲆ: "img/night-skin208.png",
    ⲆᐃⵠΔΔⲆⲆ: "img/day-skin209.png",
    ᐃⲆΔⵠᐃⲆΔ: "img/night-skin209.png",
    ᐃⵠΔⲆⵠⵠⵠ: "img/day-skin210.png",
    ᐃᐃⵠⵠⵠⵠⵠ: "img/night-skin210.png",
    ᐃΔᐃΔⲆᐃⲆ: "img/day-skin211.png",
    ⲆⵠⵠⲆᐃⵠᐃ: "img/night-skin211.png",
    ⵠΔⵠⵠⵠⲆᐃ: "img/day-skin212.png",
    ΔᐃΔᐃⵠΔⵠ: "img/night-skin212.png",
    ⲆΔΔⵠⲆⵠᐃ: "img/day-hand-skin0.png",
    ⵠⲆⲆⲆⵠⲆΔ: "img/night-hand-skin0.png",
    ᐃΔⵠΔⲆⵠᐃ: "img/day-hand-skin1.png",
    ⲆᐃΔΔᐃⲆᐃ: "img/night-hand-skin1.png",
    ⲆΔⵠΔⵠᐃᐃ: "img/day-hand-skin2.png",
    ᐃⲆᐃΔΔⵠⵠ: "img/night-hand-skin2.png",
    ᐃⲆⲆⵠⵠΔΔ: "img/day-hand-skin3.png",
    ⲆⲆᐃΔᐃⲆⵠ: "img/night-hand-skin3.png",
    ⵠⲆΔᐃᐃⵠᐃ: "img/day-hand-skin4.png",
    ΔⲆᐃᐃⲆᐃⵠ: "img/night-hand-skin4.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/day-hand-skin5.png",
    ⲆⲆⵠΔⲆⲆⲆ: "img/night-hand-skin5.png",
    ⲆⲆⵠⵠⲆΔΔ: "img/day-hand-skin6.png",
    ⲆⵠⵠⵠⲆᐃⵠΔᐃ: "img/night-hand-skin6.png",
    ΔΔΔᐃᐃΔⲆ: "img/day-hand-skin6.png",
    ⵠⵠΔⵠⵠΔⲆ: "img/night-hand-skin6.png",
    ⵠᐃΔⵠⲆᐃⵠ: "img/day-hand-skin8.png",
    ⲆᐃⵠⵠᐃⵠⲆ: "img/night-hand-skin8.png",
    ᐃⲆⲆⲆⵠⵠᐃ: "img/day-hand-skin9.png",
    ΔΔᐃⲆⲆΔⵠ: "img/night-hand-skin9.png",
    ⲆᐃΔⲆΔΔⲆ: "img/day-hand-skin10.png",
    ᐃᐃᐃᐃⵠΔⲆ: "img/night-hand-skin10.png",
    ΔΔⵠⵠⲆᐃΔ: "img/day-hand-skin11.png",
    ΔᐃⲆⵠⲆᐃⵠ: "img/night-hand-skin11.png",
    ᐃⵠᐃᐃᐃⲆΔ: "img/day-hand-skin12.png",
    ΔᐃⲆⵠᐃⵠⲆ: "img/night-hand-skin12.png",
    ΔⵠΔᐃⲆᐃⵠ: "img/day-hand-skin13.png",
    ᐃΔⵠⵠⲆⵠΔ: "img/night-hand-skin13.png",
    ⵠᐃⵠᐃΔⵠΔ: "img/day-hand-skin14.png",
    ᐃᐃⲆᐃⵠΔⲆ: "img/night-hand-skin14.png",
    ⵠΔⵠᐃⵠΔⵠ: "img/day-hand-skin15.png",
    ⵠⵠⵠᐃⵠⲆΔ: "img/night-hand-skin15.png",
    ⲆᐃⲆⵠⵠΔΔ: "img/day-hand-skin16.png",
    ᐃⲆΔⵠᐃⵠⵠ: "img/night-hand-skin16.png",
    ᐃⲆᐃⲆᐃⵠⲆ: "img/day-hand-skin17.png",
    ΔⲆΔᐃⲆⲆΔ: "img/night-hand-skin17.png",
    ΔᐃⵠᐃⵠΔΔ: "img/day-hand-skin18.png",
    ᐃᐃⵠⲆᐃΔΔ: "img/night-hand-skin18.png",
    ⵠⵠΔᐃΔΔΔ: "img/day-hand-skin19.png",
    ᐃΔᐃⲆⲆᐃᐃ: "img/night-hand-skin19.png",
    ᐃᐃᐃΔⵠⵠΔ: "img/day-hand-skin20.png",
    ⵠΔΔᐃⲆⵠΔ: "img/night-hand-skin20.png",
    ᐃᐃⵠⵠⲆΔᐃ: "img/day-hand-skin21.png",
    ⲆᐃᐃᐃⲆⲆᐃ: "img/night-hand-skin21.png",
    ᐃⲆΔⵠⲆⵠⵠ: "img/day-hand-skin22.png",
    ⲆⲆΔⲆⵠᐃᐃ: "img/night-hand-skin22.png",
    ⵠᐃΔⵠⵠⲆⲆ: "img/day-hand-skin23.png",
    ⲆⲆⲆΔⲆⵠᐃ: "img/night-hand-skin23.png",
    ⲆᐃΔⵠⲆᐃⲆ: "img/day-hand-skin24.png",
    ⵠΔΔᐃⵠᐃⵠ: "img/night-hand-skin24.png",
    ⲆⵠⵠⲆⲆΔⵠ: "img/day-hand-skin25.png",
    ⲆⲆᐃᐃᐃⲆΔ: "img/night-hand-skin25.png",
    ⵠⵠⲆᐃⲆᐃⲆ: "img/day-hand-skin26.png",
    ⲆⲆΔᐃⲆⵠΔ: "img/night-hand-skin26.png",
    ᐃΔⲆᐃᐃᐃⵠ: "img/day-hand-skin27.png",
    ΔⲆⵠᐃΔΔⵠ: "img/night-hand-skin27.png",
    ΔⵠⲆⲆⵠᐃΔ: "img/day-hand-skin28.png",
    ΔΔᐃⲆᐃΔᐃ: "img/night-hand-skin28.png",
    ⵠΔⲆᐃᐃΔⵠ: "img/day-hand-skin29.png",
    ΔΔΔᐃΔΔΔ: "img/night-hand-skin29.png",
    ⲆⲆΔᐃⲆⵠⵠ: "img/day-hand-skin30.png",
    ᐃⵠⲆⵠⵠᐃⵠ: "img/night-hand-skin30.png",
    ΔᐃⲆⲆᐃᐃⲆ: "img/day-hand-skin31.png",
    ⲆⵠⵠΔⵠΔⲆ: "img/night-hand-skin31.png",
    ⵠᐃⵠΔᐃⲆΔ: "img/day-hand-skin32.png",
    ᐃᐃⲆⵠⲆⲆΔ: "img/night-hand-skin32.png",
    ⲆⵠⵠⵠⲆΔⵠ: "img/day-hand-skin33.png",
    ⲆⵠⲆⵠⵠᐃΔ: "img/night-hand-skin33.png",
    ᐃᐃᐃⵠⵠᐃᐃ: "img/day-hand-skin34.png",
    ⵠΔⵠᐃⲆΔⲆ: "img/night-hand-skin34.png",
    ΔⵠᐃⲆⵠⲆΔ: "img/day-hand-skin35.png",
    ᐃΔΔⵠΔⲆⲆ: "img/night-hand-skin35.png",
    ΔⲆΔⲆⵠⲆⵠ: "img/day-hand-skin36.png",
    ᐃⲆΔⲆᐃᐃⵠ: "img/night-hand-skin36.png",
    ⵠΔᐃΔⵠᐃⲆ: "img/day-hand-skin37.png",
    ᐃᐃΔⵠΔᐃⵠ: "img/night-hand-skin37.png",
    ΔᐃᐃᐃⲆᐃᐃ: "img/day-hand-skin38.png",
    ΔΔⲆⲆⵠΔⵠ: "img/night-hand-skin38.png",
    ⵠⲆᐃⵠⲆΔΔ: "img/day-hand-skin39.png",
    ⵠΔⵠΔⲆⵠⵠ: "img/night-hand-skin39.png",
    ⲆⵠⵠⵠⵠΔΔ: "img/day-hand-skin40.png",
    ⲆᐃΔΔΔⲆⵠ: "img/night-hand-skin40.png",
    ⲆΔⲆΔᐃΔᐃ: "img/day-hand-skin41.png",
    ⲆᐃⵠᐃⲆΔΔ: "img/night-hand-skin41.png",
    ΔᐃᐃΔᐃⵠΔ: "img/day-hand-skin42.png",
    ΔᐃⲆΔΔᐃⵠ: "img/night-hand-skin42.png",
    ᐃᐃⲆᐃⵠⲆⲆ: "img/day-hand-skin43.png",
    ᐃᐃᐃⵠⵠᐃⵠ: "img/night-hand-skin43.png",
    ⵠⵠⵠΔⲆᐃᐃ: "img/day-hand-skin16.png",
    ⲆΔⵠⵠⵠⵠⲆ: "img/night-hand-skin16.png",
    ⵠΔⵠⵠᐃΔᐃ: "img/day-hand-skin45.png",
    ΔⵠΔⵠⲆΔⲆ: "img/night-hand-skin45.png",
    ᐃᐃⵠᐃΔΔΔ: "img/day-hand-skin46.png",
    ⵠΔⲆΔᐃᐃᐃ: "img/night-hand-skin46.png",
    ⲆⵠᐃⲆⲆⵠⵠ: "img/day-hand-skin47.png",
    ⲆᐃᐃⲆⲆⵠΔ: "img/night-hand-skin47.png",
    ΔᐃΔⵠⲆᐃᐃ: "img/day-hand-skin48.png",
    ⵠⲆᐃⵠᐃⲆᐃ: "img/night-hand-skin48.png",
    ΔⲆⲆⲆᐃᐃᐃ: "img/day-hand-skin49.png",
    ᐃΔⵠⲆⲆⵠⵠ: "img/night-hand-skin49.png",
    ⲆᐃᐃΔᐃΔᐃ: "img/day-hand-skin49.png",
    ᐃⲆΔΔⲆᐃᐃ: "img/night-hand-skin49.png",
    ⵠᐃΔᐃⵠⵠΔ: "img/day-hand-skin51.png",
    ΔⲆⲆΔⲆⵠⵠ: "img/night-hand-skin51.png",
    ⵠᐃⵠᐃⲆᐃⲆ: "img/day-hand-skin52.png",
    ⵠⲆΔⲆⵠⲆⲆ: "img/night-hand-skin52.png",
    ⵠⲆⲆⲆᐃΔⵠ: "img/day-hand-skin53.png",
    ⲆΔΔΔΔⲆⲆ: "img/night-hand-skin53.png",
    ⵠᐃⲆΔⵠⲆⵠ: "img/day-hand-skin53.png",
    ᐃΔⵠᐃᐃⵠΔ: "img/night-hand-skin53.png",
    ⵠᐃⵠΔⲆΔᐃ: "img/day-hand-skin55.png",
    ᐃᐃΔⲆⵠⲆΔ: "img/night-hand-skin55.png",
    ⵠⲆΔⵠⵠⲆⲆ: "img/day-hand-skin56.png",
    ⲆᐃⵠⵠΔᐃᐃ: "img/night-hand-skin56.png",
    ⵠᐃⲆⵠΔᐃⲆ: "img/day-hand-skin57.png",
    ⵠᐃᐃⲆΔΔΔ: "img/night-hand-skin57.png",
    ⵠΔⲆΔΔⲆⵠ: "img/day-hand-skin58.png",
    ΔᐃⲆⵠⵠΔᐃ: "img/night-hand-skin58.png",
    ⵠⲆᐃⲆⲆⲆⲆ: "img/day-hand-skin59.png",
    ⲆΔⲆᐃⵠⲆᐃ: "img/night-hand-skin59.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/day-hand-skin61.png",
    ⲆⲆⵠⵠᐃΔᐃ: "img/night-hand-skin61.png",
    ⵠⲆΔᐃⲆᐃⲆ: "img/day-hand-skin61.png",
    ⵠᐃⵠᐃΔΔⲆ: "img/night-hand-skin61.png",
    ⵠΔΔⵠᐃΔᐃ: "img/day-hand-skin62.png",
    ⲆⵠⵠΔΔΔΔ: "img/night-hand-skin62.png",
    ⲆⵠⵠΔΔⵠⵠ: "img/day-hand-skin63.png",
    ⲆᐃᐃⵠⵠⵠΔ: "img/night-hand-skin63.png",
    ⵠⵠⵠⲆᐃⵠⵠ: "img/day-hand-skin64.png",
    ⲆΔⲆⵠⲆᐃΔ: "img/night-hand-skin64.png",
    ᐃⲆⵠⵠᐃΔⲆ: "img/day-hand-skin65.png",
    ⲆⵠⵠⵠᐃⲆΔ: "img/night-hand-skin65.png",
    ⵠⲆᐃⲆΔⲆΔ: "img/day-hand-skin66.png",
    ⲆⵠⵠⲆᐃᐃⵠ: "img/night-hand-skin66.png",
    ᐃⵠΔⲆᐃᐃⵠ: "img/day-hand-skin67.png",
    ⵠⵠᐃⵠⲆΔΔ: "img/night-hand-skin67.png",
    ᐃΔᐃᐃⲆᐃⲆ: "img/day-hand-skin68.png",
    ⲆⲆᐃΔΔⲆᐃ: "img/night-hand-skin68.png",
    ⵠⲆᐃᐃⵠⵠⲆ: "img/day-hand-skin69.png",
    ᐃΔᐃⲆᐃⲆΔ: "img/night-hand-skin69.png",
    ᐃᐃⲆᐃⵠⲆᐃ: "img/day-hand-skin70.png",
    ⲆΔⲆⲆⲆⲆᐃ: "img/night-hand-skin70.png",
    ⲆΔⵠⲆᐃⲆⲆ: "img/day-hand-skin71.png",
    ΔⲆᐃⵠᐃⲆⲆ: "img/night-hand-skin71.png",
    ΔⵠᐃⲆΔⲆⵠ: "img/day-hand-skin72.png",
    ⲆⵠⲆᐃΔⵠⵠ: "img/night-hand-skin72.png",
    ᐃⲆΔΔΔᐃⵠ: "img/day-hand-skin73.png",
    ⵠⵠⵠⵠΔⲆⲆ: "img/night-hand-skin73.png",
    ⲆⵠⵠΔᐃⵠⵠ: "img/day-hand-skin74.png",
    ΔᐃᐃⲆⲆⲆΔ: "img/night-hand-skin74.png",
    ⵠΔᐃⵠⵠⲆⵠ: "img/day-hand-skin75.png",
    ⲆⵠⲆᐃⲆᐃⵠ: "img/night-hand-skin75.png",
    ᐃⵠᐃⲆⵠⵠΔ: "img/day-hand-skin76.png",
    ᐃⲆⲆΔⲆΔⵠ: "img/night-hand-skin76.png",
    ⵠΔᐃⵠΔΔⲆ: "img/day-hand-skin77.png",
    ᐃᐃⲆᐃⲆᐃⲆ: "img/night-hand-skin77.png",
    ⲆΔΔⲆᐃⵠΔ: "img/day-hand-skin78.png",
    ⲆΔⲆᐃⲆⵠⲆ: "img/night-hand-skin78.png",
    ⵠᐃᐃⲆⲆᐃᐃ: "img/day-hand-skin79.png",
    ⲆⲆΔΔΔⲆⲆ: "img/night-hand-skin79.png",
    ΔΔᐃᐃᐃⵠⵠ: "img/day-hand-skin80.png",
    ΔᐃⲆⵠΔⲆᐃ: "img/night-hand-skin80.png",
    ᐃⲆⵠⲆⵠᐃⵠ: "img/day-hand-skin81.png",
    ΔΔΔⵠⵠᐃΔ: "img/night-hand-skin81.png",
    ⲆᐃⵠⲆⲆⵠΔ: "img/day-hand-skin82.png",
    ΔⵠΔᐃⵠⵠᐃ: "img/night-hand-skin82.png",
    ᐃᐃⵠⵠΔΔⲆ: "img/day-hand-skin83.png",
    ᐃⵠᐃΔᐃΔⲆ: "img/night-hand-skin83.png",
    ⲆⲆⲆΔᐃⲆⵠ: "img/day-hand-skin84.png",
    ⲆΔᐃΔᐃⲆⲆ: "img/night-hand-skin84.png",
    ⲆΔᐃⵠΔⵠᐃ: "img/day-hand-skin85.png",
    ⵠⲆⵠᐃΔΔⲆ: "img/night-hand-skin85.png",
    ⵠΔΔᐃΔΔᐃ: "img/day-hand-skin86.png",
    ⲆᐃⲆⵠⵠᐃⲆ: "img/night-hand-skin86.png",
    ⲆᐃᐃⲆⲆⵠⲆ: "img/day-hand-skin87.png",
    ΔⵠⲆΔᐃⵠΔ: "img/night-hand-skin87.png",
    ᐃⵠΔᐃⵠⵠΔ: "img/day-hand-skin88.png",
    ⲆⲆⲆΔᐃⲆⲆ: "img/night-hand-skin88.png",
    ΔΔⵠⲆⲆⲆⵠ: "img/day-hand-skin89.png",
    ⲆⲆᐃⲆΔΔⲆ: "img/night-hand-skin89.png",
    ⲆΔⵠⲆⵠᐃⲆ: "img/day-hand-skin90.png",
    ⲆⲆⵠⵠⲆⲆᐃ: "img/night-hand-skin90.png",
    ⲆⲆⲆΔΔΔⵠ: "img/day-hand-skin91.png",
    ΔⵠᐃᐃᐃⲆⵠ: "img/night-hand-skin91.png",
    ᐃᐃΔⵠᐃⲆΔ: "img/day-hand-skin92.png",
    ⲆⵠⲆⵠΔⵠᐃ: "img/night-hand-skin92.png",
    ΔⵠᐃⲆᐃΔⲆ: "img/day-hand-skin93.png",
    ⲆⲆⵠⵠⵠⵠⲆ: "img/night-hand-skin93.png",
    ⵠΔΔⲆᐃⲆⵠ: "img/day-hand-skin94.png",
    ᐃⲆᐃΔⲆᐃⵠ: "img/night-hand-skin94.png",
    ᐃⲆⵠᐃⵠΔⵠ: "img/day-hand-skin95.png",
    ᐃᐃΔⵠᐃⲆⲆ: "img/night-hand-skin95.png",
    ⲆⲆⵠⲆⲆⲆΔ: "img/day-hand-skin96.png",
    ⲆᐃᐃᐃΔⲆⵠ: "img/night-hand-skin96.png",
    ΔⵠΔΔⵠⵠⵠ: "img/day-hand-skin97.png",
    ⵠⵠⲆΔᐃⲆΔ: "img/night-hand-skin97.png",
    ΔⵠⵠⲆᐃᐃⲆ: "img/day-hand-skin98.png",
    ⵠΔΔΔⵠⵠⵠ: "img/night-hand-skin98.png",
    ᐃⲆΔᐃΔΔⵠ: "img/day-hand-skin99.png",
    ΔⵠᐃⵠⵠⲆᐃ: "img/night-hand-skin99.png",
    ⲆⲆᐃⲆⲆᐃΔ: "img/day-hand-skin100.png",
    ⲆⵠⲆΔⵠⲆΔ: "img/night-hand-skin100.png",
    ⲆᐃⲆⲆᐃⵠΔ: "img/day-hand-skin101.png",
    ᐃⲆⵠΔⲆᐃΔ: "img/night-hand-skin101.png",
    ΔᐃⲆᐃⲆᐃᐃ: "img/day-hand-skin102.png",
    ⵠⲆⲆΔΔⲆᐃ: "img/night-hand-skin102.png",
    ⲆΔⲆΔΔᐃᐃ: "img/day-hand-skin103.png",
    ⲆⵠⲆΔⵠⵠⲆ: "img/night-hand-skin103.png",
    ⵠᐃΔᐃΔⲆΔ: "img/day-hand-skin104.png",
    ᐃⲆΔΔⲆⲆᐃ: "img/night-hand-skin104.png",
    ᐃΔⵠⲆⵠⲆΔ: "img/day-hand-skin105.png",
    ⵠⵠⵠΔΔᐃⵠ: "img/night-hand-skin105.png",
    ⵠᐃᐃⲆⵠⵠᐃ: "img/day-hand-skin106.png",
    ⲆᐃᐃΔΔⵠᐃ: "img/night-hand-skin106.png",
    ΔⵠΔⲆⲆΔΔ: "img/day-hand-skin107.png",
    ᐃⲆⲆΔᐃⵠΔ: "img/night-hand-skin107.png",
    ΔⲆᐃⲆᐃⵠΔ: "img/day-hand-skin108.png",
    ⵠⲆΔⵠⲆⵠΔ: "img/night-hand-skin108.png",
    ΔⵠⲆⲆᐃᐃᐃ: "img/day-hand-skin109.png",
    Ⲇᐃⵠᐃⵠᐃᐃ: "img/night-hand-skin109.png",
    ΔⵠⵠΔⲆᐃⵠ: "img/day-hand-skin110.png",
    ᐃᐃⵠᐃⲆᐃⵠ: "img/night-hand-skin110.png",
    ⲆⲆᐃΔᐃⵠⲆ: "img/day-hand-skin111.png",
    ⵠᐃⵠⲆⵠⲆⲆ: "img/night-hand-skin111.png",
    ⵠⵠⲆⵠΔΔⲆ: "img/day-hand-skin112.png",
    ⲆⵠΔᐃⲆⵠⲆ: "img/night-hand-skin112.png",
    ΔΔⵠΔⵠⲆΔᐃⲆ: "img/day-hand-skin113.png",
    ⵠⲆΔᐃⵠⲆΔΔⵠ: "img/night-hand-skin113.png",
    ⵠᐃΔⲆᐃΔᐃ: "img/day-hand-skin114.png",
    ᐃᐃⵠᐃΔⵠⵠ: "img/night-hand-skin114.png",
    ⵠⵠΔᐃⵠΔΔ: "img/day-hand-skin115.png",
    ⵠⵠΔⵠⲆⵠⲆ: "img/night-hand-skin115.png",
    ⲆᐃᐃΔⲆⵠⵠ: "img/day-hand-skin116.png",
    ᐃⲆΔᐃⲆⵠⵠ: "img/night-hand-skin116.png",
    ᐃⲆΔⵠΔⵠᐃ: "img/day-hand-skin117.png",
    ⵠⲆᐃᐃᐃΔᐃ: "img/night-hand-skin117.png",
    ⵠΔⵠⲆᐃᐃⵠ: "img/day-hand-skin118.png",
    ⲆⵠⵠⵠⵠⵠⲆ: "img/night-hand-skin118.png",
    ΔΔⵠⲆⲆⵠⵠ: "img/day-hand-skin119.png",
    ᐃΔⲆⵠⲆΔⵠ: "img/night-hand-skin119.png",
    ⲆᐃⵠⲆᐃⲆⲆ: "img/day-hand-skin120.png",
    ΔΔⵠᐃⵠⵠᐃ: "img/night-hand-skin120.png",
    ᐃΔΔⲆΔΔΔ: "img/day-hand-skin122.png",
    ⵠⲆⵠᐃᐃⲆᐃ: "img/night-hand-skin122.png",
    ⵠᐃᐃΔⲆᐃΔ: "img/day-hand-skin122.png",
    ᐃⲆⲆΔⵠᐃᐃ: "img/night-hand-skin122.png",
    ⵠⲆΔⲆⵠⲆΔ: "img/day-hand-skin122.png",
    ΔᐃΔΔΔᐃΔ: "img/night-hand-skin122.png",
    ⵠᐃΔⵠᐃⲆⵠ: "img/day-hand-skin124.png",
    ᐃⲆᐃᐃᐃΔⲆ: "img/night-hand-skin124.png",
    ΔⵠᐃⵠΔΔⲆ: "img/day-hand-skin125.png",
    ᐃⵠᐃΔᐃᐃⵠ: "img/night-hand-skin125.png",
    ΔΔΔⲆᐃⵠⲆ: "img/day-hand-skin126.png",
    ᐃⲆⲆΔᐃΔⵠ: "img/night-hand-skin126.png",
    ΔⲆⲆΔᐃⵠΔ: "img/day-hand-skin127.png",
    ⵠᐃⵠᐃᐃⲆⵠ: "img/night-hand-skin127.png",
    ᐃⲆᐃⵠΔⵠⵠ: "img/day-hand-skin128.png",
    ⲆΔΔⵠⵠΔⵠ: "img/night-hand-skin128.png",
    ⲆⲆᐃⵠΔΔⲆ: "img/day-hand-skin129.png",
    ΔᐃⲆᐃΔⵠⵠ: "img/night-hand-skin129.png",
    ᐃΔⲆⵠⲆⲆΔ: "img/day-hand-skin130.png",
    ΔⲆⵠⵠⵠΔᐃ: "img/night-hand-skin130.png",
    ΔᐃΔⵠᐃⵠⲆ: "img/day-hand-skin131.png",
    ᐃⲆᐃⵠᐃᐃⲆ: "img/night-hand-skin131.png",
    ᐃⲆⵠᐃΔᐃⲆ: "img/day-hand-skin130.png",
    ⵠⵠⵠᐃⲆΔⲆ: "img/night-hand-skin130.png",
    ᐃⵠⲆΔᐃΔⲆ: "img/day-hand-skin133.png",
    ᐃᐃᐃᐃⵠⵠᐃ: "img/night-hand-skin133.png",
    ΔⲆⲆᐃᐃⵠᐃ: "img/day-hand-skin134.png",
    ⲆΔⲆⲆΔᐃⵠ: "img/night-hand-skin134.png",
    ΔᐃⲆΔᐃⵠⲆ: "img/day-hand-skin135.png",
    ᐃΔⲆⵠⵠⲆⵠ: "img/night-hand-skin135.png",
    ΔΔⵠⲆΔⲆⲆ: "img/day-hand-skin136.png",
    ⵠᐃᐃⲆⲆⲆⵠ: "img/night-hand-skin136.png",
    ⲆⲆᐃᐃⵠΔⵠ: "img/day-hand-skin137.png",
    ᐃⵠᐃⵠⲆⵠᐃ: "img/night-hand-skin137.png",
    ⲆΔⲆⵠΔΔΔ: "img/day-hand-skin138.png",
    ΔⵠⵠᐃᐃΔΔ: "img/night-hand-skin138.png",
    ⲆΔⲆⵠⵠⲆⵠ: "img/day-hand-skin139.png",
    ΔᐃⲆΔΔᐃᐃ: "img/night-hand-skin139.png",
    ΔⲆⵠᐃᐃⲆᐃ: "img/day-hand-skin140.png",
    ⲆΔⵠΔⵠΔⵠ: "img/night-hand-skin140.png",
    ⵠⲆᐃⲆⲆᐃᐃ: "img/day-hand-skin141.png",
    ᐃⲆᐃⵠᐃⲆᐃ: "img/night-hand-skin141.png",
    ⵠⲆⲆΔᐃᐃⵠ: "img/day-hand-skin142.png",
    ᐃΔⲆΔΔⵠΔ: "img/night-hand-skin142.png",
    ⲆᐃᐃⲆΔⲆⵠ: "img/day-hand-skin143.png",
    ⲆΔΔᐃⲆⲆⵠ: "img/night-hand-skin143.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/day-hand-skin144.png",
    ᐃⵠΔⲆΔⵠⲆ: "img/night-hand-skin144.png",
    ⵠⲆᐃⵠΔⵠᐃ: "img/day-hand-skin145.png",
    ᐃⲆⵠⲆᐃΔⵠ: "img/night-hand-skin145.png",
    ΔᐃΔⵠⵠⵠⵠ: "img/day-hand-skin146.png",
    ⲆⲆᐃᐃΔⲆᐃ: "img/night-hand-skin146.png",
    ⵠⵠⲆⵠⲆⵠᐃ: "img/day-hand-skin147.png",
    ⵠΔⲆΔΔⵠⵠ: "img/night-hand-skin147.png",
    ⵠⵠᐃᐃΔⲆΔ: "img/day-hand-skin148.png",
    ᐃΔΔⵠᐃᐃᐃ: "img/night-hand-skin148.png",
    ΔᐃΔⲆⲆⲆᐃ: "img/day-hand-skin149.png",
    ⲆⵠⵠⲆⲆΔⲆ: "img/night-hand-skin149.png",
    ᐃᐃⲆᐃΔⵠⲆ: "img/day-hand-skin150.png",
    ᐃⵠⲆⵠⵠΔΔ: "img/night-hand-skin150.png",
    ΔᐃΔⲆⵠⵠᐃ: "img/day-hand-skin151.png",
    ᐃΔΔᐃΔⵠⲆ: "img/night-hand-skin151.png",
    ᐃᐃⵠΔⲆᐃΔ: "img/day-hand-skin152.png",
    ⵠⵠⲆΔⵠⲆᐃ: "img/night-hand-skin152.png",
    ΔⲆΔΔΔᐃᐃ: "img/day-hand-skin153.png",
    ᐃⵠᐃΔΔⵠⵠ: "img/night-hand-skin153.png",
    ᐃΔΔᐃΔᐃᐃ: "img/day-hand-skin154.png",
    ⲆⲆⲆᐃᐃⲆⵠ: "img/night-hand-skin154.png",
    ⵠⵠⲆΔᐃⲆᐃ: "img/day-hand-skin155.png",
    ⲆΔᐃΔⵠᐃⵠ: "img/night-hand-skin155.png",
    ΔⵠᐃⲆⲆⵠΔ: "img/day-hand-skin156.png",
    ⵠΔⵠⵠΔⵠⵠ: "img/night-hand-skin156.png",
    ⵠⵠⲆⲆᐃⵠᐃ: "img/day-hand-skin157.png",
    ΔΔΔⵠⵠᐃⲆ: "img/night-hand-skin157.png",
    ⵠΔΔⲆⵠⲆΔ: "img/day-hand-skin158.png",
    ᐃⵠⵠⵠⲆΔᐃ: "img/night-hand-skin158.png",
    ᐃⵠⲆΔΔⵠΔ: "img/day-hand-skin159.png",
    ⵠΔⲆΔⲆⲆΔ: "img/night-hand-skin159.png",
    ⵠΔⲆΔⵠᐃⵠ: "img/day-hand-skin160.png",
    ⵠᐃΔᐃⲆΔⲆ: "img/night-hand-skin160.png",
    ΔⲆΔΔⲆΔΔ: "img/day-hand-skin161.png",
    ᐃⵠⲆΔⵠⲆΔ: "img/night-hand-skin161.png",
    ⲆᐃⲆⲆⲆᐃΔ: "img/day-hand-skin162.png",
    ᐃⵠⲆⲆΔᐃᐃ: "img/night-hand-skin162.png",
    ᐃⲆⲆⵠᐃΔΔ: "img/day-hand-skin163.png",
    ⵠⲆᐃⲆⵠⵠᐃ: "img/night-hand-skin163.png",
    ᐃΔⵠⵠᐃⵠᐃ: "img/day-hand-skin164.png",
    ⲆΔᐃᐃᐃⵠΔ: "img/night-hand-skin164.png",
    ᐃΔᐃΔⵠᐃᐃ: "img/day-hand-skin165.png",
    ᐃⲆⵠⲆⲆⵠⲆ: "img/night-hand-skin165.png",
    ᐃᐃΔⵠⵠᐃⵠ: "img/day-hand-skin166.png",
    ΔⲆΔΔΔΔᐃ: "img/night-hand-skin166.png",
    ⲆΔΔᐃΔᐃⵠ: "img/day-hand-skin167.png",
    ΔᐃⲆΔⲆⵠᐃ: "img/night-hand-skin167.png",
    ᐃⲆⲆⵠⵠⲆᐃ: "img/day-hand-skin168.png",
    ⵠΔΔᐃΔᐃᐃ: "img/night-hand-skin168.png",
    ⵠΔΔⵠᐃΔⲆ: "img/day-hand-skin169.png",
    ΔⵠΔᐃᐃΔⲆ: "img/night-hand-skin169.png",
    ⲆⲆⲆⵠΔᐃᐃ: "img/day-hand-skin170.png",
    ΔⵠᐃⲆᐃⲆᐃ: "img/night-hand-skin170.png",
    ᐃⵠᐃΔΔⲆᐃ: "img/day-hand-skin171.png",
    ⲆᐃⲆⵠⲆⲆⲆ: "img/night-hand-skin171.png",
    ⲆⲆⲆⲆΔⲆⲆ: "img/day-hand-skin172.png",
    ᐃᐃΔΔᐃⲆⵠ: "img/night-hand-skin172.png",
    ΔᐃⵠⲆⲆⵠᐃ: "img/day-hand-skin173.png",
    ⲆΔᐃᐃᐃΔΔ: "img/night-hand-skin173.png",
    ΔΔⲆⲆᐃⲆⵠ: "img/day-hand-skin174.png",
    ΔⲆⵠⲆⲆⲆᐃ: "img/night-hand-skin174.png",
    ⲆⲆⵠⵠᐃᐃⵠ: "img/day-hand-skin175.png",
    ⵠΔΔⵠᐃⲆΔ: "img/night-hand-skin175.png",
    ᐃⲆᐃⵠᐃⵠⵠ: "img/day-hand-skin176.png",
    ⵠⵠΔᐃΔᐃΔ: "img/night-hand-skin176.png",
    ᐃⲆΔⵠⲆⲆΔ: "img/day-hand-skin177.png",
    ΔΔΔΔΔᐃⵠ: "img/night-hand-skin177.png",
    ⵠᐃᐃⵠⲆⵠⵠ: "img/day-hand-skin178.png",
    ⵠⲆⵠⵠⲆΔΔ: "img/night-hand-skin178.png",
    ΔⵠⲆΔⵠᐃⲆ: "img/day-hand-skin179.png",
    ⲆᐃⲆᐃⲆⲆᐃ: "img/night-hand-skin179.png",
    ⵠΔⵠᐃⵠⵠΔ: "img/day-hand-skin180.png",
    ⵠⵠⲆΔⵠⵠⲆ: "img/night-hand-skin180.png",
    ΔⲆᐃᐃⵠⲆⲆ: "img/day-hand-skin181.png",
    ⵠΔΔⲆΔⲆΔ: "img/night-hand-skin181.png",
    ΔᐃΔΔΔᐃᐃ: "img/day-hand-skin182.png",
    ⲆⵠⲆⵠⵠⵠΔ: "img/night-hand-skin182.png",
    ⵠⵠⵠⵠⲆⵠⲆ: "img/day-hand-skin183.png",
    ⵠⲆΔⵠΔⵠᐃ: "img/night-hand-skin183.png",
    ᐃⵠⵠⲆΔⵠΔ: "img/day-hand-skin184.png",
    ᐃⲆⵠΔᐃⲆⲆ: "img/night-hand-skin184.png",
    ⲆᐃⵠⲆΔⲆⲆ: "img/day-hand-skin185.png",
    ᐃⲆᐃⲆⵠᐃΔ: "img/night-hand-skin185.png",
    ΔᐃⲆⵠⲆⲆⲆ: "img/day-hand-skin186.png",
    ⲆⲆⲆᐃΔⲆΔ: "img/night-hand-skin186.png",
    ⲆⵠΔⲆⲆΔⲆ: "img/day-hand-skin187.png",
    ⵠⵠⲆⵠⵠⵠᐃ: "img/night-hand-skin187.png",
    ⵠᐃⵠᐃⵠᐃⲆ: "img/day-hand-skin188.png",
    ⵠⲆᐃⵠⲆⵠᐃ: "img/night-hand-skin188.png",
    ⵠⵠᐃᐃⵠᐃᐃ: "img/day-hand-skin189.png",
    ΔⵠΔᐃᐃⵠᐃ: "img/night-hand-skin189.png",
    ΔⲆΔⲆᐃΔΔ: "img/day-hand-skin190.png",
    ⵠᐃⲆᐃⲆᐃⲆ: "img/night-hand-skin190.png",
    ⵠⲆᐃⵠΔⲆⵠ: "img/day-hand-skin191.png",
    ΔΔⵠΔⵠᐃᐃ: "img/night-hand-skin191.png",
    ΔⵠⲆⲆΔΔΔ: "img/day-hand-skin192.png",
    ⵠⲆᐃⲆⵠᐃⵠ: "img/night-hand-skin192.png",
    ᐃΔᐃⲆⵠⲆⲆ: "img/day-hand-skin193.png",
    ᐃΔⵠⵠⵠΔᐃ: "img/night-hand-skin193.png",
    ⲆⵠΔΔᐃΔΔ: "img/day-hand-skin194.png",
    ᐃΔΔΔΔΔΔ: "img/night-hand-skin194.png",
    ΔⵠᐃⵠⵠⲆⵠ: "img/day-hand-skin195.png",
    ⵠⲆΔᐃᐃⵠⲆ: "img/night-hand-skin195.png",
    ⵠⲆᐃᐃⲆⲆⵠ: "img/day-hand-skin196.png",
    ⵠⲆΔᐃΔΔᐃ: "img/night-hand-skin196.png",
    ΔⵠᐃⵠᐃⵠⲆ: "img/day-hand-skin197.png",
    ⵠⲆΔᐃⵠⲆΔ: "img/night-hand-skin197.png",
    ᐃΔΔᐃⵠⲆΔ: "img/day-hand-skin198.png",
    ⲆⵠⲆⲆᐃᐃᐃ: "img/night-hand-skin198.png",
    ᐃⲆⲆⵠΔⵠⲆ: "img/day-hand-skin199.png",
    ⵠΔΔΔⲆⵠⲆ: "img/night-hand-skin199.png",
    ΔⲆΔⲆⲆΔᐃ: "img/day-hand-skin200.png",
    ΔΔⲆΔⲆⵠⵠ: "img/night-hand-skin200.png",
    ᐃΔᐃⲆΔΔⲆ: "img/day-hand-skin201.png",
    ⵠⲆⵠΔⵠᐃΔ: "img/night-hand-skin201.png",
    ⲆⵠⲆⵠⲆⲆΔ: "img/day-hand-skin202.png",
    ΔᐃΔΔᐃᐃⲆ: "img/night-hand-skin202.png",
    ⲆⲆᐃⲆᐃⲆⲆ: "img/day-hand-skin203.png",
    ᐃⲆᐃⵠⲆⲆᐃ: "img/night-hand-skin203.png",
    ᐃΔⵠⲆᐃᐃΔ: "img/day-hand-skin204.png",
    ⵠⵠᐃᐃᐃⲆⲆ: "img/night-hand-skin204.png",
    ᐃΔᐃΔᐃⲆⵠ: "img/day-hand-skin205.png",
    ΔΔⵠⵠⲆᐃⵠ: "img/night-hand-skin205.png",
    ⲆΔᐃⲆΔΔⲆ: "img/day-hand-skin206.png",
    ᐃⲆⲆᐃⲆΔΔ: "img/night-hand-skin206.png",
    ⵠⲆⵠᐃᐃⲆⲆ: "img/day-hand-skin207.png",
    ΔⲆᐃⵠⲆᐃⵠ: "img/night-hand-skin207.png",
    ⵠⵠᐃⲆⲆᐃΔ: "img/day-hand-skin208.png",
    ⲆᐃⲆⲆᐃᐃᐃ: "img/night-hand-skin208.png",
    ᐃⲆᐃᐃΔΔΔ: "img/day-hand-skin209.png",
    ⵠⲆⵠΔⲆΔΔ: "img/night-hand-skin209.png",
    ⵠΔΔᐃⵠⵠⲆ: "img/day-hand-skin210.png",
    ᐃᐃΔⲆΔⲆᐃ: "img/night-hand-skin210.png",
    ΔⵠᐃᐃΔᐃᐃ: "img/day-hand-skin211.png",
    ⲆΔⲆⲆⲆΔᐃ: "img/night-hand-skin211.png",
    ΔᐃⲆⵠΔⵠⵠ: "img/day-hand-skin212.png",
    ᐃΔΔⲆⲆⵠᐃ: "img/night-hand-skin212.png",
    ⲆⲆΔΔⲆᐃᐃ: "img/day-bag-star0.png",
    ΔΔⵠⲆᐃⲆⲆ: "img/night-bag-star0.png",
    ⵠⵠΔΔᐃᐃⵠ: "img/day-bag0.png",
    ⲆⲆⵠΔᐃᐃᐃ: "img/night-bag0.png",
    ⲆⵠⲆⲆⲆⵠⵠ: "img/day-bag1.png",
    ⵠΔⲆᐃΔᐃⵠ: "img/night-bag1.png",
    ᐃᐃΔᐃⵠⵠⲆ: "img/day-bag2.png",
    ΔΔⵠⲆΔⵠⲆ: "img/night-bag2.png",
    ΔⵠΔΔⵠᐃⵠ: "img/day-bag3.png",
    ᐃΔΔⵠⲆΔⵠ: "img/night-bag3.png",
    ⵠΔⲆⵠΔⲆⲆ: "img/day-bag4.png",
    ᐃΔᐃⲆᐃΔΔ: "img/night-bag4.png",
    ᐃⵠⲆⲆΔⲆⲆ: "img/day-bag5.png",
    ⲆΔⵠⵠᐃΔⲆ: "img/night-bag5.png",
    ᐃΔΔⲆΔΔⲆ: "img/day-bag6.png",
    ΔΔⵠⲆⲆⵠᐃ: "img/night-bag6.png",
    ⵠΔⵠⵠᐃᐃⵠ: "img/day-bag7.png",
    ⵠᐃⵠΔⲆΔΔ: "img/night-bag7.png",
    ΔΔΔⵠΔⵠᐃ: "img/day-bag8.png",
    ΔᐃᐃᐃᐃⲆⲆ: "img/night-bag8.png",
    ᐃⲆⵠⲆΔⲆΔ: "img/day-bag9.png",
    ΔⲆΔⲆⵠⲆΔ: "img/night-bag9.png",
    ⵠΔⵠⲆⵠᐃΔ: "img/day-bag10.png",
    ΔⵠᐃⵠⵠΔᐃ: "img/night-bag10.png",
    ΔᐃⵠⲆΔⵠⲆ: "img/day-bag11.png",
    ᐃⵠⵠᐃⲆⵠΔ: "img/night-bag11.png",
    ΔⵠⲆⲆΔᐃⵠ: "img/day-bag13.png",
    ᐃⵠⵠᐃⲆⲆⲆ: "img/night-bag13.png",
    ΔⵠΔΔⵠⵠⲆ: "img/day-bag14.png",
    ⵠⲆⵠⵠΔΔⵠ: "img/night-bag14.png",
    ⵠⲆⵠⲆⲆᐃΔ: "img/day-bag16.png",
    ⲆⵠᐃᐃΔⵠΔ: "img/night-bag16.png",
    ⵠⲆⵠΔⵠⵠᐃ: "img/day-bag17.png",
    ᐃⲆⲆⲆⲆⲆⵠ: "img/night-bag17.png",
    ⲆⲆΔΔᐃΔᐃ: "img/day-bag18.png",
    ΔᐃⵠΔⵠΔΔ: "img/night-bag18.png",
    ΔⵠΔΔΔⵠⲆ: "img/day-bag19.png",
    ᐃᐃⵠⲆᐃΔⵠ: "img/night-bag19.png",
    ⲆⵠᐃᐃⵠⲆΔ: "img/day-bag20.png",
    ᐃᐃΔᐃᐃΔΔ: "img/night-bag20.png",
    ⵠᐃⵠΔⲆⲆᐃ: "img/day-bag21.png",
    ⲆⵠⲆⵠⲆᐃᐃ: "img/night-bag21.png",
    ᐃΔⲆⵠⵠΔⵠ: "img/day-bag22.png",
    ⵠⲆᐃⲆΔᐃΔ: "img/night-bag22.png",
    ⵠΔΔⲆⲆⵠᐃ: "img/day-bag23.png",
    Ⲇᐃⵠⵠᐃⵠᐃ: "img/night-bag23.png",
    ᐃᐃΔⲆᐃΔᐃ: "img/day-bag24.png",
    ΔᐃⵠᐃⵠⲆᐃ: "img/night-bag24.png",
    ⲆⲆΔⵠⲆⵠⲆ: "img/day-bag25.png",
    ⵠⲆⵠΔⲆᐃΔ: "img/night-bag25.png",
    ⵠΔⵠⵠᐃᐃᐃ: "img/day-bag26.png",
    ⲆⲆⲆⵠⵠⲆⲆ: "img/night-bag26.png",
    ᐃΔΔⲆⵠΔᐃ: "img/day-bag27.png",
    ⵠᐃⲆᐃⲆᐃⵠ: "img/night-bag27.png",
    ΔΔⵠΔⵠΔΔ: "img/day-bag28.png",
    ᐃΔᐃᐃΔᐃᐃ: "img/night-bag28.png",
    ΔΔⵠⲆⵠⵠΔ: "img/day-bag29.png",
    ΔⵠⵠᐃΔⵠΔ: "img/night-bag29.png",
    ⲆⲆⵠΔΔΔᐃ: "img/day-bag30.png",
    ᐃΔᐃᐃⲆⲆᐃ: "img/night-bag30.png",
    ⲆⲆᐃΔᐃⲆΔ: "img/day-bag31.png",
    ᐃⲆⲆⲆΔⲆⵠ: "img/night-bag31.png",
    ⲆⵠⲆⲆⲆΔᐃ: "img/day-bag32.png",
    ⲆΔⵠΔΔⲆᐃ: "img/night-bag32.png",
    ᐃΔⲆⵠΔⲆΔ: "img/day-bag33.png",
    ⲆᐃΔΔᐃΔᐃ: "img/night-bag33.png",
    ᐃⵠⵠᐃⲆⲆᐃ: "img/day-bag34.png",
    ΔᐃⵠⵠΔΔΔ: "img/night-bag34.png",
    ΔⲆⲆⵠᐃΔⲆ: "img/day-bag35.png",
    ᐃⵠᐃⲆᐃΔΔ: "img/night-bag35.png",
    ᐃⲆΔⵠⲆΔⲆ: "img/day-bag36.png",
    ⲆΔΔᐃⲆⵠΔ: "img/night-bag36.png",
    ⲆᐃⵠⵠΔΔᐃ: "img/day-bag37.png",
    ᐃⵠⵠΔⲆⲆⲆ: "img/night-bag37.png",
    ⵠΔⵠⲆᐃΔⵠ: "img/day-bag38.png",
    ⵠⲆᐃⲆⲆⲆΔ: "img/night-bag38.png",
    ⵠⲆⵠᐃⲆⲆΔ: "img/day-bag39.png",
    ᐃΔΔⵠⲆⲆⲆ: "img/night-bag39.png",
    ΔᐃⵠΔⵠⲆⵠ: "img/day-bag40.png",
    ᐃᐃᐃᐃⲆΔⲆ: "img/night-bag40.png",
    ⵠᐃΔⲆᐃΔⵠ: "img/day-bag41.png",
    ΔᐃⵠⲆᐃⲆⲆ: "img/night-bag41.png",
    ⲆⵠᐃᐃⲆⲆᐃ: "img/day-bag42.png",
    ΔⲆᐃᐃΔⵠΔ: "img/night-bag42.png",
    ΔⵠᐃᐃⲆⵠΔ: "img/day-bag43.png",
    ᐃᐃⲆⵠΔΔⵠ: "img/night-bag43.png",
    ⵠⵠⵠⵠᐃⵠⵠ: "img/day-bag44.png",
    ⲆⲆⵠᐃΔᐃΔ: "img/night-bag44.png",
    ΔⵠᐃⵠΔΔΔ: "img/day-bag45.png",
    ⵠΔⵠⵠᐃΔΔ: "img/night-bag45.png",
    ΔΔⵠⵠⵠᐃⲆ: "img/day-bag46.png",
    ΔⲆⲆΔⵠᐃⲆ: "img/night-bag46.png",
    ᐃᐃⵠᐃΔⵠⲆ: "img/day-bag47.png",
    ⵠⵠⲆⲆΔⵠⵠ: "img/night-bag47.png",
    ⲆⲆᐃᐃⲆᐃΔ: "img/day-bag48.png",
    ΔⲆΔᐃⲆⲆⵠ: "img/night-bag48.png",
    ⲆΔᐃΔⵠⵠⲆ: "img/day-bag49.png",
    ΔΔΔⲆⵠⲆᐃ: "img/night-bag49.png",
    ΔⵠⵠᐃᐃⵠⲆ: "img/day-bag50.png",
    ΔΔⵠᐃⲆΔᐃ: "img/night-bag50.png",
    ΔᐃΔΔⲆᐃᐃ: "img/day-bag51.png",
    ᐃΔΔⵠᐃⲆᐃ: "img/night-bag51.png",
    ΔᐃⵠᐃᐃⵠΔ: "img/day-bag52.png",
    ⵠΔⲆⵠⵠⲆᐃ: "img/night-bag52.png",
    ΔΔⲆΔⲆⵠΔ: "img/day-bag53.png",
    ⵠⲆΔΔΔᐃΔ: "img/night-bag53.png",
    ⵠⵠⵠΔᐃΔⵠ: "img/day-bag54.png",
    ΔᐃᐃⵠⵠⲆᐃ: "img/night-bag54.png",
    ᐃⵠᐃΔⵠⵠⲆ: "img/day-bag55.png",
    ΔΔΔⲆⲆΔᐃ: "img/night-bag55.png",
    ⵠᐃΔⲆΔⵠⵠ: "img/day-bag56.png",
    ⲆΔⵠⲆᐃᐃΔ: "img/night-bag56.png",
    ⲆⵠΔᐃⲆⵠⵠ: "img/day-bag57.png",
    ΔΔⵠᐃⲆⵠⲆ: "img/night-bag57.png",
    ⵠᐃⵠⵠᐃⲆⵠ: "img/day-bag58.png",
    ΔᐃᐃΔΔΔⲆ: "img/night-bag58.png",
    ⲆⲆⵠᐃΔⲆⲆ: "img/day-bag59.png",
    ⲆΔⲆⵠⵠⲆΔ: "img/night-bag59.png",
    ⵠᐃΔΔⲆᐃⵠ: "img/day-bag60.png",
    ΔⲆⲆⵠᐃΔᐃ: "img/night-bag60.png",
    ᐃᐃᐃⵠⵠⵠⵠ: "img/day-bag61.png",
    ⲆⵠΔⵠⲆⲆᐃ: "img/night-bag61.png",
    ΔᐃΔΔΔⵠⵠ: "img/day-bag62.png",
    ΔⵠᐃΔᐃⲆⲆ: "img/night-bag62.png",
    ⵠⵠΔᐃⲆΔᐃ: "img/day-bag63.png",
    ᐃⲆΔᐃⲆΔⲆ: "img/night-bag63.png",
    ᐃΔΔᐃᐃᐃᐃ: "img/day-bag64.png",
    ⵠᐃᐃⲆⲆᐃⲆ: "img/night-bag64.png",
    ᐃΔⵠⵠᐃΔΔ: "img/day-bag65.png",
    ⵠⵠⲆⲆΔᐃⵠ: "img/night-bag65.png",
    ⵠⲆⵠΔⲆⲆⲆ: "img/day-bag66.png",
    ⵠΔⲆⲆⲆΔⵠ: "img/night-bag66.png",
    ⲆΔΔⵠΔΔⵠ: "img/day-bag67.png",
    ⵠᐃⲆᐃⲆⲆⵠ: "img/night-bag67.png",
    ⲆⲆⲆⵠⲆⲆⵠ: "img/day-bag68.png",
    ᐃⵠⵠΔⵠᐃᐃ: "img/night-bag68.png",
    ⵠⵠⲆΔⲆᐃⲆ: "img/day-bag69.png",
    ᐃⵠΔⵠᐃⲆΔ: "img/night-bag69.png",
    ⵠⲆΔᐃΔᐃⵠ: "img/day-bag70.png",
    ⵠΔⵠΔⲆΔⲆ: "img/night-bag70.png",
    ⲆΔΔᐃΔᐃΔ: "img/day-bag71.png",
    ⲆⵠⲆΔΔᐃΔ: "img/night-bag71.png",
    ⵠⲆⵠᐃᐃΔⲆ: "img/day-bag72.png",
    ΔⵠΔⲆⵠᐃΔ: "img/night-bag72.png",
    ⲆΔⵠΔᐃᐃᐃ: "img/day-bag73.png",
    ⵠᐃᐃΔΔⵠΔ: "img/night-bag73.png",
    ΔⲆⲆᐃᐃⲆⲆ: "img/day-bag74.png",
    ΔᐃᐃⲆⵠⵠⲆ: "img/night-bag74.png",
    ᐃΔⵠⵠΔΔⵠ: "img/day-bag75.png",
    ⵠⵠⲆᐃᐃⲆᐃ: "img/night-bag75.png",
    ⵠⵠⲆⲆᐃᐃΔ: "img/day-bag76.png",
    ᐃⵠᐃⲆⲆᐃΔ: "img/night-bag76.png",
    ⵠⲆⵠᐃᐃⵠⵠ: "img/day-bag77.png",
    ᐃⵠΔᐃΔᐃᐃ: "img/night-bag77.png",
    ᐃⵠΔᐃΔⵠΔ: "img/day-bag78.png",
    ⲆᐃⵠΔΔⵠΔ: "img/night-bag78.png",
    ΔⵠⵠⵠᐃⲆΔ: "img/day-bag79.png",
    ΔΔΔᐃⵠⵠᐃ: "img/night-bag79.png",
    ⲆΔⲆΔΔΔⲆ: "img/day-bag80.png",
    ᐃᐃⲆΔⲆⵠΔ: "img/night-bag80.png",
    ᐃⲆⵠΔᐃⲆΔ: "img/day-accessory0.png",
    ⲆᐃΔΔΔⵠⲆ: "img/day-accessory0-pacques.png",
    ⲆⵠᐃⲆⵠⲆⵠ: "img/night-accessory0-pacques.png",
    ⲆᐃⲆⵠⲆᐃⲆ: "img/day-accessory13.png",
    ᐃⵠᐃⲆⲆᐃᐃ: "img/night-accessory13.png",
    ΔⲆⵠᐃΔᐃⲆ: "img/day-accessory14.png",
    ⲆⵠⵠⵠⵠⵠΔ: "img/night-accessory14.png",
    ᐃᐃᐃⲆⵠⵠⵠ: "img/day-accessory15.png",
    ⵠΔⵠᐃᐃΔⲆ: "img/night-accessory15.png",
    ᐃⲆᐃᐃⲆⵠᐃ: "img/day-accessory16.png",
    ΔΔᐃⵠⵠΔⲆ: "img/night-accessory16.png",
    ⵠΔΔᐃⲆᐃⲆ: "img/day-accessory17.png",
    ᐃⵠᐃΔᐃᐃΔ: "img/day-accessory17.png",
    ᐃⵠᐃᐃⲆⵠᐃ: "img/day-accessory19.png",
    ᐃᐃⵠΔⵠⵠⲆ: "img/night-accessory19.png",
    ΔᐃᐃⲆⵠⲆᐃ: "img/day-accessory20.png",
    ᐃΔⵠⵠΔᐃⲆ: "img/night-accessory20.png",
    ᐃⵠᐃⲆΔᐃΔ: "img/day-accessory21.png",
    ⵠⵠΔⲆⲆⵠⵠ: "img/night-accessory21.png",
    ⲆΔΔⵠᐃⲆᐃ: "img/day-accessory22.png",
    ⵠᐃⲆⵠⲆⲆⲆ: "img/night-accessory22.png",
    ΔⲆⵠΔΔᐃᐃ: "img/day-accessory23.png",
    ΔΔⲆⵠⵠΔⵠ: "img/night-accessory23.png",
    ΔⲆᐃᐃΔΔⲆ: "img/day-accessory24.png",
    ⵠΔΔⵠⵠΔᐃ: "img/night-accessory24.png",
    ΔⵠⵠⵠⲆⵠⵠ: "img/day-accessory25.png",
    ᐃⵠⲆⲆⲆΔⲆ: "img/night-accessory25.png",
    ⵠⵠⲆΔᐃᐃΔ: "img/day-accessory26.png",
    ᐃᐃΔⲆⵠⵠⲆ: "img/night-accessory26.png",
    ⲆᐃΔⵠⵠΔΔ: "img/day-accessory27.png",
    ΔᐃⵠᐃⲆΔⵠ: "img/night-accessory27.png",
    ⲆⲆᐃᐃΔᐃΔ: "img/day-accessory18.png",
    ᐃⵠⵠᐃᐃᐃΔ: "img/night-accessory18.png",
    ⵠⲆⵠᐃΔΔΔ: "img/day-accessory29.png",
    ΔⵠⵠⲆΔΔⲆ: "img/night-accessory29.png",
    ΔᐃΔⲆⵠⲆⲆ: "img/day-accessory30.png",
    ᐃⲆΔᐃΔΔⲆ: "img/night-accessory30.png",
    ⵠᐃᐃⲆΔⵠᐃ: "img/day-accessory31.png",
    ΔΔⵠΔΔⵠᐃ: "img/night-accessory31.png",
    ⲆⵠᐃᐃᐃΔⵠ: "img/day-accessory32.png",
    ⲆⲆⵠΔᐃⵠΔ: "img/night-accessory32.png",
    ᐃⲆⲆᐃΔⲆⲆ: "img/day-accessory33.png",
    ᐃⲆⲆⵠᐃᐃⲆ: "img/night-accessory33.png",
    ⵠⲆᐃΔⲆΔΔ: "img/day-accessory34.png",
    ᐃᐃΔⲆⵠⲆⲆ: "img/night-accessory34.png",
    ⲆΔΔᐃᐃⵠⲆ: "img/day-accessory35.png",
    ΔⲆᐃⲆⵠⵠⵠ: "img/night-accessory35.png",
    ᐃⵠⲆⲆⲆⵠΔ: "img/day-accessory28.png",
    ⵠΔᐃΔⲆΔⵠ: "img/night-accessory28.png",
    ⵠⵠᐃΔⵠΔⲆ: "img/day-accessory36.png",
    ⲆⵠᐃᐃΔΔⲆ: "img/night-accessory36.png",
    ⲆΔⲆΔΔⵠⲆ: "img/day-accessory37.png",
    ΔⲆΔⲆᐃⵠᐃ: "img/night-accessory37.png",
    ΔⲆⵠⲆΔΔⲆ: "img/day-accessory39.png",
    ΔΔⲆᐃⲆΔᐃ: "img/night-accessory39.png",
    ⲆⲆⵠΔᐃᐃⲆ: "img/day-accessory40.png",
    ᐃⵠᐃⵠΔⲆⵠ: "img/night-accessory40.png",
    ⵠΔⲆΔⲆᐃⲆ: "img/day-accessory41.png",
    ΔⲆᐃⲆⲆⲆⵠ: "img/night-accessory41.png",
    ⵠᐃⵠⵠΔᐃⵠ: "img/day-accessory42.png",
    ⵠⲆⲆΔᐃⵠⵠ: "img/night-accessory42.png",
    ⲆⲆΔᐃᐃⲆΔ: "img/day-accessory43.png",
    ᐃⵠⵠᐃⵠΔᐃ: "img/night-accessory43.png",
    ⲆⲆᐃⵠⲆⵠΔ: "img/day-accessory44.png",
    ΔᐃΔⵠⲆΔᐃ: "img/night-accessory44.png",
    ΔΔᐃᐃⲆⵠⲆ: "img/day-accessory38.png",
    ᐃᐃⵠⵠⵠΔⵠ: "img/night-accessory38.png",
    ΔΔᐃⲆΔᐃΔ: "img/day-accessory46.png",
    ⲆⲆΔΔⵠΔⲆ: "img/night-accessory46.png",
    ⵠⲆΔⲆⵠᐃᐃ: "img/day-accessory47.png",
    ΔⲆⲆΔΔᐃⵠ: "img/night-accessory47.png",
    ᐃⲆⲆΔⵠΔⲆ: "img/day-accessory48.png",
    ⲆΔΔⲆᐃΔⲆ: "img/night-accessory48.png",
    ΔⵠΔⵠΔⵠⲆ: "img/day-accessory49.png",
    ⲆⵠᐃⲆᐃΔⲆ: "img/night-accessory49.png",
    ᐃᐃⲆΔⲆᐃᐃ: "img/day-accessory45.png",
    ⵠⲆⲆⲆⵠⵠⲆ: "img/night-accessory45.png",
    ΔⵠⲆᐃⵠⵠΔ: "img/day-accessory50.png",
    ⵠᐃⲆⵠΔΔᐃ: "img/night-accessory50.png",
    ⵠⲆⲆᐃⵠⵠⵠ: "img/day-accessory51.png",
    ΔⲆᐃⵠⵠΔⵠ: "img/night-accessory51.png",
    ⲆᐃⵠⲆΔΔⵠ: "img/day-accessory52.png",
    ᐃᐃⲆᐃᐃᐃΔ: "img/night-accessory52.png",
    ΔⵠᐃΔⲆᐃⵠ: "img/day-accessory53.png",
    ⵠΔΔΔΔⲆΔ: "img/night-accessory53.png",
    ΔᐃⵠᐃⵠᐃΔ: "img/day-accessory54.png",
    ᐃΔΔⲆⵠⲆΔ: "img/night-accessory54.png",
    ΔΔᐃⲆᐃⲆⵠ: "img/day-accessory55.png",
    ⵠΔⲆⵠᐃᐃᐃ: "img/night-accessory55.png",
    ΔᐃᐃⵠᐃᐃΔ: "img/day-accessory56.png",
    ᐃⲆⲆⵠΔⲆⵠ: "img/night-accessory56.png",
    ⲆΔΔΔⵠⵠΔ: "img/day-accessory57.png",
    ᐃΔΔⲆᐃΔⲆ: "img/night-accessory57.png",
    ᐃⵠⵠⵠΔΔΔ: "img/day-accessory58.png",
    ⵠΔⵠᐃΔⵠⵠ: "img/night-accessory58.png",
    ᐃᐃᐃᐃᐃᐃΔ: "img/day-accessory59.png",
    ⵠᐃⲆⲆᐃᐃᐃ: "img/night-accessory59.png",
    ΔΔⲆᐃΔᐃⵠ: "img/day-accessory60.png",
    ᐃⲆⵠΔΔᐃᐃ: "img/night-accessory60.png",
    ⵠⲆᐃΔΔᐃΔ: "img/day-accessory61.png",
    ⵠⲆⵠⵠΔᐃᐃ: "img/night-accessory61.png",
    ΔⲆⲆⲆⲆᐃΔ: "img/day-accessory62.png",
    ⲆⵠΔⵠⵠⲆΔ: "img/night-accessory62.png",
    ᐃᐃΔⲆΔᐃⵠ: "img/day-accessory63.png",
    ⵠΔⵠⵠᐃⵠᐃ: "img/night-accessory63.png",
    ⲆⵠⵠΔⵠΔᐃ: "img/day-accessory64.png",
    ⲆᐃⲆᐃⲆᐃᐃ: "img/night-accessory64.png",
    ΔⵠⵠᐃΔⲆΔ: "img/day-accessory65.png",
    ΔⵠⲆᐃΔᐃⵠ: "img/night-accessory65.png",
    ΔΔᐃᐃⵠⲆᐃ: "img/day-accessory66.png",
    ᐃⲆᐃⲆᐃⵠⵠ: "img/night-accessory66.png",
    ᐃⵠⲆⲆᐃΔᐃ: "img/day-accessory67.png",
    ⲆⲆⲆΔᐃᐃΔ: "img/night-accessory67.png",
    ⵠᐃΔⲆΔⵠΔ: "img/day-accessory68.png",
    ⵠᐃᐃᐃΔⲆᐃ: "img/night-accessory68.png",
    ⲆⲆⲆᐃᐃⲆΔ: "img/day-accessory69.png",
    ⲆⵠᐃⲆΔᐃᐃ: "img/night-accessory69.png",
    ⲆᐃⲆⲆᐃⵠᐃ: "img/day-accessory70.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/night-accessory70.png",
    ⵠΔᐃΔⲆᐃΔ: "img/day-accessory71.png",
    ⵠⵠᐃᐃΔⵠᐃ: "img/night-accessory71.png",
    Δⵠᐃⵠᐃᐃᐃ: "img/day-accessory72.png",
    ⵠⲆᐃᐃⲆΔⲆ: "img/night-accessory72.png",
    ᐃⲆⲆᐃⵠΔⵠ: "img/day-accessory73.png",
    ⵠΔⵠⲆⵠᐃᐃ: "img/night-accessory73.png",
    ⵠⵠⲆᐃⲆⲆⲆ: "img/day-accessory74.png",
    Δⵠⵠⵠⵠᐃⵠ: "img/night-accessory74.png",
    ΔⲆⵠᐃΔΔΔ: "img/day-accessory75.png",
    ⲆΔⲆΔⵠⵠᐃ: "img/night-accessory75.png",
    ΔⵠⵠᐃΔΔᐃ: "img/day-accessory76.png",
    ΔⵠⲆΔⲆⵠⵠ: "img/night-accessory76.png",
    ⲆⵠΔⲆᐃⲆΔ: "img/day-accessory77.png",
    ⲆⲆΔΔⲆⲆⵠ: "img/night-accessory77.png",
    ΔⲆΔⵠΔⵠᐃ: "img/day-accessory78.png",
    ΔΔⲆⲆᐃⲆⲆ: "img/night-accessory78.png",
    ᐃΔᐃⲆᐃᐃΔ: "img/day-accessory79.png",
    ᐃⵠᐃⲆΔⲆᐃ: "img/night-accessory79.png",
    ΔⲆⲆΔⵠΔⲆ: "img/day-accessory80.png",
    ᐃⵠΔⲆⵠΔⲆ: "img/night-accessory80.png",
    ΔᐃⲆᐃⵠᐃⵠ: "img/day-accessory81.png",
    ΔᐃᐃⲆΔᐃⵠ: "img/night-accessory81.png",
    ᐃΔᐃⵠⲆᐃⵠ: "img/day-accessory83.png",
    ⲆⵠⵠⵠᐃᐃΔ: "img/night-accessory83.png",
    ⵠᐃΔⲆΔΔⵠ: "img/day-accessory84.png",
    ᐃᐃΔⵠⵠᐃⲆ: "img/night-accessory84.png",
    Ⲇⵠⵠⵠᐃⵠⵠ: "img/day-accessory85.png",
    ᐃᐃⲆΔᐃⲆⲆ: "img/night-accessory85.png",
    ΔΔⲆᐃᐃΔΔ: "img/day-accessory86.png",
    ⵠⵠΔΔΔᐃᐃ: "img/night-accessory86.png",
    ⵠᐃⵠⲆᐃⲆⵠ: "img/day-accessory87.png",
    ᐃⲆⵠⵠⲆⵠᐃ: "img/night-accessory87.png",
    ⲆⲆⲆⵠΔᐃⵠ: "img/day-accessory88.png",
    ᐃΔⲆⵠᐃᐃᐃ: "img/night-accessory88.png",
    ⲆΔΔΔᐃΔΔ: "img/day-accessory89.png",
    ⵠᐃⲆⲆΔᐃⲆ: "img/night-accessory89.png",
    ⲆᐃⲆⲆΔⵠᐃ: "img/day-accessory90.png",
    ⵠⵠᐃᐃⵠⵠΔ: "img/night-accessory90.png",
    ⲆⵠⵠⲆΔΔΔ: "img/day-accessory91.png",
    ⲆᐃΔΔΔᐃΔ: "img/night-accessory91.png",
    ⵠΔᐃᐃⲆᐃᐃ: "img/day-accessory92.png",
    ΔᐃΔⵠᐃᐃᐃ: "img/night-accessory92.png",
    ⵠⲆⵠᐃⵠⲆᐃ: "img/day-accessory93.png",
    Δᐃⵠⵠᐃᐃᐃ: "img/night-accessory93.png",
    ᐃᐃⲆⲆᐃᐃⲆ: "img/day-accessory94.png",
    ⲆΔΔⵠᐃⵠΔ: "img/night-accessory94.png",
    ⲆΔⲆΔⵠⲆⲆ: "img/day-accessory95.png",
    ⲆΔᐃⲆⵠⵠΔ: "img/night-accessory95.png",
    ⲆⵠⵠᐃⲆΔΔ: "img/day-accessory96.png",
    ⲆᐃᐃᐃΔⵠⵠ: "img/night-accessory96.png",
    ᐃᐃⵠΔᐃΔⵠ: "img/day-accessory97.png",
    ⲆΔΔᐃⲆᐃⵠ: "img/night-accessory97.png",
    ⲆⲆᐃΔⵠᐃⲆ: "img/day-accessory98.png",
    ⲆⵠΔⵠⲆⲆΔ: "img/night-accessory98.png",
    ⵠΔⲆΔⵠⵠΔ: "img/day-accessory99.png",
    ⵠⲆΔⵠⵠᐃΔ: "img/night-accessory99.png",
    ⵠᐃⵠⵠⲆᐃⵠ: "img/day-accessory100.png",
    ⵠⲆⲆⵠⵠᐃΔ: "img/night-accessory100.png",
    ⲆᐃᐃᐃᐃΔᐃ: "img/day-accessory101.png",
    ⲆⵠᐃᐃⲆΔᐃ: "img/night-accessory101.png",
    ⵠᐃΔⵠⵠᐃΔ: "img/day-accessory102.png",
    ᐃⲆΔⵠⲆᐃᐃ: "img/night-accessory102.png",
    ⲆⵠⵠΔⵠⲆΔ: "img/day-accessory103.png",
    ⵠⲆΔⲆΔⵠΔ: "img/night-accessory103.png",
    ΔᐃⲆⵠⵠⲆⲆ: "img/day-accessory104.png",
    Δⵠⵠⵠⵠⵠᐃ: "img/night-accessory104.png",
    ᐃᐃⵠⲆⲆⲆⵠ: "img/day-accessory105.png",
    ΔᐃᐃΔⵠⵠⲆ: "img/night-accessory105.png",
    ⲆᐃᐃΔⲆⵠⵠⵠᐃ: "img/day-accessory106.png",
    ⵠⵠΔΔΔΔⵠⲆᐃ: "img/night-accessory106.png",
    ᐃΔⵠⵠⲆΔᐃⵠⵠ: "img/day-accessory107.png",
    ⵠⲆⲆⲆⵠΔᐃΔⵠ: "img/night-accessory107.png",
    ᐃⲆⲆⵠⵠⵠⲆ: "img/day-accessory82.png",
    ᐃᐃᐃⵠᐃᐃΔ: "img/night-accessory82.png",
    ΔⲆΔⲆⲆⵠΔ: "img/day-book0.png",
    ᐃᐃΔΔⲆΔⵠ: "img/night-book0.png",
    ᐃⲆᐃⵠᐃΔΔ: "img/day-book1.png",
    ⵠᐃᐃᐃΔΔⵠ: "img/night-book1.png",
    ⲆᐃΔⵠⲆⲆⵠ: "img/day-book2.png",
    ⵠΔⲆΔᐃΔⵠ: "img/night-book2.png",
    ⲆΔⵠⵠⵠⵠⵠ: "img/day-book3.png",
    ⵠⲆᐃᐃᐃᐃⲆ: "img/night-book3.png",
    ΔⲆⲆΔⲆᐃᐃ: "img/day-book4.png",
    ΔΔΔⲆⲆⵠⲆ: "img/night-book4.png",
    ᐃⵠᐃΔᐃⵠᐃ: "img/day-book5.png",
    ᐃᐃΔⵠᐃΔᐃ: "img/night-book5.png",
    ᐃᐃⲆᐃⵠΔᐃ: "img/day-book6.png",
    ᐃΔᐃⵠⲆⵠΔ: "img/night-book6.png",
    ⵠΔᐃΔⲆⵠⵠ: "img/day-book7.png",
    ΔⲆⵠᐃᐃⵠΔ: "img/night-book7.png",
    ⵠᐃⵠΔΔⲆᐃ: "img/day-book8.png",
    ᐃᐃΔⵠᐃⵠᐃ: "img/night-book8.png",
    ⵠⲆΔΔΔⵠΔ: "img/day-book9.png",
    ᐃⵠⲆᐃⵠⵠΔ: "img/night-book9.png",
    ⵠⵠⵠᐃΔΔΔ: "img/day-book10.png",
    ⵠΔⵠⵠᐃⵠⲆ: "img/night-book10.png",
    ᐃⵠⵠⲆⲆⲆΔ: "img/day-book11.png",
    ᐃᐃΔΔΔⲆⵠ: "img/night-book11.png",
    ΔᐃᐃΔⵠΔᐃ: "img/day-book12.png",
    ΔΔⲆⵠⵠᐃⵠ: "img/night-book12.png",
    ΔᐃⲆⵠⵠΔⵠ: "img/day-book13.png",
    ⲆⵠⲆᐃⵠⲆⲆ: "img/night-book13.png",
    ⵠᐃΔᐃᐃᐃΔ: "img/day-book14.png",
    ΔⲆⲆⵠⵠΔᐃ: "img/night-book14.png",
    ⵠⲆΔⵠⲆᐃⵠ: "img/day-book15.png",
    ᐃΔⵠΔⵠⵠⵠ: "img/night-book15.png",
    ΔⲆⲆΔΔᐃⲆ: "img/day-book16.png",
    ⲆⵠᐃⵠⲆΔⲆ: "img/night-book16.png",
    ᐃᐃⲆⲆᐃⲆⵠ: "img/day-book17.png",
    ⵠⲆΔΔⵠΔⲆ: "img/night-book17.png",
    ⵠⵠΔᐃⵠᐃΔ: "img/day-book18.png",
    ⲆΔⵠⵠⲆⵠⲆ: "img/night-book18.png",
    ⲆⲆᐃⲆᐃᐃᐃ: "img/day-book19.png",
    ΔΔⲆΔⵠᐃᐃ: "img/night-book19.png",
    ⵠⵠⵠΔΔΔΔ: "img/day-book20.png",
    ΔΔΔⵠᐃⲆᐃ: "img/night-book20.png",
    ⲆᐃⵠᐃΔⲆΔ: "img/day-book21.png",
    ᐃΔⵠΔᐃⵠⲆ: "img/night-book21.png",
    ΔᐃⵠΔᐃⵠᐃ: "img/day-book22.png",
    ⲆⵠΔⲆΔⲆΔ: "img/night-book22.png",
    ⲆⲆⵠⲆⵠⵠᐃ: "img/day-book23.png",
    ⵠΔΔᐃⵠΔΔ: "img/night-book23.png",
    ᐃΔⵠΔΔᐃⲆ: "img/day-book24.png",
    ᐃⵠⲆⵠⲆᐃΔ: "img/night-book24.png",
    ⲆⲆΔΔⵠⵠΔ: "img/day-book25.png",
    ΔⵠᐃΔⲆⵠⲆ: "img/night-book25.png",
    ⲆΔⵠⵠⵠΔⲆ: "img/day-book26.png",
    ΔᐃᐃᐃΔⵠⲆ: "img/night-book26.png",
    ᐃⵠΔⲆΔᐃⲆ: "img/day-book27.png",
    ⵠΔᐃⲆⵠᐃⲆ: "img/night-book27.png",
    ᐃⵠⲆΔⵠΔΔ: "img/day-book28.png",
    ⲆΔΔⵠⵠΔΔ: "img/night-book28.png",
    ⵠⵠᐃΔᐃᐃΔ: "img/day-book29.png",
    ⵠⲆⵠⲆⵠⲆᐃ: "img/night-book29.png",
    ᐃⲆΔⲆⵠⲆΔ: "img/day-book30.png",
    ᐃⵠΔΔⵠⵠᐃ: "img/night-book30.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/day-book31.png",
    ᐃᐃⵠⲆⲆⵠᐃ: "img/night-book31.png",
    ⲆΔΔⵠⲆⵠⵠ: "img/day-book32.png",
    ⵠᐃΔᐃΔΔⲆ: "img/night-book32.png",
    ⲆᐃᐃΔⲆΔⵠ: "img/day-book33.png",
    ⲆΔⲆⲆᐃⵠᐃ: "img/night-book33.png",
    ⵠⲆⵠΔᐃᐃᐃ: "img/day-book34.png",
    ΔⲆΔΔⲆⵠⵠ: "img/night-book34.png",
    ⲆⲆΔⲆⲆᐃᐃ: "img/day-book35.png",
    ⲆΔⲆΔᐃᐃᐃ: "img/night-book35.png",
    ⲆΔΔⵠΔⲆⵠ: "img/day-book36.png",
    ⵠⲆⵠⵠⲆⲆᐃ: "img/night-book36.png",
    ⵠⵠⲆⵠⲆᐃΔⲆᐃ: "img/day-book37.png",
    ⵠΔⵠⵠⲆΔΔᐃΔ: "img/night-book37.png",
    ᐃⵠⲆⲆΔΔΔ: "img/day-book38.png",
    ⵠΔᐃⵠΔᐃᐃ: "img/night-book38.png",
    ⲆᐃⲆΔΔⵠⲆ: "img/day-book39.png",
    ⵠΔⵠⲆⲆⵠΔ: "img/night-book39.png",
    ⵠⵠⲆⵠⵠΔⵠ: "img/day-book40.png",
    ⵠΔⲆⵠᐃᐃⲆ: "img/night-book40.png",
    ⵠΔᐃᐃⵠⲆᐃ: "img/day-book41.png",
    ΔⵠⲆᐃⲆⵠⵠ: "img/night-book41.png",
    ᐃᐃᐃⲆΔⵠⲆ: "img/day-book42.png",
    ⵠⲆᐃᐃⵠᐃᐃ: "img/night-book42.png",
    ⵠⲆΔⲆᐃⲆΔ: "img/day-book43.png",
    ⵠᐃΔΔⵠⲆΔ: "img/night-book43.png",
    ⵠⲆΔⵠⵠⲆΔ: "img/day-book44.png",
    ᐃⲆⲆⵠⵠⵠⵠ: "img/night-book44.png",
    ⲆⲆΔⵠΔᐃⵠ: "img/day-book45.png",
    ⵠΔᐃᐃⵠⲆΔ: "img/night-book45.png",
    ΔⵠⵠⲆⵠⲆᐃ: "img/day-book46.png",
    ⵠⵠΔⲆⵠⲆⵠ: "img/night-book46.png",
    ⵠᐃᐃᐃⵠᐃⲆ: "img/day-book47.png",
    ⵠΔⲆᐃⵠⵠᐃ: "img/night-book47.png",
    ⵠⲆⲆΔⵠᐃⵠ: "img/day-book48.png",
    ⲆᐃΔⲆⵠΔᐃ: "img/night-book48.png",
    ΔᐃᐃⲆΔᐃⲆ: "img/day-book49.png",
    ΔΔⲆᐃⲆᐃᐃ: "img/night-book49.png",
    ΔΔⵠⲆⲆᐃⲆ: "img/day-book50.png",
    ᐃⲆⵠΔⲆᐃⲆ: "img/night-book50.png",
    ΔΔΔⵠᐃΔΔ: "img/day-crate1.png",
    ⵠΔᐃⵠᐃᐃᐃ: "img/night-crate1.png",
    ⵠⲆΔΔⵠⲆᐃ: "img/day-crate2.png",
    ⲆΔⲆⵠΔΔⵠ: "img/night-crate2.png",
    ΔΔⵠᐃⲆⲆⵠ: "img/day-crate3.png",
    ⲆⲆΔⲆⲆΔΔ: "img/night-crate3.png",
    ΔᐃⵠᐃⵠΔⲆ: "img/day-crate4.png",
    ᐃᐃⲆⲆΔΔΔ: "img/night-crate4.png",
    ⵠⵠⲆΔᐃᐃᐃ: "img/day-crate5.png",
    ΔⲆᐃΔΔⲆᐃ: "img/night-crate5.png",
    ᐃⵠᐃⵠᐃΔⲆ: "img/day-crate6.png",
    ᐃᐃⵠᐃⵠΔⵠ: "img/night-crate6.png",
    ᐃΔⲆΔⲆⲆΔ: "img/day-crate7.png",
    ᐃⲆⲆᐃⲆᐃᐃ: "img/night-crate7.png",
    ᐃΔᐃⵠᐃᐃᐃ: "img/day-crate8.png",
    ᐃΔᐃΔⲆᐃⵠ: "img/night-crate8.png",
    ⲆⵠⲆⲆⵠΔᐃ: "img/day-crate9.png",
    ⵠⵠⵠⵠΔⲆᐃ: "img/night-crate9.png",
    ᐃⵠⵠᐃΔΔᐃ: "img/day-crate10.png",
    ΔΔΔⲆᐃⵠⵠ: "img/night-crate10.png",
    ΔΔⲆΔⵠᐃⲆ: "img/day-crate11.png",
    ΔᐃⲆⲆⵠⵠⵠ: "img/night-crate11.png",
    ⲆⲆΔΔⵠⲆᐃ: "img/day-crate12.png",
    ⲆⵠⲆΔᐃⵠΔ: "img/night-crate12.png",
    ⲆⵠΔⲆⵠᐃⵠ: "img/day-crate13.png",
    ⵠⲆⵠΔⵠⵠⲆ: "img/night-crate13.png",
    ⲆⵠᐃᐃΔⲆⵠ: "img/day-crate14.png",
    ΔΔⲆΔΔⲆⵠ: "img/night-crate14.png",
    ΔᐃΔⵠⵠᐃⵠ: "img/day-crate15.png",
    ⲆⵠⲆᐃⲆⵠⵠ: "img/night-crate15.png",
    ᐃⲆΔΔⵠⲆⲆ: "img/day-crate16.png",
    ΔᐃⲆᐃⵠⵠⲆ: "img/night-crate16.png",
    ᐃΔⵠΔᐃᐃⵠ: "img/day-crate17.png",
    ⲆⲆᐃⵠⵠⲆᐃ: "img/night-crate17.png",
    ⵠⲆⵠⲆⵠᐃΔ: "img/day-crate18.png",
    ⵠΔⲆⲆᐃᐃᐃ: "img/night-crate18.png",
    ⲆΔΔⲆⵠΔⵠ: "img/day-crate19.png",
    ᐃΔⵠᐃΔΔΔ: "img/night-crate19.png",
    ΔᐃⵠΔΔⵠⵠ: "img/day-crate20.png",
    ᐃⲆⵠⲆⲆΔⲆ: "img/night-crate20.png",
    ⲆⲆⲆⵠⵠᐃⵠ: "img/day-crate21.png",
    ⲆⵠⲆΔᐃⵠⵠ: "img/night-crate21.png",
    ΔⲆⲆⵠΔⵠᐃ: "img/day-crate22.png",
    ᐃⵠᐃⲆⲆⲆⲆ: "img/night-crate22.png",
    ᐃΔⲆᐃΔᐃⲆ: "img/day-crate23.png",
    ⵠⲆⵠⵠΔⵠⲆ: "img/night-crate23.png",
    ⲆΔΔⵠⵠⵠⲆ: "img/day-crate24.png",
    ᐃΔⲆᐃᐃᐃᐃ: "img/night-crate24.png",
    ⲆΔⲆⵠⵠⲆᐃ: "img/day-crate25.png",
    ᐃⵠᐃᐃⲆⲆⵠ: "img/night-crate25.png",
    ΔⲆᐃⲆⲆⵠⲆ: "img/day-crate26.png",
    ΔⲆⵠⵠΔᐃⲆ: "img/night-crate26.png",
    ⲆⵠᐃᐃⲆΔⵠ: "img/day-crate27.png",
    ⲆⵠⵠⲆᐃΔⲆ: "img/night-crate27.png",
    ⵠᐃᐃᐃᐃⵠᐃ: "img/day-crate28.png",
    ᐃⵠΔΔᐃΔⵠ: "img/night-crate28.png",
    ⲆΔΔⲆⲆⵠⵠ: "img/day-crate29.png",
    ᐃΔⲆᐃⲆⲆⲆ: "img/night-crate29.png",
    ⲆⲆΔⲆⲆⵠⵠ: "img/day-crate30.png",
    ΔΔⵠⵠⵠⲆΔ: "img/night-crate30.png",
    ⵠⲆⵠⵠⲆⵠᐃ: "img/day-crate31.png",
    ⲆΔᐃⵠⵠⵠᐃ: "img/night-crate31.png",
    ⲆⲆⲆⵠⲆⲆⲆ: "img/day-crate32.png",
    ᐃᐃⵠᐃⲆⲆⵠ: "img/night-crate32.png",
    ⵠᐃΔⲆⲆⲆⲆ: "img/day-crate33.png",
    ᐃᐃⵠⵠⲆᐃᐃ: "img/night-crate33.png",
    ΔΔΔⵠⵠΔᐃ: "img/day-crate34.png",
    ΔΔⲆΔᐃⲆⲆ: "img/night-crate34.png",
    ⲆⲆⲆᐃΔΔⵠ: "img/day-crate35.png",
    ᐃᐃⵠⵠⵠᐃᐃ: "img/night-crate35.png",
    ᐃⲆⵠⲆΔΔΔ: "img/day-crate36.png",
    ⵠⵠΔΔⲆⵠⵠ: "img/night-crate36.png",
    ⵠⵠᐃⵠΔᐃᐃ: "img/day-crate37.png",
    ΔᐃᐃΔᐃⲆΔ: "img/night-crate37.png",
    ⵠⵠΔΔᐃΔᐃ: "img/day-crate38.png",
    ⲆΔᐃᐃⲆΔⵠ: "img/night-crate38.png",
    ΔΔⲆΔᐃΔᐃ: "img/day-crate39.png",
    ΔⵠⲆᐃⲆᐃᐃ: "img/night-crate39.png",
    ᐃΔⵠᐃΔⵠⲆ: "img/day-crate40.png",
    ᐃΔΔⲆΔᐃⲆ: "img/night-crate40.png",
    ⲆΔΔΔᐃⵠΔ: "img/day-crate41.png",
    ⲆᐃΔᐃᐃⲆΔ: "img/night-crate41.png",
    ⲆᐃΔΔⲆᐃΔ: "img/day-crate42.png",
    ⵠⵠⵠΔⲆⲆΔ: "img/night-crate42.png",
    ΔⲆⵠⵠᐃᐃΔ: "img/day-crate43.png",
    ⵠᐃⲆΔΔⲆⵠ: "img/night-crate43.png",
    ⵠᐃᐃᐃⵠⲆⵠ: "img/day-crate44.png",
    ⲆΔⵠⵠⵠⲆΔ: "img/night-crate44.png",
    ΔΔⲆᐃᐃⲆⵠ: "img/day-crate45.png",
    ᐃⵠΔⲆᐃΔⵠ: "img/night-crate45.png",
    ⲆⵠΔΔⲆΔⲆ: "img/day-crate46.png",
    ⲆⲆΔⵠᐃΔⵠ: "img/night-crate46.png",
    ΔⲆᐃⵠⵠⵠⵠ: "img/day-crate47.png",
    ΔΔⵠⵠⵠΔΔ: "img/night-crate47.png",
    ΔⲆᐃⲆᐃᐃⲆ: "img/day-crate48.png",
    ΔⵠᐃΔΔⲆΔ: "img/night-crate48.png",
    ᐃᐃⲆⲆⵠᐃᐃ: "img/day-crate49.png",
    ⵠᐃᐃᐃᐃⲆᐃ: "img/night-crate49.png",
    ΔΔΔΔⵠᐃⲆ: "img/day-crate50.png",
    ⵠᐃΔΔΔᐃⵠ: "img/night-crate50.png",
    ⲆᐃⲆⲆⵠⲆΔ: "img/day-crate51.png",
    ⲆⵠⵠⲆⲆⲆᐃ: "img/night-crate51.png",
    ᐃⵠⵠΔᐃᐃΔ: "img/day-crate52.png",
    ᐃⲆᐃⲆⲆⵠⵠ: "img/night-crate52.png",
    ᐃⲆᐃΔᐃᐃⲆ: "img/day-crate53.png",
    ⲆⲆᐃᐃᐃΔΔ: "img/night-crate53.png",
    ⲆᐃᐃΔⵠΔΔ: "img/day-crate54.png",
    ⲆⵠⲆΔⵠᐃΔ: "img/night-crate54.png",
    ᐃⵠⲆᐃᐃⵠⵠ: "img/day-crate55.png",
    ᐃᐃⵠⵠᐃⵠᐃ: "img/night-crate55.png",
    ΔⵠᐃΔᐃⵠⵠ: "img/day-crate56.png",
    ⵠᐃⲆⵠᐃᐃⲆ: "img/night-crate56.png",
    ᐃⵠᐃΔⵠᐃΔ: "img/day-crate57.png",
    ΔⲆᐃΔⵠΔᐃ: "img/night-crate57.png",
    ᐃᐃᐃⲆⲆⲆⵠ: "img/day-crate58.png",
    ⲆΔᐃᐃⲆᐃΔ: "img/night-crate58.png",
    ΔᐃⵠΔᐃᐃΔ: "img/day-crate59.png",
    ⵠᐃᐃⲆⲆΔΔ: "img/night-crate59.png",
    ⵠΔᐃΔᐃΔⲆ: "img/day-crate60.png",
    ᐃᐃᐃⲆᐃⲆᐃ: "img/night-crate60.png",
    ⵠⲆΔΔⲆᐃΔ: "img/day-crate61.png",
    ⵠⲆᐃⵠⵠΔᐃ: "img/night-crate61.png",
    ᐃⲆⲆⵠⲆΔᐃ: "img/day-crate62.png",
    ⲆⵠΔᐃⲆΔΔ: "img/night-crate62.png",
    ΔⵠΔⲆᐃⲆΔ: "img/day-crate63.png",
    ⲆⲆᐃⵠⵠⲆⵠ: "img/night-crate63.png",
    ⵠⵠΔᐃΔⲆΔ: "img/day-crate64.png",
    ⲆΔⲆⲆⵠΔⲆ: "img/night-crate64.png",
    ᐃⵠΔⲆΔⲆΔ: "img/day-crate65.png",
    ⲆⲆᐃΔⲆⲆⵠ: "img/night-crate65.png",
    ᐃⲆΔⵠΔΔⵠ: "img/day-crate66.png",
    ⵠΔⲆⲆΔⵠΔ: "img/night-crate66.png",
    ᐃⵠΔᐃᐃΔΔ: "img/day-crate67.png",
    ⲆⵠⵠⲆΔⵠᐃ: "img/night-crate67.png",
    ⵠΔΔⲆΔΔΔ: "img/day-crate68.png",
    ΔⵠΔⵠⵠᐃΔ: "img/night-crate68.png",
    ᐃΔΔΔΔᐃΔ: "img/day-crate69.png",
    ΔⲆⲆᐃⵠΔⵠ: "img/night-crate69.png",
    ⵠⲆᐃⵠⲆⲆⲆ: "img/day-crate70.png",
    ⲆⵠⲆⵠΔⵠΔ: "img/night-crate70.png",
    ΔⲆᐃᐃⲆⲆⵠ: "img/day-crate71.png",
    ⵠΔᐃⵠⵠΔΔ: "img/night-crate71.png",
    ΔⲆΔⲆⲆⲆⲆ: "img/day-crate72.png",
    ⵠⲆΔΔⵠΔⵠ: "img/night-crate72.png",
    ΔⲆΔΔΔⵠⲆ: "img/day-crate73.png",
    ⵠⲆΔΔⲆⲆⲆ: "img/night-crate73.png",
    ᐃΔⵠⵠⲆⲆᐃ: "img/day-crate74.png",
    ⲆⲆⵠΔⵠᐃⲆ: "img/night-crate74.png",
    ⵠⵠⲆᐃⲆⵠΔ: "img/day-crate75.png",
    ᐃᐃⵠᐃⲆⵠΔ: "img/night-crate75.png",
    ⵠⲆⲆΔⵠΔᐃ: "img/day-crate76.png",
    ΔᐃᐃᐃⵠⲆᐃ: "img/night-crate76.png",
    ⲆⲆⵠⲆᐃⲆᐃ: "img/day-crate77.png",
    ⵠⵠⲆΔⵠΔⵠ: "img/night-crate77.png",
    ⵠⵠⵠⲆΔⲆᐃ: "img/day-crate78.png",
    ᐃᐃᐃⲆⵠⵠⲆ: "img/night-crate78.png",
    ⲆⲆᐃΔⲆⵠᐃ: "img/day-crate79.png",
    ᐃⲆⲆⵠⵠᐃᐃ: "img/night-crate79.png",
    ⵠΔⵠΔⵠᐃⲆ: "img/day-herb0.png",
    ⲆΔⵠⵠᐃⵠⵠ: "img/day-herb1.png",
    ⵠᐃⵠΔᐃΔᐃ: "img/day-herb2.png",
    ⵠⲆⲆⵠⲆⵠᐃ: "img/day-herb3.png",
    Ⲇᐃᐃᐃᐃᐃᐃ: "img/day-herb4.png",
    ⵠᐃⲆΔⲆΔᐃ: "img/day-herb5.png",
    ΔⲆᐃⵠⲆⵠⵠ: "img/day-herb6.png",
    ⵠⲆΔΔⲆⵠⵠ: "img/day-herb7.png",
    ⲆⲆⵠⵠⵠⵠⵠ: "img/day-herb8.png",
    ⵠⲆΔⵠⵠΔⵠ: "img/day-herb9.png",
    ΔᐃⵠΔΔⵠⲆ: "img/day-herb10.png",
    ⲆΔᐃⵠΔⲆⲆ: "img/day-herb11.png",
    ⵠᐃΔⵠⵠⲆⵠ: "img/day-herb12.png",
    ΔΔⲆΔⲆΔᐃ: "img/day-herb13.png",
    ⲆΔⲆⲆᐃΔᐃ: "img/day-herb14.png",
    ⵠⲆΔΔⵠⵠⲆ: "img/day-herb15.png",
    ΔΔⵠᐃΔⲆⲆ: "img/day-shell0.png",
    ⲆⲆΔᐃⲆⲆᐃ: "img/day-shell1.png",
    ⲆΔΔⲆⵠⵠᐃ: "img/day-shell2.png",
    ᐃᐃⵠΔⲆⲆⵠ: "img/day-leaf1.png",
    ⵠⲆⵠⲆⵠⵠⵠ: "img/day-leaf2.png",
    ᐃΔΔⵠⲆⲆⵠ: "img/day-leaf3.png",
    ᐃⵠⵠᐃΔᐃΔ: "img/day-leaf4.png",
    ᐃⵠⵠΔΔⲆΔ: "img/day-leaf5.png",
    ΔᐃⵠΔΔᐃⵠ: "img/day-leaf6.png",
    ⵠΔᐃᐃᐃᐃⵠ: "img/day-leaf7.png",
    ᐃᐃⲆⵠᐃΔΔ: "img/day-leaf8.png",
    ⵠᐃᐃⲆⵠⲆⲆ: "img/day-rock0.png",
    ⵠᐃᐃΔΔᐃΔ: "img/day-rock1.png",
    ⵠΔᐃⲆⲆⵠᐃ: "img/day-rock2.png",
    ᐃⲆᐃⵠᐃⲆⲆ: "img/day-rock3.png",
    ΔᐃⲆᐃΔΔⵠ: "img/day-rock4.png",
    ⲆⲆᐃΔᐃΔⵠ: "img/day-rock5.png",
    ᐃⲆΔⲆΔⲆⲆ: "img/day-rock6.png",
    ᐃⵠᐃⵠⵠΔᐃ: "img/day-rock7.png",
    ⵠⲆᐃⲆⲆⲆᐃ: "img/day-rock8.png",
    ΔⵠⵠⲆΔΔΔ: "img/day-rock9.png",
    ⲆᐃΔᐃⵠᐃⵠ: "img/day-rock10.png",
    ⲆᐃᐃᐃⵠⲆⵠ: "img/day-rock11.png",
    ⲆᐃⵠΔᐃⲆⲆ: "img/day-rock12.png",
    ⵠᐃⲆⵠΔⲆⲆ: "img/day-rock13.png",
    ⵠⲆΔⲆΔⵠⵠ: "img/day-flower1.png",
    ⵠⲆⵠᐃᐃⵠΔ: "img/day-flower2.png",
    ⲆᐃᐃⵠⲆᐃΔ: "img/day-flower3.png",
    ⵠⵠⲆΔΔⲆΔ: "img/day-flower4.png",
    ᐃⵠⲆⲆᐃᐃⲆ: "img/day-flower5.png",
    ᐃᐃΔᐃᐃᐃᐃ: "img/day-flower6.png",
    ΔⲆᐃΔΔⲆⲆ: "img/day-flower7.png",
    ΔᐃᐃⵠᐃΔΔ: "img/day-flower8.png",
    ⵠⵠⲆⵠⵠΔⲆ: "img/day-flower9.png",
    ᐃⲆΔⲆᐃᐃⲆ: "img/day-herb16.png",
    ᐃⵠᐃΔⲆᐃᐃ: "img/day-herb17.png",
    ΔⵠΔΔᐃⵠⲆ: "img/day-herb18.png",
    ΔⲆⲆⲆⵠⲆⵠ: "img/day-herb19.png",
    ᐃⲆⲆᐃⲆⲆᐃ: "img/day-herb20.png",
    ᐃⵠⲆⲆᐃⵠⲆ: "img/day-herb21.png",
    ᐃⵠΔΔᐃᐃⲆ: "img/night-herb0.png",
    ⲆΔΔⲆⵠΔΔ: "img/night-herb1.png",
    ⲆⵠΔᐃΔᐃΔ: "img/night-herb2.png",
    ᐃΔᐃᐃᐃᐃⵠ: "img/night-herb3.png",
    ⲆΔΔΔΔⲆΔ: "img/night-herb4.png",
    ᐃᐃΔⵠΔⵠΔ: "img/night-herb5.png",
    ΔᐃⲆⵠᐃⲆᐃ: "img/night-herb6.png",
    ⵠΔⲆΔΔⵠⲆ: "img/night-herb7.png",
    ΔⵠⲆⵠᐃⲆⵠ: "img/night-herb8.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/night-herb9.png",
    ΔᐃᐃⲆⵠⲆΔ: "img/night-herb10.png",
    ΔᐃⵠⵠⵠᐃΔ: "img/night-herb11.png",
    ⲆᐃᐃⲆⲆΔᐃ: "img/night-herb12.png",
    ᐃᐃΔⲆᐃⲆΔ: "img/night-herb13.png",
    ΔⵠᐃᐃΔⲆᐃ: "img/night-herb14.png",
    ΔΔⲆⲆⲆΔᐃ: "img/night-herb15.png",
    ⲆΔⲆᐃⲆΔⵠ: "img/night-shell0.png",
    ᐃⲆΔⵠΔΔᐃ: "img/night-shell1.png",
    ΔΔⲆᐃⲆᐃΔ: "img/night-shell2.png",
    ΔⵠⲆΔⵠᐃᐃ: "img/night-leaf1.png",
    ΔⵠⲆⲆⲆΔⲆ: "img/night-leaf2.png",
    ΔⲆᐃΔⵠΔΔ: "img/night-leaf3.png",
    ᐃΔᐃⵠⲆⵠᐃ: "img/night-leaf4.png",
    ᐃΔΔⲆⲆⵠⵠ: "img/night-leaf5.png",
    ⵠΔⵠⵠᐃⲆΔ: "img/night-leaf6.png",
    ᐃΔⵠΔⵠᐃⵠ: "img/night-leaf7.png",
    ⵠᐃⵠⵠⵠⵠᐃ: "img/night-leaf8.png",
    ⲆᐃᐃⲆᐃⲆⵠ: "img/night-rock0.png",
    ⲆⵠⲆᐃᐃⵠᐃ: "img/night-rock1.png",
    ⲆᐃᐃⵠⲆⵠΔ: "img/night-rock2.png",
    ⵠΔⲆⵠⲆΔⲆ: "img/night-rock3.png",
    ᐃⲆΔⲆⵠΔⲆ: "img/night-rock4.png",
    ⲆⵠᐃΔⲆΔⵠ: "img/night-rock5.png",
    ⲆⵠⵠΔᐃΔⵠ: "img/night-rock6.png",
    ΔⵠⵠΔⲆΔΔ: "img/night-rock7.png",
    ⲆΔⵠⵠⲆᐃⵠ: "img/night-rock8.png",
    ᐃⲆⵠⵠⲆⲆΔ: "img/night-rock9.png",
    ᐃᐃⲆΔᐃⲆᐃ: "img/night-rock10.png",
    ⵠΔΔᐃⵠΔⵠ: "img/night-rock11.png",
    ⵠⲆΔⲆⵠⵠΔ: "img/night-rock12.png",
    ⲆΔΔⲆⲆᐃᐃ: "img/night-rock13.png",
    ⲆⲆΔᐃᐃΔⵠ: "img/night-flower1.png",
    ᐃⲆᐃΔⲆⲆᐃ: "img/night-flower2.png",
    ΔⵠΔⵠΔⵠᐃ: "img/night-flower3.png",
    ⵠⲆⵠⲆᐃΔᐃ: "img/night-flower4.png",
    ᐃΔᐃⵠᐃΔⵠ: "img/night-flower5.png",
    ⲆⵠΔᐃΔⲆⵠ: "img/night-flower6.png",
    ΔⲆⲆⵠⲆⵠΔ: "img/night-flower7.png",
    ⲆᐃⲆᐃⲆᐃΔ: "img/night-flower8.png",
    ΔᐃᐃⲆΔᐃΔ: "img/night-flower9.png",
    ΔⵠⲆⵠⵠΔᐃ: "img/night-herb16.png",
    ⵠⵠᐃΔΔⵠᐃ: "img/night-herb17.png",
    ⲆⵠⵠΔΔⲆⲆ: "img/night-herb18.png",
    ⵠⲆΔᐃⵠᐃⲆ: "img/night-herb19.png",
    ΔⲆΔⵠⲆΔⵠ: "img/night-herb20.png",
    ᐃⵠΔΔⲆΔΔ: "img/night-herb21.png",
    ⵠΔΔᐃⲆᐃΔ: "img/day-river000-010-000.png",
    ⲆᐃᐃⲆᐃΔⵠ: "img/day-river000-010-010.png",
    ᐃᐃⲆᐃΔᐃΔ: "img/day-river000-011-000.png",
    ⲆⲆΔⲆᐃᐃΔ: "img/day-river000-011-010.png",
    ⵠⲆΔᐃᐃⵠⵠ: "img/day-river000-011-011.png",
    ⵠᐃⵠⵠᐃᐃᐃ: "img/day-river000-110-000.png",
    ᐃⵠᐃⵠᐃΔᐃ: "img/day-river000-110-010.png",
    ⲆΔᐃᐃΔⲆᐃ: "img/day-river000-110-110.png",
    ᐃⵠⲆⵠⵠᐃᐃ: "img/day-river000-111-000.png",
    ⲆᐃⲆⵠᐃΔⲆ: "img/day-river000-111-010.png",
    ΔⲆⵠΔᐃⵠⲆ: "img/day-river000-111-011.png",
    ⵠⲆᐃΔⵠΔⵠ: "img/day-river000-111-110.png",
    ᐃΔΔᐃⲆᐃⲆ: "img/day-river000-111-111.png",
    ⵠΔⵠᐃΔΔΔ: "img/day-river010-010-000.png",
    ΔᐃⵠⲆΔᐃᐃ: "img/day-river010-010-010.png",
    ⵠⲆΔᐃᐃⲆⲆ: "img/day-river010-011-000.png",
    ⵠⲆⵠΔΔΔΔ: "img/day-river010-011-010.png",
    ᐃⵠⲆᐃⲆⵠⵠ: "img/day-river010-011-011.png",
    ΔⲆΔⲆΔᐃᐃ: "img/day-river010-110-000.png",
    ᐃⲆⲆⲆᐃᐃⲆ: "img/day-river010-110-010.png",
    ⲆⲆᐃΔⵠᐃᐃ: "img/day-river010-110-110.png",
    ᐃΔΔⵠΔΔⲆ: "img/day-river010-111-000.png",
    ⲆⵠΔΔⲆⵠⵠ: "img/day-river010-111-010.png",
    ΔΔᐃᐃⵠΔᐃ: "img/day-river010-111-011.png",
    ᐃΔⲆΔⲆΔⲆ: "img/day-river010-111-110.png",
    ⵠΔᐃⲆⵠⲆⵠ: "img/day-river010-111-111.png",
    ⲆⵠⵠⲆΔᐃⲆ: "img/day-river011-011-000.png",
    ⵠΔᐃᐃⵠⵠⵠ: "img/day-river011-011-010.png",
    ⵠΔΔⲆΔⲆⵠ: "img/day-river011-011-011.png",
    ᐃⲆⵠΔⵠΔΔ: "img/day-river011-111-000.png",
    ΔⵠⵠΔΔⲆⲆ: "img/day-river011-111-010.png",
    ⲆΔⲆΔᐃᐃΔ: "img/day-river011-111-011.png",
    Ⲇⵠᐃᐃᐃⵠᐃᐃⵠ: "img/day-river011-111-110.png",
    ΔⲆᐃⵠΔⲆⵠⵠⵠ: "img/day-river011-111-111.png",
    ⵠⲆΔⲆⲆⵠⵠⲆΔ: "img/day-river110-110-000.png",
    ΔᐃⲆᐃΔⲆᐃᐃᐃ: "img/day-river110-110-010.png",
    ΔⵠⲆᐃᐃⲆΔⲆΔ: "img/day-river110-110-110.png",
    ⵠⵠᐃΔΔΔΔΔⵠ: "img/day-river110-111-000.png",
    ⲆᐃⵠΔΔⵠΔⵠⲆ: "img/day-river110-111-010.png",
    ᐃⵠⲆᐃᐃᐃΔᐃᐃ: "img/day-river110-111-011.png",
    ⲆⵠΔⲆᐃΔᐃⵠⲆ: "img/day-river110-111-110.png",
    ΔΔΔΔⵠⵠⲆᐃⵠ: "img/day-river110-111-111.png",
    ᐃᐃⵠᐃⵠⵠᐃ: "img/day-river111-111-011.png",
    ⵠⲆⵠⲆᐃΔⵠⵠⵠ: "img/day-river111-111-110.png",
    ᐃᐃⵠᐃⵠⵠᐃ: "img/day-river111-111-011.png",
    ⲆΔΔΔΔⵠⵠⲆⵠ: "img/day-river111-111-000.png",
    ⵠⵠⲆΔΔᐃΔᐃⵠ: "img/day-river111-111-111.png",
    ⵠΔᐃⵠⵠΔⵠⵠΔ: "img/day-river111-111-010.png",
    ⲆⵠΔΔⵠᐃᐃⵠⲆ: "img/night-river000-010-000.png",
    ⵠⵠⲆᐃⲆⲆⵠᐃⵠ: "img/night-river000-010-010.png",
    ⵠⲆⵠⲆⲆᐃᐃΔⲆ: "img/night-river000-011-000.png",
    ⲆⵠᐃᐃᐃⵠΔᐃΔ: "img/night-river000-011-010.png",
    ᐃᐃⲆⵠⵠⵠⲆⵠᐃ: "img/night-river000-011-011.png",
    ⵠⲆΔᐃⵠⵠΔⵠⵠ: "img/night-river000-110-000.png",
    ΔᐃⵠΔΔⵠⲆΔⵠ: "img/night-river000-110-010.png",
    ᐃⲆΔΔⵠⵠⲆᐃⲆ: "img/night-river000-110-110.png",
    ᐃΔⵠᐃⵠⵠᐃᐃᐃ: "img/night-river000-111-000.png",
    ΔⲆⵠⲆᐃΔⲆᐃᐃ: "img/night-river000-111-010.png",
    ᐃⵠᐃΔⲆⲆⵠⲆⵠ: "img/night-river000-111-011.png",
    ⵠⲆⲆⵠΔⲆΔᐃⵠ: "img/night-river000-111-110.png",
    ⲆΔⲆⲆⲆⲆᐃⵠᐃ: "img/night-river000-111-111.png",
    ⲆᐃⲆᐃⲆΔⵠᐃᐃ: "img/night-river010-010-000.png",
    ⲆⲆⵠΔⵠⵠⲆⵠⵠ: "img/night-river010-010-010.png",
    ⵠⲆᐃⲆⲆΔΔⲆΔ: "img/night-river010-011-000.png",
    ⵠⵠⲆΔΔⵠΔΔᐃ: "img/night-river010-011-010.png",
    ⲆⵠΔⲆᐃᐃᐃⲆⵠ: "img/night-river010-011-011.png",
    ΔⵠⵠⲆⲆⲆᐃᐃⲆ: "img/night-river010-110-000.png",
    ⵠⲆⵠᐃᐃΔⵠΔⵠ: "img/night-river010-110-010.png",
    ᐃΔⲆⵠᐃⲆᐃᐃΔ: "img/night-river010-110-110.png",
    ᐃΔⲆᐃⵠᐃΔⵠΔ: "img/night-river010-111-000.png",
    ᐃⲆⵠⲆᐃⵠⲆᐃΔ: "img/night-river010-111-010.png",
    ⲆⵠⲆᐃⲆⵠᐃⵠΔ: "img/night-river010-111-011.png",
    ᐃΔⵠΔᐃᐃⲆᐃᐃ: "img/night-river010-111-110.png",
    ⵠΔⲆΔⵠᐃΔᐃᐃ: "img/night-river010-111-111.png",
    ΔΔⲆᐃᐃᐃᐃⲆⵠ: "img/night-river011-011-000.png",
    ⲆⲆⲆⲆΔⵠΔΔⵠ: "img/night-river011-011-010.png",
    ᐃⵠᐃⲆᐃᐃⲆⵠᐃ: "img/night-river011-011-011.png",
    ΔᐃᐃᐃⵠᐃΔᐃⵠ: "img/night-river011-111-000.png",
    ⵠⲆⲆⲆᐃΔΔⵠΔ: "img/night-river011-111-010.png",
    ᐃᐃⲆⲆΔⵠᐃΔⵠ: "img/night-river011-111-011.png",
    ΔᐃⵠΔᐃᐃⲆⲆᐃ: "img/night-river011-111-110.png",
    ⲆⲆⲆᐃᐃΔΔⲆⲆ: "img/night-river011-111-111.png",
    ᐃⲆⲆⵠⲆⵠΔⲆᐃ: "img/night-river110-110-000.png",
    ⲆΔⲆᐃᐃⲆⵠΔⵠ: "img/night-river110-110-010.png",
    ᐃΔⵠᐃⵠᐃⵠⵠⲆ: "img/night-river110-110-110.png",
    ⵠΔⲆⲆᐃΔⵠⵠᐃ: "img/night-river110-111-000.png",
    ⲆᐃⲆΔᐃⲆΔⲆⲆ: "img/night-river110-111-010.png",
    ⲆᐃⵠⲆΔⲆⲆᐃΔ: "img/night-river110-111-011.png",
    ΔΔⵠⲆᐃⲆⲆⲆᐃ: "img/night-river110-111-110.png",
    ᐃΔᐃⲆⲆⲆⲆᐃⵠ: "img/night-river110-111-111.png",
    ⲆΔᐃⵠⲆᐃⲆ: "img/night-river111-111-011.png",
    ΔᐃΔΔⲆⲆΔⲆᐃ: "img/night-river111-111-110.png",
    ⲆΔᐃⵠⲆᐃⲆ: "img/night-river111-111-011.png",
    ΔᐃⲆⲆⵠᐃⵠΔᐃ: "img/night-river111-111-000.png",
    ⵠⵠᐃᐃⵠⲆΔᐃⲆ: "img/night-river111-111-111.png",
    ⵠⲆⵠⲆΔⵠⲆⲆⵠ: "img/night-river111-111-010.png",
    ⵠΔΔⲆΔΔⲆ: "img/day-pebblecompo1.png",
    ΔΔⵠⲆⵠ: "img/day-pebblecompo2.png",
    ⵠⲆⵠⲆⲆ: "img/day-pebblecompo3.png",
    ⲆᐃᐃᐃΔⵠΔ: "img/day-pebblecompo4.png",
    ⵠᐃᐃΔⵠ: "img/day-pebblecompo5.png",
    ᐃΔᐃⲆᐃ: "img/day-pebblecompo6.png",
    ᐃⵠⲆⲆⵠ: "img/day-pebblecompo7.png",
    ᐃᐃⲆⵠΔⲆⲆΔᐃ: "img/day-pebblecompo8.png",
    ᐃⲆⲆⵠᐃⲆⵠ: "img/day-pebblecompo9.png",
    ⲆⵠΔⵠⵠΔⲆ: "img/day-pebblecompo10.png",
    ⵠᐃᐃᐃΔ: "img/day-pebblecompo11.png",
    ΔᐃᐃⲆⵠⲆⲆ: "img/day-pebblecompo12.png",
    ΔᐃᐃᐃⵠᐃΔ: "img/day-pebblecompo13.png",
    ⲆᐃⵠᐃΔⵠᐃ: "img/day-pebblecompo14.png",
    ⲆΔⵠΔᐃⲆΔ: "img/day-pebblecompo15.png",
    ⵠΔΔⵠⲆᐃΔ: "img/day-pebblecompo16.png",
    ⵠⵠᐃⵠᐃ: "img/day-pebblecompo17.png",
    ᐃᐃⵠᐃᐃΔᐃ: "img/day-pebblecompo18.png",
    ᐃⵠᐃᐃⲆΔΔ: "img/day-pebblecompo19.png",
    ᐃΔⲆⵠΔ: "img/day-pebblecompo20.png",
    ΔᐃΔⲆⵠ: "img/day-pebblecompo21.png",
    ⵠᐃΔⲆⵠⲆᐃ: "img/day-pebblecompo22.png",
    ᐃᐃΔΔⲆⵠⲆ: "img/day-pebblecompo23.png",
    ⵠΔΔΔⲆΔⵠ: "img/day-pebblecompo24.png",
    ⲆⲆⵠⲆᐃ: "img/day-pebblecompo25.png",
    ΔᐃⵠⵠⲆ: "img/day-pebblecompo26.png",
    ⵠΔⵠⵠΔⲆⵠ: "img/day-pebblecompo27.png",
    ⵠᐃⲆⵠΔ: "img/day-pebblecompo28.png",
    ⵠᐃᐃⲆΔⲆΔ: "img/night-pebblecompo1.png",
    ⵠⵠⵠⲆⵠ: "img/night-pebblecompo2.png",
    ΔᐃⲆΔⲆ: "img/night-pebblecompo3.png",
    ⵠⵠⵠⲆⵠΔⵠ: "img/night-pebblecompo4.png",
    ⲆᐃⲆᐃᐃ: "img/night-pebblecompo5.png",
    ⵠᐃΔᐃⵠ: "img/night-pebblecompo6.png",
    ⵠⵠΔᐃᐃ: "img/night-pebblecompo7.png",
    ⲆᐃΔⵠΔᐃᐃⵠⲆ: "img/night-pebblecompo8.png",
    ⲆⲆⲆΔⲆⲆⵠ: "img/night-pebblecompo9.png",
    ⵠⵠⲆⵠⵠⵠⵠ: "img/night-pebblecompo10.png",
    ⲆΔⵠΔᐃ: "img/night-pebblecompo11.png",
    ΔΔΔⲆⲆΔⲆ: "img/night-pebblecompo12.png",
    ⵠΔⵠⲆᐃⵠΔ: "img/night-pebblecompo13.png",
    ΔⵠᐃⲆⲆⲆΔ: "img/night-pebblecompo14.png",
    ΔⵠⵠᐃΔⲆⲆ: "img/night-pebblecompo15.png",
    ᐃΔᐃⲆⵠΔᐃ: "img/night-pebblecompo16.png",
    ⲆⵠⲆΔΔ: "img/night-pebblecompo17.png",
    ᐃⵠΔⵠⲆᐃΔ: "img/night-pebblecompo18.png",
    ᐃⵠⵠΔⲆⵠⵠ: "img/night-pebblecompo19.png",
    ⵠΔΔⵠⵠ: "img/night-pebblecompo20.png",
    ⲆᐃⵠΔⲆ: "img/night-pebblecompo21.png",
    ΔᐃⲆᐃΔⲆΔ: "img/night-pebblecompo22.png",
    ⵠᐃΔᐃⵠΔΔ: "img/night-pebblecompo23.png",
    ΔΔΔⵠⵠⲆΔ: "img/night-pebblecompo24.png",
    ᐃᐃΔᐃⵠ: "img/night-pebblecompo25.png",
    ᐃᐃⵠⲆᐃ: "img/night-pebblecompo26.png",
    ΔᐃᐃⵠⲆᐃⵠ: "img/night-pebblecompo27.png",
    ⵠⵠΔΔⵠ: "img/night-pebblecompo28.png",
    ΔⲆΔΔᐃⲆⵠΔᐃ: "img/day-baby-mammoth.png",
    ⲆⵠΔᐃⵠᐃΔᐃⵠ: "img/day-baby-mammoth-tamed.png",
    ᐃⲆΔⵠⲆⲆⵠⵠⲆ: "img/day-baby-mammoth-angry.png",
    ⵠΔᐃΔⲆᐃᐃⲆᐃ: "img/night-baby-mammoth.png",
    ᐃᐃΔᐃⵠΔⵠΔⵠ: "img/night-baby-mammoth-tamed.png",
    ΔᐃⲆΔΔⲆᐃⲆᐃ: "img/night-baby-mammoth-angry.png",
    ΔⲆᐃΔⲆⲆᐃΔⲆ: "img/inv-mammoth-out.png",
    ΔⲆᐃⵠⲆΔᐃᐃΔ: "img/inv-mammoth-in.png",
    ΔᐃⵠⵠⲆᐃᐃᐃΔ: "img/inv-mammoth-click.png",
    ᐃⲆⵠΔⲆᐃᐃ: "img/hurt-baby-mammoth.png",
    ⲆΔᐃΔⲆⲆⵠ: "img/baby-mammoth-step.png",
    ⵠᐃᐃⲆᐃΔᐃΔᐃ: "img/day-flower-hat.png",
    ⲆΔⲆⲆᐃⲆΔⲆΔ: "img/night-flower-hat.png",
    ΔᐃᐃᐃᐃⵠΔⲆⵠ: "img/inv-flower-hat-out.png",
    ᐃⲆΔⲆᐃⲆⵠⲆΔ: "img/inv-flower-hat-in.png",
    ⲆᐃⵠΔⵠᐃᐃⲆᐃ: "img/inv-flower-hat-click.png",
    ᐃΔⵠⵠᐃᐃΔΔᐃ: "img/day-fur-hat.png",
    ⵠᐃΔᐃⲆᐃᐃᐃⲆ: "img/night-fur-hat.png",
    ΔⵠⵠⲆⲆΔΔⲆΔ: "img/inv-fur-hat-out.png",
    ⵠΔΔᐃΔⵠⵠⵠΔ: "img/inv-fur-hat-in.png",
    ⲆⲆᐃⵠᐃᐃᐃⵠⲆ: "img/inv-fur-hat-click.png",
    ⵠⵠⲆⵠᐃᐃᐃΔⲆ: "img/day-mammoth.png",
    ᐃΔⲆⵠΔⲆⲆᐃⵠ: "img/night-mammoth.png",
    ⵠⲆⲆⵠⵠΔⲆ: "img/hurt-mammoth.png",
    ⵠⵠⲆⵠΔⵠΔⲆᐃ: "img/inv-mammoth-fur-out.png",
    ᐃⵠⲆᐃⵠⲆⲆΔᐃ: "img/inv-mammoth-fur-in.png",
    ⲆΔΔᐃⵠᐃᐃΔᐃ: "img/inv-mammoth-fur-click.png",
    ΔΔᐃⵠⲆⲆⲆᐃΔ: "img/inv-wood-bow-out.png",
    ⵠΔⵠᐃⵠᐃⵠⵠⲆ: "img/inv-wood-bow-in.png",
    ᐃⵠᐃⲆⵠⵠⲆΔⲆ: "img/inv-wood-bow-click.png",
    ᐃⵠΔΔᐃⵠΔᐃⵠ: "img/inv-wood-arrow-out.png",
    ᐃΔⵠΔⲆⲆᐃⲆⵠ: "img/inv-wood-arrow-in.png",
    ⲆⵠΔⲆΔⵠⲆᐃΔ: "img/inv-wood-arrow-click.png",
    ΔⵠⵠᐃᐃⵠΔⲆⵠ: "img/day-wood-bow2.png",
    ΔᐃᐃΔⲆⵠⵠⲆⲆ: "img/night-wood-bow2.png",
    ⵠⵠᐃⲆΔᐃᐃ: "img/day-wood-arrow.png",
    ᐃⵠΔⵠᐃⵠⲆ: "img/night-wood-arrow.png",
    ⲆⵠⲆΔΔΔΔⵠⵠ: "img/inv-stone-bow-out.png",
    ⲆᐃⲆⲆᐃⲆⲆΔⵠ: "img/inv-stone-bow-in.png",
    ⲆᐃᐃΔⵠᐃᐃⵠⵠ: "img/inv-stone-bow-click.png",
    ΔᐃᐃⲆⵠΔⲆᐃΔ: "img/inv-stone-arrow-out.png",
    ⲆΔᐃⲆΔⵠⲆⵠᐃ: "img/inv-stone-arrow-in.png",
    ⵠΔΔⲆⵠⵠⵠΔⵠ: "img/inv-stone-arrow-click.png",
    ΔᐃⵠⲆⵠⵠΔᐃⵠ: "img/day-stone-bow.png",
    ⲆⵠᐃⲆⲆΔΔᐃΔ: "img/night-stone-bow.png",
    ⲆⲆⵠΔΔⵠΔ: "img/day-stone-arrow.png",
    ᐃᐃⲆⵠⵠⵠΔ: "img/night-stone-arrow.png",
    ⲆΔⵠᐃᐃΔᐃᐃⵠ: "img/inv-gold-bow-out.png",
    ⲆᐃⲆΔᐃⲆᐃⲆⲆ: "img/inv-gold-bow-in.png",
    ᐃΔΔⲆᐃΔⲆΔⵠ: "img/inv-gold-bow-click.png",
    ⵠΔᐃⲆΔⵠⲆΔΔ: "img/inv-gold-arrow-out.png",
    ΔⲆΔⵠᐃΔᐃⵠΔ: "img/inv-gold-arrow-in.png",
    ΔᐃⲆⲆⵠΔᐃᐃΔ: "img/inv-gold-arrow-click.png",
    ΔⲆⵠᐃⲆⲆⲆᐃⵠ: "img/day-gold-bow.png",
    ⵠᐃⵠᐃΔᐃᐃᐃΔ: "img/night-gold-bow.png",
    ΔᐃⵠΔᐃⲆⵠ: "img/day-gold-arrow.png",
    ⵠᐃΔΔᐃᐃⵠ: "img/night-gold-arrow.png",
    ᐃΔⵠᐃⲆⵠΔⲆⲆ: "img/inv-diamond-bow-out.png",
    ⵠⵠⲆⲆΔⲆᐃⲆⲆ: "img/inv-diamond-bow-in.png",
    ΔⵠᐃΔⲆᐃⲆΔᐃ: "img/inv-diamond-bow-click.png",
    ᐃⲆⵠⵠΔⲆᐃΔⲆ: "img/inv-diamond-arrow-out.png",
    ⵠΔⲆⵠⵠΔⵠᐃⲆ: "img/inv-diamond-arrow-in.png",
    ⵠΔⲆⵠⵠᐃⲆⲆⲆ: "img/inv-diamond-arrow-click.png",
    ⲆΔⲆᐃⲆΔⵠΔᐃ: "img/day-diamond-bow.png",
    ᐃΔⲆΔᐃⵠΔⵠΔ: "img/night-diamond-bow.png",
    ΔᐃⵠΔΔⵠΔ: "img/day-diamond-arrow.png",
    ⵠᐃᐃΔΔᐃⲆ: "img/night-diamond-arrow.png",
    ᐃⲆⵠⵠᐃⲆΔᐃⲆ: "img/inv-amethyst-bow-out.png",
    ΔⲆΔᐃⵠⲆΔᐃᐃ: "img/inv-amethyst-bow-in.png",
    ᐃΔᐃᐃⲆⵠΔΔⲆ: "img/inv-amethyst-bow-click.png",
    ⲆᐃⲆⵠᐃᐃᐃΔΔ: "img/inv-amethyst-arrow-out.png",
    ⲆⵠⲆⵠΔⲆΔⲆᐃ: "img/inv-amethyst-arrow-in.png",
    ⲆⲆⵠΔⵠⲆᐃⵠⲆ: "img/inv-amethyst-arrow-click.png",
    ᐃⵠⵠᐃΔᐃΔᐃᐃ: "img/day-amethyst-bow.png",
    ⲆⲆᐃⲆⵠΔⲆᐃᐃ: "img/night-amethyst-bow.png",
    ⲆⵠΔⲆⵠΔⵠ: "img/day-amethyst-arrow.png",
    ᐃⲆⵠΔⲆⲆᐃ: "img/night-amethyst-arrow.png",
    ⲆΔΔᐃᐃΔⵠΔΔ: "img/inv-dragon-bow-out.png",
    ⲆᐃᐃΔⲆⲆⵠⵠⲆ: "img/inv-dragon-bow-in.png",
    ⲆⵠⲆⲆΔⲆᐃᐃᐃ: "img/inv-dragon-bow-click.png",
    ⲆⵠᐃᐃⵠΔᐃΔᐃ: "img/inv-dragon-arrow-out.png",
    ⲆⵠⵠⵠᐃⵠⲆᐃΔ: "img/inv-dragon-arrow-in.png",
    ΔᐃᐃᐃΔΔΔᐃⵠ: "img/inv-dragon-arrow-click.png",
    ᐃⲆⵠⲆⵠΔⵠᐃᐃ: "img/day-dragon-bow.png",
    ΔⲆΔᐃΔⲆᐃⲆⲆ: "img/night-dragon-bow.png",
    ᐃΔⲆΔⵠᐃᐃ: "img/day-dragon-arrow.png",
    ⲆᐃⲆΔⲆᐃᐃ: "img/night-dragon-arrow.png",
    ⵠⵠΔᐃⲆⵠⲆᐃⵠ: "img/inv-reidite-bow-out.png",
    ⵠⵠᐃⵠᐃⲆᐃⵠᐃ: "img/inv-reidite-bow-in.png",
    ⲆⲆΔᐃⲆᐃⵠⵠⵠ: "img/inv-reidite-bow-click.png",
    ΔⲆᐃΔⲆᐃⲆⵠᐃ: "img/inv-reidite-arrow-out.png",
    ΔᐃΔᐃⵠΔⲆⵠΔ: "img/inv-reidite-arrow-in.png",
    ᐃΔⲆΔΔⵠⵠΔⵠ: "img/inv-reidite-arrow-click.png",
    ΔⵠᐃⲆᐃᐃΔᐃᐃ: "img/day-reidite-bow.png",
    ⵠΔᐃᐃΔⲆⲆᐃⲆ: "img/night-reidite-bow.png",
    ⵠΔⵠᐃΔⲆⵠ: "img/day-reidite-arrow.png",
    ⵠΔⲆⵠΔΔⵠΔᐃ: "img/night-reidite-arrow.png",
    ΔⲆᐃⲆⲆⵠⲆΔᐃ: "img/inv-wooden-axe-out.png",
    ΔΔᐃΔⵠᐃΔⵠᐃ: "img/inv-wooden-axe-in.png",
    ΔⲆⲆⵠⵠΔᐃⲆΔ: "img/inv-wooden-axe-click.png",
    ⵠᐃⵠⵠᐃᐃⵠⲆⵠ: "img/day-wooden-axe.png",
    ⵠᐃⵠΔᐃᐃᐃᐃⵠ: "img/night-wooden-axe.png",
    ⵠᐃᐃΔⵠΔⲆⲆⵠ: "img/inv-stone-axe-out.png",
    ΔᐃΔᐃⲆᐃᐃⵠⲆ: "img/inv-stone-axe-in.png",
    ⲆᐃⲆΔᐃⵠᐃΔΔ: "img/inv-stone-axe-click.png",
    ⵠᐃΔⲆᐃⲆⲆⲆⲆ: "img/day-stone-axe.png",
    ⲆΔⲆᐃⵠᐃⵠᐃⲆ: "img/night-stone-axe.png",
    ΔⲆⵠⵠⲆⵠⲆΔⵠ: "img/inv-golden-axe-out.png",
    ⵠⵠᐃᐃⵠⲆⲆⲆᐃ: "img/inv-golden-axe-in.png",
    ΔΔΔΔΔⲆΔᐃᐃ: "img/inv-golden-axe-click.png",
    ᐃⲆⵠⵠⵠⲆⲆⵠⵠ: "img/day-golden-axe.png",
    ΔᐃⲆⲆᐃⲆᐃⲆΔ: "img/night-golden-axe.png",
    ᐃᐃᐃᐃⵠᐃⵠⲆΔ: "img/inv-diamond-axe-out.png",
    ΔᐃⲆᐃⵠΔⲆⲆⲆ: "img/inv-diamond-axe-in.png",
    ᐃΔᐃΔᐃⵠᐃⵠⲆ: "img/inv-diamond-axe-click.png",
    ⲆⲆⲆⲆⲆⵠΔⲆⲆ: "img/day-diamond-axe.png",
    ΔⵠΔⵠΔΔⵠᐃΔ: "img/night-diamond-axe.png",
    ⲆΔΔⲆΔᐃⲆⲆⲆ: "img/inv-amethyst-axe-out.png",
    ᐃᐃᐃΔᐃᐃΔΔᐃ: "img/inv-amethyst-axe-in.png",
    ΔⲆᐃᐃⲆᐃⲆⲆᐃ: "img/inv-amethyst-axe-click.png",
    ΔⵠⵠᐃⲆᐃⵠⵠᐃ: "img/day-amethyst-axe.png",
    ΔΔΔΔΔΔΔΔΔ: "img/night-amethyst-axe.png",
    ΔⲆᐃⵠΔΔᐃΔⲆ: "img/inv-reidite-axe-out.png",
    ⵠᐃΔΔⵠⵠΔⲆⵠ: "img/inv-reidite-axe-in.png",
    ⲆⵠⵠΔΔⲆᐃΔⲆ: "img/inv-reidite-axe-click.png",
    ΔⲆΔΔⲆΔΔⲆⲆ: "img/day-reidite-axe.png",
    ᐃⲆᐃⲆᐃᐃⲆᐃⵠ: "img/night-reidite-axe.png",
    ⲆⵠΔΔⲆᐃⵠ: "img/bandage-activated.png",
    ⵠΔᐃΔⲆᐃⵠ: "img/auto-feed.png",
    ᐃⲆⵠᐃⲆⲆⲆ: "img/stop-regeneration.png",
    ᐃⵠⲆⵠⲆⲆⵠ: "img/stop-regeneration2.png",
    ⲆΔⲆΔⲆⲆᐃⵠⲆ: "img/day-wood-platform.png",
    ⲆⲆΔΔⲆᐃⵠΔᐃ: "img/night-wood-platform.png",
    ᐃⵠⲆⲆᐃⵠⵠᐃᐃ: "img/inv-wood-platform-in.png",
    ᐃⵠⲆⲆⵠⲆΔⲆⵠ: "img/inv-wood-platform-out.png",
    ΔⲆΔΔⵠⵠⵠⲆΔ: "img/inv-wood-platform-click.png",
    ᐃⵠⲆᐃⵠᐃΔΔⵠ: "img/day-wood-shield.png",
    ᐃⲆⲆⵠᐃΔΔⵠΔ: "img/night-wood-shield.png",
    ΔⵠᐃᐃᐃᐃᐃᐃΔ: "img/day-stone-shield.png",
    ⲆⵠⲆⲆᐃᐃⲆⲆⵠ: "img/night-stone-shield.png",
    ⵠᐃΔᐃᐃⵠᐃⲆᐃ: "img/day-gold-shield.png",
    ᐃᐃⲆⵠᐃⵠΔᐃᐃ: "img/night-gold-shield.png",
    ⲆΔΔᐃᐃΔᐃΔΔ: "img/day-diamond-shield.png",
    ΔᐃΔΔⲆᐃᐃᐃΔ: "img/night-diamond-shield.png",
    ⵠΔᐃᐃᐃⲆⲆΔΔ: "img/day-amethyst-shield.png",
    ΔᐃⵠⲆⵠΔⵠⲆⵠ: "img/night-amethyst-shield.png",
    ΔᐃᐃⵠᐃⲆΔⲆⲆ: "img/day-reidite-shield.png",
    ⲆΔᐃⲆΔⲆᐃᐃⲆ: "img/night-reidite-shield.png",
    ᐃⵠⵠⲆⵠⵠⲆᐃᐃ: "img/inv-wood-shield-in.png",
    ΔⵠⵠⲆᐃᐃⲆΔᐃ: "img/inv-wood-shield-out.png",
    ⵠΔⲆⲆⵠⵠⵠΔⲆ: "img/inv-wood-shield-click.png",
    ΔⵠΔΔⲆⲆᐃΔΔ: "img/inv-stone-shield-in.png",
    ᐃΔⵠΔΔΔⲆⵠⵠ: "img/inv-stone-shield-out.png",
    ᐃⵠⲆⲆⵠⲆⲆⵠⲆ: "img/inv-stone-shield-click.png",
    ⵠⲆⲆⲆⲆⲆⲆΔⵠ: "img/inv-gold-shield-in.png",
    ΔΔⲆΔΔⵠⲆⲆΔ: "img/inv-gold-shield-out.png",
    ⲆᐃᐃⲆᐃᐃⲆⲆᐃ: "img/inv-gold-shield-click.png",
    ⲆⲆⵠᐃᐃⲆΔᐃⲆ: "img/inv-diamond-shield-in.png",
    ΔΔⲆⲆΔⵠⲆΔⵠ: "img/inv-diamond-shield-out.png",
    ᐃⵠⲆᐃⲆⵠⵠΔⵠ: "img/inv-diamond-shield-click.png",
    ΔⵠᐃⵠΔⵠᐃᐃⵠ: "img/inv-amethyst-shield-in.png",
    ᐃᐃᐃᐃᐃΔⵠΔⵠ: "img/inv-amethyst-shield-out.png",
    ΔᐃᐃⲆΔⵠⲆΔΔ: "img/inv-amethyst-shield-click.png",
    ⵠⲆΔⲆⵠⲆᐃⵠⵠ: "img/inv-reidite-shield-in.png",
    ΔᐃΔⲆⲆᐃΔⵠⲆ: "img/inv-reidite-shield-out.png",
    ΔⵠⵠᐃⲆⵠⲆⲆᐃ: "img/inv-reidite-shield-click.png",
    ΔᐃΔⲆᐃΔᐃⵠⲆ: "img/day-machete.png",
    ΔΔⵠΔⲆᐃᐃᐃᐃ: "img/night-machete.png",
    ΔᐃᐃΔⵠⲆΔⵠⲆ: "img/inv-machete-in.png",
    ᐃᐃⲆΔⵠⲆⵠΔᐃ: "img/inv-machete-out.png",
    ΔⲆⵠΔΔΔⲆⲆⵠ: "img/inv-machete-click.png"
  };
  ⵠⵠΔⲆΔⲆΔ = [{}];
  ⵠⵠΔⲆΔⲆΔ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ΔⵠΔΔⵠΔⲆ = {};
  ᐃᐃⲆⲆᐃⵠⲆⲆⲆ = {};
  for (var Ab in Δᐃ) {
    ΔⵠΔΔⵠΔⲆ[Ab] = Δᐃ[Ab];
  }
  const Qb = 20;
  Ⲇᐃ = [];
  const _b = 0;
  const Fb = 18;
  ⵠⵠᐃ = {};
  const Rb = 9;
  ⵠⵠᐃ.ΔΔΔᐃᐃ = 0;
  const jb = 13;
  const Lb = 3;
  const Gb = 8;
  ⵠⵠᐃ.ⲆᐃⲆⲆ = 1;
  ⵠⵠᐃ.ΔΔΔΔ = 2;
  ⵠⵠᐃ.Δⵠᐃᐃ = 3;
  const Wb = 256;
  ⵠⵠᐃ.ΔΔⲆΔ = 4;
  const Ob = 20;
  const Nb = 0;
  ⵠⵠᐃ.ᐃᐃᐃⵠ = 5;
  ⵠⵠᐃ.ⲆⵠΔⲆ = 6;
  ⵠⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ = 7;
  const qb = 6;
  ⵠⵠᐃ.ΔΔᐃΔᐃ = 8;
  ⵠᐃⵠⵠ = {};
  ⲆⲆⲆⲆ = [];
  ⲆⲆⵠⵠᐃⲆᐃ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -1;
  };
  const Hb = 3;
  var Ub = [];
  const Dt = 7;
  function Kb(a, b) {
    for (var c = 0; Ub.length > c; c += b) {
      var d = Ub[c];
      if (a === d[0]) {
        Zb(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const Vb = 13;
  const Xb = 10;
  function Zb(b, c, d, e) {
    var f = ⲆⲆⲆⲆ[b];
    if (f !== undefined) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / px.ᐃⲆⲆᐃⲆ;
        var m = d * 193 / px.ⲆⲆⲆᐃᐃ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        Ⲇᐃ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / px.ᐃⲆⲆᐃⲆ;
        m = d * 600 / px.ⲆⲆⲆᐃᐃ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        Ⲇᐃ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  function $b(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  function ed(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function id(b, c, d, e, f, g) {
    if (g * 2 > e) {
      g = e / 2;
    }
    if (f < g * 2) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  ⲆᐃⲆⲆⵠⲆᐃΔⵠ = function () {
    for (var b = 0; b < 2; b++) {
      Ⲇᐃ[818][b].clearRect(0, 0, 193, 193);
      Ⲇᐃ[818][b].drawImage(ⲆⲆⲆⲆ.MAP[b], 0, 0, 193, 193);
      Ⲇᐃ[819][b].clearRect(0, 0, 600, 600);
      Ⲇᐃ[819][b].drawImage(ⲆⲆⲆⲆ.MAP[b], 0, 0, 600, 600);
      for (var c = px.ΔᐃⲆⲆΔ.length - 1; c >= 0; c--) {
        var d = px.ΔᐃⲆⲆΔ[c];
        var f = d.x1 * 193 / (px.ᐃⲆⲆᐃⲆ * 100);
        var j = d.y1 * 193 / (px.ⲆⲆⲆᐃᐃ * 100);
        var k = d.w * 193 / (px.ᐃⲆⲆᐃⲆ * 100);
        var m = d.ᐃⲆᐃ * 193 / (px.ⲆⲆⲆᐃᐃ * 100);
        var p = d.x1 * 600 / (px.ᐃⲆⲆᐃⲆ * 100);
        var q = d.y1 * 600 / (px.ⲆⲆⲆᐃᐃ * 100);
        var u = d.w * 600 / (px.ᐃⲆⲆᐃⲆ * 100);
        var v = d.ᐃⲆᐃ * 600 / (px.ⲆⲆⲆᐃᐃ * 100);
        if (px.ⲆΔᐃⲆⵠ === d.ᐃᐃⵠ) {
          Ⲇᐃ[818][b].drawImage(ⲆⲆⲆⲆ.FOREST[b], f, j, k, m);
          Ⲇᐃ[819][b].drawImage(ⲆⲆⲆⲆ.FOREST[b], p, q, u, v);
        }
        if (d.ᐃᐃⵠ === px.ⲆΔⲆΔⲆⵠΔ) {
          Ⲇᐃ[818][b].drawImage(ⲆⲆⲆⲆ.WINTER[b], f, j, k, m);
          Ⲇᐃ[819][b].drawImage(ⲆⲆⲆⲆ.WINTER[b], p, q, u, v);
        }
        if (px.ᐃⵠᐃⲆⵠΔⲆ === d.ᐃᐃⵠ) {
          Ⲇᐃ[818][b].drawImage(ⲆⲆⲆⲆ.LAVA[b], f, j, k, m);
          Ⲇᐃ[819][b].drawImage(ⲆⲆⲆⲆ.LAVA[b], p, q, u, v);
        }
        if (px.ᐃᐃⵠΔᐃᐃᐃ === d.ᐃᐃⵠ) {
          Ⲇᐃ[818][b].drawImage(ⲆⲆⲆⲆ.CAVE[b], f, j, k, m);
          Ⲇᐃ[819][b].drawImage(ⲆⲆⲆⲆ.CAVE[b], p, q, u, v);
        }
        if (px.ⲆᐃᐃⵠⲆⵠⲆ === d.ᐃᐃⵠ) {
          Ⲇᐃ[818][b].drawImage(ⲆⲆⲆⲆ.DESERT[b], f, j, k, m);
          Ⲇᐃ[819][b].drawImage(ⲆⲆⲆⲆ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ⲆᐃᐃᐃⲆΔᐃⵠⵠ = function () {
    ⵠᐃⵠⵠ = {
      ΔⵠΔᐃᐃ: [{
        id: 0,
        Δᐃⵠ: Δᐃ.ⵠᐃΔⵠⲆΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠΔΔΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃΔⲆᐃΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃᐃΔⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        Δᐃⵠ: Δᐃ.ΔⵠΔⵠΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃᐃΔⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⵠⵠⲆΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔⲆΔⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        Δᐃⵠ: Δᐃ.ⵠᐃΔΔᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔᐃᐃⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔᐃⵠⲆᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠᐃΔⵠⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        Δᐃⵠ: Δᐃ.ΔⲆⲆⵠΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⵠᐃΔΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃΔⵠΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠⵠⵠᐃΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        Δᐃⵠ: Δᐃ.ΔΔΔⵠᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃΔⲆⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃΔⲆΔⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠΔΔᐃᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        Δᐃⵠ: Δᐃ.ΔᐃΔⲆΔⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⵠΔΔⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⵠⲆᐃⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔⵠΔᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠᐃⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆΔᐃⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⵠⲆⵠⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆΔΔⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        Δᐃⵠ: Δᐃ.ΔᐃⲆΔⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔΔⲆᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔᐃΔⵠⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆᐃⵠᐃⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        Δᐃⵠ: Δᐃ.ᐃⲆⲆΔᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔⲆΔⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃΔΔΔⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔᐃⵠⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        Δᐃⵠ: Δᐃ.ⲆΔΔⵠᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔⵠΔⵠⲆΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔᐃⵠᐃⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔΔⲆᐃᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        Δᐃⵠ: Δᐃ.ⵠᐃΔⲆⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠⲆⵠⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃⲆΔᐃⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃΔᐃⵠⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆᐃⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⲆⲆⲆⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠⵠᐃⲆΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⲆΔΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        Δᐃⵠ: Δᐃ.ⵠⲆⲆⲆⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔΔᐃⵠⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔΔᐃⵠⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠΔΔⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        Δᐃⵠ: Δᐃ.ⲆᐃΔⲆⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔⲆΔΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⵠΔⲆᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃΔΔⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        Δᐃⵠ: Δᐃ.ᐃⲆⵠⵠᐃⵠΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠΔⵠⲆΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔⵠᐃᐃⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⲆⵠⲆΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        Δᐃⵠ: Δᐃ.ⲆⵠΔⲆⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆᐃⲆⵠΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔⲆΔⲆΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃΔᐃⲆᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        Δᐃⵠ: Δᐃ.ᐃⲆΔⵠΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔᐃΔⵠⲆᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆΔΔΔⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⵠⵠΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        Δᐃⵠ: Δᐃ.ⵠⲆⲆΔΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆⲆⵠᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃⵠΔⲆΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠⲆⵠⵠᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        Δᐃⵠ: Δᐃ.ⵠⵠᐃᐃᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆᐃⲆΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔΔᐃⲆⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔᐃⵠⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        Δᐃⵠ: Δᐃ.ΔⲆΔⵠᐃΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⵠΔⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆⲆⵠⵠᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃΔⲆᐃⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠᐃᐃⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔⵠᐃⲆΔⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔΔᐃᐃΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠΔⵠⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        Δᐃⵠ: Δᐃ.ᐃᐃⲆⲆᐃⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⲆΔΔΔⵠΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔΔⵠⲆⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆⲆⲆⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃᐃᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔᐃΔᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔΔⲆᐃⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⲆᐃⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        Δᐃⵠ: Δᐃ.ⵠⵠᐃᐃᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔᐃⵠΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔᐃᐃᐃⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃⲆⵠΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃⵠⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆⵠⵠΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⵠⲆⵠᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔΔⵠⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        Δᐃⵠ: Δᐃ.ᐃΔᐃΔⲆⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃⲆⲆⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠᐃⵠᐃⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆΔᐃⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        Δᐃⵠ: Δᐃ.ⲆΔᐃⲆΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⲆΔΔⵠΔⵠᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃᐃⲆⲆᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆΔΔΔⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        Δᐃⵠ: Δᐃ.ⵠΔⲆᐃᐃⵠΔ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⲆᐃᐃΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔΔΔⵠⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔᐃΔΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        Δᐃⵠ: Δᐃ.ⲆⵠΔᐃΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠΔⲆⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⲆᐃⵠⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠᐃΔⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        Δᐃⵠ: Δᐃ.ΔⲆⲆⵠⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆᐃⵠᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃⲆⲆⵠⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆΔᐃⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        Δᐃⵠ: Δᐃ.ⲆΔᐃⲆΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔΔΔⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⲆΔΔΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠᐃᐃᐃⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        Δᐃⵠ: Δᐃ.ⵠΔⵠⲆⲆⲆⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃΔⵠⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠΔᐃΔΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔᐃⲆⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        Δᐃⵠ: Δᐃ.ΔᐃⵠⲆⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃᐃΔᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃᐃΔⵠⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔΔᐃⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        Δᐃⵠ: Δᐃ.ⵠΔΔⵠΔΔΔ,
        ΔᐃⲆ: Δᐃ.ΔΔᐃⵠΔⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃΔⵠⲆᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔΔᐃⵠᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⵠⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⵠΔⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃᐃⵠⵠᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔⵠᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        Δᐃⵠ: Δᐃ.ⲆⵠⲆⲆΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆⵠⲆⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⵠⵠⲆΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⲆⵠⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        Δᐃⵠ: Δᐃ.ΔΔᐃⲆⵠΔⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠΔᐃΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆᐃᐃⵠⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔᐃⲆᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆᐃⵠⲆⲆ,
        ΔᐃⲆ: Δᐃ.ΔᐃΔⲆᐃᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⲆΔᐃⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔᐃΔᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        Δᐃⵠ: Δᐃ.ⵠΔΔΔⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃᐃⲆΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔⵠⲆⲆⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆᐃⲆΔΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃᐃⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆΔⲆᐃⵠᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⵠᐃⵠΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃΔⵠᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃᐃΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃΔᐃⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠⲆⲆᐃᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.Ⲇᐃⵠᐃⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        Δᐃⵠ: Δᐃ.ᐃΔᐃⵠᐃⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⲆᐃⵠᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠⵠΔⲆᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃⵠᐃⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆΔΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃᐃⲆΔⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆᐃΔᐃⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃⵠⲆⵠⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃΔⲆᐃⵠ,
        ΔᐃⲆ: Δᐃ.ΔⲆΔⲆⵠΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⲆⵠΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠΔᐃⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠⲆΔᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃΔⵠⲆᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃΔⲆᐃΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃⵠᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃΔΔΔΔ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃΔⲆⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠΔᐃⵠΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠΔⵠⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        Δᐃⵠ: Δᐃ.ΔᐃΔΔⲆΔⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠⲆΔⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃᐃΔⲆⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆΔᐃⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⵠΔΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⵠⲆⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆΔⵠΔⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆᐃᐃᐃΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        Δᐃⵠ: Δᐃ.ΔᐃⵠᐃᐃⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⲆᐃΔⵠⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔⵠⲆᐃᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⵠⵠⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        Δᐃⵠ: Δᐃ.ᐃⵠⲆⵠⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⲆΔΔΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃΔⵠᐃⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆᐃᐃᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        Δᐃⵠ: Δᐃ.ⵠΔᐃⲆⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠᐃᐃΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠᐃⵠΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠᐃΔᐃᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        Δᐃⵠ: Δᐃ.ΔᐃΔΔᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ΔΔᐃⲆⲆⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔΔⲆᐃⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⲆΔᐃΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        Δᐃⵠ: Δᐃ.ΔⵠᐃⲆΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠⲆⵠᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆⲆΔᐃⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃⵠᐃᐃⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        Δᐃⵠ: Δᐃ.ⲆᐃΔⵠΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⲆΔᐃᐃⲆᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆᐃⵠΔⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔΔⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        Δᐃⵠ: Δᐃ.ᐃⲆΔⵠⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔⲆΔⵠᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆᐃⵠΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃⲆᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        Δᐃⵠ: Δᐃ.ᐃΔΔᐃⲆΔΔ,
        ΔᐃⲆ: Δᐃ.ΔᐃⲆᐃᐃᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔⲆⵠⲆⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆⵠⵠⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        Δᐃⵠ: Δᐃ.ⲆΔⲆΔⲆΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔⲆⲆΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃΔⵠᐃⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆᐃⵠᐃᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠⲆᐃⲆᐃ,
        ΔᐃⲆ: Δᐃ.Ⲇⵠᐃᐃᐃᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⵠᐃΔᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⵠᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠⲆⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃΔᐃΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃⲆΔᐃⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔⲆⵠⵠⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        Δᐃⵠ: Δᐃ.ΔᐃⵠⵠΔⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆᐃΔᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃᐃⲆΔⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔΔᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠⲆⲆⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⲆᐃᐃⵠΔᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃΔⵠⵠⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆᐃᐃΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⵠⲆᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔΔᐃΔⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⲆⵠⲆⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔⲆΔΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        Δᐃⵠ: Δᐃ.ⲆΔᐃᐃᐃⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔᐃⵠΔⲆᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃΔⲆⲆⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⵠⲆⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⲆΔⲆΔ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆⲆᐃΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔⲆΔⵠᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃΔᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        Δᐃⵠ: Δᐃ.ΔΔΔᐃⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ΔⵠⵠⵠⲆᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⵠⵠⲆⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆΔⵠΔⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        Δᐃⵠ: Δᐃ.ΔⲆᐃᐃΔⲆⵠ,
        ΔᐃⲆ: Δᐃ.ΔΔᐃᐃⲆⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃⲆⵠⲆⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⲆᐃΔⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        Δᐃⵠ: Δᐃ.ⲆΔᐃⵠΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆⵠΔⲆΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆⵠᐃᐃⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆᐃⵠⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆΔⲆΔⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠⲆⲆⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠᐃⲆⲆᐃΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃⲆⲆᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠΔΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⲆΔⵠᐃⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆᐃᐃΔΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆⵠΔⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        Δᐃⵠ: Δᐃ.ᐃⵠΔⲆⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠⵠⵠⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔΔᐃⵠⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃΔⲆΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        Δᐃⵠ: Δᐃ.ᐃΔΔᐃΔⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔⲆΔΔⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔⵠΔⵠᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆᐃΔΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        Δᐃⵠ: Δᐃ.ᐃⵠⲆⵠΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⵠᐃᐃᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⲆⵠⵠΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆᐃΔᐃⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        Δᐃⵠ: Δᐃ.ᐃΔΔᐃᐃᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃᐃⲆΔᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆΔᐃᐃⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆᐃᐃⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠᐃⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠΔΔΔΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⲆΔⲆⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⵠΔⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        Δᐃⵠ: Δᐃ.ⲆⵠᐃⵠⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⵠΔᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃΔⵠⲆᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃⵠⵠᐃⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        Δᐃⵠ: Δᐃ.ΔΔⵠⵠⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔΔⲆⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⲆⲆⵠⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔᐃⲆⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⲆⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠⲆᐃⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃΔⲆΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃᐃᐃⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        Δᐃⵠ: Δᐃ.ΔⵠᐃⵠΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ⲆΔⵠⵠΔᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆᐃⲆᐃⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆΔᐃⲆⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        Δᐃⵠ: Δᐃ.ᐃⵠΔΔᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆΔⲆᐃΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔⲆᐃᐃᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆⵠᐃΔΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠⲆᐃⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⵠΔΔⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠⲆⲆⵠᐃΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔᐃⲆᐃΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃΔⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠⵠᐃⲆᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆⲆⲆᐃᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔⵠⲆⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        Δᐃⵠ: Δᐃ.ΔⲆⵠᐃⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠⲆᐃΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃᐃΔᐃΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆΔΔⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        Δᐃⵠ: Δᐃ.ⲆⵠⲆⵠⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔΔⲆⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠᐃⲆⵠⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔΔⵠΔⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        Δᐃⵠ: Δᐃ.ⲆΔΔΔΔΔΔ,
        ΔᐃⲆ: Δᐃ.ΔΔΔⵠⵠΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆΔⲆⵠⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆΔⲆᐃᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        Δᐃⵠ: Δᐃ.ⵠΔⲆⲆᐃⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔⲆᐃⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔⵠⵠᐃΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠΔⵠⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        Δᐃⵠ: Δᐃ.ᐃⲆᐃΔⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠⲆⵠΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃⵠᐃΔΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔⲆΔᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        Δᐃⵠ: Δᐃ.ΔⵠΔΔΔⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆⲆⲆᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃⵠᐃⲆᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆΔⲆⵠⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        Δᐃⵠ: Δᐃ.ⵠΔⵠᐃⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⵠΔᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔΔⵠᐃΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⵠΔΔΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃᐃⲆⲆᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃΔⲆⵠⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆⲆⲆᐃΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔΔΔΔⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        Δᐃⵠ: Δᐃ.ΔⲆΔⵠᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ΔⵠΔᐃΔⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃⲆΔⵠⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔⵠᐃᐃⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        Δᐃⵠ: Δᐃ.ΔΔⵠⵠΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⲆΔᐃᐃⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔⵠⲆᐃⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆᐃⵠᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆⲆΔΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠᐃⵠᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔᐃⵠΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃⲆᐃⲆᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        Δᐃⵠ: Δᐃ.ⵠΔⲆⵠⲆΔⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔᐃΔΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃⵠⲆⲆⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠΔᐃⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        Δᐃⵠ: Δᐃ.ᐃᐃΔΔᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃⲆᐃⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠΔⲆⲆΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⲆΔᐃⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        Δᐃⵠ: Δᐃ.ⵠⵠᐃⵠᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃⵠΔⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔΔᐃΔΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃⲆⵠⵠᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        Δᐃⵠ: Δᐃ.ᐃⲆΔᐃⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆᐃᐃΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠΔᐃⵠⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⲆΔᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠΔΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔⲆⲆΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃΔⵠᐃⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⲆⵠΔⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        Δᐃⵠ: Δᐃ.ΔΔⵠΔⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃⵠⵠⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠᐃⲆᐃΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⵠⵠⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆⵠᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⵠΔΔⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔΔⲆᐃⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆᐃΔⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        Δᐃⵠ: Δᐃ.ΔⵠⲆⲆⲆΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⲆᐃᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠΔΔⵠⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⲆΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠᐃⲆΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⵠᐃⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃⲆᐃⲆᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆⲆΔΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        Δᐃⵠ: Δᐃ.ΔΔⵠΔᐃⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⵠᐃᐃΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔⵠⲆΔⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃᐃⲆⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆⵠΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆⲆⲆⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔⲆⵠΔΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠⵠᐃᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        Δᐃⵠ: Δᐃ.ΔΔΔᐃⲆᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠΔⲆⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆⲆΔᐃᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔⲆΔΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        Δᐃⵠ: Δᐃ.ⵠΔⲆᐃⲆⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⵠⲆᐃᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆᐃⵠΔⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⵠⲆᐃΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        Δᐃⵠ: Δᐃ.ᐃΔΔᐃᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆᐃΔⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠᐃᐃΔⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔΔⵠᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        Δᐃⵠ: Δᐃ.ΔᐃᐃᐃΔⲆᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆΔⲆⲆⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔΔᐃΔᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⲆᐃᐃⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        Δᐃⵠ: Δᐃ.ᐃⲆⵠΔΔⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃᐃⵠΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⲆΔᐃⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔᐃΔⵠᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃᐃΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⲆΔΔΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⲆⲆᐃⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔΔⵠⵠᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⵠⲆⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃΔⲆΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔΔᐃΔᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃⲆΔⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃⲆⲆΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔΔᐃⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔⲆⲆᐃⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆⵠⲆⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        Δᐃⵠ: Δᐃ.ⲆΔᐃⲆΔᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃⵠΔⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆᐃⵠᐃⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠΔᐃΔᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆⲆⲆΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔΔⲆᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠⲆΔⵠᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃⲆᐃⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        Δᐃⵠ: Δᐃ.ⲆΔⵠΔⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⵠΔΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔⵠᐃⵠⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⲆΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        Δᐃⵠ: Δᐃ.ⲆᐃΔⲆΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔΔⵠⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃⵠᐃⵠᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆᐃⵠⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⲆᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠᐃᐃΔᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆΔⲆᐃΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃⲆᐃⲆᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃΔΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⵠᐃⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆᐃᐃⲆⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆΔᐃΔΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃΔᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ⵠΔΔΔⲆⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔΔᐃⵠⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⲆⲆᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃΔⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔᐃᐃⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⲆⵠΔⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔΔΔⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        Δᐃⵠ: Δᐃ.ⲆΔᐃⲆⲆΔᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔⲆΔⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆΔⲆⲆΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔⲆΔⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        Δᐃⵠ: Δᐃ.ᐃⵠΔΔᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⵠⵠᐃⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔᐃΔᐃⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔⵠⵠⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        Δᐃⵠ: Δᐃ.ΔΔⲆⵠΔΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃΔⵠΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔᐃⲆΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⲆᐃⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠⵠⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⵠⵠⲆⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔⵠⲆᐃᐃΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠᐃᐃᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        Δᐃⵠ: Δᐃ.ⲆⵠΔΔΔⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃᐃᐃΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⵠⵠⲆΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆⲆⲆⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        Δᐃⵠ: Δᐃ.ⵠΔΔⲆⵠΔΔ,
        ΔᐃⲆ: Δᐃ.Δⵠⵠᐃᐃⵠᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⲆᐃᐃΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⲆⵠΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        Δᐃⵠ: Δᐃ.ᐃⲆⲆⵠᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔᐃⵠⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔⵠⵠⲆᐃΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃⲆⵠⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆΔᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⵠⲆᐃᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⵠΔΔⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃᐃⵠⵠⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        Δᐃⵠ: Δᐃ.ⲆΔⲆᐃⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆΔᐃᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⵠⲆⲆⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃᐃᐃΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        Δᐃⵠ: Δᐃ.ΔⲆⲆⲆᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠⲆΔΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆΔⵠⲆⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆΔⲆⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        Δᐃⵠ: Δᐃ.ⲆΔᐃᐃᐃΔⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆᐃΔᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃΔⵠⵠⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⲆΔⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        Δᐃⵠ: Δᐃ.ⲆⵠᐃΔᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔⲆⲆᐃⲆΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃⲆⵠⵠΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆΔⵠᐃⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        Δᐃⵠ: Δᐃ.ⵠⲆⲆⲆⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔᐃⵠⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⵠΔⲆᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⵠⵠⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        Δᐃⵠ: Δᐃ.ΔΔᐃΔᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⵠΔⲆⲆΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⲆᐃⲆᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆΔᐃⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃΔⲆΔⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠΔᐃΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆᐃⲆᐃⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆΔⵠⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        Δᐃⵠ: Δᐃ.ΔⲆᐃⵠΔᐃᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆΔⲆⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆΔᐃⲆⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠⲆⵠⵠᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃᐃᐃᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆᐃᐃΔⲆΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃⲆᐃⵠⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃᐃⵠⵠᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        Δᐃⵠ: Δᐃ.ⵠᐃᐃΔᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔⵠᐃΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔᐃΔⵠᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃΔⵠΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⵠΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃᐃᐃⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃⲆⲆᐃᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⵠΔⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠⲆⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃᐃⵠΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠᐃⲆⲆⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃᐃⲆⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        Δᐃⵠ: Δᐃ.ⵠⲆⲆᐃⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃⵠᐃᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃΔⵠⲆᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆᐃⵠᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⲆⲆΔⵠ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆΔⲆΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔᐃᐃⲆᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆᐃΔΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        Δᐃⵠ: Δᐃ.ᐃⲆⲆᐃΔⵠΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔᐃᐃⵠΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃⲆⵠΔᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃᐃⲆΔΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        Δᐃⵠ: Δᐃ.ⵠΔⲆΔⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔᐃⲆⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔⲆΔΔⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃⲆⵠⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆᐃⵠⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆΔⲆⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆᐃⲆⲆⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⲆᐃⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⲆⲆΔⲆ,
        ΔᐃⲆ: Δᐃ.ΔⵠⵠⵠΔⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃⲆΔᐃⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⵠⵠᐃΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠⵠΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔⵠⲆΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆΔᐃⲆᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠᐃⵠᐃΔΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆᐃΔⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔⲆⵠΔⲆⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠᐃⲆΔⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⲆᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        Δᐃⵠ: Δᐃ.ⲆΔⵠⲆⲆΔⵠ,
        ΔᐃⲆ: Δᐃ.ΔⵠⵠᐃⵠᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆΔΔΔᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⵠⵠΔⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        Δᐃⵠ: Δᐃ.ⵠⲆΔΔⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠΔⵠΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃⲆⲆᐃⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⵠΔⲆᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        Δᐃⵠ: Δᐃ.ΔΔⲆⵠⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⵠⲆⵠⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔΔⲆΔΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆⵠᐃᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃⲆΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆᐃⵠⲆᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃᐃΔⲆᐃΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⲆΔⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠᐃΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔᐃⲆᐃⵠⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆΔⲆⵠⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃΔΔΔᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        Δᐃⵠ: Δᐃ.ΔⵠΔⲆⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔΔⵠⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆⲆᐃᐃⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⲆⲆΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        Δᐃⵠ: Δᐃ.ΔᐃⵠⲆΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆΔⲆⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔⲆⵠⵠⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃⲆΔΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        Δᐃⵠ: Δᐃ.ⲆⲆΔⲆᐃⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔΔΔⵠΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆⵠᐃᐃⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⵠΔⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        Δᐃⵠ: Δᐃ.ΔⵠᐃΔⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆᐃⵠΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆᐃᐃⵠΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠᐃⵠⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        Δᐃⵠ: Δᐃ.ΔⵠᐃΔᐃᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆᐃᐃⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠΔⵠⲆⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠΔⲆΔⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃⲆᐃⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔΔⵠⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃⲆᐃΔⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠⲆⵠⵠΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        Δᐃⵠ: Δᐃ.ΔⲆⵠⵠⲆⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔΔⲆΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃΔⲆⵠⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔΔᐃΔⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        Δᐃⵠ: Δᐃ.ΔⲆⵠⵠΔΔⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⵠᐃΔΔⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃⵠΔⲆᐃΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⲆΔⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        Δᐃⵠ: Δᐃ.ΔΔⵠΔᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠΔᐃΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆΔΔΔᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠᐃΔΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        Δᐃⵠ: Δᐃ.ⲆΔⲆᐃᐃⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠᐃᐃⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔΔⲆⵠⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠⵠⵠⲆΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        Δᐃⵠ: Δᐃ.ᐃⵠⵠⲆᐃᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔΔΔΔᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆΔΔⲆΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠⲆΔⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠⵠΔⲆᐃ,
        ΔᐃⲆ: Δᐃ.ΔⲆⲆⵠⵠᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃⲆⲆⲆᐃΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠⲆⲆΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        Δᐃⵠ: Δᐃ.ⲆⵠΔᐃⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆΔⲆᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⲆⵠᐃΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆᐃⲆⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        Δᐃⵠ: Δᐃ.ⵠᐃⲆΔᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔⲆⵠΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔⵠⵠᐃⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔᐃᐃᐃⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠΔⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆᐃⵠⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔᐃΔⵠᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⵠⲆⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠᐃΔⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔⲆⵠⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃΔⵠⵠᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆΔΔΔΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃⲆⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃΔⲆⵠᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⲆⲆΔⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃΔΔᐃⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        Δᐃⵠ: Δᐃ.ΔΔᐃΔⲆᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⲆΔⵠΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃᐃⵠⲆⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆⵠⵠⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        Δᐃⵠ: Δᐃ.ᐃΔΔΔⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔᐃΔⵠⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠⵠⲆΔⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⵠΔᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠⵠⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆᐃΔᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠᐃᐃⵠᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠΔᐃᐃⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        Δᐃⵠ: Δᐃ.ⵠⲆⲆΔⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⲆⲆᐃⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠᐃⵠⵠⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆΔᐃᐃⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        Δᐃⵠ: Δᐃ.ⲆⵠⲆⵠΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⵠᐃⲆᐃΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔᐃⲆΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆⵠΔⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        Δᐃⵠ: Δᐃ.ΔΔᐃᐃΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆⲆⵠΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⲆⵠⲆⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃΔΔᐃᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        Δᐃⵠ: Δᐃ.ⵠΔⵠⵠⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃΔᐃⵠΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃⲆⵠΔⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔΔⲆⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        Δᐃⵠ: Δᐃ.ᐃΔᐃΔⲆᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⵠⲆᐃⵠᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠᐃᐃΔᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⲆⲆⲆΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        Δᐃⵠ: Δᐃ.ΔⲆᐃⲆᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔⵠᐃᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃⵠᐃΔⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃⲆᐃⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        Δᐃⵠ: Δᐃ.ΔⲆⵠⵠΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⵠᐃⵠⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆᐃⲆΔⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⵠⲆᐃᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠΔⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔⵠᐃⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔⵠᐃⵠΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⵠᐃⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        Δᐃⵠ: Δᐃ.ΔⵠᐃᐃΔΔⲆ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃΔⵠⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃⵠᐃⵠΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃⵠⲆᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        Δᐃⵠ: Δᐃ.ᐃⵠΔⵠᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⲆΔⲆΔᐃᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⵠⲆⲆΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆᐃᐃᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠⲆᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠᐃᐃⵠΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔⲆᐃᐃΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔΔᐃΔΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        Δᐃⵠ: Δᐃ.ⵠⲆΔΔⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆᐃᐃⲆⵠᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃⵠΔᐃⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃⲆⵠⲆⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        Δᐃⵠ: Δᐃ.ᐃΔΔⵠᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆΔⵠⲆΔΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆᐃⵠⲆΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔⵠΔⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠΔⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆΔᐃΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⵠⵠⵠΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃΔΔΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        Δᐃⵠ: Δᐃ.ᐃᐃΔⲆⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ΔⲆⵠⲆΔⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠΔⲆᐃᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠᐃⵠⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        Δᐃⵠ: Δᐃ.ᐃΔⵠΔᐃΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔⲆⲆⲆᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔⲆΔᐃΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃⵠᐃⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        Δᐃⵠ: Δᐃ.ᐃΔΔΔᐃⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃᐃᐃⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃⵠΔⲆΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃΔⲆⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        Δᐃⵠ: Δᐃ.ΔΔΔⲆⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔΔⵠⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆΔⵠⵠⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃⵠⵠΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        Δᐃⵠ: Δᐃ.ⵠΔΔΔᐃⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔᐃⵠᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⵠΔᐃⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃᐃⲆⲆⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠΔⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃΔΔⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔᐃⵠⵠⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⲆᐃⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        Δᐃⵠ: Δᐃ.ⵠΔⵠᐃⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆᐃⲆΔⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔⵠⲆⵠᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⲆⵠⵠⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        Δᐃⵠ: Δᐃ.ΔΔᐃΔᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⵠⲆᐃᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠᐃⲆⵠⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆⲆΔⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        Δᐃⵠ: Δᐃ.ΔⵠᐃⵠⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠΔⲆⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃᐃⲆⵠⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃᐃΔΔⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠᐃⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆᐃⵠⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔΔⵠⲆⲆⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔⲆⵠⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        Δᐃⵠ: Δᐃ.ᐃⲆᐃⲆⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆᐃⵠⵠⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃⵠⲆᐃⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔⵠᐃⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⲆⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃⵠⲆᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠᐃⲆⲆⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔⵠⵠΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        Δᐃⵠ: Δᐃ.ᐃΔΔⲆⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃⵠⲆⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠΔΔⵠᐃΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠΔᐃᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        Δᐃⵠ: Δᐃ.ⲆΔⲆⵠΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠᐃⲆⵠⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠᐃΔΔⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃⲆⵠⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        Δᐃⵠ: Δᐃ.ᐃΔΔΔⲆⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⵠᐃⵠΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃⵠⲆⲆⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔᐃᐃᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        Δᐃⵠ: Δᐃ.ⲆⵠΔⵠᐃᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆᐃᐃⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⵠⵠᐃᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔΔⵠᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃⵠⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔⲆᐃⵠⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆΔⵠⲆⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔΔΔΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆᐃⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃΔΔΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔⲆᐃᐃⵠⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔΔⲆΔⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠⲆⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⵠⵠΔᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠΔⲆⲆΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⲆⵠⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        Δᐃⵠ: Δᐃ.ᐃᐃΔΔⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ⲆΔⲆΔᐃΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆᐃⵠΔⲆⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔⵠΔⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        Δᐃⵠ: Δᐃ.ⵠΔⵠᐃⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃⵠⵠⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠⲆⲆΔΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆᐃⲆⵠᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        Δᐃⵠ: Δᐃ.ᐃΔᐃΔᐃᐃⵠ,
        ΔᐃⲆ: Δᐃ.ΔᐃΔᐃᐃΔⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠΔΔᐃΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔΔΔΔΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        Δᐃⵠ: Δᐃ.ⲆΔⵠⲆᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃᐃᐃΔᐃⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃⲆᐃⵠⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⲆⲆⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        Δᐃⵠ: Δᐃ.ΔΔⲆⵠⲆΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔⵠⵠⲆᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃΔᐃⵠⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔⲆⲆΔⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        Δᐃⵠ: Δᐃ.ⵠⵠΔⵠⲆΔⲆ,
        ΔᐃⲆ: Δᐃ.ΔⵠⵠⵠⵠΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔⵠΔⲆⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃΔΔᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        Δᐃⵠ: Δᐃ.ΔⵠⲆⲆⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆᐃⵠⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⵠⵠᐃΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⵠⵠᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠⵠᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠΔⵠⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆΔᐃΔΔⵠ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠᐃⵠⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        Δᐃⵠ: Δᐃ.ΔⲆᐃⵠⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃΔᐃⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠᐃᐃᐃⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃⲆⵠᐃⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        Δᐃⵠ: Δᐃ.ᐃΔᐃΔᐃΔⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆⵠᐃⲆΔᐃ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠΔᐃⲆᐃⵠ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔⵠⵠⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        Δᐃⵠ: Δᐃ.ΔᐃⲆⵠᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔΔᐃⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃⵠⵠΔΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⵠᐃΔᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        Δᐃⵠ: Δᐃ.ᐃΔᐃⲆⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔⵠⲆᐃⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔⵠⵠⲆᐃᐃⲆ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔΔΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        Δᐃⵠ: Δᐃ.ΔΔⲆⵠᐃⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆΔΔⵠⵠⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔⲆΔΔᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⲆΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        Δᐃⵠ: Δᐃ.ⵠⵠᐃΔⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃⵠΔⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆᐃⲆⲆᐃΔ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⲆΔⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        Δᐃⵠ: Δᐃ.ⲆᐃΔΔⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔⲆⵠⲆⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ᐃᐃⵠⵠⲆΔᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆᐃᐃᐃⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        Δᐃⵠ: Δᐃ.ΔΔᐃⵠΔⲆᐃ,
        ΔᐃⲆ: Δᐃ.ΔⲆⲆΔᐃΔⲆ,
        ᐃⵠΔⲆ: Δᐃ.ⵠᐃΔᐃΔⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆΔΔⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        Δᐃⵠ: Δᐃ.ΔᐃΔⲆⵠΔⵠ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆᐃⵠⲆⲆ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃᐃᐃⲆᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔΔⲆⲆⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        Δᐃⵠ: Δᐃ.ᐃΔΔΔⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⲆΔΔᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃᐃΔᐃⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ΔᐃⲆΔΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        Δᐃⵠ: Δᐃ.ⲆⵠⲆⵠᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠⵠᐃⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔⵠⲆⵠⲆΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⵠⵠΔΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        Δᐃⵠ: Δᐃ.ᐃⲆᐃᐃΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⲆΔⲆⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⵠⵠⲆᐃⵠⵠ,
        ᐃⲆⲆΔ: Δᐃ.ⲆΔⲆⵠⲆᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠᐃΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠΔⲆⲆΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃᐃⲆⲆⵠⲆ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠⲆΔᐃⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃΔⵠᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⵠΔΔⲆⵠᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠⲆΔΔⵠΔ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔⲆΔⲆⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        Δᐃⵠ: Δᐃ.ⲆΔΔΔᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠⲆⲆᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⲆⲆⵠⵠⲆᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠΔΔᐃΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        Δᐃⵠ: Δᐃ.ⵠⵠᐃΔⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃᐃΔⵠⵠ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆⲆⵠΔᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ΔⵠᐃⲆᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠᐃΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔΔⵠⲆⵠ,
        ᐃⵠΔⲆ: Δᐃ.ΔᐃΔΔΔᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⲆⵠⲆⵠⵠⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        Δᐃⵠ: Δᐃ.ΔᐃⵠⵠⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⵠΔᐃᐃΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆᐃⵠⲆΔⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆᐃⲆⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        Δᐃⵠ: Δᐃ.ΔᐃᐃΔⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠⲆΔΔΔ,
        ᐃⵠΔⲆ: Δᐃ.ᐃΔᐃⲆⵠⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔⵠⵠⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        Δᐃⵠ: Δᐃ.ΔΔΔᐃᐃΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔⲆΔᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⲆᐃⲆᐃⲆⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆᐃⵠⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        Δᐃⵠ: Δᐃ.ΔⵠᐃΔΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ΔⵠΔᐃⲆⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆⵠⵠΔⲆΔΔ,
        ᐃⲆⲆΔ: Δᐃ.ᐃΔΔΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        Δᐃⵠ: Δᐃ.ᐃΔⲆⵠⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⲆΔⵠⵠΔ,
        ᐃⵠΔⲆ: Δᐃ.ⲆΔᐃⵠΔⵠᐃ,
        ᐃⲆⲆΔ: Δᐃ.ⵠⲆⵠᐃΔΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        Δᐃⵠ: Δᐃ.ᐃⲆⵠⲆⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ΔΔΔᐃⲆᐃᐃ,
        ᐃⵠΔⲆ: Δᐃ.ᐃⵠⲆΔᐃΔⲆ,
        ᐃⲆⲆΔ: Δᐃ.ᐃᐃᐃᐃⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        Δᐃⵠ: Δᐃ.ᐃΔᐃΔⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.Ⲇⵠᐃⵠⵠⵠᐃ,
        ᐃⵠΔⲆ: Δᐃ.ⵠⲆᐃⲆⲆᐃᐃ,
        ᐃⲆⲆΔ: Δᐃ.ᐃⲆᐃⵠᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ,
        ᐃⲆⵠ: "OmarJr13",
        name: "Blob Skin"
      }],
      ᐃᐃⵠΔ: [{
        id: 0,
        Δᐃⵠ: Δᐃ.ⲆⵠⲆΔⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔΔᐃⲆⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        Δᐃⵠ: Δᐃ.ⵠⵠΔΔᐃᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⵠΔᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        Δᐃⵠ: Δᐃ.ⵠΔⲆⵠΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃⲆᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        Δᐃⵠ: Δᐃ.ᐃⵠⲆⲆΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⲆΔⵠⵠᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        Δᐃⵠ: Δᐃ.ᐃΔΔⲆΔΔⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠⲆⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        Δᐃⵠ: Δᐃ.ⵠΔⵠⵠᐃᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⵠΔⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        Δᐃⵠ: Δᐃ.ⵠΔΔⲆⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.Ⲇᐃⵠⵠᐃⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠⲆⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃᐃΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        Δᐃⵠ: Δᐃ.ᐃⲆΔⵠⲆΔⲆ,
        ΔᐃⲆ: Δᐃ.ⲆΔΔᐃⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        Δᐃⵠ: Δᐃ.ⵠΔⵠⲆᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⲆᐃⲆⲆⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        Δᐃⵠ: Δᐃ.ΔⵠᐃᐃⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⲆⵠΔΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        Δᐃⵠ: Δᐃ.ΔⵠΔΔⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠⵠΔΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠⵠΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⲆΔⲆᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        Δᐃⵠ: Δᐃ.ⲆⲆΔΔⲆᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠⲆᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        Δᐃⵠ: Δᐃ.ᐃⲆⵠⲆΔⲆΔ,
        ΔᐃⲆ: Δᐃ.ΔⲆΔⲆⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠΔⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⲆⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        Δᐃⵠ: Δᐃ.ᐃᐃΔⲆᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃⵠᐃⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        Δᐃⵠ: Δᐃ.ΔⵠⲆⲆΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠᐃⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠⵠΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠΔⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        Δᐃⵠ: Δᐃ.ΔΔⲆΔⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔΔΔᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⵠᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃΔΔΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃⵠⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔⵠⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        Δᐃⵠ: Δᐃ.ⵠⲆΔᐃΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠΔⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠᐃᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠΔᐃΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        Δᐃⵠ: Δᐃ.ⵠΔⵠⲆⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠᐃⵠⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        Δᐃⵠ: Δᐃ.ⲆⲆΔΔᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃⵠΔⵠΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        Δᐃⵠ: Δᐃ.ⲆⲆΔⵠⲆⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠΔⲆᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃΔᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⲆΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        Δᐃⵠ: Δᐃ.ΔᐃⵠΔⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        Δᐃⵠ: Δᐃ.ΔΔⵠⵠⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆⲆΔⵠᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        Δᐃⵠ: Δᐃ.ΔⵠⵠᐃᐃⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠᐃⲆΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        Δᐃⵠ: Δᐃ.ΔᐃⵠᐃᐃⵠΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆⵠⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        Δᐃⵠ: Δᐃ.ⲆⵠΔᐃⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠᐃⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠᐃΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆⲆⵠᐃΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        Δᐃⵠ: Δᐃ.ⵠᐃΔΔⲆᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆΔⲆⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        Δᐃⵠ: Δᐃ.ⵠⵠΔᐃⲆΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆΔᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆⵠⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠΔⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆΔⲆᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠΔⵠᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        Δᐃⵠ: Δᐃ.ⲆΔΔᐃΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆΔΔᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠᐃᐃΔⲆ,
        ΔᐃⲆ: Δᐃ.ΔⵠΔⲆⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        Δᐃⵠ: Δᐃ.ⲆΔⵠΔᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃΔΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        Δᐃⵠ: Δᐃ.ᐃΔⵠⵠΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⲆᐃᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        Δᐃⵠ: Δᐃ.ⲆⵠⲆⲆⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆᐃΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        Δᐃⵠ: Δᐃ.ᐃᐃΔᐃⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠⲆΔⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        Δᐃⵠ: Δᐃ.ΔⵠΔΔⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔⵠⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        Δᐃⵠ: Δᐃ.ΔΔΔⵠΔⵠᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃᐃᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        Δᐃⵠ: Δᐃ.ΔⵠΔΔΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠⲆᐃΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        Δᐃⵠ: Δᐃ.ᐃΔⲆⵠⵠΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⲆᐃⲆΔᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        Δᐃⵠ: Δᐃ.ⵠΔⵠⵠᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⲆⵠⵠⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠᐃⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔⵠⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠⵠᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⵠᐃΔᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        Δᐃⵠ: Δᐃ.ΔⵠᐃⵠΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠⵠᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        Δᐃⵠ: Δᐃ.ΔᐃΔΔⲆᐃᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔⵠᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        Δᐃⵠ: Δᐃ.ᐃΔΔᐃᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃⲆⲆᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠΔⲆⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆⲆⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆⲆᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃⲆⲆᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        Δᐃⵠ: Δᐃ.ΔⵠⵠⵠᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ΔΔΔᐃⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        Δᐃⵠ: Δᐃ.ⲆΔⲆΔΔΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⲆΔⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠᐃΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⲆⲆΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        Δᐃⵠ: Δᐃ.ⲆⵠᐃᐃⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔᐃᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        Δᐃⵠ: Δᐃ.ᐃΔΔⲆⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆᐃⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠΔΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃᐃⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        Δᐃⵠ: Δᐃ.ⲆⵠⲆⲆⲆΔᐃ,
        ΔᐃⲆ: Δᐃ.ⲆΔⵠΔΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        Δᐃⵠ: Δᐃ.ⲆⵠᐃᐃⲆⲆᐃ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃᐃΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        Δᐃⵠ: Δᐃ.ᐃⵠⵠᐃⲆⲆᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃⵠⵠΔΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        Δᐃⵠ: Δᐃ.ⲆΔᐃΔⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔΔⲆⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃΔⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔΔⲆⲆΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        Δᐃⵠ: Δᐃ.ⵠᐃΔⲆΔⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⲆΔⵠⲆᐃᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        Δᐃⵠ: Δᐃ.ᐃΔⵠⵠᐃΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⲆⲆΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        Δᐃⵠ: Δᐃ.ⲆΔΔⵠΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        Δᐃⵠ: Δᐃ.ΔⲆⲆᐃᐃⲆⲆ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃⲆⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        Δᐃⵠ: Δᐃ.ᐃⵠΔᐃΔⵠΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⵠΔΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠΔⲆⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆⵠⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        Δᐃⵠ: Δᐃ.ΔᐃⵠⲆΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠᐃⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃᐃⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ΔⲆΔᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        Δᐃⵠ: Δᐃ.ΔⲆⲆⵠᐃΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃⲆᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠΔᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃⵠⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        Δᐃⵠ: Δᐃ.ΔΔⵠΔⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃᐃΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        Δᐃⵠ: Δᐃ.ΔΔⵠⲆⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠⵠᐃΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        Δᐃⵠ: Δᐃ.ᐃΔⲆⵠΔⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔΔᐃΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        Δᐃⵠ: Δᐃ.ⵠᐃΔⲆᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ΔᐃⵠⲆᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        Δᐃⵠ: Δᐃ.ΔᐃΔΔΔⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔⵠᐃΔᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer Bag"
      }],
      ᐃⵠΔⵠⵠ: [{
        id: 0,
        Δᐃⵠ: Δᐃ.ᐃΔⲆΔⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⵠᐃΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠᐃⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        Δᐃⵠ: Δᐃ.ΔΔΔⵠᐃΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔᐃⵠᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        Δᐃⵠ: Δᐃ.ⵠⲆΔΔⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⲆΔⲆⵠΔΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        Δᐃⵠ: Δᐃ.ΔΔⵠᐃⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⲆΔⲆⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        Δᐃⵠ: Δᐃ.ΔᐃⵠᐃⵠΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⲆⲆΔΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆΔᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃΔΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        Δᐃⵠ: Δᐃ.ᐃΔᐃⵠᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃΔⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        Δᐃⵠ: Δᐃ.ⲆⵠⲆⲆⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⵠⵠΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        Δᐃⵠ: Δᐃ.ᐃⵠⵠᐃΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔΔⲆᐃⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        Δᐃⵠ: Δᐃ.ΔΔⲆΔⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔᐃⲆⲆⵠⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        Δᐃⵠ: Δᐃ.ⲆⲆΔΔⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆΔᐃⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        Δᐃⵠ: Δᐃ.ΔΔⲆΔᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        Δᐃⵠ: Δᐃ.ⲆⵠΔⲆⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        Δᐃⵠ: Δᐃ.ⲆΔΔⲆⵠΔⵠ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠᐃΔΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        Δᐃⵠ: Δᐃ.ΔᐃⵠΔΔⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠⲆⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        Δᐃⵠ: Δᐃ.ⲆΔΔⲆⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃΔⲆᐃⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        Δᐃⵠ: Δᐃ.ΔⲆᐃⵠⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠⵠⵠΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        Δᐃⵠ: Δᐃ.ⵠⲆⲆΔⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃᐃⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆⵠⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆΔᐃⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        Δᐃⵠ: Δᐃ.ⲆⵠᐃᐃΔⲆⵠ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆΔΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        Δᐃⵠ: Δᐃ.ΔⲆⲆⵠΔⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃⲆⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        Δᐃⵠ: Δᐃ.ΔⲆᐃⲆⲆⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆⵠⵠΔᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        Δᐃⵠ: Δᐃ.ⲆⲆΔⲆⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆᐃΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠⵠⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        Δᐃⵠ: Δᐃ.ᐃⲆⵠⲆΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔΔⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        Δᐃⵠ: Δᐃ.ΔⲆᐃᐃⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔᐃⵠⵠΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆᐃⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠᐃⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠⲆΔⲆᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⲆⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        Δᐃⵠ: Δᐃ.ΔᐃΔⵠⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆᐃⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠⲆⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆⲆᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        Δᐃⵠ: Δᐃ.ⲆⵠᐃᐃⲆΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⵠⲆᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆⵠⲆⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        Δᐃⵠ: Δᐃ.ⵠᐃΔⲆⲆⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠⵠⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        Δᐃⵠ: Δᐃ.ΔΔΔⵠⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆΔᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        Δᐃⵠ: Δᐃ.ⵠⵠᐃⵠΔᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        Δᐃⵠ: Δᐃ.ΔⲆⵠⵠᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆΔΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        Δᐃⵠ: Δᐃ.ΔⲆΔΔΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔΔⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        Δᐃⵠ: Δᐃ.ᐃΔⲆᐃΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠⵠΔⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        Δᐃⵠ: Δᐃ.ᐃⲆΔΔⵠⲆⲆ,
        ΔᐃⲆ: Δᐃ.ΔᐃⲆᐃⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        Δᐃⵠ: Δᐃ.ⲆΔⲆⵠⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        Δᐃⵠ: Δᐃ.ⵠᐃᐃᐃᐃⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⵠΔΔᐃΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        Δᐃⵠ: Δᐃ.ⲆΔΔΔᐃⵠΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔᐃᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        Δᐃⵠ: Δᐃ.ⲆᐃΔΔⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⵠΔⲆⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        Δᐃⵠ: Δᐃ.ᐃΔⵠᐃΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔⲆΔᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        Δᐃⵠ: Δᐃ.ⵠᐃᐃᐃⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⲆΔⵠⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        Δᐃⵠ: Δᐃ.ΔⲆᐃⲆᐃᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔⵠᐃΔΔⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        Δᐃⵠ: Δᐃ.ᐃᐃⲆⲆⵠᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃᐃᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃΔⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⵠⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        Δᐃⵠ: Δᐃ.ⲆⵠΔΔⲆΔⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⲆΔⵠᐃΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        Δᐃⵠ: Δᐃ.ΔΔⲆᐃᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠΔⲆᐃΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        Δᐃⵠ: Δᐃ.ᐃΔⵠΔᐃᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃⵠⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        Δᐃⵠ: Δᐃ.ⲆΔΔⵠⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃΔⲆᐃᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠⵠⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⲆΔᐃⵠⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        Δᐃⵠ: Δᐃ.ⵠⵠΔΔᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ⲆΔᐃᐃⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        Δᐃⵠ: Δᐃ.ΔΔΔΔⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔΔΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆⲆⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⵠⲆⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        Δᐃⵠ: Δᐃ.ᐃⵠⵠΔᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆᐃⲆⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        Δᐃⵠ: Δᐃ.ᐃⲆᐃΔᐃᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃᐃᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃΔⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆΔⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        Δᐃⵠ: Δᐃ.ᐃⵠⲆᐃᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠⵠᐃⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        Δᐃⵠ: Δᐃ.ΔⵠᐃΔᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆⵠᐃᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃΔⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃΔⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃⲆⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⲆΔᐃᐃⲆᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        Δᐃⵠ: Δᐃ.ΔᐃⵠΔᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃⲆⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        Δᐃⵠ: Δᐃ.ⵠΔᐃΔᐃΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⲆᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        Δᐃⵠ: Δᐃ.ⵠⲆΔΔⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆᐃⵠⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        Δᐃⵠ: Δᐃ.ᐃⲆⲆⵠⲆΔᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔᐃⲆΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        Δᐃⵠ: Δᐃ.ΔⵠΔⲆᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃⵠⵠⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        Δᐃⵠ: Δᐃ.ⵠⵠΔᐃΔⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆΔⲆⲆⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        Δᐃⵠ: Δᐃ.ᐃⵠΔⲆΔⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃΔⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        Δᐃⵠ: Δᐃ.ᐃⲆΔⵠΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆⲆΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        Δᐃⵠ: Δᐃ.ᐃⵠΔᐃᐃΔΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⵠⲆΔⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        Δᐃⵠ: Δᐃ.ⵠΔΔⲆΔΔΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠΔⵠⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        Δᐃⵠ: Δᐃ.ᐃΔΔΔΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ΔⲆⲆᐃⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃⵠⲆⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆⵠΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        Δᐃⵠ: Δᐃ.ΔⲆΔⲆⲆⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔΔⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        Δᐃⵠ: Δᐃ.ᐃΔⵠⵠⲆⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⵠΔⵠᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠⲆᐃⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠⲆΔⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ᐃᐃΔΔᐃ: [{
        id: 0,
        Δᐃⵠ: Δᐃ.ΔⲆΔⲆⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔΔⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        Δᐃⵠ: Δᐃ.ⲆΔⵠⵠⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⲆᐃᐃᐃᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        Δᐃⵠ: Δᐃ.ΔⲆⲆΔⲆᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔΔⲆⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃΔᐃⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔⵠᐃΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        Δᐃⵠ: Δᐃ.ᐃᐃⲆᐃⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃⵠⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        Δᐃⵠ: Δᐃ.ⵠⵠΔᐃⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆΔⵠⵠⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        Δᐃⵠ: Δᐃ.ᐃⲆᐃⵠᐃΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃᐃΔΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        Δᐃⵠ: Δᐃ.ⲆᐃΔⵠⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆΔᐃΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        Δᐃⵠ: Δᐃ.ⵠΔᐃΔⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔⲆⵠᐃᐃⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠΔΔΔΔ,
        ΔᐃⲆ: Δᐃ.ΔΔΔⵠᐃⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        Δᐃⵠ: Δᐃ.ᐃΔⵠΔΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⲆⵠⲆᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        Δᐃⵠ: Δᐃ.ⵠⲆⲆΔⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔⲆⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        Δᐃⵠ: Δᐃ.ΔᐃⲆⵠⵠΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆᐃⵠⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        Δᐃⵠ: Δᐃ.ⵠⲆΔΔΔⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⲆᐃⵠⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        Δᐃⵠ: Δᐃ.ⵠⲆΔⵠⲆᐃⵠ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        Δᐃⵠ: Δᐃ.ᐃᐃⲆⲆᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔΔⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        Δᐃⵠ: Δᐃ.ⲆⲆΔΔⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠᐃΔⲆⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        Δᐃⵠ: Δᐃ.ⲆΔΔⵠⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔᐃΔΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆΔΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠⲆⲆⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        Δᐃⵠ: Δᐃ.ᐃⵠⲆⲆΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔᐃⵠΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆⵠⵠΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆⵠᐃᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        Δᐃⵠ: Δᐃ.ⵠⵠⵠᐃΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠⵠᐃⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠΔΔⲆᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔⵠᐃⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        Δᐃⵠ: Δᐃ.ΔⲆⲆΔΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃⵠⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        Δᐃⵠ: Δᐃ.ΔᐃⵠΔᐃⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔⲆΔⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠⲆⵠⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⵠΔΔᐃⵠΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        Δᐃⵠ: Δᐃ.ᐃⲆΔⲆⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠΔΔⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠΔⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠⲆⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        Δᐃⵠ: Δᐃ.ΔᐃᐃⲆΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        Δᐃⵠ: Δᐃ.ΔΔⵠⲆⲆᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠΔⲆᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        Δᐃⵠ: Δᐃ.ᐃⵠⵠⲆⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔΔΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        Δᐃⵠ: Δᐃ.ᐃⵠⲆΔⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ⲆΔΔⵠⵠΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        Δᐃⵠ: Δᐃ.ⵠⵠᐃΔᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠⲆⵠⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        Δᐃⵠ: Δᐃ.ᐃⵠΔⲆΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔᐃⲆⵠᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        Δᐃⵠ: Δᐃ.ⲆⲆΔⲆⲆᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⲆΔⲆΔᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        Δᐃⵠ: Δᐃ.ⲆΔΔⵠΔⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠⵠⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        Δᐃⵠ: Δᐃ.ⵠΔᐃᐃⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆᐃⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃⲆΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⵠⲆᐃᐃⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        Δᐃⵠ: Δᐃ.ΔⵠⵠⲆⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔⲆⵠⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃΔⲆΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆΔⲆⲆᐃⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠΔᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔⲆΔΔⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        Δᐃⵠ: Δᐃ.ΔᐃᐃΔⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆⵠⵠᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        Δᐃⵠ: Δᐃ.ⵠᐃΔᐃᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ΔⲆⲆⵠⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        Δᐃⵠ: Δᐃ.ⲆΔⵠⵠⵠΔⲆ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃᐃΔⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃⲆᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆΔⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠᐃΔⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠΔᐃⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        Δᐃⵠ: Δᐃ.ⵠⲆΔⲆᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃΔΔⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        Δᐃⵠ: Δᐃ.ⵠⲆΔⵠⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⵠⵠⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        Δᐃⵠ: Δᐃ.ⲆⲆΔⵠΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔᐃᐃⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        Δᐃⵠ: Δᐃ.ⵠᐃᐃᐃⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆᐃⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cursed Book"
      }],
      ⲆΔΔⲆⲆ: [{
        id: 0,
        Δᐃⵠ: Δᐃ.ᐃⲆⵠΔᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠᐃᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆⵠᐃᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃΔⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔᐃᐃⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        Δᐃⵠ: Δᐃ.ΔⵠⲆΔΔΔΔ,
        ΔᐃⲆ: Δᐃ.ΔᐃⵠⲆΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        Δᐃⵠ: Δᐃ.ⲆᐃΔⲆⵠⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃᐃⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃΔⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⵠᐃΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⵠᐃᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆΔΔᐃⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃⲆⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠᐃᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        Δᐃⵠ: Δᐃ.ΔⵠᐃⵠⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠⲆΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        Δᐃⵠ: Δᐃ.ᐃⵠⲆⲆⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔᐃΔⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        Δᐃⵠ: Δᐃ.ⵠⲆΔⲆⵠᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔⲆⲆΔΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        Δᐃⵠ: Δᐃ.ΔᐃⵠᐃⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔⲆⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        Δᐃⵠ: Δᐃ.ΔΔᐃⲆᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⲆⵠᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        Δᐃⵠ: Δᐃ.ΔᐃᐃⵠᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⵠΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆᐃⲆⲆ,
        ᐃⲆⵠ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        Δᐃⵠ: Δᐃ.ⲆᐃΔΔΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃⲆⵠⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        Δᐃⵠ: Δᐃ.ⵠᐃΔΔΔⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⲆⲆΔΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆⵠⲆᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃⲆⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        Δᐃⵠ: Δᐃ.ⲆΔⵠΔⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔΔΔⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃⵠⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ΔᐃΔⵠⲆΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        Δᐃⵠ: Δᐃ.ΔⲆⵠΔΔᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⵠⵠΔⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⲆⵠΔᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        Δᐃⵠ: Δᐃ.ΔᐃΔⲆⵠⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⲆΔᐃΔΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        Δᐃⵠ: Δᐃ.ⲆΔⲆΔΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆΔⲆᐃⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃΔΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⵠⵠΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        Δᐃⵠ: Δᐃ.ΔⲆⲆⲆⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        Δᐃⵠ: Δᐃ.ΔΔᐃᐃⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆᐃⲆᐃⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        Δᐃⵠ: Δᐃ.ΔⵠⵠᐃΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆΔⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        Δᐃⵠ: Δᐃ.ⲆⵠΔⲆᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆⲆΔΔⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⲆᐃⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠⵠⲆⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠⲆΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃΔΔΔᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠᐃⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.Δᐃⵠⵠᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠᐃⲆΔΔ,
        ΔᐃⲆ: Δᐃ.ⲆᐃᐃᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃΔⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠΔⵠⲆⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔΔΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        Δᐃⵠ: Δᐃ.ᐃⲆᐃᐃⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔᐃⵠⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃⲆΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔⲆⲆⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        Δᐃⵠ: Δᐃ.ΔⲆᐃᐃΔΔⲆ,
        ΔᐃⲆ: Δᐃ.ⵠΔΔⵠⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        Δᐃⵠ: Δᐃ.ⲆΔΔⵠᐃⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆⵠⲆⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        Δᐃⵠ: Δᐃ.ΔⲆⵠᐃΔᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⵠⵠⵠⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        Δᐃⵠ: Δᐃ.ⵠⲆⵠᐃΔΔΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠⵠⲆΔΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        Δᐃⵠ: Δᐃ.ⵠᐃᐃⲆΔⵠᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔⵠΔΔⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠΔᐃᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃⵠΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        Δᐃⵠ: Δᐃ.ᐃᐃⲆΔⲆᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⲆⲆⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        Δᐃⵠ: Δᐃ.ΔΔᐃⲆΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ⲆⲆΔΔⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        Δᐃⵠ: Δᐃ.ᐃΔᐃⲆᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃⲆΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        Δᐃⵠ: Δᐃ.ΔⲆⲆΔⵠΔⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠΔⲆⵠΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        Δᐃⵠ: Δᐃ.ΔᐃⲆᐃⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃⲆΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        Δᐃⵠ: Δᐃ.ᐃⲆⲆⵠⵠⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃᐃⵠᐃᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        Δᐃⵠ: Δᐃ.ᐃΔᐃⵠⲆᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⵠⵠⵠᐃᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        Δᐃⵠ: Δᐃ.ⲆΔΔΔᐃΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆⲆΔᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆⲆΔⵠᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⵠᐃᐃⵠⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        Δᐃⵠ: Δᐃ.ⲆΔⲆΔⵠⲆⲆ,
        ΔᐃⲆ: Δᐃ.ⲆΔᐃⲆⵠⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        Δᐃⵠ: Δᐃ.ΔᐃⲆⵠⵠⲆⲆ,
        ΔᐃⲆ: Δᐃ.Δⵠⵠⵠⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠⲆⲆⲆⵠ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.Δⵠᐃᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠΔΔⲆⵠ,
        ΔᐃⲆ: Δᐃ.ᐃΔⲆⲆΔⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        Δᐃⵠ: Δᐃ.ΔⵠⵠⵠⲆⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⲆⲆⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        Δᐃⵠ: Δᐃ.ΔⵠΔᐃᐃⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠⵠΔⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        Δᐃⵠ: Δᐃ.ᐃⵠᐃᐃⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃᐃΔᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠᐃᐃᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        Δᐃⵠ: Δᐃ.ⵠⵠᐃΔⵠΔⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃᐃΔΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        Δᐃⵠ: Δᐃ.ΔⲆⵠⲆΔΔⲆ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆᐃⲆΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        Δᐃⵠ: Δᐃ.ⲆⲆΔᐃᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ᐃⵠⵠᐃⵠΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        Δᐃⵠ: Δᐃ.ΔⵠΔⵠΔⵠⲆ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃⲆᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        Δᐃⵠ: Δᐃ.ΔⵠⲆᐃⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆⵠΔΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        Δᐃⵠ: Δᐃ.ⲆᐃⵠⲆΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⲆᐃᐃᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        Δᐃⵠ: Δᐃ.ΔⵠᐃΔⲆᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔΔΔΔⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        Δᐃⵠ: Δᐃ.ⲆΔΔΔⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔΔⲆᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        Δᐃⵠ: Δᐃ.ᐃⵠⵠⵠΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃᐃᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⲆⲆᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        Δᐃⵠ: Δᐃ.ΔΔⲆᐃΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⵠΔΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        Δᐃⵠ: Δᐃ.ᐃᐃΔⲆΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠⵠᐃⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠΔⵠΔᐃ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⲆᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        Δᐃⵠ: Δᐃ.ΔⵠⵠᐃΔⲆΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠⲆᐃΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        Δᐃⵠ: Δᐃ.ᐃⵠⲆⲆᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⲆΔᐃᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        Δᐃⵠ: Δᐃ.ⵠᐃΔⲆΔⵠΔ,
        ΔᐃⲆ: Δᐃ.ⵠᐃᐃᐃΔⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆᐃᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃⲆΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        Δᐃⵠ: Δᐃ.ⲆᐃⲆⲆᐃⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        Δᐃⵠ: Δᐃ.ⵠΔᐃΔⲆᐃΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠᐃᐃΔⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        Δᐃⵠ: Δᐃ.ΔⲆΔⵠΔⵠᐃ,
        ΔᐃⲆ: Δᐃ.ΔΔⲆⲆᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        Δᐃⵠ: Δᐃ.ⲆⲆⲆⵠΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ᐃΔⲆⵠᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        Δᐃⵠ: Δᐃ.ⵠΔᐃᐃⲆᐃᐃ,
        ΔᐃⲆ: Δᐃ.ΔᐃΔⵠᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⵠⲆᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⲆⵠⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        Δᐃⵠ: Δᐃ.ⲆᐃᐃᐃᐃΔᐃ,
        ΔᐃⲆ: Δᐃ.ⲆⵠᐃᐃⲆΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        Δᐃⵠ: Δᐃ.ⵠᐃΔⵠⵠᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃⲆΔⵠⲆᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔⲆΔ,
        ᐃⲆⵠ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        Δᐃⵠ: Δᐃ.ⲆᐃΔⵠⵠΔΔ,
        ΔᐃⲆ: Δᐃ.ΔᐃⵠᐃⲆΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        Δᐃⵠ: Δᐃ.ΔᐃᐃⲆⵠⲆᐃ,
        ΔᐃⲆ: Δᐃ.ᐃΔⵠⵠΔᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        Δᐃⵠ: Δᐃ.ⲆⵠᐃᐃᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆⲆⵠΔᐃⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        Δᐃⵠ: Δᐃ.ᐃⲆⲆᐃΔⲆⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⲆⲆⵠᐃᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃΔⲆΔΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔⲆⵠⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        Δᐃⵠ: Δᐃ.ⵠΔⲆΔⲆᐃⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃⲆⲆⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        Δᐃⵠ: Δᐃ.ⵠᐃⵠⵠΔᐃⵠ,
        ΔᐃⲆ: Δᐃ.ⵠⲆⲆΔᐃⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        Δᐃⵠ: Δᐃ.Δⵠᐃⵠᐃᐃᐃ,
        ΔᐃⲆ: Δᐃ.ⵠⲆᐃᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        Δᐃⵠ: Δᐃ.ᐃᐃⵠΔᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ⲆΔΔᐃⲆᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ᐃᐃᐃⵠ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        Δᐃⵠ: Δᐃ.ᐃⲆⲆΔⵠΔⲆ,
        ΔᐃⲆ: Δᐃ.ⲆΔΔⲆᐃΔⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆΔᐃᐃΔ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔⲆⵠⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        Δᐃⵠ: Δᐃ.ⵠΔΔᐃⲆᐃⲆ,
        ΔᐃⲆ: Δᐃ.ᐃⵠᐃΔᐃᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        Δᐃⵠ: Δᐃ.ⲆΔΔᐃᐃⵠⲆ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃⲆⵠⵠⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        Δᐃⵠ: Δᐃ.ⵠⲆⲆᐃⵠⵠⵠ,
        ΔᐃⲆ: Δᐃ.ΔⲆᐃⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        Δᐃⵠ: Δᐃ.ΔΔᐃᐃⲆⵠⲆ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        Δᐃⵠ: Δᐃ.ᐃⲆⲆᐃⵠΔⵠ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠⲆⵠᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        Δᐃⵠ: Δᐃ.ⵠⵠⲆᐃⲆⲆⲆ,
        ΔᐃⲆ: Δᐃ.Δⵠⵠⵠⵠᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        Δᐃⵠ: Δᐃ.ΔⲆⵠᐃΔΔΔ,
        ΔᐃⲆ: Δᐃ.ⲆΔⲆΔⵠⵠᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        Δᐃⵠ: Δᐃ.ⵠᐃΔⲆΔΔⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃΔⵠⵠᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        Δᐃⵠ: Δᐃ.Ⲇⵠⵠⵠᐃⵠⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⲆΔᐃⲆⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        Δᐃⵠ: Δᐃ.ΔΔⲆᐃᐃΔΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔΔΔᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        Δᐃⵠ: Δᐃ.ᐃᐃⲆⲆᐃᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆΔΔⵠᐃⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        Δᐃⵠ: Δᐃ.ⵠΔⲆΔⵠⵠΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔⵠⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        Δᐃⵠ: Δᐃ.ⲆⵠⵠΔⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠⲆΔⲆΔⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ⲆⵠΔⲆ,
        ᐃⲆⵠ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        Δᐃⵠ: Δᐃ.ᐃᐃᐃΔᐃⲆᐃ,
        ΔᐃⲆ: Δᐃ.ⲆᐃᐃᐃᐃΔΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        Δᐃⵠ: Δᐃ.ⲆⲆᐃⲆᐃⲆΔ,
        ΔᐃⲆ: Δᐃ.ΔⵠΔⵠⲆᐃⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        Δᐃⵠ: Δᐃ.ᐃΔⵠᐃⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ⲆⲆᐃⲆⵠᐃΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        Δᐃⵠ: Δᐃ.ΔⲆⲆⵠⵠᐃⲆ,
        ΔᐃⲆ: Δᐃ.ⲆᐃⲆⵠΔⲆΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃΔⲆⵠΔ,
        ΔᐃⲆ: Δᐃ.ᐃΔᐃᐃΔⲆⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        Δᐃⵠ: Δᐃ.ⲆⲆⵠⲆΔΔᐃ,
        ΔᐃⲆ: Δᐃ.ΔⲆⵠⲆᐃΔᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        Δᐃⵠ: Δᐃ.ⵠⲆᐃᐃⵠᐃⵠ,
        ΔᐃⲆ: Δᐃ.ΔᐃᐃΔⵠⵠΔ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        Δᐃⵠ: Δᐃ.ᐃΔⲆⲆⵠⲆⵠ,
        ΔᐃⲆ: Δᐃ.ⵠᐃⵠⲆⲆⲆᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        Δᐃⵠ: Δᐃ.ᐃⵠⵠΔⲆⵠᐃ,
        ΔᐃⲆ: Δᐃ.ᐃⲆᐃΔΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        Δᐃⵠ: Δᐃ.ΔᐃⵠᐃⵠⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠⵠΔⲆΔᐃⵠ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        Δᐃⵠ: Δᐃ.ⲆΔⵠᐃⲆⲆΔ,
        ΔᐃⲆ: Δᐃ.ⵠΔⵠⲆΔⵠⲆ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        Δᐃⵠ: Δᐃ.ΔᐃᐃⲆᐃΔⵠ,
        ΔᐃⲆ: Δᐃ.ᐃᐃⵠᐃᐃᐃᐃ,
        ⲆⲆΔ: ⵠⵠᐃ.ΔΔᐃΔᐃ,
        ᐃⲆⵠ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    Jf.ᐃᐃⲆᐃⵠΔΔ = ⲆⲆⵠⵠᐃⲆᐃ(ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ, 21);
    Jf.ᐃⵠᐃⲆᐃᐃᐃ = ⲆⲆⵠⵠᐃⲆᐃ(ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ, 20);
    Ⲇᐃ[255] = [];
    Ⲇᐃ[7] = [];
    Ⲇᐃ[250] = [];
    Ⲇᐃ[28] = [];
    Ⲇᐃ[29] = [];
    Ⲇᐃ[796] = [];
    for (var a = 0; a < ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ.length; a++) {
      Ⲇᐃ[255][a] = [ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[a].Δᐃⵠ, ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[a].ΔᐃⲆ];
      Ⲇᐃ[7][a] = [ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[a].ᐃⵠΔⲆ, ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[a].ᐃⲆⲆΔ];
    }
    for (a = 0; ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ.length > a; a++) {
      Ⲇᐃ[28][a] = [ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ[a].Δᐃⵠ, ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ[a].ΔᐃⲆ];
    }
    for (a = 0; ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ.length > a; a++) {
      Ⲇᐃ[250][a] = [ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ[a].Δᐃⵠ, ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ[a].ΔᐃⲆ];
    }
    for (a = 0; ⵠᐃⵠⵠ.ᐃᐃⵠΔ.length > a; a++) {
      Ⲇᐃ[29][a] = [ⵠᐃⵠⵠ.ᐃᐃⵠΔ[a].Δᐃⵠ, ⵠᐃⵠⵠ.ᐃᐃⵠΔ[a].ΔᐃⲆ];
    }
    for (a = 0; a < ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ.length; a++) {
      Ⲇᐃ[796][a] = [ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ[a].Δᐃⵠ, ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ[a].ΔᐃⲆ];
    }
  };
  const td = 9;
  const nd = 20;
  function od(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    id(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    ed(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function ad(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, e * (Math.PI * 2));
  }
  function rd(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var g = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var i = 1; i < c; i++) {
      g.push({
        x: Math.sin(i * f) * d,
        y: Math.cos(i * f) * d
      });
      var j = g.length;
      a.push(ᐃⵠⲆΔ.ⵠΔΔⵠᐃᐃΔ(g[j - 2], g[j - 1]));
    }
    a.push(ᐃⵠⲆΔ.ⵠΔΔⵠᐃᐃΔ(g[g.length - 1], g[0]));
    var k = a[a.length - 1];
    b.moveTo(k.x, k.y);
    for (i = 0; i < c; i++) {
      b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
    }
    b.closePath();
  }
  function sd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  function hd(b, c) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var j = b * 110;
    var a = i / 2;
    var k = j / 2;
    var m = b * 20;
    var h = b * 112;
    var l = b * 82;
    var g = h / 2;
    var n = l / 2;
    var d = b * 4;
    e.width = i;
    e.height = j;
    f.globalAlpha = 1;
    f.translate(a, k);
    id(f, -g, -n, h, l, m);
    ed(f, c, c, d);
    return e;
  }
  const ld = 2;
  function gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    $b(e, a * 26, a * 26, a * 9);
    ed(e, c[0]);
    $b(e, a * 56, a * 36, a * 9);
    ed(e, c[1]);
    $b(e, a * 40, a * 50, a * 9);
    ed(e, c[2]);
    e.globalAlpha = 1;
    $b(e, a * 26, a * 26, a * 5);
    ed(e, c[0]);
    $b(e, a * 56, a * 36, a * 5);
    ed(e, c[1]);
    $b(e, a * 40, a * 50, a * 5);
    ed(e, c[2]);
    return d;
  }
  function ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    $b(e, a * 11, a * 11, a * 10);
    ed(e, c[0]);
    e.globalAlpha = 0.7;
    $b(e, a * 11, a * 11, a * 7);
    ed(e, c[0]);
    e.globalAlpha = 1;
    $b(e, a * 11, a * 11, a * 4);
    ed(e, c[0]);
    return d;
  }
  function bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    ed(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    return d;
  }
  const dd = 1;
  function vd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    id(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    id(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    id(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    ed(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    id(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    ed(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    id(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    ed(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    ed(e, c[1]);
    return d;
  }
  function cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    id(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    id(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    id(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    ed(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    id(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    ed(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    id(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    ed(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    ed(e, c[1]);
    return d;
  }
  function md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    id(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    id(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    id(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    ed(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    ed(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    ed(e, c[3], c[1], a * 6);
    return d;
  }
  function pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    id(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    ed(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    id(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    ed(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    ed(e, c[5], c[6], a * 4);
    $b(e, a * 68, a * 111.29513549804688, a * 15);
    ed(e, c[7], c[8], a * 4);
    $b(e, a * 123, a * 111.29510498046875, a * 15);
    ed(e, c[7], c[8], a * 4);
    $b(e, a * 63, a * 106, a * 5);
    ed(e, c[9]);
    $b(e, a * 118, a * 106, a * 5);
    ed(e, c[9]);
    return d;
  }
  const Cd = 6;
  function Td(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    id(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    ed(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    ed(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    id(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    ed(d, b[0], b[0], a * 4);
    return c;
  }
  function fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    id(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    ed(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    id(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    return d;
  }
  function zd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 40;
    var a = b * 40;
    e.width = g;
    e.height = a;
    var i = g * b / 2;
    var j = b * a / 2;
    var k = b * 15;
    f.save();
    f.translate(i, j);
    f.globalAlpha = 1;
    $b(f, 0, 0, k);
    ed(f, d[0]);
    k = b * 5;
    i = b * 2;
    j = b * 1;
    f.translate(i, j);
    f.globalAlpha = 1;
    $b(f, 0, 0, k);
    ed(f, d[1]);
    f.restore();
    return e;
  }
  const yd = 2;
  function wd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    ed(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    ed(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    ed(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    ed(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    ed(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    ed(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    ed(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      ed(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      ed(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      ed(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    ed(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    ed(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    ed(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    ed(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    ed(g, Fl, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    ed(g, undefined, d[2], b * 4);
    $b(g, b * 63, b * 180, b * 15.231546211727817);
    ed(g, d[4]);
    $b(g, b * 121, b * 181, b * 15.652475842498529);
    ed(g, d[4]);
    $b(g, b * 58, b * 175, b * 5.656854249492381);
    ed(g, d[2]);
    $b(g, b * 116, b * 175, b * 5.656854249492381);
    ed(g, d[2]);
    return f;
  }
  const Pd = 0;
  function kd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  const Ad = 256;
  const xd = 18;
  function Jd(b, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = b * 32;
    var a = b * 32;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = b * 5;
    var l = b * 28;
    var g = h / 2;
    var o = l / 2;
    j.translate(b * 0, b * 0);
    j.translate(m, n);
    if (f == 1) {
      $b(j, 0, 0, b * 10);
      ed(j, e[2], e[2], b * 3);
      for (var d = 0; d < 4; d++) {
        id(j, -g, -o, h, l, b * 2);
        j.rotate(Math.PI / 4);
        ed(j, e[2], e[2], b * 4);
      }
    }
    $b(j, 0, 0, b * 10);
    ed(j, e[0], e[1], b * 1.5);
    for (d = 0; d < 4; d++) {
      id(j, -g, -o, h, l, b * 2);
      j.rotate(Math.PI / 4);
      ed(j, e[0], e[1], b * 1.5);
    }
    $b(j, 0, 0, b * 10);
    ed(j, e[0]);
    $b(j, 0, 0, b * 4);
    ed(j, e[2], e[1], b * 1.5);
    j.globalCompositeOperation = "destination-out";
    $b(j, 0, 0, b * 4);
    ed(j, e[0], e[1], b * 2);
    j.globalCompositeOperation = "source-over";
    $b(j, 0, 0, b * 4);
    ed(j, Ak, e[1], b * 2);
    return i;
  }
  function Md(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = yu(0.35, Go, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = uu(0.9, rl, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = uu(0.9, wr, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = uu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = uu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  function Bd(b, c) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 100;
    var j = b * 100;
    var a = i / 2;
    var k = j / 2;
    e.width = i;
    e.height = j;
    var m = b * 5;
    var h = b * 28;
    var l = m / 2;
    var g = h / 2;
    f.translate(a, k);
    for (var n = 0; n < 4; n++) {
      id(f, -l, -g, m, h, b * 2);
      f.rotate(Math.PI / 4);
      ed(f, c);
    }
    f.arc(0, 0, b * 10, 0, Math.PI * 2);
    ed(f, c);
    f.globalCompositeOperation = "destination-out";
    $b(f, 0, 0, b * 4);
    f.fill();
    return e;
  }
  const Dd = 18;
  const Ed = 8;
  function Id(b, c) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 85;
    var j = b * 115;
    var a = b * 6;
    e.width = i;
    e.height = j;
    f.translate(b * -130, b * -60 + a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
    f.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
    f.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
    f.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
    f.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
    f.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
    f.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
    f.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
    f.closePath();
    ed(f, c[0]);
    f.translate(0, -a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
    f.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
    f.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
    f.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
    f.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
    f.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
    f.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
    f.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
    f.closePath();
    ed(f, c[1], c[2], 4);
    var k = b * 155;
    var m = b * 133;
    var h = b * 10;
    var l = b * 3;
    var g = k + b * -3;
    var n = m + b * -5;
    f.save();
    f.translate(k, m);
    f.globalAlpha = 1;
    $b(f, 0, 0, h);
    ed(f, c[3]);
    f.restore();
    f.save();
    f.translate(g, n);
    f.globalAlpha = 1;
    $b(f, 0, 0, l);
    ed(f, c[4]);
    f.restore();
    f.save();
    f.translate(k + b * 27, m);
    f.globalAlpha = 1;
    $b(f, 0, 0, h);
    ed(f, c[3]);
    f.restore();
    f.save();
    f.translate(b * 27 + g, n);
    f.globalAlpha = 1;
    $b(f, 0, 0, l);
    ed(f, c[4]);
    return e;
  }
  function Sd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    ed(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    ed(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    ed(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    ed(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    ed(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    ed(d, Y, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    ed(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    ed(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    ed(d, b[3]);
    $b(d, a * 77, a * 107, a * 6);
    ed(d, b[2]);
    $b(d, a * 110, a * 107, a * 6);
    ed(d, b[2]);
    $b(d, a * 75, a * 105, a * 3);
    ed(d, b[4]);
    $b(d, a * 108, a * 105, a * 3);
    ed(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    ed(d, b[1]);
    return c;
  }
  function Qd(b, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (r = b * 125) / 2;
    var a = (t = b * 95) / 2;
    var n = b * 10;
    var o = b * 8;
    var h = b * 112;
    var l = b * 82;
    var g = h / 2;
    var q = l / 2;
    var d = b * 4;
    i.width = r;
    i.height = t;
    j.translate(k - b * 4, a + b * 4);
    j.globalAlpha = e ? 0.5 : 1;
    id(j, -g, -q, h, l, n);
    ed(j, f[0]);
    j.globalAlpha = 1;
    j.translate(0, -o);
    id(j, -g, -q, h, l, n);
    ed(j, f[1], f[2], d);
    var r = b * 55;
    var t = b * 45;
    n = 5;
    j.translate(b * -40, b * -30);
    id(j, 0, 0, r, t, n);
    ed(j, f[3]);
    var u = Bd(b * 0.7, f[3]);
    j.drawImage(u, b * 45, b * -25);
    u = Bd(b * 0.7, f[3]);
    j.drawImage(u, b * 45, b * 15);
    u = Bd(b * 1.2, f[3]);
    j.drawImage(u, b * 28, b * -30);
    r = b * 15;
    t = b * 70;
    n = b * 5;
    j.translate(b * 78, b * -5);
    id(j, 0, 0, r, t, n);
    ed(j, f[4]);
    r = b * 9;
    t = b * 50;
    n = b * 3;
    j.translate(b * -20, b * 20);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 0.6;
    id(j, 0, 0, r, t, n);
    ed(j, f[5]);
    j.translate(b * -20, b * 29);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 0.6;
    j.beginPath();
    j.lineJoin = "round";
    j.moveTo(0, 0);
    j.lineTo(0, b * 30);
    j.lineTo(b * 30, b * 30);
    j.closePath();
    ed(j, null, f[5], b * 8);
    return i;
  }
  const _d = 8;
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    id(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    ed(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    id(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    ed(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    id(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    ed(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    id(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    ed(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    id(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    ed(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    id(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    ed(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    id(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    ed(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    id(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    ed(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    id(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    ed(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    id(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    ed(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    id(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    ed(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    ed(e, Wa, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    ed(e, Bg, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    ed(e, Y, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    ed(e, undefined, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      ed(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      ed(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      ed(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      ed(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      ed(e, Aa, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      ed(e, p, b[0], a * 20);
      $b(e, a * 142, a * 221, a * 16.1245154965971);
      ed(e, b[0]);
    }
    return d;
  }
  function Rd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    $b(d, a * 213.5, a * 256.75, a * 75);
    ed(d, b[5]);
    $b(d, a * 213.5, a * 175.75, a * 25);
    ed(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    $b(d, a * 213.5, a * 256.75, a * 75);
    ed(d, b[3]);
    $b(d, a * 213.5, a * 175.75, a * 25);
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    $b(d, a * 213.5, a * 256.75, a * 70);
    ed(d, b[0]);
    $b(d, a * 213.5, a * 175.75, a * 20);
    ed(d, b[0]);
    $b(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    $b(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    $b(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    $b(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    id(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    id(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function jd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    ed(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    ed(f, d[2], d[3], 3);
    return e;
  }
  const Ld = 3;
  const Gd = 10;
  function Wd(b, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = b * 195;
    var a = b * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = b * 10;
    var l = b * 35;
    var g = b * 150;
    var o = l / 2;
    var d = g / 2;
    var p = b * 4;
    j.translate(m - b * 5, n - b * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    id(j, -o, -d, l, g, h);
    ed(j, f[0], f[1], p);
    j.translate(0, 0);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    id(j, -o, -d, l, g, h);
    ed(j, f[0], f[1], p);
    j.translate(0, 5);
    id(j, -o / 2, -d / 2, l / 2, g / 3, h - 2);
    ed(j, f[1]);
    return i;
  }
  function Od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    ed(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    ed(e, Ms, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    ed(e, Bg, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    ed(e, Kn, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    ed(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    ed(e, Aa, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    ed(e, p, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    ed(e, undefined, c[6], a * 4);
    return d;
  }
  function Nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    ed(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    ed(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    ed(e, Wa, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    ed(e, Y, c[1], a * 2);
    return d;
  }
  function qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    ed(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    ed(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    ed(e, undefined, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    ed(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    ed(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    ed(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    ed(e, p, c[1], a * 14);
    $b(e, a * 161, a * 201, a * 13);
    ed(e, c[5]);
    $b(e, a * 216, a * 205, a * 8.06225774829855);
    ed(e, c[5]);
    $b(e, a * 216, a * 175, a * 6.708203932499369);
    ed(e, c[5]);
    $b(e, a * 271, a * 191, a * 5.0990195135927845);
    ed(e, c[5]);
    $b(e, a * 206, a * 180, a * 11.180339887498949);
    ed(e, c[5]);
    return d;
  }
  function Hd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    ed(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    ed(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    ed(f, _a, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    ed(f, d[2]);
    return e;
  }
  function Ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    rd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    rd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    rd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    rd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    ed(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    $b(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    $b(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    ed(e, c[5], c[6], a * 4);
    return d;
  }
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 50, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 54, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    rd(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    ed(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    ed(e, Fr, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    ed(e, undefined, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 30, a * 15);
    e.restore();
    ed(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 30, a * 15);
    e.restore();
    ed(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 30, a * 15);
    e.restore();
    ed(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 30, a * 15);
    e.restore();
    ed(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 30, a * 15);
    e.restore();
    ed(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 30, a * 15);
    e.restore();
    ed(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 30, a * 15);
    e.restore();
    ed(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    rd(e, 6, a * 30, a * 15);
    e.restore();
    ed(e, c[3]);
    return d;
  }
  function Kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    rd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    rd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    ed(e, c[8], c[9], a * 4);
    return d;
  }
  const Vd = 20;
  function Xd(b, e, f, i, j) {
    var k = document.createElement("canvas");
    var a = k.getContext("2d");
    var n = b * 70;
    var o = b * 70;
    var h = b * 10;
    var l = b * 5;
    k.width = n;
    k.height = o + l;
    for (var g = 0; g < e.length; g++) {
      var q = e[g];
      a.globalAlpha = q.a;
      var r = q.f(f, wr, q.c);
      a.save();
      a.translate(n / 2 + q.x * b, o / 2 + q.y * b);
      a.rotate(q.r);
      a.drawImage(r, -r.width / 2, -r.height / 2);
      a.restore();
    }
    var s = [];
    for (g = 0; i.length > g; g++) {
      var c = document.createElement("canvas");
      var t = c.getContext("2d");
      c.width = n;
      c.height = o + l;
      t.globalAlpha = j / 2;
      if (g == 2) {
        id(t, 0, l, n, o, h);
      } else {
        id(t, 0, 0, n, o + l, h);
      }
      ed(t, "#081a19");
      t.globalAlpha = j;
      id(t, 0, g == 2 ? l : 0, n, o, h);
      ed(t, i[g]);
      t.globalAlpha = 1;
      if (g == 2) {
        t.drawImage(k, 0, l);
      } else {
        t.drawImage(k, 0, 0);
      }
      s.push(Ea(c));
    }
    return s;
  }
  function Zd(b, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = b * 193;
    var a = b * 198;
    var m = b * 140;
    var n = b * 90;
    i.width = k;
    i.height = a;
    var h = b * 10;
    var l = b * 25;
    var g = b * 180;
    var o = l / 2;
    var d = g / 2;
    var p = b * 4;
    j.translate(b * -25, b * 1);
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    id(j, -o, -d, l, g, h);
    ed(j, f[0], f[1], p);
    j.translate(b * -30, b * -25);
    j.rotate(Math.PI / 3);
    id(j, -o, -d, l, g, h);
    ed(j, f[0], f[1], p);
    j.translate(b * 35, b * 30);
    j.rotate(Math.PI / 3);
    id(j, -o, -d, l, g, h);
    ed(j, f[0], f[1], p);
    return i;
  }
  function $d(b, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = b * 135;
    var a = b * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = b * 10;
    var l = b * 25;
    var g = b * 180;
    var o = l / 2;
    var d = g / 2;
    var p = b * 4;
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    id(j, -o, -d, l, g, h);
    ed(j, f[0], f[1], p);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    id(j, -o, -d, l, g, h);
    ed(j, f[0], f[1], p);
    return i;
  }
  function Et(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 145;
    var a = b * 145;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    var h = b * 70;
    f.translate(i, j);
    f.globalAlpha = 0.4;
    $b(f, 0, 0, h);
    ed(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    $b(f, 0, 0, h);
    ed(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    $b(f, 0, 0, h);
    ed(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    $b(f, 0, 0, h);
    ed(f, d[2]);
    return e;
  }
  const Ft = 6;
  function Gt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    ed(e, Fr, c[2], a * 4);
    $b(e, a * 18, a * 38, a * 14.866068747318506);
    ed(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    ed(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    ed(e, c[4], c[5], a * 4);
    return d;
  }
  function Ht(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 370;
    var a = b * 370;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    $b(f, i, j, h);
    ed(f, d[0]);
    return e;
  }
  function It(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    $b(e, 0, 0, a);
    ed(e, c[0], c[1], h);
    return d;
  }
  function Jt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 205;
    var a = b * 205;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    var h = b * 100;
    f.translate(i, j);
    f.globalAlpha = 1;
    $b(f, 0, 0, h);
    ed(f, d[0]);
    return e;
  }
  function Kt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    $b(e, 0, 0, a);
    ed(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    $b(e, 0, 0, a);
    ed(e, c[1], c[2], h);
    return d;
  }
  function Lt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    ed(e, fh, c[2], a * 4);
    $b(e, a * 18, a * 38, a * 14.866068747318506);
    ed(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    ed(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    ed(e, c[6], c[7], a * 6);
    return d;
  }
  const Mt = 18;
  function Nt(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      ed(g, Yh, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    ed(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      ed(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      ed(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      ed(g, undefined, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        ed(g, undefined, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        ed(g, undefined, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        ed(g, Fr, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      ed(g, Di, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      ed(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      ed(g, Xg, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        ed(g, undefined, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        ed(g, Ms, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        ed(g, undefined, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        ed(g, kg, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      ed(g, fh, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      ed(g, Ho, c[2], b * 7);
    }
    return f;
  }
  function Ot(b, c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = b * 105;
    var a = b * 125;
    var k = b * 4;
    var m = b * 10;
    var h = b * 5;
    var l = b * 10;
    var g = b * 110;
    var n = l / 2;
    var d = g / 2;
    f.width = j;
    f.height = a;
    i.save();
    i.globalAlpha = c ? 0.5 : 1;
    i.translate(j / 2 + b * 8, a / 2 + h);
    id(i, -n, -d, l, g, m);
    ed(i, c ? e[0] : e[1]);
    i.translate(b * -130 + h, b * -128 + h);
    i.beginPath();
    i.bezierCurveTo(b * 159, b * 93, b * 156, b * 99, b * 154, b * 102);
    i.bezierCurveTo(b * 128, b * 92, b * 90, b * 93, b * 72, b * 96);
    i.bezierCurveTo(b * 68, b * 84, b * 143, b * 73, b * 162, b * 86);
    i.closePath();
    ed(i, e[2]);
    i.restore();
    i.translate(j / 2 + 8, a / 2);
    i.globalAlpha = 1;
    id(i, -n, -d, l, g, m);
    ed(i, e[3], e[4], k);
    i.translate(b * -130, b * -125);
    i.beginPath();
    i.bezierCurveTo(b * 159, b * 93, b * 156, b * 99, b * 154, b * 102);
    i.bezierCurveTo(b * 128, b * 92, b * 90, b * 93, b * 72, b * 96);
    i.bezierCurveTo(b * 68, b * 84, b * 143, b * 73, b * 162, b * 86);
    i.closePath();
    ed(i, e[5], e[6], k);
    return f;
  }
  function Pt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  const Qt = {};
  Qt.get = function (a, b) {
    if (b !== "ⵠᐃᐃΔΔΔⵠ") {
      const a = za.setInterval;
      const b = a;
      const c = function () {
        a(c, 698);
        b(c, 5948);
      };
      c();
    }
    return za.Reflect.get(...arguments);
  };
  function Rt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    $b(e, 0, 0, a);
    ed(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function St(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    ed(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    id(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    ed(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    ed(e, undefined, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    ed(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    ed(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    id(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    ed(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    ed(e, c[6]);
    return d;
  }
  function Tt(b, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (d = b * 450) / 2;
    var a = (p = b * 145) / 2;
    var m = b * 10;
    var n = b * 300;
    var h = b * 30;
    var l = n / 2;
    var g = h / 2;
    var o = 4;
    if (f) {
      var d = b * 145;
      var p = b * 450;
      i.width = d;
      i.height = p;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      id(j, b * 100, b * -110, n, h, m);
      ed(j, e[0]);
      j.translate(b * 178, b * -98);
      id(j, -l, -g - b * 6, b * 100, b * 100, m);
      ed(j, e[0]);
      j.translate(b * -50, b * 5);
      id(j, b * 220, b * -15, b * 90, b * 90, m);
      ed(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(b * 250, b * -63);
      id(j, -l - b * 20, -g, n, h, m);
      ed(j, e[1], e[2], o);
      j.translate(b * -70, b * -40);
      id(j, -l - b * 20, -g, b * 100, b * 100, m);
      ed(j, e[3], e[4], o);
      j.translate(b * -70, b * 15);
      id(j, b * 220, b * -22, b * 90, b * 90, m);
      ed(j, e[3], e[4], o);
      id(j, b * 230, b * -12, b * 55, b * 55, m);
      ed(j, e[5]);
      j.translate(b * -70, 0);
      id(j, b * -15, b * -2, b * 60, b * 60, m);
      ed(j, e[5]);
      j.restore();
    } else {
      i.width = d;
      i.height = p;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + b * 10);
      id(j, -l, -g, n, h, m);
      ed(j, e[0]);
      j.translate(b * -65, b * -25);
      id(j, -l, -g - b * 6, b * 100, b * 100, b * 15);
      ed(j, e[0]);
      j.translate(b * -35, b * -5);
      id(j, b * 220, b * -15, b * 90, b * 90, b * 15);
      ed(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(b * 240, b * 70);
      id(j, -l, -g, n, h, m);
      ed(j, e[1], e[2], o);
      j.translate(b * -60, b * -40);
      id(j, -l - b * 20, -g, b * 100, b * 100, b * 15);
      ed(j, e[3], e[4], o);
      j.translate(b * -55, b * 10);
      id(j, b * 220, b * -22, b * 90, b * 90, b * 15);
      ed(j, e[3], e[4], o);
      id(j, b * 240, b * -12, b * 55, b * 55, b * 12);
      ed(j, e[5]);
      j.translate(b * 45, b * 0);
      id(j, b * -145, b * -2, b * 60, b * 60, b * 12);
      ed(j, e[5]);
      j.restore();
    }
    return i;
  }
  function Ut(b, e, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var a = b * 210;
    var n = b * 205;
    var o = b * 30;
    var h = b * 20;
    var l = b * 200;
    var g = b * 180;
    var q = l / 2;
    var d = g / 2;
    var c = 4;
    j.width = a;
    j.height = n;
    j.width = b * 419;
    j.height = b * 412;
    if (i == 1) {
      k.save();
      k.translate(b * 10, b * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 117.99996948242188, b * 216.40621948242188);
      k.bezierCurveTo(b * 86.99996948242188, b * 221.40621948242188, b * 74.99996948242188, b * 217.40621948242188, b * 60.999969482421875, b * 205.40621948242188);
      ed(k, Fl, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 114.99996948242188, b * 227.40621948242188);
      k.bezierCurveTo(b * 90.99996948242188, b * 233.40621948242188, b * 66.99996948242188, b * 228.40621948242188, b * 43.999969482421875, b * 225.40621948242188);
      ed(k, p, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 110.99996948242188, b * 236.40621948242188);
      k.bezierCurveTo(b * 94.99996948242188, b * 244.40621948242188, b * 79.99996948242188, b * 249.40621948242188, b * 60.999969482421875, b * 249.40621948242188);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 111.99996948242188, b * 206.29513549804688);
      k.bezierCurveTo(b * 91.99996948242188, b * 206.29513549804688, b * 87.99996948242188, b * 201.29513549804688, b * 79.99996948242188, b * 192.29513549804688);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 109.99996948242188, b * 249.18402099609375);
      k.bezierCurveTo(b * 97.99996948242188, b * 263.18402099609375, b * 85.99996948242188, b * 271.18402099609375, b * 65.99996948242188, b * 277.18402099609375);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 105.99996948242188, b * 192.18402099609375);
      k.bezierCurveTo(b * 99.49996948242188, b * 197.68402099609375, b * 99.49996948242188, b * 197.68402099609375, b * 92.99996948242188, b * 203.18402099609375);
      k.bezierCurveTo(b * 95.99996948242188, b * 213.18402099609375, b * 95.99996948242188, b * 215.18402099609375, b * 89.99996948242188, b * 219.18402099609375);
      k.bezierCurveTo(b * 91.99996948242188, b * 223.18402099609375, b * 91.99996948242188, b * 226.18402099609375, b * 87.99996948242188, b * 230.18402099609375);
      k.bezierCurveTo(b * 89.99996948242188, b * 234.18402099609375, b * 91.99996948242188, b * 237.18402099609375, b * 90.99996948242188, b * 244.18402099609375);
      k.bezierCurveTo(b * 96.99996948242188, b * 252.18402099609375, b * 96.99996948242188, b * 256.18402099609375, b * 95.99996948242188, b * 262.18402099609375);
      k.bezierCurveTo(b * 106.49996948242188, b * 264.18402099609375, b * 106.49996948242188, b * 264.18402099609375, b * 116.99996948242188, b * 266.18402099609375);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 104.99996948242188, b * 183.29513549804688);
      k.bezierCurveTo(b * 99.99996948242188, b * 193.29513549804688, b * 93.99996948242188, b * 195.29513549804688, b * 89.99996948242188, b * 201.29513549804688);
      k.bezierCurveTo(b * 86.99996948242188, b * 212.29513549804688, b * 85.99996948242188, b * 214.29513549804688, b * 81.99996948242188, b * 215.29513549804688);
      k.bezierCurveTo(b * 83.99996948242188, b * 223.29513549804688, b * 83.99996948242188, b * 227.29513549804688, b * 79.99996948242188, b * 230.29513549804688);
      k.bezierCurveTo(b * 83.99996948242188, b * 235.29513549804688, b * 84.99996948242188, b * 240.29513549804688, b * 79.99996948242188, b * 246.29513549804688);
      k.bezierCurveTo(b * 86.99996948242188, b * 251.29513549804688, b * 91.99996948242188, b * 256.2951354980469, b * 89.99996948242188, b * 266.2951354980469);
      k.bezierCurveTo(b * 102.99996948242188, b * 269.2951354980469, b * 102.99996948242188, b * 269.2951354980469, b * 115.99996948242188, b * 272.2951354980469);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 107.99996948242188, b * 177.85067749023438);
      k.bezierCurveTo(b * 95.99996948242188, b * 187.35067749023438, b * 95.99996948242188, b * 187.35067749023438, b * 83.99996948242188, b * 196.85067749023438);
      k.bezierCurveTo(b * 82.99996948242188, b * 203.85067749023438, b * 80.99996948242188, b * 209.85067749023438, b * 72.99996948242188, b * 210.85067749023438);
      k.bezierCurveTo(b * 73.99996948242188, b * 220.85067749023438, b * 73.99996948242188, b * 221.85067749023438, b * 66.99996948242188, b * 227.85067749023438);
      k.bezierCurveTo(b * 71.99996948242188, b * 235.85067749023438, b * 73.99996948242188, b * 239.85067749023438, b * 71.99996948242188, b * 247.85067749023438);
      k.bezierCurveTo(b * 80.99996948242188, b * 257.8506774902344, b * 81.99996948242188, b * 263.8506774902344, b * 77.99996948242188, b * 271.8506774902344);
      k.bezierCurveTo(b * 95.49996948242188, b * 272.8506774902344, b * 95.49996948242188, b * 272.8506774902344, b * 112.99996948242188, b * 273.8506774902344);
      ed(k, undefined, e[4], b * 3);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(b * 130, b * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 170.99996948242188, b * 133.85067749023438);
      k.bezierCurveTo(b * 195.99996948242188, b * 129.85067749023438, b * 196.99996948242188, b * 111.85067749023438, b * 200.99996948242188, b * 88.85067749023438);
      ed(k, fh, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 169.99996948242188, b * 143.85067749023438);
      k.bezierCurveTo(b * 189.99996948242188, b * 145.85067749023438, b * 207.99996948242188, b * 126.85067749023438, b * 222.99996948242188, b * 100.85067749023438);
      ed(k, Aa, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 170.99996948242188, b * 157.85067749023438);
      k.bezierCurveTo(b * 193.99996948242188, b * 160.85067749023438, b * 210.99996948242188, b * 151.85067749023438, b * 232.99996948242188, b * 139.85067749023438);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 169.99996948242188, b * 168.85067749023438);
      k.bezierCurveTo(b * 192.99996948242188, b * 175.85067749023438, b * 203.99996948242188, b * 177.85067749023438, b * 245.99996948242188, b * 168.85067749023438);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 167.99996948242188, b * 168.85067749023438);
      k.bezierCurveTo(b * 183.99996948242188, b * 189.85067749023438, b * 191.99996948242188, b * 193.85067749023438, b * 220.99996948242188, b * 196.85067749023438);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 176.99996948242188, b * 117.85067749023438);
      k.bezierCurveTo(b * 181.99996948242188, b * 120.85067749023438, b * 181.99996948242188, b * 120.85067749023438, b * 186.99996948242188, b * 123.85067749023438);
      k.bezierCurveTo(b * 183.99996948242188, b * 137.85067749023438, b * 185.99996948242188, b * 136.85067749023438, b * 190.99996948242188, b * 136.85067749023438);
      k.bezierCurveTo(b * 186.99996948242188, b * 147.85067749023438, b * 189.99996948242188, b * 152.85067749023438, b * 193.99996948242188, b * 155.85067749023438);
      k.bezierCurveTo(b * 187.99996948242188, b * 165.85067749023438, b * 190.99996948242188, b * 169.85067749023438, b * 190.99996948242188, b * 172.85067749023438);
      k.bezierCurveTo(b * 186.99996948242188, b * 183.85067749023438, b * 186.99996948242188, b * 185.85067749023438, b * 189.99996948242188, b * 188.85067749023438);
      k.bezierCurveTo(b * 182.49996948242188, b * 195.35067749023438, b * 182.49996948242188, b * 195.35067749023438, b * 174.99996948242188, b * 201.85067749023438);
      ed(k, undefined, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 176.99996948242188, b * 112.18402099609375);
      k.bezierCurveTo(b * 183.99996948242188, b * 119.18402099609375, b * 186.99996948242188, b * 117.18402099609375, b * 192.99996948242188, b * 116.18402099609375);
      k.bezierCurveTo(b * 191.99996948242188, b * 126.18402099609375, b * 193.99996948242188, b * 130.18402099609375, b * 199.99996948242188, b * 130.18402099609375);
      k.bezierCurveTo(b * 194.99996948242188, b * 145.18402099609375, b * 197.99996948242188, b * 147.18402099609375, b * 201.99996948242188, b * 153.18402099609375);
      k.bezierCurveTo(b * 196.99996948242188, b * 164.18402099609375, b * 197.99996948242188, b * 169.18402099609375, b * 201.99996948242188, b * 174.18402099609375);
      k.bezierCurveTo(b * 194.99996948242188, b * 184.18402099609375, b * 196.99996948242188, b * 187.18402099609375, b * 200.99996948242188, b * 193.18402099609375);
      k.bezierCurveTo(b * 185.99996948242188, b * 195.18402099609375, b * 181.99996948242188, b * 201.18402099609375, b * 174.99996948242188, b * 210.18402099609375);
      ed(k, Wa, e[4], b * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 176.99996948242188, b * 101.29513549804688);
      k.bezierCurveTo(b * 181.99996948242188, b * 108.29513549804688, b * 189.99996948242188, b * 110.29513549804688, b * 195.99996948242188, b * 107.29513549804688);
      k.bezierCurveTo(b * 197.99996948242188, b * 121.29513549804688, b * 200.99996948242188, b * 122.29513549804688, b * 206.99996948242188, b * 122.29513549804688);
      k.bezierCurveTo(b * 201.99996948242188, b * 138.29513549804688, b * 204.99996948242188, b * 142.29513549804688, b * 211.99996948242188, b * 148.29513549804688);
      k.bezierCurveTo(b * 201.99996948242188, b * 156.29513549804688, b * 205.99996948242188, b * 167.29513549804688, b * 213.99996948242188, b * 173.29513549804688);
      k.bezierCurveTo(b * 204.99996948242188, b * 181.29513549804688, b * 204.99996948242188, b * 187.29513549804688, b * 205.99996948242188, b * 193.29513549804688);
      k.bezierCurveTo(b * 190.99996948242188, b * 198.29513549804688, b * 181.99996948242188, b * 205.29513549804688, b * 174.99996948242188, b * 214.29513549804688);
      ed(k, undefined, e[4], b * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / 2);
    if (!i) {
      k.globalAlpha = 0.5;
      id(k, -q, -d, l, g + h, o);
      ed(k, e[0]);
      if (f) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      id(k, -q, -d, l, g, o);
      ed(k, e[1], e[2], c);
      k.globalAlpha = 1;
      id(k, b * 35 - q, b * 20 - d, l - b * 50, g - b * 50, o - b * 10);
      ed(k, e[3]);
    }
    if (i == 3) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 121, b * 190);
      k.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
      k.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
      k.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
      k.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
      k.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
      k.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
      k.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
      k.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
      k.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
      k.closePath();
      ed(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 219, b * 144);
      k.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
      k.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
      k.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
      k.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
      k.closePath();
      ed(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 123, b * 214);
      k.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
      k.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
      k.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
      k.closePath();
      ed(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 257, b * 199);
      k.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
      k.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
      k.closePath();
      ed(k, e[5]);
      k.translate(b * -5, b * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 186, b * 123);
      k.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
      k.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
      k.closePath();
      ed(k, e[5]);
      k.translate(b * 5, b * -55);
      k.translate(b * -5, b * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 171, b * 241);
      k.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
      k.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
      k.closePath();
      ed(k, e[5]);
    } else if (i == 4) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 30, b * 167);
      k.bezierCurveTo(b * 47, b * 144, b * 64, b * 140, b * 80, b * 147);
      k.bezierCurveTo(b * 95, b * 154, b * 95, b * 159, b * 100, b * 179);
      k.bezierCurveTo(b * 105, b * 202, b * 95, b * 218, b * 69, b * 218);
      k.bezierCurveTo(b * 48, b * 236, b * 26, b * 223, b * 28, b * 213);
      k.bezierCurveTo(b * 28, b * 205, b * 29, b * 199, b * 32, b * 195);
      k.bezierCurveTo(b * 21, b * 183, b * 27, b * 173, b * 30, b * 167);
      k.closePath();
      ed(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 26, b * 145);
      k.bezierCurveTo(b * 32, b * 138, b * 37, b * 137, b * 40, b * 139);
      k.bezierCurveTo(b * 43, b * 140, b * 41, b * 150, b * 31, b * 159);
      k.bezierCurveTo(b * 23, b * 166, b * 17, b * 158, b * 26, b * 145);
      k.closePath();
      ed(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 13, b * 193);
      k.bezierCurveTo(b * 21, b * 187, b * 30, b * 190, b * 20, b * 202);
      k.bezierCurveTo(b * 13, b * 208, b * 7, b * 202, b * 13, b * 193);
      k.closePath();
      ed(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 121, b * 190);
      k.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
      k.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
      k.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
      k.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
      k.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
      k.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
      k.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
      k.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
      k.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
      k.closePath();
      ed(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 335, b * 196);
      k.bezierCurveTo(b * 312, b * 208, b * 300, b * 185, b * 309, b * 167);
      k.bezierCurveTo(b * 314, b * 141, b * 339, b * 127, b * 359, b * 144);
      k.bezierCurveTo(b * 363, b * 148, b * 364, b * 150, b * 364, b * 150);
      k.bezierCurveTo(b * 392, b * 143, b * 396, b * 183, b * 378, b * 204);
      k.bezierCurveTo(b * 367, b * 215, b * 339, b * 208, b * 335, b * 196);
      k.closePath();
      ed(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 349, b * 212);
      k.bezierCurveTo(b * 339, b * 216, b * 334, b * 208, b * 341, b * 203);
      k.bezierCurveTo(b * 353, b * 198, b * 361, b * 205, b * 349, b * 212);
      k.closePath();
      ed(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 46, b * 165);
      k.bezierCurveTo(b * 55, b * 148, b * 85, b * 157, b * 83, b * 175);
      k.bezierCurveTo(b * 99, b * 185, b * 89, b * 212, b * 66, b * 204);
      k.bezierCurveTo(b * 55, b * 212, b * 43, b * 212, b * 41, b * 202);
      k.bezierCurveTo(b * 39, b * 194, b * 42, b * 187, b * 49, b * 185);
      k.bezierCurveTo(b * 44, b * 175, b * 45, b * 172, b * 46, b * 165);
      k.closePath();
      ed(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 219, b * 144);
      k.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
      k.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
      k.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
      k.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
      k.closePath();
      ed(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 123, b * 214);
      k.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
      k.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
      k.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
      k.closePath();
      ed(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 257, b * 199);
      k.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
      k.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
      k.closePath();
      ed(k, e[5]);
      k.translate(b * -5, b * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 186, b * 123);
      k.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
      k.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
      k.closePath();
      ed(k, e[5]);
      k.translate(b * 5, b * -55);
      k.translate(b * -5, b * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 171, b * 241);
      k.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
      k.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
      k.closePath();
      ed(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(b * 367, b * 164);
      k.bezierCurveTo(b * 380, b * 160, b * 391, b * 185, b * 371, b * 189);
      k.bezierCurveTo(b * 362, b * 192, b * 354, b * 191, b * 350, b * 185);
      k.bezierCurveTo(b * 326, b * 205, b * 314, b * 182, b * 316, b * 171);
      k.bezierCurveTo(b * 317, b * 150, b * 332, b * 143, b * 347, b * 147);
      k.bezierCurveTo(b * 361, b * 151, b * 366, b * 158, b * 367, b * 164);
      k.closePath();
      ed(k, e[4]);
    }
    return j;
  }
  const Vt = 6;
  function Wt(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    ed(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    ed(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    ed(g, Ms, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    ed(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    ed(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    ed(g, Y, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    ed(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    ed(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    ed(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    ed(g, ls, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    ed(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    ed(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    ed(g, Es, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    ed(g, undefined, d[1], b * 20);
    $b(g, b * 101, b * 155, b * 20.591260281974);
    ed(g, d[3]);
    $b(g, b * 180, b * 155, b * 20.591260281974);
    ed(g, d[3]);
    $b(g, b * 95, b * 148, b * 7.211102550927978);
    ed(g, d[4]);
    $b(g, b * 173, b * 148, b * 7.211102550927978);
    ed(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      ed(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      ed(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      ed(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      ed(g, d[2]);
    }
    return f;
  }
  function Xt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    ed(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    id(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    ed(e, c[0]);
    $b(e, a * 121, a * 480, a * 20.396078054371138);
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    ed(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    id(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    ed(e, c[4], c[5], a * 12.5);
    $b(e, a * 121, a * 480, a * 20.396078054371138);
    ed(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    ed(e, c[1], c[2], a * 12.5);
    return d;
  }
  function Yt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    ed(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    ed(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    ed(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    ed(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    ed(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    ed(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    ed(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    ed(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  function Zt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    $b(e, a * 42, a * 43, a * 24.758836806279895);
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    ed(e, c[0]);
    e.translate(0, a * -10);
    $b(e, a * 42, a * 43, a * 24.758836806279895);
    ed(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    ed(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    ed(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    ed(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    ed(e, c[7], c[8], a * 5);
    return d;
  }
  function $t(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    ed(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    id(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    rd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    ed(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    id(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    ed(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    rd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    ed(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    ed(e, c[3]);
    return d;
  }
  function _t(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    ed(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    id(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    ed(e, c[0]);
    $b(e, a * 122, a * 480, a * 18.439088914585774);
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    ed(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    id(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    ed(e, c[4], c[5], a * 12.5);
    $b(e, a * 122, a * 480, a * 18.439088914585774);
    ed(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    ed(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    ed(e, c[3]);
    return d;
  }
  function au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    return d;
  }
  function bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    ed(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    ed(e, c[4], c[5], a * 4);
    $b(e, a * 107, a * 152, a * 9);
    ed(e, c[6]);
    $b(e, a * 105, a * 173, a * 9);
    ed(e, c[6]);
    $b(e, a * 87, a * 161, a * 9);
    ed(e, c[6]);
    $b(e, a * 106, a * 147, a * 4);
    ed(e, c[7]);
    $b(e, a * 104, a * 167, a * 4);
    ed(e, c[7]);
    $b(e, a * 86, a * 154, a * 4);
    ed(e, c[7]);
    return d;
  }
  function cu(b, e, f, i, j, k, n, o, p, h, l = 0) {
    var g = document.createElement("canvas");
    var q = g.getContext("2d");
    k = k ? k * b : 0;
    var d = Math.floor(b * f);
    q.font = d + "px Baloo Paaji";
    q.lineJoin = "round";
    o *= b;
    var r = n ? o * 2 : 0;
    if (p) {
      var c = Math.min(q.measureText(e).width + b * 2 + r, p);
    } else {
      c = q.measureText(e).width + b * 2 + r + l * b * 2;
    }
    d = (d + k + l) * b + r;
    g.width = c;
    g.height = d;
    if (n) {
      q.fillStyle = n;
      id(q, 0, 0, c, d, o * 2);
      q.fill();
      q.translate(o, o);
    }
    q.textBaseline = "middle";
    q.font = f + "px Baloo Paaji";
    q.lineJoin = "round";
    if (j) {
      q.beginPath();
      q.fillStyle = j;
      q.fillText(e, 0, d / 2 + k - r / 2, c);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = l;
      q.strokeText(e, l, (d - r) / 2, c);
    }
    q.fillStyle = i;
    q.fillText(e, l, (d - r) / 2, c);
    return g;
  }
  function du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    ed(e, undefined, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    ed(e, undefined, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    ed(e, Yh, c[4], a * 4);
    return d;
  }
  function eu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    ed(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    ed(e, c[0], c[1], a * 8);
    $b(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    ed(e, c[2]);
    $b(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    ed(e, c[2]);
    $b(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    ed(e, c[2]);
    $b(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    ed(e, c[2]);
    $b(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    ed(e, c[2]);
    $b(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    return d;
  }
  function fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    ed(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    ed(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    ed(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    ed(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    ed(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    ed(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    ed(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    ed(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    ed(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    ed(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    ed(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    ed(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    ed(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    ed(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    ed(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    ed(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    ed(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    ed(e, Ms, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    ed(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    ed(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    ed(e, Es, c[3], a * 4);
    return d;
  }
  function gu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 220;
    var a = b * 230;
    var i = b * 100;
    var j = i / 4;
    var h = b * 20;
    e.width = g;
    e.height = a;
    f.translate(g / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    rd(f, 7, i, j);
    ed(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    rd(f, 7, i, j);
    ed(f, d[1]);
    rd(f, 6, i * 0.65, j * 0.65);
    ed(f, d[2]);
    return e;
  }
  function hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    ed(e, c[0]);
    $b(e, a * 160.5, a * 243.03125, a * 7);
    ed(e, c[0]);
    $b(e, a * 227.5, a * 242.03125, a * 7);
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    ed(e, c[0], c[0], a * 5);
    $b(e, a * 194, a * 298, a * 9);
    ed(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    ed(e, c[1], c[2], a * 5);
    $b(e, a * 160.5, a * 243.03125, a * 7);
    ed(e, c[1], c[2], a * 5);
    $b(e, a * 227.5, a * 242.03125, a * 7);
    ed(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    ed(e, c[1], c[2], a * 7);
    $b(e, a * 194, a * 298, a * 9);
    ed(e, c[1], c[2], a * 7);
    return d;
  }
  function iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    return d;
  }
  function ju(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    id(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    id(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    ed(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    ed(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    ed(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    ed(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    ed(e, c[3]);
    return d;
  }
  function ku(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    ed(d, Aa, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    ed(d, Ms, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    ed(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    ed(d, Ms, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    ed(d, Kn, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    ed(d, Ak, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  function lu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    id(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    ed(e, c[0]);
    $b(e, a * 204, a * 693, a * 36.013886210738214);
    ed(e, c[0]);
    $b(e, a * 105, a * 518, a * 30);
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    id(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    ed(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    ed(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    ed(e, c[6], c[4], a * 16);
    $b(e, a * 204, a * 693, a * 36.013886210738214);
    ed(e, c[6], c[4], a * 16);
    $b(e, a * 105, a * 518, a * 30);
    ed(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    ed(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    ed(e, c[6]);
    $b(e, a * 204, a * 693, a * 17.029386365926403);
    ed(e, c[7]);
    $b(e, a * 106, a * 518, a * 12);
    ed(e, c[7]);
    return d;
  }
  const mu = 0;
  function nu(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var a = b * 220;
    var i = b * 220;
    var j = b * 100;
    var h = j / 4;
    f.width = a;
    f.height = i;
    g.translate(a / 2, i / 2);
    g.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      g.translate(b * 0, b * -8);
    }
    rd(g, 7, j, h);
    ed(g, c ? d[0] : d[1]);
    g.globalAlpha = 1;
    if (e == 0) {
      rd(g, 6, j * 0.65, h * 0.65);
      ed(g, d[2]);
    } else if (e == 1) {
      g.translate(b * 20, b * 20);
      rd(g, 6, j * 0.45, h * 0.4);
      ed(g, d[2]);
    }
    return f;
  }
  function ou(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 120;
    var a = b * 150;
    var i = b * 60;
    var j = i / 4;
    var h = b * 15;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    rd(f, 8, i, j);
    ed(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    rd(f, 8, i, j);
    ed(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    rd(f, 5, i * 0.5, j * 0.4);
    ed(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    rd(f, 5, i * 0.5, j * 0.4);
    ed(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    rd(f, 5, i * 0.5, j * 0.4);
    ed(f, d[2]);
    f.restore();
    return e;
  }
  const pu = 8;
  function qu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    ed(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    ed(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    ed(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    ed(e, Lq, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    ed(e, Lq, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    ed(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    ed(e, Ho, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    ed(e, Bg, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    ed(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    ed(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    ed(e, undefined, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    ed(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    ed(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    ed(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    ed(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    ed(e, undefined, c[1], a * 2);
    return d;
  }
  function ru(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      ed(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      ed(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      ed(a, d[0]);
    }
    return g;
  }
  function su(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    ed(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    ed(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    ed(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    ed(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    ed(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    ed(e, c[4]);
    $b(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    ed(e, c[5]);
    $b(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    ed(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    ed(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    ed(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    ed(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    ed(e, Y, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    ed(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    ed(e, p, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    ed(e, undefined, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    ed(e, Ms, c[9], a * 3);
    return d;
  }
  function tu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    ed(d, b[0], b[0], a * 4);
    return c;
  }
  function uu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 18;
    var a = b * 18;
    e.width = g;
    e.height = a;
    var i = b * 9;
    var j = b * 9;
    var k = b * 8;
    f.save();
    f.translate(i, j);
    f.globalAlpha = 1;
    $b(f, 0, 0, k);
    ed(f, d[0]);
    k = b * 3;
    i = 0;
    j = b * -3;
    f.translate(i, j);
    f.globalAlpha = 1;
    $b(f, 0, 0, k);
    ed(f, d[1]);
    f.restore();
    return e;
  }
  function vu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * c * 2;
    var a = c * b * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    $b(f, 0, 0, b * c);
    ed(f, d);
    return e;
  }
  function wu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 180;
    var a = b * 210;
    var i = (h = b * 60) / 4;
    var j = b * 20;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[1]);
    f.restore();
    var h;
    i = (h = b * 30) / 4;
    f.save();
    f.translate(g / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    rd(f, 5, h, i);
    ed(f, d[2]);
    f.restore();
    $b(f, g / 2 - b * 7, a / 2 + b * 7, 5);
    ed(f, d[2]);
    return e;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    id(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    ed(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    ed(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    id(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    ed(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    id(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    ed(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    id(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    ed(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    id(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    ed(e, c[0], c[0], a * 6);
    $b(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    ed(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    id(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    ed(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    id(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    ed(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    id(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    ed(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    id(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    ed(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    id(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    ed(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    id(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    ed(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    $b(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    ed(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function tu(a, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 100;
    e.scale(0.5, 0.5);
    e.translate(10, 15);
    e.globalAlpha = 0.5;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47, a * 5);
    e.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    e.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    e.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    e.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 70);
    e.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    ed(e, undefined, c[0], a * 10);
    e.translate(0, -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47, a * 5);
    e.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    e.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    e.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    e.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 70);
    e.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    ed(e, Ms, c[2], a * 8);
    e.globalAlpha = 0.5;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 70);
    e.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    ed(e, undefined, c[2], a * 8);
    return d;
  }
  function yu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    ed(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    ed(f, d[1], d[2], j);
    return e;
  }
  function zu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    ed(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    ed(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    ed(e, p, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    ed(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    ed(e, c[5], c[6], a * 12);
    $b(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    ed(e, c[7]);
    $b(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    ed(e, c[8]);
    return d;
  }
  const Au = 3;
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (Ab === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      $b(e, a * 44, a * 55, a * 41);
      ed(e, c[0]);
    }
    e.globalAlpha = 1;
    $b(e, a * 44, a * 45, a * 41);
    ed(e, c[1], c[2], a * 4);
    $b(e, a * 44, a * 45, a * 31);
    ed(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    id(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    ed(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    id(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    ed(e, c[4], c[4], a * 2);
    $b(e, a * 45, a * 29, a * 7);
    ed(e, c[5]);
    $b(e, a * 45, a * 61, a * 7);
    ed(e, c[5]);
    $b(e, a * 28, a * 45, a * 7);
    ed(e, c[5]);
    $b(e, a * 62, a * 45, a * 7);
    ed(e, c[5]);
    return d;
  }
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    rd(e, 6, a * 146, a * 30);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    rd(e, 6, a * 146, a * 30);
    e.restore();
    ed(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    rd(e, 6, a * 105, a * 30);
    e.restore();
    ed(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    rd(e, 6, a * 66, a * 30);
    e.restore();
    ed(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    rd(e, 6, a * 31, a * 30);
    e.restore();
    ed(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    ed(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    ed(e, Ms, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    ed(e, undefined, c[2], a * 8);
    return d;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    rd(e, 9, a * 60, a * 10);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    rd(e, 9, a * 60, a * 10);
    ed(e, c[1], c[2], 4);
    e.rotate(-0.32);
    rd(e, 9, a * 38, a * 10);
    ed(e, c[3], c[4], 4);
    e.rotate(0.68);
    rd(e, 9, a * 20, a * 8);
    ed(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Ab === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      rd(e, 8, a * 41, a * 10);
      ed(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    rd(e, 8, a * 41, a * 10);
    ed(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    rd(e, 8, a * 33, a * 10);
    ed(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    rd(e, 8, a * 24, a * 8);
    ed(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    id(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    ed(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    id(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    ed(e, c[4], c[4], a * 2);
    $b(e, a * 45, a * 29, a * 7);
    ed(e, c[5]);
    $b(e, a * 45, a * 61, a * 7);
    ed(e, c[5]);
    $b(e, a * 28, a * 45, a * 7);
    ed(e, c[5]);
    $b(e, a * 62, a * 45, a * 7);
    ed(e, c[5]);
    return d;
  }
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    rd(e, 7, a * 60, a * 10);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    rd(e, 7, a * 60, a * 10);
    ed(e, c[1], c[2], 4);
    e.rotate(0.64);
    rd(e, 7, a * 40, a * 10);
    ed(e, c[3], c[4], 4);
    e.rotate(0.12);
    rd(e, 7, a * 23, a * 5);
    e.restore();
    ed(e, c[5]);
    return d;
  }
  function tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    ed(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    ed(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    ed(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    ed(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    ed(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    ed(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    ed(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    ed(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    ed(e, c[1], c[2], a * 7);
    return d;
  }
  function nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Ab === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      rd(e, 7, a * 41, a * 10);
      e.restore();
      ed(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    rd(e, 7, a * 41, a * 10);
    ed(e, c[1], c[2], a * 4);
    rd(e, 7, a * 35, a * 10);
    ed(e, c[3], c[4], a * 4);
    rd(e, 7, a * 23, a * 5);
    e.restore();
    ed(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    id(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    ed(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    id(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    ed(e, c[4], c[4], a * 2);
    $b(e, a * 45, a * 29, a * 7);
    ed(e, c[5]);
    $b(e, a * 45, a * 61, a * 7);
    ed(e, c[5]);
    $b(e, a * 28, a * 45, a * 7);
    ed(e, c[5]);
    $b(e, a * 62, a * 45, a * 7);
    ed(e, c[5]);
    return d;
  }
  function oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    rd(e, 8, a * 60, a * 10);
    ed(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    rd(e, 8, a * 60, a * 10);
    ed(e, c[1], c[2], 4);
    e.rotate(0.56);
    rd(e, 8, a * 40, a * 10);
    ed(e, c[3], c[4], 4);
    e.rotate(0.28);
    rd(e, 8, a * 28, a * 8);
    ed(e, c[5]);
    e.restore();
    return d;
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    ed(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    ed(e, c[2], c[3], a * 1);
    return d;
  }
  function rc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    $b(f, 0, 0, b * 60);
    ed(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    $b(f, 0, 0, b * 60);
    ed(f, d[1], d[2], b * 4);
    $b(f, 0, 0, b * 40);
    ed(f, d[3]);
    $b(f, 0, 0, b * 25);
    ed(f, d[4], d[5], b * 8);
    return e;
  }
  function sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    ed(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    ed(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    ed(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    ed(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    ed(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    ed(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    ed(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    ed(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    ed(d, undefined, b[2], a * 4);
    return c;
  }
  const hc = 6;
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    rd(e, 6, a * 146, a * 30);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    rd(e, 6, a * 146, a * 30);
    e.restore();
    ed(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    rd(e, 6, a * 105, a * 30);
    e.restore();
    ed(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    rd(e, 6, a * 66, a * 30);
    e.restore();
    ed(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    rd(e, 7, a * 17, a * 8);
    e.restore();
    ed(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    rd(e, 7, a * 25, a * 8);
    e.restore();
    ed(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    rd(e, 7, a * 11, a * 8);
    e.restore();
    ed(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    rd(e, 7, a * 12, a * 8);
    e.restore();
    ed(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    ed(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    ed(e, Ak, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    ed(e, Xg, c[2], a * 8);
    return d;
  }
  const gc = 10;
  function uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    ed(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    ed(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    ed(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    ed(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    ed(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    ed(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    ed(e, c[3], c[2], a * 10);
    return d;
  }
  function bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    id(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    id(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    ed(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    id(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    ed(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    id(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    ed(e, undefined, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    ed(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    ed(e, Aa, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    ed(e, Ak, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    ed(e, undefined, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    id(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    ed(e, Aa, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    id(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    ed(e, c[8]);
    return d;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    id(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    id(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    ed(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    id(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    ed(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    id(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    ed(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    ed(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    ed(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    id(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    ed(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    id(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    ed(e, c[1], c[2], a * 5);
    return d;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    ed(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    ed(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    ed(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    ed(e, c[2], c[3], a * 7);
    return d;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    ed(e, Lq, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    ed(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    ed(e, undefined, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    ed(e, undefined, c[5], a * 8);
    return d;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Ab === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      rd(e, 9, a * 41, a * 10);
      e.restore();
      ed(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    rd(e, 9, a * 41, a * 10);
    ed(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    rd(e, 9, a * 32, a * 10);
    ed(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    rd(e, 9, a * 23, a * 8);
    ed(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    id(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    ed(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    id(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    ed(e, c[4], c[4], a * 2);
    $b(e, a * 45, a * 29, a * 7);
    ed(e, c[5]);
    $b(e, a * 45, a * 61, a * 7);
    ed(e, c[5]);
    $b(e, a * 28, a * 45, a * 7);
    ed(e, c[5]);
    $b(e, a * 62, a * 45, a * 7);
    ed(e, c[5]);
    return d;
  }
  function pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    id(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    id(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    ed(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    ed(e, c[8]);
    return d;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    id(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    id(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    ed(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    ed(e, c[8]);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    id(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    ed(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    ed(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    id(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    ed(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    ed(e, c[8]);
    return d;
  }
  function fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    id(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    id(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    ed(e, c[0]);
    return d;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    id(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    id(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    ed(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    ed(e, c[8]);
    return d;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    id(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    id(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    ed(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    ed(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    ed(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    ed(e, kg, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    ed(e, Ho, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    ed(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    ed(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    ed(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    ed(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    ed(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    ed(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    return d;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    ed(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    ed(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    id(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    ed(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    id(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    ed(e, c[1], c[2], a * 5);
    return d;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    ed(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    ed(e, c[3], c[4], a * 15);
    return d;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    id(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    id(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    ed(e, undefined, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    ed(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    ed(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    ed(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    ed(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    ed(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    ed(e, c[10]);
    return d;
  }
  const Ac = 0;
  function xc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 170;
    var a = b * 172;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    $b(f, 0, 0, b * 60);
    ed(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      rd(f, 3, b * 20, b * 4);
      ed(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    $b(f, 0, 0, b * 60);
    ed(f, d[3], d[4], b * 4);
    $b(f, 0, 0, b * 40);
    ed(f, d[5]);
    $b(f, 0, 0, b * 25);
    ed(f, d[6], d[7], b * 8);
    return e;
  }
  function Jc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    rd(f, 7, b * 60, b * 10);
    f.restore();
    ed(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      rd(f, 3, b * 21, b * 4);
      ed(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    rd(f, 9, b * 60, b * 10);
    ed(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    rd(f, 9, b * 38, b * 10);
    ed(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    rd(f, 9, b * 20, b * 8);
    ed(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      ed(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      ed(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      ed(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      ed(e, b[3], b[3], a * 32);
      $b(e, a * 41, a * 30, a * 14.7648230602334);
      ed(e, b[3], b[3], a * 32);
      $b(e, a * 369, a * 30, a * 15.556349186104045);
      ed(e, b[3], b[3], a * 32);
      $b(e, a * 364, a * 190, a * 15.620499351813308);
      ed(e, b[3], b[3], a * 32);
      $b(e, a * 41, a * 186, a * 15.556349186104045);
      ed(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      ed(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      ed(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      ed(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      ed(e, b[3], b[3], a * 32);
      $b(e, a * 41, a * 30, a * 14.7648230602334);
      ed(e, b[3], b[3], a * 32);
      $b(e, a * 369, a * 30, a * 15.556349186104045);
      ed(e, b[3], b[3], a * 32);
      $b(e, a * 364, a * 190, a * 15.620499351813308);
      ed(e, b[3], b[3], a * 32);
      $b(e, a * 41, a * 186, a * 15.556349186104045);
      ed(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    ed(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    ed(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    ed(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    ed(e, b[2], b[0], a * 12);
    $b(e, a * 41, a * 30, a * 14.7648230602334);
    ed(e, b[2], b[0], a * 12);
    $b(e, a * 369, a * 30, a * 15.556349186104045);
    ed(e, b[2], b[0], a * 12);
    $b(e, a * 364, a * 190, a * 15.620499351813308);
    ed(e, b[2], b[0], a * 12);
    $b(e, a * 41, a * 186, a * 15.556349186104045);
    ed(e, b[2], b[0], a * 12);
    return d;
  }
  function Bc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    $b(d, a * 74.5, a * 85, a * 66);
    ed(d, b[0]);
    d.globalAlpha = 1;
    $b(d, a * 75.5, a * 72.5, a * 67);
    ed(d, b[1], b[2], a * 4);
    $b(d, a * 75.5, a * 73.5, a * 54);
    ed(d, b[3]);
    d.globalAlpha = 0.5;
    $b(d, a * 74.5, a * 80.5, a * 39);
    ed(d, b[4]);
    d.globalAlpha = 1;
    $b(d, a * 74.5, a * 74.5, a * 37);
    ed(d, b[5]);
    return c;
  }
  function Dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    id(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    id(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    id(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    id(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    id(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    id(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    ed(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    id(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    ed(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    id(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    ed(e, c[3], c[4], a * 3);
    return d;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    ed(e, c[0], c[1], 4);
    return d;
  }
  function Ic(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      ed(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      ed(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      ed(d, b[0]);
    }
    return e;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    ed(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    ed(e, ls, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    ed(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    return d;
  }
  function Qc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = Yc(b * 1, wh, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      $b(g, b * 113, b * 120, b * 66);
      ed(g, undefined, d[4], b * 13);
      a = hu(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      ed(g, undefined, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      $b(g, b * 113, b * 120, b * 66);
      ed(g, undefined, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      id(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      ed(g, "#dff2f7", "#187484", b * 7);
      $b(g, b * 22, b * 82, b * 12);
      ed(g, "#dff2f7", "#187484", b * 7);
      $b(g, b * 145, b * 82, b * 12);
      ed(g, "#dff2f7", "#187484", b * 7);
      a = yu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = yu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = yu(b * 0.5, Ro, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = uu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = uu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = uu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = uu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = uu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = uu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = uu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = uu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      $b(g, b * 113, b * 120, b * 66);
      ed(g, undefined, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      id(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      ed(g, undefined, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      ed(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      ed(g, Y, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      ed(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      ed(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      ed(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      ed(g, Xg, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      ed(g, at, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      ed(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      ed(g, at, d[5], b * 14);
    }
    return f;
  }
  const _c = String.fromCharCode;
  const Fc = _c(101);
  const Rc = _c(118);
  const jc = _c(97);
  const Lc = _c(108);
  function Gc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    rd(f, 7, b * 60, b * 10);
    f.restore();
    ed(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      rd(f, 3, b * 21, b * 4);
      ed(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    rd(f, 8, b * 60, b * 10);
    ed(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    rd(f, 8, b * 40, b * 10);
    ed(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    rd(f, 8, b * 28, b * 8);
    ed(f, d[7]);
    f.restore();
    return e;
  }
  function Oc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    rd(f, 7, b * 60, b * 10);
    f.restore();
    ed(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      rd(f, 3, b * 21, b * 4);
      ed(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    rd(f, 7, b * 60, b * 10);
    ed(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    rd(f, 7, b * 40, b * 10);
    ed(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    rd(f, 7, b * 23, b * 5);
    f.restore();
    ed(f, d[7]);
    return e;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    ed(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    ed(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    ed(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    ed(e, c[0], c[1], 4);
    return d;
  }
  if (za.ⲆᐃⲆⲆΔⲆᐃ) {
    var qc = za.Math.acos;
    za.Math.acos = za.Math.asin;
    za.Math.asin = qc;
    var Hc = za.Math.acos;
    za.Math.acos = za.Math.asin;
    za.Math.asin = Hc;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    ed(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    ed(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    ed(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    ed(e, Wa, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    ed(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    ed(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    ed(e, c[3], c[4], a * 8);
    return d;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    id(e, 0, 0, a * 400, a * 220, a * 30);
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    ed(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    ed(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    ed(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    ed(e, c[3], c[1], a * 12);
    $b(e, a * 41, a * 30, a * 14.7648230602334);
    ed(e, c[3], c[1], a * 12);
    $b(e, a * 369, a * 30, a * 15.556349186104045);
    ed(e, c[3], c[1], a * 12);
    $b(e, a * 364, a * 190, a * 15.620499351813308);
    ed(e, c[3], c[1], a * 12);
    $b(e, a * 41, a * 186, a * 15.556349186104045);
    ed(e, c[3], c[1], a * 12);
    return d;
  }
  const Kc = 8;
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    ed(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    ed(e, c[2]);
    return d;
  }
  function Xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function Zc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    $b(d, a * 86.5, a * 98, a * 80);
    ed(d, b[0]);
    d.globalAlpha = 1;
    $b(d, a * 86.5, a * 89, a * 81);
    ed(d, b[1], b[2], a * 4);
    $b(d, a * 86.5, a * 86, a * 59);
    ed(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    $b(d, a * 86.5, a * 95, a * 34);
    ed(d, b[0]);
    d.globalAlpha = 1;
    $b(d, a * 86.5, a * 89, a * 34);
    ed(d, b[5]);
    return c;
  }
  function $c(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  function em(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    $b(d, a * 126.5, a * 134, a * 119);
    ed(d, b[0]);
    d.globalAlpha = 1;
    $b(d, a * 126.5, a * 124, a * 119);
    ed(d, b[1], b[2], a * 4);
    $b(d, a * 126.5, a * 127, a * 100);
    ed(d, b[3]);
    d.globalAlpha = 0.5;
    $b(d, a * 126.5, a * 135, a * 81);
    ed(d, b[0]);
    d.globalAlpha = 1;
    $b(d, a * 126.5, a * 125, a * 84);
    ed(d, b[4], b[5], a * 4);
    $b(d, a * 126.5, a * 125, a * 61);
    ed(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    $b(d, a * 126.5, a * 134, a * 40);
    ed(d, b[8]);
    d.globalAlpha = 1;
    $b(d, a * 126.5, a * 125, a * 40);
    ed(d, b[9]);
    return c;
  }
  const im = 6;
  function tm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  function nm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    ed(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    ed(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    ed(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    ed(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    ed(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    ed(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    ed(d, b[1]);
    $b(d, a * 102, a * 269, a * 11);
    ed(d, b[3]);
    $b(d, a * 98, a * 266, a * 5);
    ed(d, b[6]);
    $b(d, a * 168, a * 269, a * 11);
    ed(d, b[3]);
    $b(d, a * 164, a * 266, a * 5);
    ed(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    ed(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    ed(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    ed(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    ed(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    ed(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    ed(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    ed(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    ed(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    ed(d, b[7]);
    return c;
  }
  function om(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    ed(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    ed(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    ed(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    ed(d, b[1], b[2], a * 4);
    $b(d, a * 51, a * 91, a * 9);
    ed(d, b[3]);
    $b(d, a * 95, a * 91, a * 9);
    ed(d, b[3]);
    $b(d, a * 91, a * 89, a * 4);
    ed(d, b[4]);
    $b(d, a * 47, a * 89, a * 4);
    ed(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    ed(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    ed(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    ed(d, undefined, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    ed(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    ed(d, b[6]);
    return c;
  }
  function am(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  function rm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  function sm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  function hm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  function lm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    ed(d, b[0]);
    return c;
  }
  function gm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    id(d, 0, 0, 20, 35, 7);
    ed(d, b[0]);
    return c;
  }
  function um(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    ed(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    ed(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    ed(d, b[3]);
    $b(d, a * 103, a * 110, a * 11);
    ed(d, b[4]);
    $b(d, a * 55, a * 111, a * 11);
    ed(d, b[4]);
    $b(d, a * 99, a * 107, a * 5);
    ed(d, b[1]);
    $b(d, a * 51, a * 108, a * 5);
    ed(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    ed(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    ed(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    ed(d, Bg, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    ed(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    ed(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    ed(d, b[3]);
    return c;
  }
  const bm = 3;
  function dm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    ed(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    ed(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    ed(d, b[2]);
    return c;
  }
  function vm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    ed(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    ed(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    ed(d, b[2]);
    return c;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    ed(e, at, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    ed(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    ed(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    ed(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    ed(e, undefined, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    ed(e, Ho, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    id(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    ed(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    id(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    ed(e, c[8], c[2], a * 4);
    $b(e, a * 87, a * 39, a * 4.123105625617661);
    ed(e, c[9], c[2], a * 4);
    $b(e, a * 87, a * 60, a * 4.242640687119285);
    ed(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    ed(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    ed(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    ed(e, c[9], c[2], a * 4);
    $b(e, a * 50, a * 80, a * 5);
    ed(e, c[9], c[2], a * 4);
    $b(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    ed(e, c[9], c[2], a * 4);
    $b(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    ed(e, c[9], c[2], a * 4);
    return d;
  }
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    id(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    ed(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    id(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    ed(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    ed(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    ed(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    ed(e, c[2], c[1], a * 4);
    $b(e, a * 71, a * 44.375, a * 16.55294535724685);
    ed(e, c[2], c[1], a * 4);
    $b(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    ed(e, c[2], c[1], a * 4);
    return d;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    ed(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    ed(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    id(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    id(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    ed(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    ed(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    ed(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    ed(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    ed(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    ed(e, c[6], c[2], a * 4);
    return d;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    id(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    ed(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    id(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    id(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    id(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    ed(e, c[2]);
    return d;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    ed(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    ed(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    ed(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    ed(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    ed(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    ed(e, Ms, c[1], a * 4);
    $b(e, a * 58, a * 50, a * 5);
    ed(e, c[4]);
    $b(e, a * 43, a * 65, a * 5);
    ed(e, c[4]);
    $b(e, a * 58, a * 73, a * 5);
    ed(e, c[4]);
    $b(e, a * 58, a * 50, a * 2);
    ed(e, c[5]);
    $b(e, a * 43, a * 65, a * 2);
    ed(e, c[5]);
    $b(e, a * 58, a * 73, a * 2);
    ed(e, c[5]);
    return d;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    id(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    ed(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    id(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    ed(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    ed(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    ed(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    id(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    ed(e, undefined, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    id(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    ed(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    id(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    ed(e, c[6], c[7], a * 4);
    return d;
  }
  const zm = 8;
  function ym(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    id(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    ed(e, c[0]);
    id(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    ed(e, c[1], c[2], b * 4);
    var a = sd(-Math.PI / 5, Ot(b * 0.5, wh, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = sd(Math.PI / 4, Dc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      id(e, a * 0, a * 5, a * 90, a * 60, 10);
      ed(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      $b(e, a * 25, a * 40, a * 10);
      e.fill();
      $b(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      id(e, 0, 0, a * 90, a * 60, a * 10);
      ed(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      $b(e, a * 25, a * 40, a * 10);
      e.fill();
      $b(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      ed(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      ed(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      ed(e, b[1]);
      e.restore();
      e.save();
      id(e, 0, a * 15, a * 90, a * 50, a * 10);
      ed(e, b[0]);
      id(e, 0, a * 10, a * 90, a * 50, a * 10);
      ed(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      $b(e, a * 25, a * 40, a * 10);
      e.fill();
      $b(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    $b(e, a * 69, a * 64, a * 48.16637831516918);
    ed(e, c[1]);
    e.globalAlpha = 0.7;
    $b(e, a * 69, a * 64, a * 38.23105625617661);
    ed(e, c[2]);
    e.globalAlpha = 0.7;
    $b(e, a * 69, a * 64, a * 32.01562118716424);
    ed(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    ed(e, c[3]);
    return d;
  }
  function km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    $b(e, a * 220, a * 201, a * 170.41713528867922);
    ed(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    $b(e, a * 220, a * 201, a * 170.41713528867922);
    ed(e, c[1], c[2], a * 6);
    $b(e, a * 220, a * 201, a * 130);
    ed(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    ed(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    ed(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    ed(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    ed(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    ed(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    ed(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    ed(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    ed(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    ed(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    ed(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    ed(e, Bg, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    ed(e, p, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    ed(e, Xg, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    ed(e, Fr, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    ed(e, undefined, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    ed(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    ed(e, Yh, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    ed(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    ed(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    ed(e, Di, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    ed(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    ed(e, Ms, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    ed(e, Fl, c[6], a * 6);
    $b(e, a * 222, a * 199, a * 120.74767078498864);
    ed(e, undefined, c[3], a * 40);
    $b(e, a * 220, a * 200, a * 95.44108130150245);
    ed(e, undefined, c[2], a * 15);
    $b(e, a * 220, a * 201, a * 85);
    ed(e, undefined, c[4], a * 10);
    e.globalAlpha = 0.5;
    $b(e, a * 220, a * 201, a * 82);
    ed(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    $b(e, a * 63, a * 136, a * 49.193495504995376);
    ed(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    $b(e, a * 63, a * 136, a * 49.193495504995376);
    ed(e, c[8], c[2], a * 4);
    $b(e, a * 63, a * 137, a * 25.632011235952593);
    ed(e, c[7], c[2], a * 4);
    return d;
  }
  function Am(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    $b(g, b * 174, b * 87.984375, b * 20.8806130178211);
    ed(g, d[0], d[0], b * 8);
    $b(g, b * 174, b * 87.984375, b * 12.165525060596439);
    ed(g, d[0], d[0], b * 8);
    $b(g, b * 174, b * 87.484375, b * 6);
    ed(g, d[0]);
    $b(g, b * 30, b * 87.984375, b * 20.8806130178211);
    ed(g, d[0], d[0], b * 4);
    $b(g, b * 30, b * 87.984375, b * 12.165525060596439);
    ed(g, d[0], d[0], b * 4);
    $b(g, b * 30, b * 87.484375, b * 6);
    ed(g, d[0]);
    $b(g, b * 100, b * 30, b * 20.8806130178211);
    ed(g, d[0], d[0], b * 4);
    $b(g, b * 100, b * 30, b * 12.165525060596439);
    ed(g, d[0], d[0], b * 4);
    $b(g, b * 100, b * 30, b * 6);
    ed(g, d[0]);
    $b(g, b * 100, b * 130, b * 20.8806130178211);
    ed(g, d[0], d[0], b * 4);
    $b(g, b * 100, b * 130, b * 12.165525060596439);
    ed(g, d[0], d[0], b * 4);
    $b(g, b * 100, b * 130, b * 6);
    ed(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    id(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    ed(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    id(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    ed(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    id(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    $b(g, b * 174, b * 87.984375, b * 20.8806130178211);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 174, b * 87.984375, b * 12.165525060596439);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 174, b * 87.484375, b * 6);
    ed(g, d[2]);
    $b(g, b * 30, b * 87.984375, b * 20.8806130178211);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 30, b * 87.984375, b * 12.165525060596439);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 30, b * 87.484375, b * 6);
    ed(g, d[2]);
    $b(g, b * 102, b * 30, b * 20.8806130178211);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 102, b * 30, b * 12.165525060596439);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 102, b * 30, b * 6);
    ed(g, d[1]);
    $b(g, b * 102, b * 130, b * 20.8806130178211);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 102, b * 130, b * 12.165525060596439);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 102, b * 130, b * 6);
    ed(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    id(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    ed(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    id(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    ed(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    id(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    ed(g, d[2], d[1], b * 8);
    $b(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 135, b * 107.36605834960938, b * 13);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    ed(g, d[2]);
    $b(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 70, b * 107.36605834960938, b * 13);
    ed(g, d[1], d[3], b * 8);
    $b(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    ed(g, d[2]);
    return f;
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    ed(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    ed(e, c[1]);
    return d;
  }
  function Jm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    $b(d, a * 55, a * 55, a * 55);
    ed(d, b[0]);
    return c;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    ed(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    ed(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    ed(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    ed(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    ed(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    ed(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    ed(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    ed(e, kg, c[4], a * 6);
    return d;
  }
  function Bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    $b(e, a * 220, a * 201, a * 170.41713528867922);
    ed(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    $b(e, a * 220, a * 201, a * 170.41713528867922);
    ed(e, c[1], c[2], a * 6);
    $b(e, a * 220, a * 201, a * 130);
    ed(e, c[11], c[2], a * 6);
    $b(e, a * 222, a * 199, a * 120.74767078498864);
    ed(e, undefined, c[3], a * 40);
    $b(e, a * 220, a * 200, a * 95.44108130150245);
    ed(e, Xg, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    $b(e, a * 63, a * 136, a * 49.193495504995376);
    ed(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    $b(e, a * 63, a * 136, a * 49.193495504995376);
    ed(e, c[8], c[2], a * 4);
    $b(e, a * 63, a * 137, a * 25.632011235952593);
    ed(e, c[7], c[2], a * 4);
    return d;
  }
  function Dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    ed(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    ed(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    ed(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    ed(e, Y, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    ed(e, c[3], c[2], a * 19);
    $b(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    ed(e, c[4]);
    $b(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    ed(e, c[4]);
    $b(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    ed(e, c[4]);
    $b(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    ed(e, c[4]);
    $b(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    ed(e, c[4]);
    $b(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    ed(e, c[4]);
    $b(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    ed(e, c[4]);
    $b(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    ed(e, c[4]);
    $b(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    ed(e, c[4]);
    $b(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    ed(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    ed(e, c[5]);
    return d;
  }
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    $b(e, a * 98, a * 99, a * 100);
    ed(e, c[0]);
    e.globalAlpha = 0.5;
    $b(e, a * 98, a * 99, a * 90);
    ed(e, c[1]);
    return d;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    id(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    ed(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    id(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    ed(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    id(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    ed(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    id(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    ed(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    id(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    ed(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    id(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    ed(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    id(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    ed(e, Ms, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    id(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    ed(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    id(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    ed(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    id(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    ed(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    id(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    ed(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    id(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    ed(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    ed(e, Aa, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    rd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    ed(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    rd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    ed(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    rd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    ed(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    rd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    ed(e, c[7], c[8], a * 7);
    return d;
  }
  function Sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    id(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    ed(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    id(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    id(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    ed(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    id(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    id(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    ed(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    id(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    id(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    ed(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    id(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    id(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    ed(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    id(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    id(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    ed(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    id(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    id(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    ed(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    id(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    id(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    ed(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    id(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    id(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    ed(e, c[2], c[3], a * 3);
    return d;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    ed(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    ed(e, c[4], c[5], a * 6);
    return d;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    ed(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    ed(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    ed(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    ed(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    ed(e, Ms, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    ed(e, c[3]);
    return d;
  }
  function Fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    ed(e, c[1], c[2], a * 10);
    return d;
  }
  function Rm(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    $b(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    ed(d, undefined, c[2], a * 4);
    $b(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    ed(d, undefined, c[1], a * 4);
    $b(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    ed(d, undefined, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    id(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    ed(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    rd(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    ed(d, c[3]);
    $b(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    ed(d, c[3]);
    return e;
  }
  function jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    ed(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    id(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    ed(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    ed(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    ed(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    ed(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    id(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 3);
    return d;
  }
  function Lm(a) {
    return za.String.fromCharCode(a);
  }
  function Gm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    id(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    ed(f, c[2]);
    id(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    ed(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = wm(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = wm(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function Wm(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Om(a) {
    return za.String.fromCharCode(a);
  }
  function Nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    ed(e, undefined, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    ed(e, at, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    ed(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    ed(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    ed(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    ed(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    ed(e, Xg, c[3], a * 4);
    return d;
  }
  function Hm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      $b(e, a * 100.5, a * 82, a * 74.92746655359852);
      ed(e, c[0], c[0], a * 4);
      $b(e, a * 100.5, a * 82, a * 65.9417374971317);
      ed(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      $b(e, a * 100.5, a * 82, a * 74.92746655359852);
      ed(e, c[1], c[3], a * 4);
      $b(e, a * 100.5, a * 82, a * 65.9417374971317);
      ed(e, c[1], c[2], a * 4);
      $b(e, a * 100.5, a * 82, a * 35.9417374971317);
      ed(e, c[1], c[2], a * 20);
      $b(e, a * 100.5, a * 82, a * 15.9417374971317);
      ed(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = Am(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = Am(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = Am(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function Um(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    ed(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    ed(d, undefined, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    ed(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    ed(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    ed(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    ed(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    ed(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    ed(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    ed(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    ed(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    ed(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    ed(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    ed(d, b[11]);
    $b(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    ed(d, b[12]);
    $b(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    ed(d, b[13]);
    $b(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    ed(d, b[12]);
    $b(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    ed(d, b[13]);
    return c;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    id(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    ed(e, c[0]);
    $b(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    id(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    ed(e, undefined, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    ed(e, undefined, c[3], a * 6);
    $b(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    ed(e, Xg, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    id(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    ed(e, c[1]);
    $b(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    ed(e, c[2], c[1], a * 4);
    $b(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    ed(e, c[3], c[1], a * 4);
    $b(e, a * 78, a * 44, a * 20);
    ed(e, c[4]);
    return d;
  }
  function Km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    ed(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    ed(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    ed(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    ed(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    ed(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    ed(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    ed(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    ed(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    ed(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    ed(e, c[3], c[2], a * 4);
    $b(e, a * 108.5, a * 148.421875, a * 9);
    ed(e, c[5]);
    $b(e, a * 106.5, a * 144.421875, a * 3);
    ed(e, c[6]);
    $b(e, a * 46.5, a * 148.421875, a * 9);
    ed(e, c[5]);
    $b(e, a * 44.5, a * 144.421875, a * 3);
    ed(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    ed(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    ed(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    ed(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    ed(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    ed(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    ed(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    ed(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    ed(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    ed(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    ed(e, c[3], c[2], a * 4);
    return d;
  }
  function Vm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    ed(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    $b(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    ed(f, d[5], undefined, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    ed(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      $b(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      ed(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      $b(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      ed(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    $b(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    ed(f, Di, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    ed(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    ed(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    ed(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    ed(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    ed(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    ed(f, d[4], d[2], b * 12);
    return e;
  }
  function Xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    id(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    ed(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    id(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    ed(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    id(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    ed(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    id(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    ed(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    id(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    ed(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    id(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    ed(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    ed(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    ed(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    ed(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    ed(e, c[11], c[10], a * 3);
    return d;
  }
  function Zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0 : 0;
    $b(e, a * 178.5, a * 172.828125, a * 150);
    ed(e, Fl, c[0], a * 65);
    $b(e, a * 178.5, a * 172.828125, a * 150);
    ed(e, Wa, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    id(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    id(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    ed(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    id(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    ed(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    ed(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    ed(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    $b(e, a * 178.5, a * 172.828125, a * 150);
    ed(e, undefined, c[2], a * 95);
    $b(e, a * 178.5, a * 172.828125, a * 150);
    ed(e, Di, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    id(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    ed(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    id(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    ed(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    id(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    ed(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    ed(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    ed(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    ed(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    ed(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function $m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    rd(e, 6, a * 43, a * 10);
    e.restore();
    ed(e, c[0], c[1], a * 3);
    return d;
  }
  function ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    id(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    id(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    ed(e, at, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    id(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    id(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    ed(e, Y, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    ed(e, Kn, c[1], a * 10);
    return d;
  }
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    rd(e, 6, a * 40, a * 10);
    e.restore();
    ed(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    rd(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    ed(e, c[2], c[3], a * 5);
    return d;
  }
  function tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    id(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    ed(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    ed(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    id(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    ed(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    ed(e, undefined, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    ed(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    ed(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    ed(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    id(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    ed(e, c[5]);
    return d;
  }
  function np(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    ed(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    ed(e, Fr, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    ed(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    ed(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    ed(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    ed(e, c[2], c[3], a * 12);
    return d;
  }
  function op(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    id(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    ed(e, c[0]);
    id(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    ed(e, c[0]);
    id(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    ed(e, c[0]);
    id(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    ed(e, c[0]);
    id(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    id(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    ed(e, c[1]);
    id(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    ed(e, c[1]);
    id(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    ed(e, c[2], c[3], a * 4);
    id(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    ed(e, c[2], c[3], a * 4);
    id(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    ed(e, c[2], c[3], a * 4);
    return d;
  }
  const ap = 3;
  function rp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    ed(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    ed(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    ed(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    ed(e, Wa, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    ed(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    ed(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    ed(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    ed(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    ed(e, undefined, c[2], a * 11);
    return d;
  }
  function sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    ed(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    ed(e, Wa, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    ed(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    ed(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    ed(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    ed(e, c[0], c[1], a * 20);
    return d;
  }
  function hp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    ed(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    ed(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    ed(e, ls, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    ed(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    ed(e, Y, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    ed(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    ed(e, c[2]);
    return d;
  }
  function lp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    ed(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    ed(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    ed(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    ed(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    ed(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    ed(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    ed(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    ed(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    ed(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    ed(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    ed(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    ed(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    ed(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    ed(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    ed(g, undefined, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      ed(g, Wa, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      ed(g, Yh, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      ed(g, Fl, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      ed(g, undefined, d[5], b * 6);
      $b(g, b * 86, b * 114.39999389648438, b * 4.5);
      ed(g, d[1], d[5], b * 6);
      $b(g, b * 121, b * 114.39999389648438, b * 4.5);
      ed(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function gp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    id(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    ed(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    ed(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    ed(e, undefined, c[6], a * 15);
    return d;
  }
  function up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    id(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    ed(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    ed(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    ed(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    ed(e, kg, c[6], a * 15);
    return d;
  }
  function bp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    ed(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    ed(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    ed(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    ed(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    ed(e, Y, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    ed(e, p, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    ed(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    ed(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    ed(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    ed(e, undefined, c[2], a * 11);
    return d;
  }
  function dp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    $b(e, a * 54.5, a * 55, a * 48.038209575038294);
    ed(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      ed(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      id(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      ed(e, b[2], b[3], a * 4);
      $b(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      ed(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      id(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      ed(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      ed(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      ed(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      ed(e, undefined, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      ed(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      ed(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      ed(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      ed(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      ed(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      ed(e, b[3]);
    }
    return d;
  }
  function vp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    id(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    ed(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    id(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    ed(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    ed(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    ed(e, c[5]);
    e.restore();
    return d;
  }
  function cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    ed(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    ed(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    ed(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    ed(e, undefined, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    ed(e, c[4], c[5], a * 5);
    return d;
  }
  function mp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    id(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    ed(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    id(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    ed(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    id(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    ed(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    id(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    ed(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    id(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    ed(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    id(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    ed(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    id(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    ed(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    id(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    ed(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    id(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    ed(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    id(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    ed(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    id(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    ed(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    id(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    ed(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    id(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    ed(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    id(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    ed(d, b[2]);
    return c;
  }
  const pp = 3;
  function Cp() {
    var b = ox.time;
    if (Ⲇᐃ[285]) {
      Hn.drawImage(Ⲇᐃ[285][b][1], $n + 480, _n + 190);
      Hn.drawImage(Ⲇᐃ[285][b][2], $n + 180, _n - 430);
      Hn.drawImage(Ⲇᐃ[285][b][1], $n - 855, _n + 100);
      Hn.drawImage(Ⲇᐃ[285][b][0], $n - 550, _n - 300);
      Hn.drawImage(Ⲇᐃ[285][b][0], $n - 1020, _n - 520);
    }
    if (Ⲇᐃ[108]) {
      Hn.drawImage(Ⲇᐃ[108][b][1], $n - 80, _n - 640);
      Hn.drawImage(Ⲇᐃ[108][b][1], $n + 80, _n + 490);
      Hn.drawImage(Ⲇᐃ[108][b][2], $n - 180, _n - 700);
      Hn.drawImage(Ⲇᐃ[108][b][0], $n + 550, _n + 100);
      Hn.drawImage(Ⲇᐃ[108][b][1], $n + 450, _n + 300);
      Hn.drawImage(Ⲇᐃ[108][b][1], $n + 780, _n + 300);
      Hn.drawImage(Ⲇᐃ[108][b][2], $n + 980, _n + 200);
      Hn.drawImage(Ⲇᐃ[108][b][2], $n + 680, _n + 600);
      Hn.drawImage(Ⲇᐃ[108][b][2], $n - 380, _n + 100);
      Hn.drawImage(Ⲇᐃ[108][b][2], $n + 280, _n + 250);
    }
    if (Ⲇᐃ[110]) {
      Hn.drawImage(Ⲇᐃ[110][b][0], $n - 590, _n);
      Hn.drawImage(Ⲇᐃ[110][b][0], $n + 120, _n - 390);
      Hn.drawImage(Ⲇᐃ[110][b][0], $n - 270, _n + 340);
    }
    if (Ⲇᐃ[109]) {
      Hn.drawImage(Ⲇᐃ[109][b][4], $n - 700, _n - 600);
      Hn.drawImage(Ⲇᐃ[109][b][2], $n - 970, _n - 250);
      Hn.drawImage(Ⲇᐃ[109][b][5], $n - 720, _n - 200);
      Hn.drawImage(Ⲇᐃ[109][b][2], $n - 1020, _n + 340);
      Hn.drawImage(Ⲇᐃ[109][b][0], $n - 1120, _n - 0);
      Hn.drawImage(Ⲇᐃ[109][b][1], $n - 650, _n - 330);
      Hn.drawImage(Ⲇᐃ[109][b][4], $n - 495, _n - 90);
      Hn.drawImage(Ⲇᐃ[109][b][3], $n - 520, _n + 340);
      Hn.drawImage(Ⲇᐃ[109][b][2], $n + 830, _n - 520);
    }
    Ⲇᐃ[413];
    if (qx && px) {
      var c = qx.ⲆⲆᐃ.x;
      var d = qx.ⲆⲆᐃ.y;
      qx.ⲆⲆᐃ.x = $n;
      qx.ⲆⲆᐃ.y = _n;
      var e = px.time;
      px.time = ox.time;
      var f;
      var g = ox.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ΔⵠⲆⲆ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ΔⲆᐃⲆ[0].x = f.x - 20.5;
      f.ΔⲆᐃⲆ[0].y = f.y - 22.5;
      f.ΔⲆᐃⲆ[1].x = f.x - 35.5;
      f.ΔⲆᐃⲆ[1].y = f.y + 7.5;
      f.ΔⲆᐃⲆ[2].x = f.x + 7.5;
      f.ΔⲆᐃⲆ[2].y = f.y - 30;
      f.ΔⲆᐃⲆ[3].x = f.x + 22.5;
      f.ΔⲆᐃⲆ[3].y = f.y;
      f.ΔⲆᐃⲆ[4].x = f.x - 7.5;
      f.ΔⲆᐃⲆ[4].y = f.y + 14.5;
      for (var a = 0; a < f.info; a++) {
        f.ΔⲆᐃⲆ[a].ΔⵠⲆⲆ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ΔⲆᐃⲆ[0].x = f.x - 20.5;
      f.ΔⲆᐃⲆ[0].y = f.y - 22.5;
      f.ΔⲆᐃⲆ[1].x = f.x - 35.5;
      f.ΔⲆᐃⲆ[1].y = f.y + 7.5;
      f.ΔⲆᐃⲆ[2].x = f.x + 7.5;
      f.ΔⲆᐃⲆ[2].y = f.y - 30;
      f.ΔⲆᐃⲆ[3].x = f.x + 22.5;
      f.ΔⲆᐃⲆ[3].y = f.y;
      f.ΔⲆᐃⲆ[4].x = f.x - 7.5;
      f.ΔⲆᐃⲆ[4].y = f.y + 14.5;
      for (a = 0; f.info > a; a++) {
        f.ΔⲆᐃⲆ[a].ΔⵠⲆⲆ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ⲆⵠᐃΔᐃ(113);
      g[0].ᐃⲆᐃΔⲆ();
      qx.ⲆⲆᐃ.x = c;
      qx.ⲆⲆᐃ.y = d;
      px.time = e;
    }
  }
  function Tp() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      var c = 0;
      for (var d = 0; d < a.length; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== 5) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ⲆᐃᐃᐃⲆΔᐃⵠⵠ();
    Ⲇᐃ[1026] = [Δᐃ.ᐃᐃⵠΔΔⲆΔ, Δᐃ.ⵠΔΔⵠΔᐃⲆ];
    Ⲇᐃ[1025] = [];
    Ⲇᐃ[1025][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_010_000")] = [Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ᐃΔⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_010_010")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_010_000")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_011_000")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_010_000")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_011_010")] = [Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ᐃᐃΔΔⲆⵠⲆ, Δᐃ.ⵠΔΔΔⲆΔⵠ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_011_011")] = [Δᐃ.ⲆᐃᐃᐃΔⵠΔ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ᐃᐃΔΔⲆⵠⲆ, Δᐃ.ⵠΔΔΔⲆΔⵠ, Δᐃ.ⲆⲆⵠⲆᐃ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_110_000")] = [Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ᐃΔⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_110_010")] = [Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠΔⵠⵠΔⲆⵠ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_110_110")] = [Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ᐃᐃⲆⵠΔⲆⲆΔᐃ, Δᐃ.ᐃⲆⲆⵠᐃⲆⵠ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠΔⵠⵠΔⲆⵠ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_111_000")] = [Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_111_111")] = [Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ᐃⲆⲆⵠᐃⲆⵠ, Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ⲆᐃᐃᐃΔⵠΔ, Δᐃ.ΔᐃᐃᐃⵠᐃΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_010_000")] = [Δᐃ.ᐃΔⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_010_010")] = [Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_011_000")] = [Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ΔᐃⵠⵠⲆ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_000")] = [Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")] = [Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ᐃⲆⲆⵠᐃⲆⵠ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ΔᐃᐃᐃⵠᐃΔ, Δᐃ.ⲆΔⵠΔᐃⲆΔ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ᐃᐃΔΔⲆⵠⲆ, Δᐃ.ⵠΔΔΔⲆΔⵠ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_011_010")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_011_011")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_111_011")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_010")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_111_000")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_111_010")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_111_011")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_111_110")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_111_111")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_111_110")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("000_111_010")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_011_000")] = [Δᐃ.ⵠΔΔⲆΔΔⲆ, Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ΔᐃⵠⵠⲆ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_011_010")] = [Δᐃ.ⵠΔΔⲆΔΔⲆ, Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_011_011")] = [Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ⲆᐃᐃᐃΔⵠΔ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠΔΔⲆΔΔⲆ, Δᐃ.ⲆΔⵠΔᐃⲆΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_111_000")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_011_010")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_111_010")] = [Δᐃ.ⵠΔΔⲆΔΔⲆ, Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ΔᐃᐃᐃⵠᐃΔ, Δᐃ.ⲆΔⵠΔᐃⲆΔ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ᐃᐃΔΔⲆⵠⲆ, Δᐃ.ⵠΔΔΔⲆΔⵠ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_111_011")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_111_010")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_111_110")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_111_010")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("011_111_111")] = [Δᐃ.ⵠΔΔⲆΔΔⲆ, Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ⲆᐃᐃᐃΔⵠΔ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ᐃⲆⲆⵠᐃⲆⵠ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ΔᐃᐃᐃⵠᐃΔ, Δᐃ.ⲆΔⵠΔᐃⲆΔ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ᐃᐃΔΔⲆⵠⲆ, Δᐃ.ⵠΔΔΔⲆΔⵠ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_110_000")] = [Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ΔᐃᐃⲆⵠⲆⲆ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_110_010")] = [Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_110_110")] = [Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ᐃⲆⲆⵠᐃⲆⵠ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_111_000")] = [Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ΔᐃᐃⲆⵠⲆⲆ, Δᐃ.ⲆᐃⵠᐃΔⵠᐃ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_111_110")] = [Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ᐃⲆⲆⵠᐃⲆⵠ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ΔᐃᐃᐃⵠᐃΔ, Δᐃ.ⲆᐃⵠᐃΔⵠᐃ, Δᐃ.ⲆΔⵠΔᐃⲆΔ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ᐃᐃΔΔⲆⵠⲆ, Δᐃ.ⵠΔΔΔⲆΔⵠ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_111_111")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_111_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_111_011")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_111_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_111_010")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("110_111_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("111_111_110")] = [Δᐃ.ⵠᐃⲆⵠΔ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ⵠΔΔΔⲆΔⵠ, Δᐃ.ᐃᐃΔΔⲆⵠⲆ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⲆΔⵠΔᐃⲆΔ, Δᐃ.ⲆᐃⵠᐃΔⵠᐃ, Δᐃ.ΔᐃᐃᐃⵠᐃΔ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠΔΔⲆΔΔⲆ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("111_111_011")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("111_111_110")];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("111_111_000")] = [Δᐃ.ΔᐃᐃⲆⵠⲆⲆ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠΔΔⲆΔΔⲆ, Δᐃ.ⲆᐃⵠᐃΔⵠᐃ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("111_111_111")] = [Δᐃ.ⵠΔΔⲆΔΔⲆ, Δᐃ.ΔΔⵠⲆⵠ, Δᐃ.ⵠⲆⵠⲆⲆ, Δᐃ.ⲆᐃᐃᐃΔⵠΔ, Δᐃ.ⵠᐃᐃΔⵠ, Δᐃ.ᐃΔᐃⲆᐃ, Δᐃ.ᐃⵠⲆⲆⵠ, Δᐃ.ᐃⲆⲆⵠᐃⲆⵠ, Δᐃ.ⲆⵠΔⵠⵠΔⲆ, Δᐃ.ⵠᐃᐃᐃΔ, Δᐃ.ΔᐃᐃᐃⵠᐃΔ, Δᐃ.ⲆΔⵠΔᐃⲆΔ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃⵠᐃᐃΔᐃ, Δᐃ.ᐃⵠᐃᐃⲆΔΔ, Δᐃ.ᐃΔⲆⵠΔ, Δᐃ.ΔᐃΔⲆⵠ, Δᐃ.ⵠᐃΔⲆⵠⲆᐃ, Δᐃ.ᐃᐃΔΔⲆⵠⲆ, Δᐃ.ⵠΔΔΔⲆΔⵠ, Δᐃ.ⲆⲆⵠⲆᐃ, Δᐃ.ΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⲆⵠΔ];
    Ⲇᐃ[1025][Sr.ΔΔⵠ][b("111_111_010")] = Ⲇᐃ[1025][Sr.ΔΔⵠ][b("111_111_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_010_000")] = [Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ⵠΔΔⵠⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_010_010")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_010_000")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_011_000")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_010_000")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_011_010")] = [Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ΔᐃⲆᐃΔⲆΔ, Δᐃ.ⵠᐃΔᐃⵠΔΔ, Δᐃ.ΔΔΔⵠⵠⲆΔ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_011_011")] = [Δᐃ.ⵠⵠⵠⲆⵠΔⵠ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ΔᐃⲆᐃΔⲆΔ, Δᐃ.ⵠᐃΔᐃⵠΔΔ, Δᐃ.ΔΔΔⵠⵠⲆΔ, Δᐃ.ᐃᐃΔᐃⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_110_000")] = [Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⵠΔΔⵠⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_110_010")] = [Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ΔᐃᐃⵠⲆᐃⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_110_110")] = [Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⲆᐃΔⵠΔᐃᐃⵠⲆ, Δᐃ.ⲆⲆⲆΔⲆⲆⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ΔᐃᐃⵠⲆᐃⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_111_000")] = [Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_111_111")] = [Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⲆⲆⲆΔⲆⲆⵠ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⵠⵠⲆⵠΔⵠ, Δᐃ.ⵠΔⵠⲆᐃⵠΔ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_010_000")] = [Δᐃ.ⵠΔΔⵠⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_010_010")] = [Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_011_000")] = [Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ᐃᐃⵠⲆᐃ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_000")] = [Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")] = [Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⲆⲆⲆΔⲆⲆⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⵠΔⵠⲆᐃⵠΔ, Δᐃ.ΔⵠⵠᐃΔⲆⲆ, Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ΔᐃⲆᐃΔⲆΔ, Δᐃ.ⵠᐃΔᐃⵠΔΔ, Δᐃ.ΔΔΔⵠⵠⲆΔ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_011_010")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_011_011")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_111_011")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_010")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_111_000")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_111_010")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_111_011")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_111_110")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_111_111")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_111_110")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("000_111_010")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("010_110_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_011_000")] = [Δᐃ.ⵠᐃᐃⲆΔⲆΔ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ᐃᐃⵠⲆᐃ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_011_010")] = [Δᐃ.ⵠᐃᐃⲆΔⲆΔ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_011_011")] = [Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠⵠⵠⲆⵠΔⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ⵠᐃᐃⲆΔⲆΔ, Δᐃ.ΔⵠⵠᐃΔⲆⲆ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_111_000")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_011_010")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_111_010")] = [Δᐃ.ⵠᐃᐃⲆΔⲆΔ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⵠΔⵠⲆᐃⵠΔ, Δᐃ.ΔⵠⵠᐃΔⲆⲆ, Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ΔᐃⲆᐃΔⲆΔ, Δᐃ.ⵠᐃΔᐃⵠΔΔ, Δᐃ.ΔΔΔⵠⵠⲆΔ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_111_011")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_111_010")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_111_110")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_111_010")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("011_111_111")] = [Δᐃ.ⵠᐃᐃⲆΔⲆΔ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⵠⵠⵠⲆⵠΔⵠ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⲆⲆⲆΔⲆⲆⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⵠΔⵠⲆᐃⵠΔ, Δᐃ.ΔⵠⵠᐃΔⲆⲆ, Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ΔᐃⲆᐃΔⲆΔ, Δᐃ.ⵠᐃΔᐃⵠΔΔ, Δᐃ.ΔΔΔⵠⵠⲆΔ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_110_000")] = [Δᐃ.ⵠⵠⲆⵠⵠⵠⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ΔΔΔⲆⲆΔⲆ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_110_010")] = [Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠⵠⲆⵠⵠⵠⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_110_110")] = [Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⲆⲆⲆΔⲆⲆⵠ, Δᐃ.ⵠⵠⲆⵠⵠⵠⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_111_000")] = [Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⵠⵠⲆⵠⵠⵠⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ΔΔΔⲆⲆΔⲆ, Δᐃ.ΔⵠᐃⲆⲆⲆΔ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_111_110")] = [Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⲆⲆⲆΔⲆⲆⵠ, Δᐃ.ⵠⵠⲆⵠⵠⵠⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⵠΔⵠⲆᐃⵠΔ, Δᐃ.ΔⵠᐃⲆⲆⲆΔ, Δᐃ.ΔⵠⵠᐃΔⲆⲆ, Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ΔᐃⲆᐃΔⲆΔ, Δᐃ.ⵠᐃΔᐃⵠΔΔ, Δᐃ.ΔΔΔⵠⵠⲆΔ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_111_111")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_111_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_111_011")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_111_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_111_010")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("110_111_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("111_111_110")] = [Δᐃ.ⵠⵠΔΔⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ΔΔΔⵠⵠⲆΔ, Δᐃ.ⵠᐃΔᐃⵠΔΔ, Δᐃ.ΔᐃⲆᐃΔⲆΔ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ΔⵠⵠᐃΔⲆⲆ, Δᐃ.ΔⵠᐃⲆⲆⲆΔ, Δᐃ.ⵠΔⵠⲆᐃⵠΔ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⵠⵠⲆⵠⵠⵠⵠ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ⵠᐃᐃⲆΔⲆΔ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("111_111_011")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("111_111_110")];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("111_111_000")] = [Δᐃ.ΔΔΔⲆⲆΔⲆ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⵠⵠⲆⵠⵠⵠⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ⵠᐃᐃⲆΔⲆΔ, Δᐃ.ΔⵠᐃⲆⲆⲆΔ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("111_111_111")] = [Δᐃ.ⵠᐃᐃⲆΔⲆΔ, Δᐃ.ⵠⵠⵠⲆⵠ, Δᐃ.ΔᐃⲆΔⲆ, Δᐃ.ⵠⵠⵠⲆⵠΔⵠ, Δᐃ.ⲆᐃⲆᐃᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⵠΔᐃᐃ, Δᐃ.ⲆⲆⲆΔⲆⲆⵠ, Δᐃ.ⵠⵠⲆⵠⵠⵠⵠ, Δᐃ.ⲆΔⵠΔᐃ, Δᐃ.ⵠΔⵠⲆᐃⵠΔ, Δᐃ.ΔⵠⵠᐃΔⲆⲆ, Δᐃ.ᐃΔᐃⲆⵠΔᐃ, Δᐃ.ⲆⵠⲆΔΔ, Δᐃ.ᐃⵠΔⵠⲆᐃΔ, Δᐃ.ᐃⵠⵠΔⲆⵠⵠ, Δᐃ.ⵠΔΔⵠⵠ, Δᐃ.ⲆᐃⵠΔⲆ, Δᐃ.ΔᐃⲆᐃΔⲆΔ, Δᐃ.ⵠᐃΔᐃⵠΔΔ, Δᐃ.ΔΔΔⵠⵠⲆΔ, Δᐃ.ᐃᐃΔᐃⵠ, Δᐃ.ᐃᐃⵠⲆᐃ, Δᐃ.ⵠⵠΔΔⵠ];
    Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("111_111_010")] = Ⲇᐃ[1025][Sr.ⲆᐃⲆ][b("111_111_110")];
    Ⲇᐃ[1024] = [];
    Ⲇᐃ[1024][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_010_000")] = Δᐃ.ⵠΔΔᐃⲆᐃΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_010_010")] = Δᐃ.ⲆᐃᐃⲆᐃΔⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_011_000")] = Δᐃ.ᐃᐃⲆᐃΔᐃΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_011_010")] = Δᐃ.ⲆⲆΔⲆᐃᐃΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_011_011")] = Δᐃ.ⵠⲆΔᐃᐃⵠⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_110_000")] = Δᐃ.ⵠᐃⵠⵠᐃᐃᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_110_010")] = Δᐃ.ᐃⵠᐃⵠᐃΔᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_110_110")] = Δᐃ.ⲆΔᐃᐃΔⲆᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_111_000")] = Δᐃ.ᐃⵠⲆⵠⵠᐃᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_111_010")] = Δᐃ.ⲆᐃⲆⵠᐃΔⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_111_011")] = Δᐃ.ΔⲆⵠΔᐃⵠⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_111_110")] = Δᐃ.ⵠⲆᐃΔⵠΔⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("000_111_111")] = Δᐃ.ᐃΔΔᐃⲆᐃⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_010_000")] = Δᐃ.ⵠΔⵠᐃΔΔΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_010_010")] = Δᐃ.ΔᐃⵠⲆΔᐃᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_011_000")] = Δᐃ.ⵠⲆΔᐃᐃⲆⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_011_010")] = Δᐃ.ⵠⲆⵠΔΔΔΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_011_011")] = Δᐃ.ᐃⵠⲆᐃⲆⵠⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_110_000")] = Δᐃ.ΔⲆΔⲆΔᐃᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_110_010")] = Δᐃ.ᐃⲆⲆⲆᐃᐃⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_110_110")] = Δᐃ.ⲆⲆᐃΔⵠᐃᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_111_000")] = Δᐃ.ᐃΔΔⵠΔΔⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_111_010")] = Δᐃ.ⲆⵠΔΔⲆⵠⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_111_011")] = Δᐃ.ΔΔᐃᐃⵠΔᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_111_110")] = Δᐃ.ᐃΔⲆΔⲆΔⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("010_111_111")] = Δᐃ.ⵠΔᐃⲆⵠⲆⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("011_011_000")] = Δᐃ.ⲆⵠⵠⲆΔᐃⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("011_011_010")] = Δᐃ.ⵠΔᐃᐃⵠⵠⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("011_011_011")] = Δᐃ.ⵠΔΔⲆΔⲆⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("011_111_000")] = Δᐃ.ᐃⲆⵠΔⵠΔΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("011_111_010")] = Δᐃ.ΔⵠⵠΔΔⲆⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("011_111_011")] = Δᐃ.ⲆΔⲆΔᐃᐃΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("011_111_110")] = Δᐃ.Ⲇⵠᐃᐃᐃⵠᐃᐃⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("011_111_111")] = Δᐃ.ΔⲆᐃⵠΔⲆⵠⵠⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("110_110_000")] = Δᐃ.ⵠⲆΔⲆⲆⵠⵠⲆΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("110_110_010")] = Δᐃ.ΔᐃⲆᐃΔⲆᐃᐃᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("110_110_110")] = Δᐃ.ΔⵠⲆᐃᐃⲆΔⲆΔ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("110_111_000")] = Δᐃ.ⵠⵠᐃΔΔΔΔΔⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("110_111_010")] = Δᐃ.ⲆᐃⵠΔΔⵠΔⵠⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("110_111_011")] = Δᐃ.ᐃⵠⲆᐃᐃᐃΔᐃᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("110_111_110")] = Δᐃ.ⲆⵠΔⲆᐃΔᐃⵠⲆ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("110_111_111")] = Δᐃ.ΔΔΔΔⵠⵠⲆᐃⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("111_111_011")] = Δᐃ.ᐃᐃⵠᐃⵠⵠᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("111_111_110")] = Δᐃ.ⵠⲆⵠⲆᐃΔⵠⵠⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("111_111_011")] = Δᐃ.ᐃᐃⵠᐃⵠⵠᐃ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("111_111_000")] = Δᐃ.ⲆΔΔΔΔⵠⵠⲆⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("111_111_111")] = Δᐃ.ⵠⵠⲆΔΔᐃΔᐃⵠ;
    Ⲇᐃ[1024][Sr.ΔΔⵠ][b("111_111_010")] = Δᐃ.ⵠΔᐃⵠⵠΔⵠⵠΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_010_000")] = Δᐃ.ⲆⵠΔΔⵠᐃᐃⵠⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_010_010")] = Δᐃ.ⵠⵠⲆᐃⲆⲆⵠᐃⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_011_000")] = Δᐃ.ⵠⲆⵠⲆⲆᐃᐃΔⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_011_010")] = Δᐃ.ⲆⵠᐃᐃᐃⵠΔᐃΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_011_011")] = Δᐃ.ᐃᐃⲆⵠⵠⵠⲆⵠᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_110_000")] = Δᐃ.ⵠⲆΔᐃⵠⵠΔⵠⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_110_010")] = Δᐃ.ΔᐃⵠΔΔⵠⲆΔⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_110_110")] = Δᐃ.ᐃⲆΔΔⵠⵠⲆᐃⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_111_000")] = Δᐃ.ᐃΔⵠᐃⵠⵠᐃᐃᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_111_010")] = Δᐃ.ΔⲆⵠⲆᐃΔⲆᐃᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_111_011")] = Δᐃ.ᐃⵠᐃΔⲆⲆⵠⲆⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_111_110")] = Δᐃ.ⵠⲆⲆⵠΔⲆΔᐃⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("000_111_111")] = Δᐃ.ⲆΔⲆⲆⲆⲆᐃⵠᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_010_000")] = Δᐃ.ⲆᐃⲆᐃⲆΔⵠᐃᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_010_010")] = Δᐃ.ⲆⲆⵠΔⵠⵠⲆⵠⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_011_000")] = Δᐃ.ⵠⲆᐃⲆⲆΔΔⲆΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_011_010")] = Δᐃ.ⵠⵠⲆΔΔⵠΔΔᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_011_011")] = Δᐃ.ⲆⵠΔⲆᐃᐃᐃⲆⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_110_000")] = Δᐃ.ΔⵠⵠⲆⲆⲆᐃᐃⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_110_010")] = Δᐃ.ⵠⲆⵠᐃᐃΔⵠΔⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_110_110")] = Δᐃ.ᐃΔⲆⵠᐃⲆᐃᐃΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_111_000")] = Δᐃ.ᐃΔⲆᐃⵠᐃΔⵠΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_111_010")] = Δᐃ.ᐃⲆⵠⲆᐃⵠⲆᐃΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_111_011")] = Δᐃ.ⲆⵠⲆᐃⲆⵠᐃⵠΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_111_110")] = Δᐃ.ᐃΔⵠΔᐃᐃⲆᐃᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("010_111_111")] = Δᐃ.ⵠΔⲆΔⵠᐃΔᐃᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("011_011_000")] = Δᐃ.ΔΔⲆᐃᐃᐃᐃⲆⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("011_011_010")] = Δᐃ.ⲆⲆⲆⲆΔⵠΔΔⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("011_011_011")] = Δᐃ.ᐃⵠᐃⲆᐃᐃⲆⵠᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("011_111_000")] = Δᐃ.ΔᐃᐃᐃⵠᐃΔᐃⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("011_111_010")] = Δᐃ.ⵠⲆⲆⲆᐃΔΔⵠΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("011_111_011")] = Δᐃ.ᐃᐃⲆⲆΔⵠᐃΔⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("011_111_110")] = Δᐃ.ΔᐃⵠΔᐃᐃⲆⲆᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("011_111_111")] = Δᐃ.ⲆⲆⲆᐃᐃΔΔⲆⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("110_110_000")] = Δᐃ.ᐃⲆⲆⵠⲆⵠΔⲆᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("110_110_010")] = Δᐃ.ⲆΔⲆᐃᐃⲆⵠΔⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("110_110_110")] = Δᐃ.ᐃΔⵠᐃⵠᐃⵠⵠⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("110_111_000")] = Δᐃ.ⵠΔⲆⲆᐃΔⵠⵠᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("110_111_010")] = Δᐃ.ⲆᐃⲆΔᐃⲆΔⲆⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("110_111_011")] = Δᐃ.ⲆᐃⵠⲆΔⲆⲆᐃΔ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("110_111_110")] = Δᐃ.ΔΔⵠⲆᐃⲆⲆⲆᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("110_111_111")] = Δᐃ.ᐃΔᐃⲆⲆⲆⲆᐃⵠ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("111_111_011")] = Δᐃ.ⲆΔᐃⵠⲆᐃⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("111_111_110")] = Δᐃ.ΔᐃΔΔⲆⲆΔⲆᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("111_111_011")] = Δᐃ.ⲆΔᐃⵠⲆᐃⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("111_111_000")] = Δᐃ.ΔᐃⲆⲆⵠᐃⵠΔᐃ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("111_111_111")] = Δᐃ.ⵠⵠᐃᐃⵠⲆΔᐃⲆ;
    Ⲇᐃ[1024][Sr.ⲆᐃⲆ][b("111_111_010")] = Δᐃ.ⵠⲆⵠⲆΔⵠⲆⲆⵠ;
    Ⲇᐃ[32] = [];
    Ⲇᐃ[32][Sr.ΔΔⵠ] = Δᐃ.ⵠⲆᐃⵠᐃᐃΔ;
    Ⲇᐃ[32][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⲆⲆΔⲆⵠΔ;
    Ⲇᐃ[205] = [];
    Ⲇᐃ[205][Sr.ΔΔⵠ] = Δᐃ.ᐃᐃⲆⵠⲆΔⵠ;
    Ⲇᐃ[205][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆⲆᐃⲆⲆΔ;
    Ⲇᐃ[957] = [];
    Ⲇᐃ[957][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆΔᐃⲆᐃᐃ;
    Ⲇᐃ[957][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃⲆΔⲆⲆⵠ;
    Ⲇᐃ[207] = [];
    Ⲇᐃ[207][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠⵠᐃⵠΔⵠ;
    Ⲇᐃ[207][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆⵠⲆⲆⲆᐃ;
    Ⲇᐃ[954] = [];
    Ⲇᐃ[954][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠⵠⵠΔⲆⵠ;
    Ⲇᐃ[954][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠᐃⵠⲆᐃᐃ;
    Ⲇᐃ[958] = [];
    Ⲇᐃ[958][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠΔⵠⲆⵠⲆ;
    Ⲇᐃ[958][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⵠⵠΔⵠΔΔ;
    Ⲇᐃ[209] = [];
    Ⲇᐃ[209][Sr.ΔΔⵠ] = Δᐃ.Δᐃᐃⵠᐃᐃⵠ;
    Ⲇᐃ[209][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⵠᐃᐃᐃᐃⲆ;
    Ⲇᐃ[971] = [];
    Ⲇᐃ[971][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆΔᐃⵠΔⲆ;
    Ⲇᐃ[971][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆΔⲆᐃⵠΔ;
    Ⲇᐃ[211] = [];
    Ⲇᐃ[211][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆΔᐃⵠⲆⲆ;
    Ⲇᐃ[211][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠΔⵠⵠⵠⵠ;
    Ⲇᐃ[986] = [];
    Ⲇᐃ[986][Sr.ΔΔⵠ] = Δᐃ.ⵠΔᐃᐃΔⵠΔ;
    Ⲇᐃ[986][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔᐃᐃⲆⵠᐃ;
    Ⲇᐃ[989] = [];
    Ⲇᐃ[989][Sr.ΔΔⵠ] = [Δᐃ.ⲆⵠΔᐃⵠᐃΔ];
    Ⲇᐃ[989][Sr.ⲆᐃⲆ] = [Δᐃ.ⲆⵠⵠⵠⵠᐃΔ];
    Ⲇᐃ[217] = [];
    Ⲇᐃ[217][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠⲆⲆΔⲆΔ;
    Ⲇᐃ[217][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃⵠⲆⲆᐃᐃ;
    Ⲇᐃ[219] = [];
    Ⲇᐃ[219][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃⵠΔⵠΔᐃ;
    Ⲇᐃ[219][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆΔᐃΔⲆⲆ;
    Ⲇᐃ[218] = [];
    Ⲇᐃ[218][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆⵠΔⲆⲆⵠ;
    Ⲇᐃ[218][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆᐃᐃⲆⲆΔ;
    Ⲇᐃ[212] = [];
    Ⲇᐃ[212][Sr.ΔΔⵠ] = Δᐃ.ΔⲆⲆⲆᐃⵠᐃ;
    Ⲇᐃ[212][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃᐃⲆⵠⲆⵠ;
    Ⲇᐃ[213] = [];
    Ⲇᐃ[213][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠⲆΔᐃⵠᐃ;
    Ⲇᐃ[213][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃⵠᐃⵠᐃⵠ;
    Ⲇᐃ[214] = [];
    Ⲇᐃ[214][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠⵠⲆᐃⵠⲆ;
    Ⲇᐃ[214][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⲆⵠΔΔⲆ;
    Ⲇᐃ[215] = [];
    Ⲇᐃ[215][Sr.ΔΔⵠ] = Δᐃ.ⵠΔⵠΔⲆᐃᐃ;
    Ⲇᐃ[215][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⵠᐃΔΔΔⲆ;
    Ⲇᐃ[216] = [];
    Ⲇᐃ[216][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠᐃⵠᐃΔⵠ;
    Ⲇᐃ[216][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆᐃΔⵠⲆⲆ;
    Ⲇᐃ[220] = [];
    Ⲇᐃ[220][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠΔΔᐃΔΔ;
    Ⲇᐃ[220][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆᐃⲆᐃΔᐃ;
    Ⲇᐃ[1020] = [];
    Ⲇᐃ[1020][Sr.ΔΔⵠ] = Δᐃ.ΔΔⲆᐃⲆᐃⵠ;
    Ⲇᐃ[1020][Sr.ⲆᐃⲆ] = Δᐃ.ΔⵠⵠⲆⵠⲆⵠ;
    Ⲇᐃ[1021] = [];
    Ⲇᐃ[1021][Sr.ΔΔⵠ] = Δᐃ.ⵠΔᐃᐃΔᐃΔ;
    Ⲇᐃ[1021][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃⲆⵠⵠΔΔ;
    Ⲇᐃ[39] = [];
    Ⲇᐃ[39][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠⲆᐃⲆΔⲆ;
    Ⲇᐃ[39][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔⵠⲆⵠⲆᐃ;
    Ⲇᐃ[1022] = Δᐃ.ΔᐃΔᐃΔⵠΔ;
    Ⲇᐃ[1023] = Δᐃ.ΔⲆᐃⲆΔᐃⲆ;
    Ⲇᐃ[1041] = [];
    Ⲇᐃ[1041][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[1041][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[1041][Sr.ΔΔⵠ].push(Δᐃ.ⵠΔⵠⵠΔᐃⵠ);
    Ⲇᐃ[1041][Sr.ΔΔⵠ].push(Δᐃ.ⵠΔᐃᐃΔⵠⲆ);
    Ⲇᐃ[1041][Sr.ΔΔⵠ].push(Δᐃ.ᐃΔⲆᐃᐃⵠᐃ);
    Ⲇᐃ[1041][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃⵠΔⲆΔᐃⵠ);
    Ⲇᐃ[1041][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆᐃⲆᐃⲆᐃⵠ);
    Ⲇᐃ[1041][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆⲆⵠⲆΔΔⲆ);
    Ⲇᐃ[244] = [];
    Ⲇᐃ[244][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[244][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[244][Sr.ΔΔⵠ].push(Δᐃ.ⵠⲆⵠⵠⲆⲆⲆ);
    Ⲇᐃ[244][Sr.ΔΔⵠ].push(Δᐃ.ᐃᐃⲆⲆⵠⲆΔ);
    Ⲇᐃ[244][Sr.ΔΔⵠ].push(Δᐃ.ⲆΔΔⲆΔΔⵠ);
    Ⲇᐃ[244][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆΔⵠᐃⵠΔⵠ);
    Ⲇᐃ[244][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃⲆⲆΔΔΔᐃ);
    Ⲇᐃ[244][Sr.ⲆᐃⲆ].push(Δᐃ.ΔⲆⵠΔΔᐃⵠ);
    Ⲇᐃ[1052] = [];
    Ⲇᐃ[1052][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[1052][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[1052][Sr.ΔΔⵠ].push(Δᐃ.ΔᐃⲆΔⲆⲆΔ);
    Ⲇᐃ[1052][Sr.ΔΔⵠ].push(Δᐃ.ⲆΔΔⲆⵠⵠⵠ);
    Ⲇᐃ[1052][Sr.ΔΔⵠ].push(Δᐃ.ⲆΔᐃⵠⵠΔⲆ);
    Ⲇᐃ[1052][Sr.ΔΔⵠ].push(Δᐃ.ΔΔᐃΔᐃⲆΔ);
    Ⲇᐃ[1052][Sr.ΔΔⵠ].push(Δᐃ.Δⵠᐃⵠᐃⵠᐃ);
    Ⲇᐃ[1052][Sr.ⲆᐃⲆ].push(Δᐃ.ΔⲆΔⵠᐃⵠᐃ);
    Ⲇᐃ[1052][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃⲆⵠⵠᐃΔᐃ);
    Ⲇᐃ[1052][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃᐃⲆⵠᐃⲆⲆ);
    Ⲇᐃ[1052][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆΔⲆⲆⵠⲆⵠ);
    Ⲇᐃ[1052][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠᐃⵠⲆᐃⲆⲆ);
    Ⲇᐃ[450] = [];
    Ⲇᐃ[450][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆΔᐃⲆΔΔ;
    Ⲇᐃ[450][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃΔⲆⵠΔᐃ;
    Ⲇᐃ[453] = [];
    Ⲇᐃ[453][Sr.ΔΔⵠ] = Δᐃ.ΔⲆᐃⲆⵠᐃⵠ;
    Ⲇᐃ[453][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆⵠⲆⲆᐃΔ;
    Ⲇᐃ[454] = [];
    Ⲇᐃ[454][Sr.ΔΔⵠ] = Δᐃ.ΔⲆᐃⲆᐃⲆⵠ;
    Ⲇᐃ[454][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⵠᐃᐃΔⲆ;
    Ⲇᐃ[464] = Δᐃ.ⲆⲆⵠᐃⵠᐃΔ;
    Ⲇᐃ[468] = Δᐃ.ΔΔⲆᐃᐃᐃⲆ;
    Ⲇᐃ[469] = Δᐃ.ⵠᐃᐃᐃᐃⲆⲆ;
    Ⲇᐃ[20] = [];
    Ⲇᐃ[20][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠΔΔⵠᐃⲆ;
    Ⲇᐃ[20][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠΔᐃΔᐃⲆ;
    Ⲇᐃ[920] = [];
    Ⲇᐃ[920][Sr.ΔΔⵠ] = Δᐃ.ΔⲆⵠⵠΔⲆΔ;
    Ⲇᐃ[920][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆΔΔⵠⵠᐃ;
    Ⲇᐃ[21] = [];
    Ⲇᐃ[21][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠΔⵠⲆᐃᐃ;
    Ⲇᐃ[21][Sr.ⲆᐃⲆ] = Δᐃ.ΔⵠᐃⵠⲆⵠᐃ;
    Ⲇᐃ[924] = [];
    Ⲇᐃ[924][Sr.ΔΔⵠ] = Δᐃ.ΔⲆⵠⵠΔⲆΔ;
    Ⲇᐃ[924][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆΔΔⵠⵠᐃ;
    Ⲇᐃ[44] = [];
    Ⲇᐃ[44][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆⵠⲆΔⵠᐃ;
    Ⲇᐃ[44][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔᐃΔᐃⵠⲆ;
    Ⲇᐃ[19] = [];
    Ⲇᐃ[19][Sr.ΔΔⵠ] = Δᐃ.ⵠⲆᐃⲆΔΔⵠ;
    Ⲇᐃ[19][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⲆⵠᐃⲆⵠ;
    Ⲇᐃ[34] = [];
    Ⲇᐃ[34][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃⲆⵠᐃⲆⲆ;
    Ⲇᐃ[34][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⲆᐃⵠᐃⵠⵠ;
    Ⲇᐃ[17] = [];
    Ⲇᐃ[17][Sr.ΔΔⵠ] = Δᐃ.ΔΔᐃᐃᐃⲆᐃ;
    Ⲇᐃ[17][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔᐃᐃᐃⲆⵠ;
    Ⲇᐃ[63] = [];
    Ⲇᐃ[63][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠΔΔΔᐃⲆ;
    Ⲇᐃ[63][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃΔⲆᐃᐃΔ;
    Ⲇᐃ[60] = [];
    Ⲇᐃ[60][Sr.ΔΔⵠ] = Δᐃ.ΔⵠΔⲆⵠΔᐃ;
    Ⲇᐃ[60][Sr.ⲆᐃⲆ] = Δᐃ.ΔⵠᐃⲆⲆᐃΔ;
    Ⲇᐃ[94] = [];
    Ⲇᐃ[94][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃⵠⵠᐃᐃⵠⲆⵠ;
    Ⲇᐃ[94][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃⵠΔᐃᐃᐃᐃⵠ;
    Ⲇᐃ[95] = [];
    Ⲇᐃ[95][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃΔⲆᐃⲆⲆⲆⲆ;
    Ⲇᐃ[95][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔⲆᐃⵠᐃⵠᐃⲆ;
    Ⲇᐃ[96] = [];
    Ⲇᐃ[96][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆⵠⵠⵠⲆⲆⵠⵠ;
    Ⲇᐃ[96][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃⲆⲆᐃⲆᐃⲆΔ;
    Ⲇᐃ[97] = [];
    Ⲇᐃ[97][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆⲆⲆⲆⵠΔⲆⲆ;
    Ⲇᐃ[97][Sr.ⲆᐃⲆ] = Δᐃ.ΔⵠΔⵠΔΔⵠᐃΔ;
    Ⲇᐃ[98] = [];
    Ⲇᐃ[98][Sr.ΔΔⵠ] = Δᐃ.ΔⵠⵠᐃⲆᐃⵠⵠᐃ;
    Ⲇᐃ[98][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔΔΔΔΔΔΔΔ;
    Ⲇᐃ[99] = [];
    Ⲇᐃ[99][Sr.ΔΔⵠ] = Δᐃ.ΔⲆΔΔⲆΔΔⲆⲆ;
    Ⲇᐃ[99][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆᐃⲆᐃᐃⲆᐃⵠ;
    Ⲇᐃ[90] = [];
    Ⲇᐃ[90][Sr.ΔΔⵠ] = Δᐃ.ᐃΔΔᐃᐃᐃⲆ;
    Ⲇᐃ[90][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔᐃⵠⲆΔᐃ;
    Ⲇᐃ[91] = [];
    Ⲇᐃ[91][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠᐃⲆⲆⲆΔ;
    Ⲇᐃ[91][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃⵠⵠΔⲆⲆ;
    Ⲇᐃ[71] = [];
    Ⲇᐃ[71][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠⲆᐃⵠᐃΔΔⵠ;
    Ⲇᐃ[71][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆⲆⵠᐃΔΔⵠΔ;
    Ⲇᐃ[72] = [];
    Ⲇᐃ[72][Sr.ΔΔⵠ] = Δᐃ.ΔⵠᐃᐃᐃᐃᐃᐃΔ;
    Ⲇᐃ[72][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠⲆⲆᐃᐃⲆⲆⵠ;
    Ⲇᐃ[73] = [];
    Ⲇᐃ[73][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃΔᐃᐃⵠᐃⲆᐃ;
    Ⲇᐃ[73][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃⲆⵠᐃⵠΔᐃᐃ;
    Ⲇᐃ[74] = [];
    Ⲇᐃ[74][Sr.ΔΔⵠ] = Δᐃ.ⲆΔΔᐃᐃΔᐃΔΔ;
    Ⲇᐃ[74][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃΔΔⲆᐃᐃᐃΔ;
    Ⲇᐃ[75] = [];
    Ⲇᐃ[75][Sr.ΔΔⵠ] = Δᐃ.ⵠΔᐃᐃᐃⲆⲆΔΔ;
    Ⲇᐃ[75][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃⵠⲆⵠΔⵠⲆⵠ;
    Ⲇᐃ[76] = [];
    Ⲇᐃ[76][Sr.ΔΔⵠ] = Δᐃ.ΔᐃᐃⵠᐃⲆΔⲆⲆ;
    Ⲇᐃ[76][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔᐃⲆΔⲆᐃᐃⲆ;
    Ⲇᐃ[101] = [];
    Ⲇᐃ[101][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠᐃⲆΔᐃᐃ;
    Ⲇᐃ[101][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠΔⵠᐃⵠⲆ;
    Ⲇᐃ[64] = [];
    Ⲇᐃ[64][Sr.ΔΔⵠ] = Δᐃ.ΔⵠⵠᐃᐃⵠΔⲆⵠ;
    Ⲇᐃ[64][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃᐃΔⲆⵠⵠⲆⲆ;
    Ⲇᐃ[102] = [];
    Ⲇᐃ[102][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆⵠΔΔⵠΔ;
    Ⲇᐃ[102][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃⲆⵠⵠⵠΔ;
    Ⲇᐃ[65] = [];
    Ⲇᐃ[65][Sr.ΔΔⵠ] = Δᐃ.ΔᐃⵠⲆⵠⵠΔᐃⵠ;
    Ⲇᐃ[65][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠᐃⲆⲆΔΔᐃΔ;
    Ⲇᐃ[103] = [];
    Ⲇᐃ[103][Sr.ΔΔⵠ] = Δᐃ.ΔᐃⵠΔᐃⲆⵠ;
    Ⲇᐃ[103][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃΔΔᐃᐃⵠ;
    Ⲇᐃ[66] = [];
    Ⲇᐃ[66][Sr.ΔΔⵠ] = Δᐃ.ΔⲆⵠᐃⲆⲆⲆᐃⵠ;
    Ⲇᐃ[66][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃⵠᐃΔᐃᐃᐃΔ;
    Ⲇᐃ[104] = [];
    Ⲇᐃ[104][Sr.ΔΔⵠ] = Δᐃ.ΔᐃⵠΔΔⵠΔ;
    Ⲇᐃ[104][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃᐃΔΔᐃⲆ;
    Ⲇᐃ[67] = [];
    Ⲇᐃ[67][Sr.ΔΔⵠ] = Δᐃ.ⲆΔⲆᐃⲆΔⵠΔᐃ;
    Ⲇᐃ[67][Sr.ⲆᐃⲆ] = Δᐃ.ᐃΔⲆΔᐃⵠΔⵠΔ;
    Ⲇᐃ[105] = [];
    Ⲇᐃ[105][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠΔⲆⵠΔⵠ;
    Ⲇᐃ[105][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆⵠΔⲆⲆᐃ;
    Ⲇᐃ[68] = [];
    Ⲇᐃ[68][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠⵠᐃΔᐃΔᐃᐃ;
    Ⲇᐃ[68][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⲆᐃⲆⵠΔⲆᐃᐃ;
    Ⲇᐃ[106] = [];
    Ⲇᐃ[106][Sr.ΔΔⵠ] = Δᐃ.ⵠΔⵠᐃΔⲆⵠ;
    Ⲇᐃ[106][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔⲆⵠΔΔⵠΔᐃ;
    Ⲇᐃ[69] = [];
    Ⲇᐃ[69][Sr.ΔΔⵠ] = Δᐃ.ΔⵠᐃⲆᐃᐃΔᐃᐃ;
    Ⲇᐃ[69][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔᐃᐃΔⲆⲆᐃⲆ;
    Ⲇᐃ[107] = [];
    Ⲇᐃ[107][Sr.ΔΔⵠ] = Δᐃ.ᐃΔⲆΔⵠᐃᐃ;
    Ⲇᐃ[107][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃⲆΔⲆᐃᐃ;
    Ⲇᐃ[70] = [];
    Ⲇᐃ[70][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆⵠⲆⵠΔⵠᐃᐃ;
    Ⲇᐃ[70][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆΔᐃΔⲆᐃⲆⲆ;
    Ⲇᐃ[80] = [];
    Ⲇᐃ[80][Sr.ΔΔⵠ] = Δᐃ.ⲆΔᐃΔⲆΔⲆ;
    Ⲇᐃ[80][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆⲆⵠⵠΔΔ;
    Ⲇᐃ[81] = [];
    Ⲇᐃ[81][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠⵠΔΔΔⵠ;
    Ⲇᐃ[81][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃⵠⲆⵠⲆⲆ;
    Ⲇᐃ[22] = [];
    Ⲇᐃ[22][Sr.ΔΔⵠ] = Δᐃ.ΔΔⲆⵠᐃΔⵠ;
    Ⲇᐃ[22][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆΔⲆⲆᐃⲆ;
    Ⲇᐃ[928] = [];
    Ⲇᐃ[928][Sr.ΔΔⵠ] = Δᐃ.ΔⲆⵠΔⵠⵠⵠ;
    Ⲇᐃ[928][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃⵠᐃΔⲆᐃ;
    Ⲇᐃ[935] = [];
    Ⲇᐃ[935][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[935][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[935][Sr.ΔΔⵠ].push(Δᐃ.ⵠⲆⵠⵠⲆⵠⲆᐃΔ);
    Ⲇᐃ[935][Sr.ΔΔⵠ].push(Δᐃ.ΔⲆΔⵠΔᐃᐃᐃΔ);
    Ⲇᐃ[935][Sr.ⲆᐃⲆ].push(Δᐃ.ΔⲆΔⵠΔᐃᐃᐃΔ);
    Ⲇᐃ[935][Sr.ⲆᐃⲆ].push(Δᐃ.ΔⲆⲆⵠΔᐃⲆᐃᐃ);
    Ⲇᐃ[941] = [];
    Ⲇᐃ[941][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[941][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[941][Sr.ΔΔⵠ].push(Δᐃ.ΔⵠΔⲆⲆⲆⲆ);
    Ⲇᐃ[941][Sr.ΔΔⵠ].push(Δᐃ.ΔᐃⵠΔᐃΔᐃ);
    Ⲇᐃ[941][Sr.ΔΔⵠ].push(Δᐃ.ⲆᐃΔᐃΔᐃⲆ);
    Ⲇᐃ[941][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆᐃⵠᐃᐃⲆᐃ);
    Ⲇᐃ[941][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠⲆΔΔΔΔΔ);
    Ⲇᐃ[941][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆᐃᐃⲆⵠⵠⵠ);
    Ⲇᐃ[53] = [];
    Ⲇᐃ[53][Sr.ΔΔⵠ] = Δᐃ.ⲆΔΔⵠⲆΔⲆ;
    Ⲇᐃ[53][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆΔⵠⲆⲆⲆ;
    Ⲇᐃ[54] = [];
    Ⲇᐃ[54][Sr.ΔΔⵠ] = Δᐃ.ⲆᐃΔᐃⵠⲆᐃ;
    Ⲇᐃ[54][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃᐃΔᐃⵠᐃ;
    Ⲇᐃ[241] = [];
    Ⲇᐃ[241][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[241][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[241][Sr.ΔΔⵠ].push(Δᐃ.ᐃᐃΔᐃⲆⵠⲆ);
    Ⲇᐃ[241][Sr.ΔΔⵠ].push(Δᐃ.ⵠⵠⲆⲆΔᐃⲆ);
    Ⲇᐃ[241][Sr.ΔΔⵠ].push(Δᐃ.ⲆΔⲆⵠⵠⵠΔ);
    Ⲇᐃ[241][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠᐃΔΔⲆⵠⵠ);
    Ⲇᐃ[241][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆΔⵠⵠⲆΔΔ);
    Ⲇᐃ[241][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃⵠⲆⲆΔⲆⵠ);
    Ⲇᐃ[202] = [];
    Ⲇᐃ[202][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[202][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[202][Sr.ΔΔⵠ].push(Δᐃ.ᐃⵠΔᐃⵠᐃⵠ);
    Ⲇᐃ[202][Sr.ΔΔⵠ].push(Δᐃ.ΔⲆⵠⲆΔᐃⲆ);
    Ⲇᐃ[202][Sr.ΔΔⵠ].push(Δᐃ.ⵠᐃⵠᐃⵠⲆᐃ);
    Ⲇᐃ[202][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠⵠⵠⲆΔᐃΔ);
    Ⲇᐃ[202][Sr.ⲆᐃⲆ].push(Δᐃ.ΔΔⲆⲆⵠⵠᐃ);
    Ⲇᐃ[202][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆᐃᐃΔᐃᐃⲆ);
    Ⲇᐃ[203] = [];
    Ⲇᐃ[203][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[203][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[203][Sr.ΔΔⵠ].push(Δᐃ.ᐃⲆⵠΔⵠⵠⵠ);
    Ⲇᐃ[203][Sr.ΔΔⵠ].push(Δᐃ.ⲆⵠΔⲆΔⲆⲆ);
    Ⲇᐃ[203][Sr.ΔΔⵠ].push(Δᐃ.ᐃΔᐃⲆⵠⵠΔ);
    Ⲇᐃ[203][Sr.ΔΔⵠ].push(Δᐃ.ⵠⲆΔⲆΔᐃᐃ);
    Ⲇᐃ[203][Sr.ΔΔⵠ].push(Δᐃ.ᐃⵠⲆⵠΔⲆᐃ);
    Ⲇᐃ[203][Sr.ΔΔⵠ].push(Δᐃ.ⲆᐃΔⲆⲆΔΔ);
    Ⲇᐃ[203][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃⵠᐃⲆΔⵠⵠ);
    Ⲇᐃ[203][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠⲆΔᐃⵠⵠⵠ);
    Ⲇᐃ[203][Sr.ⲆᐃⲆ].push(Δᐃ.Ⲇⵠᐃⵠᐃᐃᐃ);
    Ⲇᐃ[203][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃⲆΔΔΔΔᐃ);
    Ⲇᐃ[203][Sr.ⲆᐃⲆ].push(Δᐃ.ΔᐃⵠΔⵠᐃΔ);
    Ⲇᐃ[203][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠᐃⵠⲆΔᐃⵠ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ] = [];
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ΔΔⵠ].push(Δᐃ.ⵠⲆⲆΔᐃᐃⲆ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ΔΔⵠ].push(Δᐃ.ᐃⵠΔᐃⵠⵠᐃ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ΔΔⵠ].push(Δᐃ.ⲆΔⵠΔΔᐃⵠ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ΔΔⵠ].push(Δᐃ.ΔⲆⵠΔᐃΔΔ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ΔΔⵠ].push(Δᐃ.ⲆᐃΔᐃⵠⲆΔ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ΔΔⵠ].push(Δᐃ.ᐃⵠⵠⲆᐃΔⲆ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆⵠⵠΔΔᐃⲆ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃⵠⵠΔⲆΔⲆ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ⲆᐃⲆ].push(Δᐃ.ΔᐃⲆΔΔⵠΔ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠΔΔⵠᐃⵠΔ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠᐃΔⲆⲆⲆΔ);
    Ⲇᐃ[Sr.ΔᐃⲆⵠⲆ][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃᐃᐃΔⵠᐃⲆ);
    Ⲇᐃ[918] = [];
    Ⲇᐃ[918][Sr.ΔΔⵠ] = Δᐃ.ΔᐃⵠΔⲆΔⲆ;
    Ⲇᐃ[918][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠΔⵠⵠⲆⵠ;
    Ⲇᐃ[919] = Δᐃ.ΔⵠⲆΔΔⲆⵠ;
    Ⲇᐃ[56] = [];
    Ⲇᐃ[56][Sr.ΔΔⵠ] = Δᐃ.ΔᐃΔⲆᐃΔᐃⵠⲆ;
    Ⲇᐃ[56][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔⵠΔⲆᐃᐃᐃᐃ;
    Ⲇᐃ[223] = [];
    Ⲇᐃ[223][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠᐃΔⵠⵠΔ;
    Ⲇᐃ[223][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆⲆΔᐃⲆⲆ;
    Ⲇᐃ[224] = [];
    Ⲇᐃ[224][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆΔΔΔΔⲆ;
    Ⲇᐃ[224][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃΔⲆⲆΔΔ;
    Ⲇᐃ[236] = [];
    Ⲇᐃ[236][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆᐃⵠᐃΔⲆ;
    Ⲇᐃ[236][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃΔⲆⵠᐃΔ;
    Ⲇᐃ[1033] = [];
    Ⲇᐃ[1033][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠΔΔᐃΔⲆ;
    Ⲇᐃ[1033][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃⲆᐃΔⵠᐃ;
    Ⲇᐃ[1034] = Δᐃ.ΔᐃⵠᐃΔⲆⵠ;
    Ⲇᐃ[1150] = [];
    Ⲇᐃ[1150][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃΔΔⲆΔⲆ;
    Ⲇᐃ[1150][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔΔⵠⵠⲆΔ;
    Ⲇᐃ[1152] = [];
    Ⲇᐃ[1152][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃΔΔⵠᐃΔ;
    Ⲇᐃ[1152][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔⲆⵠΔⲆΔ;
    Ⲇᐃ[1149] = Δᐃ.ᐃⲆᐃⲆΔᐃⵠ;
    Ⲇᐃ[1151] = Δᐃ.ᐃᐃΔΔⲆⵠΔ;
    Ⲇᐃ[1153] = Δᐃ.ⲆᐃⵠⵠⵠⲆᐃ;
    Ⲇᐃ[1143] = [];
    Ⲇᐃ[1143][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆⲆⵠᐃᐃⲆ;
    Ⲇᐃ[1143][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃΔΔΔΔᐃ;
    Ⲇᐃ[1145] = [];
    Ⲇᐃ[1145][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆᐃΔⲆⵠᐃ;
    Ⲇᐃ[1145][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠᐃⲆⵠᐃᐃ;
    Ⲇᐃ[1146] = [];
    Ⲇᐃ[1146][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠᐃᐃⲆⵠⲆ;
    Ⲇᐃ[1146][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⵠⵠΔΔᐃ;
    Ⲇᐃ[1144] = Δᐃ.ⲆΔⵠⵠⲆⲆⵠ;
    Ⲇᐃ[1148] = Δᐃ.ᐃΔΔᐃᐃⲆᐃ;
    Ⲇᐃ[1147] = Δᐃ.ᐃᐃⵠᐃⲆᐃⲆ;
    Ⲇᐃ[1053] = [];
    Ⲇᐃ[1053][Sr.ΔΔⵠ] = Δᐃ.ΔⵠᐃⵠᐃⲆᐃ;
    Ⲇᐃ[1053][Sr.ⲆᐃⲆ] = Δᐃ.ᐃΔⲆⵠᐃΔΔ;
    Ⲇᐃ[1055] = [];
    Ⲇᐃ[1055][Sr.ΔΔⵠ] = Δᐃ.ΔΔⵠⵠⵠΔⲆ;
    Ⲇᐃ[1055][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⲆΔⲆᐃΔ;
    Ⲇᐃ[231] = [];
    Ⲇᐃ[231][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠᐃⵠᐃᐃⵠ;
    Ⲇᐃ[231][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔⵠⵠⵠⲆⵠ;
    Ⲇᐃ[1060] = [];
    Ⲇᐃ[1060][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠΔᐃΔⵠᐃ;
    Ⲇᐃ[1060][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃΔⲆΔΔⲆ;
    Ⲇᐃ[1063] = [];
    Ⲇᐃ[1063][Sr.ΔΔⵠ] = Δᐃ.ΔᐃΔⲆΔᐃΔ;
    Ⲇᐃ[1063][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔᐃᐃΔⲆⲆ;
    Ⲇᐃ[1059] = [];
    Ⲇᐃ[1059][Sr.ΔΔⵠ] = Δᐃ.ΔᐃᐃⵠⲆⲆⲆ;
    Ⲇᐃ[1059][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔΔⵠⵠⲆⲆ;
    Ⲇᐃ[1062] = [];
    Ⲇᐃ[1062][Sr.ΔΔⵠ] = Δᐃ.ᐃᐃⵠΔᐃᐃⲆ;
    Ⲇᐃ[1062][Sr.ⲆᐃⲆ] = Δᐃ.ΔⵠⲆⵠⵠᐃΔ;
    Ⲇᐃ[1056] = Δᐃ.ΔⵠⲆⵠⲆⲆΔ;
    Ⲇᐃ[1057] = Δᐃ.ΔⲆⵠⲆⲆⲆΔ;
    Ⲇᐃ[1058] = Δᐃ.ⲆΔᐃᐃΔⵠΔ;
    Ⲇᐃ[1065] = Δᐃ.ΔⵠⲆᐃⵠΔⵠ;
    Ⲇᐃ[1066] = Δᐃ.ΔΔⵠΔᐃᐃᐃ;
    Ⲇᐃ[1067] = Δᐃ.ⵠⵠⵠᐃⵠᐃⲆ;
    Ⲇᐃ[1222] = [];
    Ⲇᐃ[1222][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆΔⵠⲆⲆⵠⵠⲆ;
    Ⲇᐃ[1222][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃⲆΔΔⲆᐃⲆᐃ;
    Ⲇᐃ[248] = [];
    Ⲇᐃ[248][Sr.ΔΔⵠ] = Δᐃ.ΔⲆΔΔᐃⲆⵠΔᐃ;
    Ⲇᐃ[248][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔᐃΔⲆᐃᐃⲆᐃ;
    Ⲇᐃ[1218] = [];
    Ⲇᐃ[1218][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠⲆⵠᐃᐃᐃΔⲆ;
    Ⲇᐃ[1218][Sr.ⲆᐃⲆ] = Δᐃ.ᐃΔⲆⵠΔⲆⲆᐃⵠ;
    Ⲇᐃ[1221] = [];
    Ⲇᐃ[1221][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠΔᐃⵠᐃΔᐃⵠ;
    Ⲇᐃ[1221][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃΔᐃⵠΔⵠΔⵠ;
    Ⲇᐃ[1223] = Δᐃ.ᐃⲆⵠΔⲆᐃᐃ;
    Ⲇᐃ[1219] = Δᐃ.ⵠⲆⲆⵠⵠΔⲆ;
    Ⲇᐃ[1068] = [];
    Ⲇᐃ[1068][Sr.ΔΔⵠ] = Δᐃ.ᐃᐃΔΔᐃⵠᐃ;
    Ⲇᐃ[1068][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃⵠᐃΔᐃⵠ;
    Ⲇᐃ[232] = [];
    Ⲇᐃ[232][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠΔⲆΔⵠΔ;
    Ⲇᐃ[232][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃΔᐃᐃⲆⵠ;
    Ⲇᐃ[1070] = [];
    Ⲇᐃ[1070][Sr.ΔΔⵠ] = Δᐃ.ΔⲆⵠⲆΔΔⵠ;
    Ⲇᐃ[1070][Sr.ⲆᐃⲆ] = Δᐃ.ᐃΔⲆⵠⲆᐃᐃ;
    Ⲇᐃ[1072] = [];
    Ⲇᐃ[1072][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠⲆΔᐃⲆⵠ;
    Ⲇᐃ[1072][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⲆⵠΔΔⲆᐃ;
    Ⲇᐃ[1075] = [];
    Ⲇᐃ[1075][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠⵠⵠᐃΔⵠ;
    Ⲇᐃ[1075][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⵠⲆᐃⵠΔΔ;
    Ⲇᐃ[1071] = [];
    Ⲇᐃ[1071][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆⲆΔΔⵠΔ;
    Ⲇᐃ[1071][Sr.ⲆᐃⲆ] = Δᐃ.Ⲇⵠᐃᐃⵠⵠⵠ;
    Ⲇᐃ[1074] = [];
    Ⲇᐃ[1074][Sr.ΔΔⵠ] = Δᐃ.ⲆᐃⲆᐃⵠⵠⲆ;
    Ⲇᐃ[1074][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆΔⲆᐃᐃᐃ;
    Ⲇᐃ[1073] = [];
    Ⲇᐃ[1073][Sr.ΔΔⵠ] = Δᐃ.ΔⵠᐃⵠⲆⵠⲆ;
    Ⲇᐃ[1073][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔΔᐃⲆⲆᐃ;
    Ⲇᐃ[1076] = [];
    Ⲇᐃ[1076][Sr.ΔΔⵠ] = Δᐃ.ᐃⵠⵠΔⵠΔᐃ;
    Ⲇᐃ[1076][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⲆᐃᐃᐃΔ;
    Ⲇᐃ[1077] = Δᐃ.ⵠⵠᐃⵠΔⲆΔ;
    Ⲇᐃ[1078] = Δᐃ.ᐃⲆᐃᐃᐃⵠᐃ;
    Ⲇᐃ[1079] = Δᐃ.ⵠᐃⲆᐃᐃᐃⲆ;
    Ⲇᐃ[1083] = [];
    Ⲇᐃ[1083][Sr.ΔΔⵠ] = Δᐃ.ⲆᐃⵠⲆᐃⲆᐃ;
    Ⲇᐃ[1083][Sr.ⲆᐃⲆ] = Δᐃ.ᐃᐃᐃⲆⲆᐃᐃ;
    Ⲇᐃ[233] = [];
    Ⲇᐃ[233][Sr.ΔΔⵠ] = Δᐃ.ΔⵠᐃΔⲆⲆᐃ;
    Ⲇᐃ[233][Sr.ⲆᐃⲆ] = Δᐃ.ᐃΔⵠΔⲆⵠⵠ;
    Ⲇᐃ[1085] = [];
    Ⲇᐃ[1085][Sr.ΔΔⵠ] = Δᐃ.ΔⲆᐃᐃⲆⲆᐃ;
    Ⲇᐃ[1085][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔΔⲆΔᐃⲆ;
    Ⲇᐃ[1087] = [];
    Ⲇᐃ[1087][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠⵠⲆᐃⲆⵠ;
    Ⲇᐃ[1087][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔΔⵠΔΔᐃ;
    Ⲇᐃ[1090] = [];
    Ⲇᐃ[1090][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃᐃΔⵠΔⲆ;
    Ⲇᐃ[1090][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆⲆⲆΔⵠⲆ;
    Ⲇᐃ[1086] = [];
    Ⲇᐃ[1086][Sr.ΔΔⵠ] = Δᐃ.ΔΔᐃᐃⵠᐃⵠ;
    Ⲇᐃ[1086][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠᐃⲆΔⲆΔ;
    Ⲇᐃ[1089] = [];
    Ⲇᐃ[1089][Sr.ΔΔⵠ] = Δᐃ.ΔⲆΔΔⵠᐃⲆ;
    Ⲇᐃ[1089][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆΔΔΔⲆᐃ;
    Ⲇᐃ[1088] = [];
    Ⲇᐃ[1088][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠⵠⵠⲆᐃⵠ;
    Ⲇᐃ[1088][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃⵠΔΔⵠⲆ;
    Ⲇᐃ[1091] = [];
    Ⲇᐃ[1091][Sr.ΔΔⵠ] = Δᐃ.ⲆΔⲆⵠᐃᐃⲆ;
    Ⲇᐃ[1091][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃΔΔᐃΔΔ;
    Ⲇᐃ[1092] = Δᐃ.ⵠⵠⲆΔⲆΔᐃ;
    Ⲇᐃ[1093] = Δᐃ.ᐃΔΔΔⵠⲆΔ;
    Ⲇᐃ[1094] = Δᐃ.ΔⵠΔΔΔⵠᐃ;
    Ⲇᐃ[1098] = [];
    Ⲇᐃ[1098][Sr.ΔΔⵠ] = Δᐃ.ⲆΔⲆΔⲆΔⲆ;
    Ⲇᐃ[1098][Sr.ⲆᐃⲆ] = Δᐃ.ᐃΔⵠᐃⲆᐃⵠ;
    Ⲇᐃ[235] = [];
    Ⲇᐃ[235][Sr.ΔΔⵠ] = Δᐃ.ΔⵠᐃⲆΔᐃⲆ;
    Ⲇᐃ[235][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆⵠΔᐃᐃⵠ;
    Ⲇᐃ[1115] = Δᐃ.ⵠᐃᐃΔⲆⲆⲆ;
    Ⲇᐃ[1113] = [];
    Ⲇᐃ[1113][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆⲆⵠⵠⵠⲆ;
    Ⲇᐃ[1113][Sr.ⲆᐃⲆ] = Δᐃ.ᐃΔⵠⵠΔⲆⲆ;
    Ⲇᐃ[1114] = [];
    Ⲇᐃ[1114][Sr.ΔΔⵠ] = Δᐃ.ΔⵠΔΔΔⲆⲆ;
    Ⲇᐃ[1114][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆⵠⲆΔⲆⵠ;
    Ⲇᐃ[1100] = [];
    Ⲇᐃ[1100][Sr.ΔΔⵠ] = Δᐃ.ΔΔⵠΔΔⲆᐃ;
    Ⲇᐃ[1100][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆⲆΔΔΔᐃ;
    Ⲇᐃ[1102] = [];
    Ⲇᐃ[1102][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃⲆΔΔⵠᐃ;
    Ⲇᐃ[1102][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⲆⵠΔΔΔΔ;
    Ⲇᐃ[1105] = [];
    Ⲇᐃ[1105][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠⵠⵠΔΔⵠ;
    Ⲇᐃ[1105][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠⲆΔΔⲆᐃ;
    Ⲇᐃ[1101] = [];
    Ⲇᐃ[1101][Sr.ΔΔⵠ] = Δᐃ.ΔⲆΔⵠᐃⵠⲆ;
    Ⲇᐃ[1101][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆⲆⲆᐃᐃⵠ;
    Ⲇᐃ[1104] = [];
    Ⲇᐃ[1104][Sr.ΔΔⵠ] = Δᐃ.ΔⲆⵠⵠΔⵠΔ;
    Ⲇᐃ[1104][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃⲆⵠⵠⵠⲆ;
    Ⲇᐃ[1103] = [];
    Ⲇᐃ[1103][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠᐃΔᐃᐃⲆ;
    Ⲇᐃ[1103][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⵠΔⵠᐃᐃⲆ;
    Ⲇᐃ[1106] = [];
    Ⲇᐃ[1106][Sr.ΔΔⵠ] = Δᐃ.ⵠⲆΔⵠᐃΔⵠ;
    Ⲇᐃ[1106][Sr.ⲆᐃⲆ] = Δᐃ.ⵠΔᐃⵠⵠᐃⵠ;
    Ⲇᐃ[1107] = Δᐃ.ⲆⵠᐃⵠᐃⲆᐃ;
    Ⲇᐃ[1108] = Δᐃ.ᐃΔᐃΔΔΔΔ;
    Ⲇᐃ[1109] = Δᐃ.ΔⵠⵠⲆⵠⲆⲆ;
    Ⲇᐃ[1119] = [];
    Ⲇᐃ[1119][Sr.ΔΔⵠ] = Δᐃ.ⵠΔⲆᐃΔᐃⲆ;
    Ⲇᐃ[1119][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔᐃⵠΔⵠⵠ;
    Ⲇᐃ[238] = [];
    Ⲇᐃ[238][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠⲆⲆᐃⲆⲆ;
    Ⲇᐃ[238][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⵠΔΔⲆΔᐃ;
    Ⲇᐃ[1136] = Δᐃ.ⵠᐃⲆⲆΔⲆⵠ;
    Ⲇᐃ[1134] = [];
    Ⲇᐃ[1134][Sr.ΔΔⵠ] = Δᐃ.ᐃΔⲆⵠΔΔᐃ;
    Ⲇᐃ[1134][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆⲆᐃⲆⲆⲆ;
    Ⲇᐃ[1135] = [];
    Ⲇᐃ[1135][Sr.ΔΔⵠ] = Δᐃ.ⲆΔᐃⲆⵠⵠⵠ;
    Ⲇᐃ[1135][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⲆΔᐃⵠΔ;
    Ⲇᐃ[1121] = [];
    Ⲇᐃ[1121][Sr.ΔΔⵠ] = Δᐃ.ΔⲆᐃⲆⲆΔΔ;
    Ⲇᐃ[1121][Sr.ⲆᐃⲆ] = Δᐃ.ΔⵠᐃⵠᐃⲆΔ;
    Ⲇᐃ[1123] = [];
    Ⲇᐃ[1123][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆⵠⲆᐃΔⲆ;
    Ⲇᐃ[1123][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃΔΔΔᐃⵠ;
    Ⲇᐃ[1126] = [];
    Ⲇᐃ[1126][Sr.ΔΔⵠ] = Δᐃ.ⵠΔⵠᐃⲆⵠⲆ;
    Ⲇᐃ[1126][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠᐃⲆⵠⲆΔ;
    Ⲇᐃ[1122] = [];
    Ⲇᐃ[1122][Sr.ΔΔⵠ] = Δᐃ.ΔⵠⲆⵠⵠⲆⲆ;
    Ⲇᐃ[1122][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆᐃᐃⲆⲆⲆ;
    Ⲇᐃ[1125] = [];
    Ⲇᐃ[1125][Sr.ΔΔⵠ] = Δᐃ.ΔⵠΔⵠᐃⲆᐃ;
    Ⲇᐃ[1125][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃⲆⵠⲆᐃⵠ;
    Ⲇᐃ[1124] = [];
    Ⲇᐃ[1124][Sr.ΔΔⵠ] = Δᐃ.ΔΔⵠᐃⵠΔΔ;
    Ⲇᐃ[1124][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⲆΔᐃΔⵠ;
    Ⲇᐃ[1127] = [];
    Ⲇᐃ[1127][Sr.ΔΔⵠ] = Δᐃ.ⲆΔᐃⲆΔᐃⵠ;
    Ⲇᐃ[1127][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔΔⵠⵠⵠΔ;
    Ⲇᐃ[1128] = Δᐃ.ⵠⵠⵠᐃᐃΔΔ;
    Ⲇᐃ[1129] = Δᐃ.ⵠⲆᐃᐃⵠⵠᐃ;
    Ⲇᐃ[1130] = Δᐃ.ⲆΔⲆⵠⲆⵠᐃ;
    Ⲇᐃ[1042] = [];
    Ⲇᐃ[1042][Sr.ΔΔⵠ] = Δᐃ.ⲆΔⲆⵠᐃΔⵠ;
    Ⲇᐃ[1042][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃⲆᐃΔⲆⵠ;
    Ⲇᐃ[1043] = [];
    Ⲇᐃ[1043][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠⵠΔⲆⲆⲆ;
    Ⲇᐃ[1043][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⵠⵠΔⵠⵠᐃ;
    Ⲇᐃ[1044] = [];
    Ⲇᐃ[1044][Sr.ΔΔⵠ] = Δᐃ.ΔⲆΔⲆⵠⵠΔ;
    Ⲇᐃ[1044][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⵠᐃⵠⵠΔⲆ;
    Ⲇᐃ[228] = [];
    Ⲇᐃ[228][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆΔΔⲆⲆⵠ;
    Ⲇᐃ[228][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆΔΔⲆⲆⵠ;
    Ⲇᐃ[234] = [];
    Ⲇᐃ[234][Sr.ΔΔⵠ] = Δᐃ.ⵠⵠᐃⵠΔᐃΔ;
    Ⲇᐃ[234][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⵠᐃⵠΔᐃΔ;
    Ⲇᐃ[249] = [];
    Ⲇᐃ[249][Sr.ΔΔⵠ] = Δᐃ.ⲆΔᐃΔⲆⲆⵠ;
    Ⲇᐃ[249][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔᐃΔⲆⲆⵠ;
    Ⲇᐃ[1045] = Δᐃ.ⲆⵠⲆᐃᐃᐃⲆ;
    Ⲇᐃ[89] = [];
    Ⲇᐃ[89][Sr.ΔΔⵠ] = Δᐃ.ΔᐃΔΔⵠΔΔ;
    Ⲇᐃ[89][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠⲆⲆⲆⲆᐃ;
    Ⲇᐃ[92] = [];
    Ⲇᐃ[92][Sr.ΔΔⵠ] = Δᐃ.ΔΔⲆΔᐃᐃⵠ;
    Ⲇᐃ[92][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃᐃⲆⲆᐃⲆ;
    Ⲇᐃ[247] = [];
    Ⲇᐃ[247][Sr.ΔΔⵠ] = [Δᐃ.ⲆⵠᐃⲆᐃΔⵠ, Δᐃ.ᐃᐃⲆᐃⵠᐃⲆ, Δᐃ.ⵠⵠᐃⲆΔᐃᐃ, Δᐃ.ⲆⲆⵠΔΔⵠΔ, Δᐃ.ΔᐃⵠΔᐃⲆⵠ, Δᐃ.ΔᐃⵠΔΔⵠΔ, Δᐃ.ⲆⵠΔⲆⵠΔⵠ, Δᐃ.ⵠΔⵠᐃΔⲆⵠ, Δᐃ.ᐃΔⲆΔⵠᐃᐃ];
    Ⲇᐃ[247][Sr.ⲆᐃⲆ] = [Δᐃ.ⵠΔᐃΔᐃⵠᐃ, Δᐃ.ΔᐃⵠⵠⲆⵠΔ, Δᐃ.ᐃⵠΔⵠᐃⵠⲆ, Δᐃ.ᐃᐃⲆⵠⵠⵠΔ, Δᐃ.ⵠᐃΔΔᐃᐃⵠ, Δᐃ.ⵠᐃᐃΔΔᐃⲆ, Δᐃ.ᐃⲆⵠΔⲆⲆᐃ, Δᐃ.ⵠΔⵠᐃΔⲆⵠ, Δᐃ.ⲆᐃⲆΔⲆᐃᐃ];
    Ⲇᐃ[93] = [];
    Ⲇᐃ[93][Sr.ΔΔⵠ] = Δᐃ.ⵠΔᐃⲆⲆΔⵠ;
    Ⲇᐃ[93][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃᐃᐃΔᐃᐃ;
    Ⲇᐃ[225] = [];
    Ⲇᐃ[225][Sr.ΔΔⵠ] = Δᐃ.ⲆⵠⲆᐃⵠⲆΔ;
    Ⲇᐃ[225][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔᐃΔⲆⲆⲆ;
    Ⲇᐃ[226] = [];
    Ⲇᐃ[226][Sr.ΔΔⵠ] = Δᐃ.ᐃᐃⵠⵠᐃⲆᐃ;
    Ⲇᐃ[226][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔⵠᐃⵠⲆⵠ;
    Ⲇᐃ[24] = [];
    Ⲇᐃ[24][Sr.ΔΔⵠ] = Δᐃ.ΔΔⵠⵠᐃⵠᐃ;
    Ⲇᐃ[24][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆΔⲆⵠΔⵠ;
    Ⲇᐃ[88] = [];
    Ⲇᐃ[88][Sr.ΔΔⵠ] = Δᐃ.ᐃΔⵠⵠᐃᐃΔΔᐃ;
    Ⲇᐃ[88][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃΔᐃⲆᐃᐃᐃⲆ;
    Ⲇᐃ[87] = [];
    Ⲇᐃ[87][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃᐃⲆᐃΔᐃΔᐃ;
    Ⲇᐃ[87][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔⲆⲆᐃⲆΔⲆΔ;
    Ⲇᐃ[82] = [];
    Ⲇᐃ[82][Sr.ΔΔⵠ] = Δᐃ.ΔΔΔᐃΔⲆᐃ;
    Ⲇᐃ[82][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃⵠⲆⵠᐃΔ;
    Ⲇᐃ[621] = [];
    Ⲇᐃ[621][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[621][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[621][Sr.ΔΔⵠ].push(Δᐃ.ⵠᐃⲆⵠᐃⲆⵠⲆΔ);
    Ⲇᐃ[621][Sr.ΔΔⵠ].push(Δᐃ.ᐃᐃⵠΔⲆᐃΔⲆⲆ);
    Ⲇᐃ[621][Sr.ΔΔⵠ].push(Δᐃ.ΔⵠⵠΔᐃᐃΔⲆⲆ);
    Ⲇᐃ[621][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆᐃᐃⲆⲆⲆΔΔᐃ);
    Ⲇᐃ[621][Sr.ⲆᐃⲆ].push(Δᐃ.ΔΔⵠᐃⵠΔᐃⵠᐃ);
    Ⲇᐃ[621][Sr.ⲆᐃⲆ].push(Δᐃ.ΔᐃⲆΔⲆΔΔⵠᐃ);
    Ⲇᐃ[619] = [];
    Ⲇᐃ[619][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[619][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[619][Sr.ΔΔⵠ].push(Δᐃ.ⵠⵠᐃⲆΔΔΔⲆᐃ);
    Ⲇᐃ[619][Sr.ΔΔⵠ].push(Δᐃ.ⵠΔⲆⲆΔⵠΔⲆⲆ);
    Ⲇᐃ[619][Sr.ΔΔⵠ].push(Δᐃ.ΔⲆΔΔⲆⲆᐃⲆⲆ);
    Ⲇᐃ[619][Sr.ⲆᐃⲆ].push(Δᐃ.ΔΔⲆⲆⲆΔⲆⵠⵠ);
    Ⲇᐃ[619][Sr.ⲆᐃⲆ].push(Δᐃ.ΔᐃⵠⲆΔΔΔⵠᐃ);
    Ⲇᐃ[619][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠᐃⵠᐃⵠⲆᐃᐃⵠ);
    Ⲇᐃ[620] = [];
    Ⲇᐃ[620][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[620][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[620][Sr.ΔΔⵠ].push(Δᐃ.ΔᐃΔⵠᐃⵠⲆΔⲆ);
    Ⲇᐃ[620][Sr.ΔΔⵠ].push(Δᐃ.ᐃᐃⵠΔⲆᐃᐃᐃⲆ);
    Ⲇᐃ[620][Sr.ΔΔⵠ].push(Δᐃ.ⵠⲆⲆᐃᐃᐃᐃⵠⵠ);
    Ⲇᐃ[620][Sr.ⲆᐃⲆ].push(Δᐃ.ⲆⲆⲆⵠᐃᐃΔᐃⲆ);
    Ⲇᐃ[620][Sr.ⲆᐃⲆ].push(Δᐃ.ⵠᐃⵠⵠⲆΔⵠᐃⵠ);
    Ⲇᐃ[620][Sr.ⲆᐃⲆ].push(Δᐃ.ᐃⲆᐃΔΔⵠΔⵠΔ);
    ⲆⲆⲆⲆ.g = [];
    ⲆⲆⲆⲆ.g[0] = [Δᐃ.ΔⵠᐃᐃⲆᐃᐃ, Δᐃ.ⲆᐃⲆᐃⵠᐃⲆ];
    ⲆⲆⲆⲆ.g[1] = ⲆⲆⲆⲆ.g[0];
    ⲆⲆⲆⲆ.g[2] = [Δᐃ.ᐃⵠᐃΔΔᐃΔ, Δᐃ.ΔⲆⲆΔᐃⵠⵠ];
    ⲆⲆⲆⲆ.m = [];
    ⲆⲆⲆⲆ.m[0] = [Δᐃ.ⵠⲆᐃⵠᐃⲆΔ, Δᐃ.ⵠᐃⲆΔΔᐃⵠ];
    ⲆⲆⲆⲆ.m[1] = ⲆⲆⲆⲆ.m[0];
    ⲆⲆⲆⲆ.m[2] = [Δᐃ.ⵠΔᐃᐃⲆΔΔ, Δᐃ.ⲆᐃⵠᐃⲆᐃⲆ];
    ⲆⲆⲆⲆ.la = [];
    ⲆⲆⲆⲆ.la[0] = [Δᐃ.ΔΔᐃⲆᐃᐃΔ, Δᐃ.ⵠⲆⲆᐃᐃΔⵠ];
    ⲆⲆⲆⲆ.la[1] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.la[2] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.la[3] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.la[4] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.la[5] = ⲆⲆⲆⲆ.la[0];
    ⲆⲆⲆⲆ.s = [];
    ⲆⲆⲆⲆ.s[0] = [Δᐃ.ⵠᐃᐃΔⵠΔᐃ, Δᐃ.ᐃⵠΔⲆⵠΔⵠ];
    ⲆⲆⲆⲆ.s[1] = ⲆⲆⲆⲆ.s[0];
    ⲆⲆⲆⲆ.s[2] = [Δᐃ.ⵠⲆΔⵠⵠΔⲆ, Δᐃ.ⲆⲆⵠᐃᐃᐃⵠ];
    ⲆⲆⲆⲆ.p = [];
    ⲆⲆⲆⲆ.p[0] = [Δᐃ.ⲆΔΔᐃⵠᐃⲆ, Δᐃ.ⲆΔΔᐃⵠᐃⲆ];
    ⲆⲆⲆⲆ.a = [];
    ⲆⲆⲆⲆ.a[0] = [Δᐃ.ΔᐃᐃⲆⲆⵠᐃ, Δᐃ.ⵠΔⵠⲆⵠⲆⵠ];
    ⲆⲆⲆⲆ.a[1] = ⲆⲆⲆⲆ.a[0];
    ⲆⲆⲆⲆ.a[2] = ⲆⲆⲆⲆ.a[0];
    ⲆⲆⲆⲆ.d = [];
    ⲆⲆⲆⲆ.d[0] = [Δᐃ.ΔⵠⵠᐃΔΔⲆ, Δᐃ.ⵠⲆΔⲆΔΔΔ];
    ⲆⲆⲆⲆ.d[1] = ⲆⲆⲆⲆ.d[0];
    ⲆⲆⲆⲆ.d[2] = ⲆⲆⲆⲆ.d[0];
    ⲆⲆⲆⲆ.re = [];
    ⲆⲆⲆⲆ.re[0] = [Δᐃ.ⲆⲆⵠΔᐃⲆⲆ, Δᐃ.ᐃᐃⵠⲆⲆᐃᐃ];
    ⲆⲆⲆⲆ.re[1] = ⲆⲆⲆⲆ.re[0];
    ⲆⲆⲆⲆ.re[2] = ⲆⲆⲆⲆ.re[0];
    ⲆⲆⲆⲆ.f = [];
    ⲆⲆⲆⲆ.f[0] = [Δᐃ.ᐃⲆᐃΔⵠⲆΔ, Δᐃ.ⵠⲆᐃⵠᐃΔⵠ];
    ⲆⲆⲆⲆ.f[1] = ⲆⲆⲆⲆ.f[0];
    ⲆⲆⲆⲆ.f[2] = ⲆⲆⲆⲆ.f[0];
    ⲆⲆⲆⲆ.isl = [];
    ⲆⲆⲆⲆ.isl[0] = [Δᐃ.ᐃΔᐃⵠⲆΔᐃ, Δᐃ.ⲆⵠⵠⲆΔⲆⲆ];
    ⲆⲆⲆⲆ.isl[1] = ⲆⲆⲆⲆ.isl[0];
    ⲆⲆⲆⲆ.isl[2] = ⲆⲆⲆⲆ.isl[0];
    ⲆⲆⲆⲆ.c = [];
    ⲆⲆⲆⲆ.c[0] = [Δᐃ.ⵠΔᐃⵠⵠⵠⲆ, Δᐃ.ΔᐃΔⵠᐃᐃⲆ];
    ⲆⲆⲆⲆ.c[1] = ⲆⲆⲆⲆ.c[0];
    ⲆⲆⲆⲆ.c[2] = ⲆⲆⲆⲆ.c[0];
    ⲆⲆⲆⲆ.wtb = [];
    ⲆⲆⲆⲆ.wtb[0] = [Δᐃ.ᐃⲆⲆⲆᐃⵠⲆ, Δᐃ.ⲆⵠᐃⲆⲆⵠΔ];
    ⲆⲆⲆⲆ.PIRANHA = [Δᐃ.ⵠⲆᐃᐃᐃⲆΔ, Δᐃ.ⲆⵠⲆᐃᐃⲆⲆ];
    ⲆⲆⲆⲆ.KRAKEN = [Δᐃ.ᐃᐃⵠᐃᐃᐃΔ, Δᐃ.ΔⲆⵠⵠⲆᐃΔ];
    ⲆⲆⲆⲆ.FOX = [Δᐃ.ᐃᐃⲆΔΔᐃᐃ, Δᐃ.ΔΔᐃᐃΔⵠⵠ];
    ⲆⲆⲆⲆ.WOLF = [Δᐃ.ΔᐃⲆⲆⲆⲆᐃ, Δᐃ.ᐃΔⲆⲆΔᐃΔ];
    ⲆⲆⲆⲆ.SPIDER = [Δᐃ.ᐃⵠᐃⲆⲆⲆⵠ, Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ];
    ⲆⲆⲆⲆ.BEAR = [Δᐃ.ⵠⵠᐃⲆⵠΔΔ, Δᐃ.ᐃΔᐃᐃⲆΔᐃ];
    ⲆⲆⲆⲆ.CAVE = [Δᐃ.ΔᐃᐃⲆᐃᐃⵠ, Δᐃ.ⵠᐃΔⲆⲆΔᐃ];
    ⲆⲆⲆⲆ.MAP = [Δᐃ.ⵠᐃⵠΔⲆᐃΔ, Δᐃ.ΔᐃᐃⵠΔΔΔ];
    ⲆⲆⲆⲆ.FOREST = [Δᐃ.ⲆΔᐃΔⲆᐃⵠ, Δᐃ.ⵠⲆⵠᐃⵠⵠⵠ];
    ⲆⲆⲆⲆ.WINTER = [Δᐃ.ΔⲆⲆⵠᐃΔⵠ, Δᐃ.ⲆⵠⲆⲆΔⲆᐃ];
    ⲆⲆⲆⲆ.DESERT = [Δᐃ.ⲆΔΔᐃⲆⲆⲆ, Δᐃ.ⵠᐃΔⵠⲆᐃᐃ];
    ⲆⲆⲆⲆ.LAVA = [Δᐃ.ⲆⵠΔⲆΔΔⵠ, Δᐃ.ΔΔᐃΔⵠⵠᐃ];
    for (var c in ⲆⲆⲆⲆ) {
      for (var d = ⲆⲆⲆⲆ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ⵠΔⲆⲆΔΔⵠ !== Di) {
          f.ⵠΔⲆⲆΔΔⵠ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ⵠΔⲆⲆΔΔⵠ !== undefined) {
              f[g].ⵠΔⲆⲆΔΔⵠ();
            }
          }
        }
      }
    }
    console.log(undefined, at);
  }
  function fp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    ed(e, c[1], c[2], a * 6);
    return d;
  }
  function zp(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    id(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    ed(d, null, "#BBE8EF", a);
    return c;
  }
  function yp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    ed(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    ed(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    ed(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    ed(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    ed(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    ed(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    ed(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    ed(e, c[2], c[3], a * 10);
    $b(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    ed(e, c[4], c[5], a * 1);
    $b(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    ed(e, c[4], c[5], a * 1);
    $b(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    ed(e, c[4], c[5], a * 1);
    $b(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    ed(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    ed(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    ed(e, c[6]);
    return d;
  }
  function wp() {
    Ⲇᐃ[814] = Xd(1, [{
      f: Qm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[815] = Ⲇᐃ[814];
    Ⲇᐃ[955] = [];
    Ⲇᐃ[955][0] = Δᐃ.ᐃΔᐃⵠⲆⲆΔ;
    Ⲇᐃ[955][1] = Δᐃ.ΔⲆΔᐃᐃⲆᐃ;
    Ⲇᐃ[955][2] = Δᐃ.ⲆΔⵠᐃᐃΔⵠ;
    Ⲇᐃ[956] = Ⲇᐃ[955];
    Ⲇᐃ[972] = [];
    Ⲇᐃ[972][0] = Δᐃ.ⵠⲆᐃᐃⵠΔⲆ;
    Ⲇᐃ[972][1] = Δᐃ.ΔⵠⵠⲆΔᐃᐃ;
    Ⲇᐃ[972][2] = Δᐃ.ⲆⵠⵠΔⵠᐃᐃ;
    Ⲇᐃ[973] = Ⲇᐃ[972];
    Ⲇᐃ[987] = [];
    Ⲇᐃ[987][0] = Δᐃ.ⵠᐃⵠᐃⵠⵠᐃ;
    Ⲇᐃ[987][1] = Δᐃ.ⲆⵠΔΔⲆΔᐃ;
    Ⲇᐃ[987][2] = Δᐃ.ⲆᐃᐃΔⵠᐃⲆ;
    Ⲇᐃ[988] = Ⲇᐃ[987];
    Ⲇᐃ[1154] = [];
    Ⲇᐃ[1154][0] = Δᐃ.ΔⵠⲆⵠᐃΔⵠ;
    Ⲇᐃ[1154][1] = Δᐃ.ᐃⵠⲆΔⵠⲆᐃ;
    Ⲇᐃ[1154][2] = Δᐃ.ᐃⵠⵠⵠⲆᐃⲆ;
    Ⲇᐃ[1155] = Ⲇᐃ[1154];
    Ⲇᐃ[965] = [];
    Ⲇᐃ[965][0] = Δᐃ.ⵠᐃⲆᐃⲆΔⲆ;
    Ⲇᐃ[965][1] = Δᐃ.ᐃΔᐃᐃⲆⵠⵠ;
    Ⲇᐃ[965][2] = Δᐃ.ⵠⲆⵠΔᐃⲆⲆ;
    Ⲇᐃ[974] = Ⲇᐃ[965];
    Ⲇᐃ[1028] = [];
    Ⲇᐃ[1028][0] = Δᐃ.ⲆⵠᐃΔΔⵠⲆ;
    Ⲇᐃ[1028][1] = Δᐃ.ⵠⲆⵠⵠᐃΔᐃ;
    Ⲇᐃ[1028][2] = Δᐃ.ᐃΔⲆⲆⵠⲆΔ;
    Ⲇᐃ[1029] = Ⲇᐃ[1028];
    Ⲇᐃ[1027] = Ⲇᐃ[1028];
    Ⲇᐃ[712] = [];
    Ⲇᐃ[712][0] = Δᐃ.ᐃᐃⲆΔⵠⲆⵠΔᐃ;
    Ⲇᐃ[712][1] = Δᐃ.ΔᐃᐃΔⵠⲆΔⵠⲆ;
    Ⲇᐃ[712][2] = Δᐃ.ΔⲆⵠΔΔΔⲆⲆⵠ;
    Ⲇᐃ[713] = Ⲇᐃ[712];
    Ⲇᐃ[714] = Ⲇᐃ[712];
    Ⲇᐃ[1031] = [];
    Ⲇᐃ[1031][0] = Δᐃ.ΔᐃⲆⲆᐃⲆΔ;
    Ⲇᐃ[1031][1] = Δᐃ.Δⵠᐃᐃᐃᐃⵠ;
    Ⲇᐃ[1031][2] = Δᐃ.ᐃⲆᐃΔⵠⵠᐃ;
    Ⲇᐃ[1032] = Ⲇᐃ[1031];
    Ⲇᐃ[1030] = Ⲇᐃ[1031];
    Ⲇᐃ[423] = [];
    Ⲇᐃ[423][0] = Δᐃ.ⵠⲆⲆⲆⲆⵠΔ;
    Ⲇᐃ[423][1] = Δᐃ.ⲆⲆᐃᐃⲆᐃⵠ;
    Ⲇᐃ[423][2] = Δᐃ.ΔᐃΔΔⲆⲆⲆ;
    Ⲇᐃ[425] = Ⲇᐃ[423];
    Ⲇᐃ[424] = Ⲇᐃ[423];
    Ⲇᐃ[1233] = [];
    Ⲇᐃ[1233][0] = Δᐃ.ⵠⵠⲆⵠΔⵠΔⲆᐃ;
    Ⲇᐃ[1233][1] = Δᐃ.ᐃⵠⲆᐃⵠⲆⲆΔᐃ;
    Ⲇᐃ[1233][2] = Δᐃ.ⲆΔΔᐃⵠᐃᐃΔᐃ;
    Ⲇᐃ[1234] = Ⲇᐃ[1233];
    Ⲇᐃ[1230] = [];
    Ⲇᐃ[1230][0] = Δᐃ.ΔⵠⵠⲆⲆΔΔⲆΔ;
    Ⲇᐃ[1230][1] = Δᐃ.ⵠΔΔᐃΔⵠⵠⵠΔ;
    Ⲇᐃ[1230][2] = Δᐃ.ⲆⲆᐃⵠᐃᐃᐃⵠⲆ;
    Ⲇᐃ[1232] = Ⲇᐃ[1230];
    Ⲇᐃ[1231] = Ⲇᐃ[1230];
    Ⲇᐃ[569] = [];
    Ⲇᐃ[569][0] = Δᐃ.ΔΔᐃⵠⲆⲆⲆᐃΔ;
    Ⲇᐃ[569][1] = Δᐃ.ⵠΔⵠᐃⵠᐃⵠⵠⲆ;
    Ⲇᐃ[569][2] = Δᐃ.ᐃⵠᐃⲆⵠⵠⲆΔⲆ;
    Ⲇᐃ[571] = Ⲇᐃ[569];
    Ⲇᐃ[570] = Ⲇᐃ[569];
    Ⲇᐃ[1166] = [];
    Ⲇᐃ[1166][0] = Δᐃ.ᐃⵠΔΔᐃⵠΔᐃⵠ;
    Ⲇᐃ[1166][1] = Δᐃ.ᐃΔⵠΔⲆⲆᐃⲆⵠ;
    Ⲇᐃ[1166][2] = Δᐃ.ⲆⵠΔⲆΔⵠⲆᐃΔ;
    Ⲇᐃ[1167] = Ⲇᐃ[1166];
    Ⲇᐃ[1168] = Ⲇᐃ[1166];
    Ⲇᐃ[572] = [];
    Ⲇᐃ[572][0] = Δᐃ.ⲆⵠⲆΔΔΔΔⵠⵠ;
    Ⲇᐃ[572][1] = Δᐃ.ⲆᐃⲆⲆᐃⲆⲆΔⵠ;
    Ⲇᐃ[572][2] = Δᐃ.ⲆᐃᐃΔⵠᐃᐃⵠⵠ;
    Ⲇᐃ[574] = Ⲇᐃ[572];
    Ⲇᐃ[573] = Ⲇᐃ[572];
    Ⲇᐃ[1169] = [];
    Ⲇᐃ[1169][0] = Δᐃ.ΔᐃᐃⲆⵠΔⲆᐃΔ;
    Ⲇᐃ[1169][1] = Δᐃ.ⲆΔᐃⲆΔⵠⲆⵠᐃ;
    Ⲇᐃ[1169][2] = Δᐃ.ⵠΔΔⲆⵠⵠⵠΔⵠ;
    Ⲇᐃ[1170] = Ⲇᐃ[1169];
    Ⲇᐃ[1171] = Ⲇᐃ[1169];
    Ⲇᐃ[575] = [];
    Ⲇᐃ[575][0] = Δᐃ.ⲆΔⵠᐃᐃΔᐃᐃⵠ;
    Ⲇᐃ[575][1] = Δᐃ.ⲆᐃⲆΔᐃⲆᐃⲆⲆ;
    Ⲇᐃ[575][2] = Δᐃ.ᐃΔΔⲆᐃΔⲆΔⵠ;
    Ⲇᐃ[577] = Ⲇᐃ[575];
    Ⲇᐃ[576] = Ⲇᐃ[575];
    Ⲇᐃ[1172] = [];
    Ⲇᐃ[1172][0] = Δᐃ.ⵠΔᐃⲆΔⵠⲆΔΔ;
    Ⲇᐃ[1172][1] = Δᐃ.ΔⲆΔⵠᐃΔᐃⵠΔ;
    Ⲇᐃ[1172][2] = Δᐃ.ΔᐃⲆⲆⵠΔᐃᐃΔ;
    Ⲇᐃ[1173] = Ⲇᐃ[1172];
    Ⲇᐃ[1174] = Ⲇᐃ[1172];
    Ⲇᐃ[578] = [];
    Ⲇᐃ[578][0] = Δᐃ.ᐃΔⵠᐃⲆⵠΔⲆⲆ;
    Ⲇᐃ[578][1] = Δᐃ.ⵠⵠⲆⲆΔⲆᐃⲆⲆ;
    Ⲇᐃ[578][2] = Δᐃ.ΔⵠᐃΔⲆᐃⲆΔᐃ;
    Ⲇᐃ[580] = Ⲇᐃ[578];
    Ⲇᐃ[579] = Ⲇᐃ[578];
    Ⲇᐃ[1175] = [];
    Ⲇᐃ[1175][0] = Δᐃ.ᐃⲆⵠⵠΔⲆᐃΔⲆ;
    Ⲇᐃ[1175][1] = Δᐃ.ⵠΔⲆⵠⵠΔⵠᐃⲆ;
    Ⲇᐃ[1175][2] = Δᐃ.ⵠΔⲆⵠⵠᐃⲆⲆⲆ;
    Ⲇᐃ[1176] = Ⲇᐃ[1175];
    Ⲇᐃ[1177] = Ⲇᐃ[1175];
    Ⲇᐃ[581] = [];
    Ⲇᐃ[581][0] = Δᐃ.ᐃⲆⵠⵠᐃⲆΔᐃⲆ;
    Ⲇᐃ[581][1] = Δᐃ.ΔⲆΔᐃⵠⲆΔᐃᐃ;
    Ⲇᐃ[581][2] = Δᐃ.ᐃΔᐃᐃⲆⵠΔΔⲆ;
    Ⲇᐃ[583] = Ⲇᐃ[581];
    Ⲇᐃ[582] = Ⲇᐃ[581];
    Ⲇᐃ[1178] = [];
    Ⲇᐃ[1178][0] = Δᐃ.ⲆᐃⲆⵠᐃᐃᐃΔΔ;
    Ⲇᐃ[1178][1] = Δᐃ.ⲆⵠⲆⵠΔⲆΔⲆᐃ;
    Ⲇᐃ[1178][2] = Δᐃ.ⲆⲆⵠΔⵠⲆᐃⵠⲆ;
    Ⲇᐃ[1179] = Ⲇᐃ[1178];
    Ⲇᐃ[1180] = Ⲇᐃ[1178];
    Ⲇᐃ[584] = [];
    Ⲇᐃ[584][0] = Δᐃ.ⵠⵠΔᐃⲆⵠⲆᐃⵠ;
    Ⲇᐃ[584][1] = Δᐃ.ⵠⵠᐃⵠᐃⲆᐃⵠᐃ;
    Ⲇᐃ[584][2] = Δᐃ.ⲆⲆΔᐃⲆᐃⵠⵠⵠ;
    Ⲇᐃ[586] = Ⲇᐃ[584];
    Ⲇᐃ[585] = Ⲇᐃ[584];
    Ⲇᐃ[1181] = [];
    Ⲇᐃ[1181][0] = Δᐃ.ΔⲆᐃΔⲆᐃⲆⵠᐃ;
    Ⲇᐃ[1181][1] = Δᐃ.ΔᐃΔᐃⵠΔⲆⵠΔ;
    Ⲇᐃ[1181][2] = Δᐃ.ᐃΔⲆΔΔⵠⵠΔⵠ;
    Ⲇᐃ[1182] = Ⲇᐃ[1181];
    Ⲇᐃ[1183] = Ⲇᐃ[1181];
    Ⲇᐃ[587] = [];
    Ⲇᐃ[587][0] = Δᐃ.ⲆΔΔᐃᐃΔⵠΔΔ;
    Ⲇᐃ[587][1] = Δᐃ.ⲆᐃᐃΔⲆⲆⵠⵠⲆ;
    Ⲇᐃ[587][2] = Δᐃ.ⲆⵠⲆⲆΔⲆᐃᐃᐃ;
    Ⲇᐃ[589] = Ⲇᐃ[587];
    Ⲇᐃ[588] = Ⲇᐃ[587];
    Ⲇᐃ[1184] = [];
    Ⲇᐃ[1184][0] = Δᐃ.ⲆⵠᐃᐃⵠΔᐃΔᐃ;
    Ⲇᐃ[1184][1] = Δᐃ.ⲆⵠⵠⵠᐃⵠⲆᐃΔ;
    Ⲇᐃ[1184][2] = Δᐃ.ΔᐃᐃᐃΔΔΔᐃⵠ;
    Ⲇᐃ[1185] = Ⲇᐃ[1184];
    Ⲇᐃ[1186] = Ⲇᐃ[1184];
    Ⲇᐃ[1257] = [];
    Ⲇᐃ[1257][0] = Δᐃ.ΔⲆᐃⲆⲆⵠⲆΔᐃ;
    Ⲇᐃ[1257][1] = Δᐃ.ΔΔᐃΔⵠᐃΔⵠᐃ;
    Ⲇᐃ[1257][2] = Δᐃ.ΔⲆⲆⵠⵠΔᐃⲆΔ;
    Ⲇᐃ[1258] = Ⲇᐃ[1257];
    Ⲇᐃ[1256] = Ⲇᐃ[1257];
    Ⲇᐃ[1260] = [];
    Ⲇᐃ[1260][0] = Δᐃ.ⵠᐃᐃΔⵠΔⲆⲆⵠ;
    Ⲇᐃ[1260][1] = Δᐃ.ΔᐃΔᐃⲆᐃᐃⵠⲆ;
    Ⲇᐃ[1260][2] = Δᐃ.ⲆᐃⲆΔᐃⵠᐃΔΔ;
    Ⲇᐃ[1261] = Ⲇᐃ[1260];
    Ⲇᐃ[1259] = Ⲇᐃ[1260];
    Ⲇᐃ[1263] = [];
    Ⲇᐃ[1263][0] = Δᐃ.ΔⲆⵠⵠⲆⵠⲆΔⵠ;
    Ⲇᐃ[1263][1] = Δᐃ.ⵠⵠᐃᐃⵠⲆⲆⲆᐃ;
    Ⲇᐃ[1263][2] = Δᐃ.ΔΔΔΔΔⲆΔᐃᐃ;
    Ⲇᐃ[1264] = Ⲇᐃ[1263];
    Ⲇᐃ[1262] = Ⲇᐃ[1263];
    Ⲇᐃ[1266] = [];
    Ⲇᐃ[1266][0] = Δᐃ.ᐃᐃᐃᐃⵠᐃⵠⲆΔ;
    Ⲇᐃ[1266][1] = Δᐃ.ΔᐃⲆᐃⵠΔⲆⲆⲆ;
    Ⲇᐃ[1266][2] = Δᐃ.ᐃΔᐃΔᐃⵠᐃⵠⲆ;
    Ⲇᐃ[1267] = Ⲇᐃ[1266];
    Ⲇᐃ[1265] = Ⲇᐃ[1266];
    Ⲇᐃ[1269] = [];
    Ⲇᐃ[1269][0] = Δᐃ.ⲆΔΔⲆΔᐃⲆⲆⲆ;
    Ⲇᐃ[1269][1] = Δᐃ.ᐃᐃᐃΔᐃᐃΔΔᐃ;
    Ⲇᐃ[1269][2] = Δᐃ.ΔⲆᐃᐃⲆᐃⲆⲆᐃ;
    Ⲇᐃ[1270] = Ⲇᐃ[1269];
    Ⲇᐃ[1268] = Ⲇᐃ[1269];
    Ⲇᐃ[1272] = [];
    Ⲇᐃ[1272][0] = Δᐃ.ΔⲆᐃⵠΔΔᐃΔⲆ;
    Ⲇᐃ[1272][1] = Δᐃ.ⵠᐃΔΔⵠⵠΔⲆⵠ;
    Ⲇᐃ[1272][2] = Δᐃ.ⲆⵠⵠΔΔⲆᐃΔⲆ;
    Ⲇᐃ[1273] = Ⲇᐃ[1272];
    Ⲇᐃ[1271] = Ⲇᐃ[1272];
    Ⲇᐃ[1239] = [];
    Ⲇᐃ[1239][0] = Δᐃ.ΔⵠⵠⲆᐃᐃⲆΔᐃ;
    Ⲇᐃ[1239][1] = Δᐃ.ᐃⵠⵠⲆⵠⵠⲆᐃᐃ;
    Ⲇᐃ[1239][2] = Δᐃ.ⵠΔⲆⲆⵠⵠⵠΔⲆ;
    Ⲇᐃ[1240] = Ⲇᐃ[1239];
    Ⲇᐃ[1238] = Ⲇᐃ[1239];
    Ⲇᐃ[1242] = [];
    Ⲇᐃ[1242][0] = Δᐃ.ᐃΔⵠΔΔΔⲆⵠⵠ;
    Ⲇᐃ[1242][1] = Δᐃ.ΔⵠΔΔⲆⲆᐃΔΔ;
    Ⲇᐃ[1242][2] = Δᐃ.ᐃⵠⲆⲆⵠⲆⲆⵠⲆ;
    Ⲇᐃ[1243] = Ⲇᐃ[1242];
    Ⲇᐃ[1241] = Ⲇᐃ[1242];
    Ⲇᐃ[1245] = [];
    Ⲇᐃ[1245][0] = Δᐃ.ΔΔⲆΔΔⵠⲆⲆΔ;
    Ⲇᐃ[1245][1] = Δᐃ.ⵠⲆⲆⲆⲆⲆⲆΔⵠ;
    Ⲇᐃ[1245][2] = Δᐃ.ⲆᐃᐃⲆᐃᐃⲆⲆᐃ;
    Ⲇᐃ[1246] = Ⲇᐃ[1245];
    Ⲇᐃ[1244] = Ⲇᐃ[1245];
    Ⲇᐃ[1248] = [];
    Ⲇᐃ[1248][0] = Δᐃ.ΔΔⲆⲆΔⵠⲆΔⵠ;
    Ⲇᐃ[1248][1] = Δᐃ.ⲆⲆⵠᐃᐃⲆΔᐃⲆ;
    Ⲇᐃ[1248][2] = Δᐃ.ᐃⵠⲆᐃⲆⵠⵠΔⵠ;
    Ⲇᐃ[1249] = Ⲇᐃ[1248];
    Ⲇᐃ[1247] = Ⲇᐃ[1248];
    Ⲇᐃ[1251] = [];
    Ⲇᐃ[1251][0] = Δᐃ.ᐃᐃᐃᐃᐃΔⵠΔⵠ;
    Ⲇᐃ[1251][1] = Δᐃ.ΔⵠᐃⵠΔⵠᐃᐃⵠ;
    Ⲇᐃ[1251][2] = Δᐃ.ΔᐃᐃⲆΔⵠⲆΔΔ;
    Ⲇᐃ[1252] = Ⲇᐃ[1251];
    Ⲇᐃ[1250] = Ⲇᐃ[1251];
    Ⲇᐃ[1254] = [];
    Ⲇᐃ[1254][0] = Δᐃ.ΔᐃΔⲆⲆᐃΔⵠⲆ;
    Ⲇᐃ[1254][1] = Δᐃ.ⵠⲆΔⲆⵠⲆᐃⵠⵠ;
    Ⲇᐃ[1254][2] = Δᐃ.ΔⵠⵠᐃⲆⵠⲆⲆᐃ;
    Ⲇᐃ[1255] = Ⲇᐃ[1254];
    Ⲇᐃ[1253] = Ⲇᐃ[1254];
    Ⲇᐃ[1227] = [];
    Ⲇᐃ[1227][0] = Δᐃ.ΔᐃᐃᐃᐃⵠΔⲆⵠ;
    Ⲇᐃ[1227][1] = Δᐃ.ᐃⲆΔⲆᐃⲆⵠⲆΔ;
    Ⲇᐃ[1227][2] = Δᐃ.ⲆᐃⵠΔⵠᐃᐃⲆᐃ;
    Ⲇᐃ[1229] = Ⲇᐃ[1227];
    Ⲇᐃ[1228] = Ⲇᐃ[1227];
    Ⲇᐃ[1187] = [];
    Ⲇᐃ[1187][0] = Δᐃ.ΔⲆᐃⲆⵠᐃⲆ;
    Ⲇᐃ[1187][1] = Δᐃ.ᐃΔΔⲆⵠⵠⵠ;
    Ⲇᐃ[1187][2] = Δᐃ.ΔΔⲆⲆⲆⵠΔ;
    Ⲇᐃ[1188] = Ⲇᐃ[1187];
    Ⲇᐃ[Sr.ᐃⲆⵠΔⵠⵠᐃΔⲆ] = Ⲇᐃ[1187];
    Ⲇᐃ[840] = Xd(1, [{
      f: bd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[841] = Ⲇᐃ[840];
    Ⲇᐃ[850] = Xd(1, [{
      f: cp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[851] = Ⲇᐃ[850];
    Ⲇᐃ[644] = Xd(1, [{
      f: Ud,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Od,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Kd,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[643] = Ⲇᐃ[644];
    Ⲇᐃ[639] = Xd(1, [{
      f: Nd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[800] = Xd(1, [{
      f: Yc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[799] = Ⲇᐃ[800];
    Ⲇᐃ[631] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[632] = Ⲇᐃ[631];
    Ⲇᐃ[311] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#493d36", "#332b28"]
    }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[284] = Ⲇᐃ[311];
    Ⲇᐃ[808] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c67933", "#b17238"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[809] = Ⲇᐃ[808];
    Ⲇᐃ[834] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e8e8e8", "#bbbbbb"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[835] = Ⲇᐃ[834];
    Ⲇᐃ[845] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#328a56", "#449573"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[846] = Ⲇᐃ[845];
    Ⲇᐃ[949] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c98e2f", "#a36b11"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[950] = Ⲇᐃ[949];
    Ⲇᐃ[951] = Ⲇᐃ[949];
    Ⲇᐃ[966] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#13a56d", "#098a58"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[967] = Ⲇᐃ[966];
    Ⲇᐃ[968] = Ⲇᐃ[966];
    Ⲇᐃ[981] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a8214", "#4a9c1e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[982] = Ⲇᐃ[981];
    Ⲇᐃ[983] = Ⲇᐃ[981];
    Ⲇᐃ[959] = Xd(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#b22419", "#99110e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[960] = Ⲇᐃ[959];
    Ⲇᐃ[961] = Ⲇᐃ[959];
    Ⲇᐃ[309] = Xd(1, [{
      f: $d,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516"]
    }, {
      f: Et,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[302] = Ⲇᐃ[309];
    Ⲇᐃ[328] = Xd(1, [{
      f: Zd,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
      f: Et,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[327] = Ⲇᐃ[328];
    Ⲇᐃ[860] = Xd(1, [{
      f: lu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[865] = Xd(1, [{
      f: bu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[829] = Xd(1, [{
      f: St,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[261] = Xd(1, [{
      f: _t,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[292] = Xd(1, [{
      f: Xt,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[293] = Xd(1, [{
      f: $t,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[455] = Xd(1, [{
      f: ju,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[313] = Xd(1, [{
      f: Ot,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[312] = Xd(1, [{
      f: Ot,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[258] = Xd(1, [{
      f: Ot,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[296] = Xd(1, [{
      f: Ot,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[458] = Xd(1, [{
      f: Ot,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[1017] = [];
    Ⲇᐃ[1017][0] = Δᐃ.ΔᐃΔᐃⵠΔᐃ;
    Ⲇᐃ[1017][1] = Δᐃ.ΔⵠⲆΔⲆΔⲆ;
    Ⲇᐃ[1017][2] = Δᐃ.ᐃΔΔᐃΔⵠΔ;
    Ⲇᐃ[1019] = Ⲇᐃ[1017];
    Ⲇᐃ[1018] = Ⲇᐃ[1017];
    Ⲇᐃ[315] = Xd(1, [{
      f: gu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#252B28", "#58645F", "#75827D"]
    }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[297] = Xd(1, [{
      f: ou,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#282823", "#877c2d", "#c4bc51"]
    }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[298] = Xd(1, [{
      f: wu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#232828", "#3fc9c9", "#74ede6"]
    }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[316] = Xd(1, [{
      f: $d,
      x: 0,
      y: -5,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[830] = Ⲇᐃ[829];
    Ⲇᐃ[254] = Ⲇᐃ[261];
    Ⲇᐃ[290] = Ⲇᐃ[292];
    Ⲇᐃ[291] = Ⲇᐃ[293];
    Ⲇᐃ[456] = Ⲇᐃ[455];
    Ⲇᐃ[314] = Ⲇᐃ[313];
    Ⲇᐃ[256] = Ⲇᐃ[312];
    Ⲇᐃ[295] = Ⲇᐃ[258];
    Ⲇᐃ[257] = Ⲇᐃ[296];
    Ⲇᐃ[460] = Ⲇᐃ[458];
    Ⲇᐃ[277] = Xd(1, [{
      f: Md,
      x: 0,
      y: 0,
      a: 1,
      r: 0
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[310] = Xd(1, [{
      f: Qd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[262] = Ⲇᐃ[310];
    Ⲇᐃ[329] = Xd(1, [{
      f: ic,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[263] = Ⲇᐃ[329];
    Ⲇᐃ[331] = Xd(1, [{
      f: Du,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[332] = Ⲇᐃ[331];
    Ⲇᐃ[492] = Xd(1, [{
      f: ic,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[493] = Ⲇᐃ[492];
    Ⲇᐃ[330] = Xd(1, [{
      f: oc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[265] = Ⲇᐃ[330];
    Ⲇᐃ[317] = Xd(1, [{
      f: rc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[318] = Ⲇᐃ[317];
    Ⲇᐃ[319] = Xd(1, [{
      f: xc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[320] = Ⲇᐃ[319];
    Ⲇᐃ[362] = Xd(1, [{
      f: Gc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[363] = Ⲇᐃ[362];
    Ⲇᐃ[364] = Xd(1, [{
      f: Gc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[365] = Ⲇᐃ[364];
    Ⲇᐃ[361] = Xd(1, [{
      f: Oc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[360] = Ⲇᐃ[361];
    Ⲇᐃ[495] = Xd(1, [{
      f: Oc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[496] = Ⲇᐃ[495];
    Ⲇᐃ[335] = Xd(1, [{
      f: Bu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[268] = Ⲇᐃ[335];
    Ⲇᐃ[372] = Xd(1, [{
      f: nc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[371] = Ⲇᐃ[372];
    Ⲇᐃ[499] = Xd(1, [{
      f: nc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[498] = Ⲇᐃ[499];
    Ⲇᐃ[375] = Xd(1, [{
      f: ec,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[374] = Ⲇᐃ[375];
    Ⲇᐃ[378] = Xd(1, [{
      f: mc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[377] = Ⲇᐃ[378];
    Ⲇᐃ[337] = Xd(1, [{
      f: bc,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[338] = Ⲇᐃ[337];
    Ⲇᐃ[300] = Xd(1, [{
      f: jd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[323] = Xd(1, [{
      f: jd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[325] = Ⲇᐃ[323];
    Ⲇᐃ[305] = Xd(1, [{
      f: Hd,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[513] = Xd(1, [{
      f: Hd,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[515] = Ⲇᐃ[513];
    Ⲇᐃ[368] = Xd(1, [{
      f: Ec,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ef96be", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[1162] = Xd(1, [{
      f: Ec,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#55423e", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[178] = Xd(1, [{
      f: ac,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[179] = Xd(1, [{
      f: ac,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[624] = Xd(1, [{
      f: Ec,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#201851", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[393] = Xd(1, [{
      f: Ec,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#231f20", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[505] = Xd(1, [{
      f: Ec,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ffffff", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[369] = Xd(1, [{
      f: Nc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[370] = Ⲇᐃ[369];
    Ⲇᐃ[381] = Xd(1, [{
      f: vc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[380] = Ⲇᐃ[381];
    Ⲇᐃ[502] = Xd(1, [{
      f: Sc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[503] = Ⲇᐃ[502];
    Ⲇᐃ[880] = Xd(1, [{
      f: Gt,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[881] = Ⲇᐃ[880];
    Ⲇᐃ[882] = Xd(1, [{
      f: Lt,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[883] = Ⲇᐃ[882];
    Ⲇᐃ[303] = Xd(1, [{
      f: Wd,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#ffffff", "#cec0c4"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[304] = Ⲇᐃ[303];
    Ⲇᐃ[392] = [];
    Ⲇᐃ[392][0] = Δᐃ.ⲆᐃΔⵠⲆΔΔ;
    Ⲇᐃ[392][1] = Δᐃ.ⲆΔΔΔⲆΔⲆ;
    Ⲇᐃ[392][2] = Δᐃ.ᐃΔⲆⵠⵠᐃⵠ;
    Ⲇᐃ[367] = Ⲇᐃ[392];
    Ⲇᐃ[975] = [];
    Ⲇᐃ[975][0] = Δᐃ.ΔⵠⵠᐃΔᐃᐃ;
    Ⲇᐃ[975][1] = Δᐃ.ΔᐃⵠᐃⲆᐃᐃ;
    Ⲇᐃ[975][2] = Δᐃ.ᐃⲆⲆΔᐃΔᐃ;
    Ⲇᐃ[977] = Ⲇᐃ[975];
    Ⲇᐃ[976] = Ⲇᐃ[975];
    Ⲇᐃ[978] = [];
    Ⲇᐃ[978][0] = Δᐃ.ⲆᐃⵠⲆΔⵠⵠ;
    Ⲇᐃ[978][1] = Δᐃ.ⵠΔΔⵠⵠᐃⲆ;
    Ⲇᐃ[978][2] = Δᐃ.ⲆⵠΔⵠⵠΔⵠ;
    Ⲇᐃ[980] = Ⲇᐃ[978];
    Ⲇᐃ[979] = Ⲇᐃ[978];
    Ⲇᐃ[1158] = [];
    Ⲇᐃ[1158][0] = Δᐃ.ⵠΔΔⵠⵠᐃᐃ;
    Ⲇᐃ[1158][1] = Δᐃ.ⵠΔΔⵠⵠᐃᐃ;
    Ⲇᐃ[1158][2] = Δᐃ.ⵠΔΔⵠⵠᐃᐃ;
    Ⲇᐃ[1159] = Ⲇᐃ[1158];
    Ⲇᐃ[426] = [];
    Ⲇᐃ[426][0] = Δᐃ.ᐃΔⵠⲆⵠⵠΔ;
    Ⲇᐃ[426][1] = Δᐃ.ⲆⵠⵠᐃⵠᐃΔ;
    Ⲇᐃ[426][2] = Δᐃ.ᐃⵠⲆᐃΔⲆΔ;
    Ⲇᐃ[427] = Ⲇᐃ[426];
    Ⲇᐃ[428] = Ⲇᐃ[426];
    Ⲇᐃ[1160] = [];
    Ⲇᐃ[1160][0] = Δᐃ.ⵠⲆⲆΔⵠΔⵠ;
    Ⲇᐃ[1160][1] = Δᐃ.ⵠⲆⲆΔⵠΔⵠ;
    Ⲇᐃ[1160][2] = Δᐃ.ⵠⲆⲆΔⵠΔⵠ;
    Ⲇᐃ[1161] = Ⲇᐃ[1160];
    Ⲇᐃ[1236] = [];
    Ⲇᐃ[1236][0] = Δᐃ.ᐃⵠⲆⲆⵠⲆΔⲆⵠ;
    Ⲇᐃ[1236][1] = Δᐃ.ᐃⵠⲆⲆᐃⵠⵠᐃᐃ;
    Ⲇᐃ[1236][2] = Δᐃ.ΔⲆΔΔⵠⵠⵠⲆΔ;
    Ⲇᐃ[1235] = Ⲇᐃ[1236];
    Ⲇᐃ[1237] = Ⲇᐃ[1236];
    Ⲇᐃ[991] = [];
    Ⲇᐃ[991][0] = Δᐃ.ⵠⲆΔⲆᐃΔⵠ;
    Ⲇᐃ[991][1] = Δᐃ.ⲆⵠᐃⵠⲆⵠⲆ;
    Ⲇᐃ[991][2] = Δᐃ.ΔⲆⵠⵠⵠⵠΔ;
    Ⲇᐃ[990] = Ⲇᐃ[991];
    Ⲇᐃ[992] = Ⲇᐃ[991];
    Ⲇᐃ[994] = [];
    Ⲇᐃ[994][0] = Δᐃ.ⵠᐃᐃᐃⵠᐃΔ;
    Ⲇᐃ[994][1] = Δᐃ.ΔᐃⵠⲆⲆᐃⲆ;
    Ⲇᐃ[994][2] = Δᐃ.ᐃᐃⲆᐃⲆⵠⵠ;
    Ⲇᐃ[993] = Ⲇᐃ[994];
    Ⲇᐃ[995] = Ⲇᐃ[994];
    Ⲇᐃ[997] = [];
    Ⲇᐃ[997][0] = Δᐃ.ⲆⵠⲆᐃⲆⲆᐃ;
    Ⲇᐃ[997][1] = Δᐃ.ⲆΔⲆⵠᐃΔΔ;
    Ⲇᐃ[997][2] = Δᐃ.ᐃᐃΔΔΔⵠᐃ;
    Ⲇᐃ[996] = Ⲇᐃ[997];
    Ⲇᐃ[998] = Ⲇᐃ[997];
    Ⲇᐃ[1000] = [];
    Ⲇᐃ[1000][0] = Δᐃ.ᐃⵠⵠᐃⲆᐃΔ;
    Ⲇᐃ[1000][1] = Δᐃ.ⵠᐃᐃⵠΔⲆᐃ;
    Ⲇᐃ[1000][2] = Δᐃ.ⲆⲆᐃΔΔᐃΔ;
    Ⲇᐃ[999] = Ⲇᐃ[1000];
    Ⲇᐃ[1001] = Ⲇᐃ[1000];
    Ⲇᐃ[1003] = [];
    Ⲇᐃ[1003][0] = Δᐃ.ᐃⵠⲆⵠᐃⵠⵠ;
    Ⲇᐃ[1003][1] = Δᐃ.ⵠⲆᐃⵠⲆΔᐃ;
    Ⲇᐃ[1003][2] = Δᐃ.ⵠⵠᐃⲆⲆΔΔ;
    Ⲇᐃ[1002] = Ⲇᐃ[1003];
    Ⲇᐃ[1004] = Ⲇᐃ[1003];
    Ⲇᐃ[1006] = [];
    Ⲇᐃ[1006][0] = Δᐃ.ᐃᐃΔᐃⵠΔⵠ;
    Ⲇᐃ[1006][1] = Δᐃ.ΔΔΔᐃΔⲆⵠ;
    Ⲇᐃ[1006][2] = Δᐃ.ⲆΔⵠᐃᐃⵠΔ;
    Ⲇᐃ[1005] = Ⲇᐃ[1006];
    Ⲇᐃ[1007] = Ⲇᐃ[1006];
    Ⲇᐃ[1009] = [];
    Ⲇᐃ[1009][0] = Δᐃ.ⵠⵠΔᐃᐃⵠΔ;
    Ⲇᐃ[1009][1] = Δᐃ.ⵠⵠΔᐃⲆΔⲆ;
    Ⲇᐃ[1009][2] = Δᐃ.ΔᐃⲆⵠΔΔⲆ;
    Ⲇᐃ[1008] = Ⲇᐃ[1009];
    Ⲇᐃ[1010] = Ⲇᐃ[1009];
    Ⲇᐃ[1012] = [];
    Ⲇᐃ[1012][0] = Δᐃ.ᐃᐃⲆⵠΔᐃᐃ;
    Ⲇᐃ[1012][1] = Δᐃ.ᐃΔⲆΔᐃΔⲆ;
    Ⲇᐃ[1012][2] = Δᐃ.ΔⲆⵠⲆⵠΔΔ;
    Ⲇᐃ[1011] = Ⲇᐃ[1012];
    Ⲇᐃ[1013] = Ⲇᐃ[1012];
    Ⲇᐃ[1015] = [];
    Ⲇᐃ[1015][0] = Δᐃ.ⲆⵠⵠⲆⵠⵠⲆ;
    Ⲇᐃ[1015][1] = Δᐃ.ⵠΔᐃⲆΔΔⲆ;
    Ⲇᐃ[1015][2] = Δᐃ.ΔΔⲆⵠⵠⵠⲆ;
    Ⲇᐃ[1014] = Ⲇᐃ[1015];
    Ⲇᐃ[1016] = Ⲇᐃ[1015];
    Ⲇᐃ[1035] = [];
    Ⲇᐃ[1035][0] = Δᐃ.ⲆΔⵠΔⵠ;
    Ⲇᐃ[1035][1] = Δᐃ.ⲆΔⵠΔⵠ;
    Ⲇᐃ[1035][2] = Δᐃ.ⲆΔⵠΔⵠ;
    Ⲇᐃ[Sr.ΔⲆΔⵠⵠᐃᐃⵠⵠ] = Ⲇᐃ[1035];
    Ⲇᐃ[1036] = Ⲇᐃ[1035];
    Ⲇᐃ[1037] = [];
    Ⲇᐃ[1037][0] = Δᐃ.ΔⵠⵠⵠⲆ;
    Ⲇᐃ[1037][1] = Δᐃ.ΔⵠⵠⵠⲆ;
    Ⲇᐃ[1037][2] = Δᐃ.ΔⵠⵠⵠⲆ;
    Ⲇᐃ[Sr.ΔⵠΔⲆⵠⲆᐃⵠⵠ] = Ⲇᐃ[1037];
    Ⲇᐃ[1038] = Ⲇᐃ[1037];
    Ⲇᐃ[1039] = [];
    Ⲇᐃ[1039][0] = Δᐃ.ΔᐃΔⵠΔ;
    Ⲇᐃ[1039][1] = Δᐃ.ΔᐃΔⵠΔ;
    Ⲇᐃ[1039][2] = Δᐃ.ΔᐃΔⵠΔ;
    Ⲇᐃ[Sr.ⲆΔⲆⵠᐃⲆᐃⲆΔ] = Ⲇᐃ[1039];
    Ⲇᐃ[1040] = Ⲇᐃ[1039];
    Ⲇᐃ[1156] = [];
    Ⲇᐃ[1156][0] = Δᐃ.ⲆⵠΔᐃⲆ;
    Ⲇᐃ[1156][1] = Δᐃ.ⲆⵠΔᐃⲆ;
    Ⲇᐃ[1156][2] = Δᐃ.ⲆⵠΔᐃⲆ;
    Ⲇᐃ[1157] = Ⲇᐃ[1156];
    Ⲇᐃ[1046] = [];
    Ⲇᐃ[1046][0] = Δᐃ.ⲆΔᐃᐃⲆΔⲆ;
    Ⲇᐃ[1046][1] = Δᐃ.ⵠᐃⵠⵠⵠⵠΔ;
    Ⲇᐃ[1046][2] = Δᐃ.ⵠΔⲆᐃⲆⲆΔ;
    Ⲇᐃ[1048] = Ⲇᐃ[1046];
    Ⲇᐃ[1047] = Ⲇᐃ[1046];
    Ⲇᐃ[744] = [];
    Ⲇᐃ[744][0] = Δᐃ.ⲆΔΔⲆⵠᐃⲆ;
    Ⲇᐃ[744][1] = Δᐃ.ΔⵠΔⵠΔⲆⵠ;
    Ⲇᐃ[744][2] = Δᐃ.ⲆⵠΔΔᐃᐃⲆ;
    Ⲇᐃ[746] = Ⲇᐃ[744];
    Ⲇᐃ[745] = Ⲇᐃ[744];
    Ⲇᐃ[747] = [];
    Ⲇᐃ[747][0] = Δᐃ.ᐃΔᐃⲆⲆⲆᐃ;
    Ⲇᐃ[747][1] = Δᐃ.ⲆⵠⲆΔⵠᐃⵠ;
    Ⲇᐃ[747][2] = Δᐃ.ⲆΔᐃⵠᐃⵠⵠ;
    Ⲇᐃ[749] = Ⲇᐃ[747];
    Ⲇᐃ[748] = Ⲇᐃ[747];
    Ⲇᐃ[1049] = [];
    Ⲇᐃ[1049][0] = Δᐃ.ⲆᐃⵠΔⲆᐃⲆ;
    Ⲇᐃ[1049][1] = Δᐃ.ΔⵠⲆΔᐃⲆⲆ;
    Ⲇᐃ[1049][2] = Δᐃ.ⲆΔᐃᐃᐃᐃⲆ;
    Ⲇᐃ[1051] = Ⲇᐃ[1049];
    Ⲇᐃ[1050] = Ⲇᐃ[1049];
    Ⲇᐃ[1189] = [];
    Ⲇᐃ[1189][0] = Δᐃ.ᐃⵠⲆΔΔⲆᐃ;
    Ⲇᐃ[1189][1] = Δᐃ.ⲆⲆᐃⵠⲆⲆᐃ;
    Ⲇᐃ[1189][2] = Δᐃ.ⵠᐃΔⲆᐃⲆΔ;
    Ⲇᐃ[1191] = Ⲇᐃ[1189];
    Ⲇᐃ[1190] = Ⲇᐃ[1189];
    Ⲇᐃ[1110] = [];
    Ⲇᐃ[1110][0] = Δᐃ.ΔⵠᐃΔᐃⵠⲆ;
    Ⲇᐃ[1110][1] = Δᐃ.ΔΔⲆΔⲆΔⲆ;
    Ⲇᐃ[1110][2] = Δᐃ.ᐃᐃⵠⵠⲆⵠⵠ;
    Ⲇᐃ[1112] = Ⲇᐃ[1110];
    Ⲇᐃ[1111] = Ⲇᐃ[1110];
    Ⲇᐃ[1131] = [];
    Ⲇᐃ[1131][0] = Δᐃ.ᐃⵠⵠⲆⲆᐃⵠⲆⲆ;
    Ⲇᐃ[1131][1] = Δᐃ.ᐃᐃᐃⵠⲆΔⲆⲆⵠ;
    Ⲇᐃ[1131][2] = Δᐃ.ᐃΔᐃΔⵠⵠᐃΔⵠ;
    Ⲇᐃ[1133] = Ⲇᐃ[1131];
    Ⲇᐃ[1132] = Ⲇᐃ[1131];
    Ⲇᐃ[1137] = [];
    Ⲇᐃ[1137][0] = Δᐃ.ⲆᐃᐃΔⵠⲆⲆ;
    Ⲇᐃ[1137][1] = Δᐃ.ᐃⲆᐃⵠⵠⵠΔ;
    Ⲇᐃ[1137][2] = Δᐃ.ⵠⵠᐃᐃᐃᐃⵠ;
    Ⲇᐃ[1138] = Ⲇᐃ[1137];
    Ⲇᐃ[1139] = Ⲇᐃ[1137];
    Ⲇᐃ[1140] = [];
    Ⲇᐃ[1140][0] = Δᐃ.ⲆᐃⲆᐃΔⵠⲆ;
    Ⲇᐃ[1140][1] = Δᐃ.ΔΔᐃΔᐃᐃΔ;
    Ⲇᐃ[1140][2] = Δᐃ.ᐃΔⵠΔᐃᐃⲆ;
    Ⲇᐃ[1141] = Ⲇᐃ[1140];
    Ⲇᐃ[1142] = Ⲇᐃ[1140];
    Ⲇᐃ[1117] = [];
    Ⲇᐃ[1117][0] = Δᐃ.ΔⲆⵠⵠΔⵠⵠ;
    Ⲇᐃ[1117][1] = Δᐃ.ⵠⲆᐃⵠⵠΔⲆ;
    Ⲇᐃ[1117][2] = Δᐃ.ⲆΔⲆⲆΔⲆⵠ;
    Ⲇᐃ[1116] = Ⲇᐃ[1117];
    Ⲇᐃ[1118] = Ⲇᐃ[1117];
    Ⲇᐃ[1080] = [];
    Ⲇᐃ[1080][0] = Δᐃ.ⲆⵠΔᐃⵠᐃⵠ;
    Ⲇᐃ[1080][1] = Δᐃ.ᐃⲆⵠⲆⲆⵠᐃ;
    Ⲇᐃ[1080][2] = Δᐃ.ΔⲆⵠᐃⵠⲆΔ;
    Ⲇᐃ[1082] = Ⲇᐃ[1080];
    Ⲇᐃ[1081] = Ⲇᐃ[1080];
    Ⲇᐃ[1224] = [];
    Ⲇᐃ[1224][0] = Δᐃ.ΔⲆᐃΔⲆⲆᐃΔⲆ;
    Ⲇᐃ[1224][1] = Δᐃ.ΔⲆᐃⵠⲆΔᐃᐃΔ;
    Ⲇᐃ[1224][2] = Δᐃ.ΔᐃⵠⵠⲆᐃᐃᐃΔ;
    Ⲇᐃ[1226] = Ⲇᐃ[1224];
    Ⲇᐃ[1225] = Ⲇᐃ[1224];
    Ⲇᐃ[1095] = [];
    Ⲇᐃ[1095][0] = Δᐃ.ΔⲆᐃΔᐃᐃⲆ;
    Ⲇᐃ[1095][1] = Δᐃ.ΔⲆⵠⵠⵠⵠᐃ;
    Ⲇᐃ[1095][2] = Δᐃ.ⲆⲆⵠᐃⵠΔⲆ;
    Ⲇᐃ[1097] = Ⲇᐃ[1095];
    Ⲇᐃ[1096] = Ⲇᐃ[1095];
    Ⲇᐃ[717] = Xd(1, [{
      f: km,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
      f: Jm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e4c027"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[718] = Ⲇᐃ[717];
    Ⲇᐃ[408] = Xd(1, [{
      f: Cu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[409] = Ⲇᐃ[408];
    Ⲇᐃ[907] = Xd(1, [{
      f: dc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[909] = Ⲇᐃ[907];
    Ⲇᐃ[908] = Ⲇᐃ[907];
    Ⲇᐃ[197] = Xd(1, [{
      f: Pc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[906] = Ⲇᐃ[197];
    Ⲇᐃ[901] = Xd(1, [{
      f: yc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[900] = Ⲇᐃ[901];
    Ⲇᐃ[899] = Ⲇᐃ[901];
    Ⲇᐃ[401] = Xd(1, [{
      f: cc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[402] = Ⲇᐃ[401];
    Ⲇᐃ[395] = Xd(1, [{
      f: kc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[396] = Ⲇᐃ[395];
    Ⲇᐃ[398] = Xd(1, [{
      f: zc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[399] = Ⲇᐃ[398];
    Ⲇᐃ[404] = Xd(1, [{
      f: pc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[405] = Ⲇᐃ[404];
    Ⲇᐃ[472] = Xd(1, [{
      f: Cc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[473] = Ⲇᐃ[472];
    Ⲇᐃ[874] = Xd(1, [{
      f: Tc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[876] = Ⲇᐃ[874];
    Ⲇᐃ[875] = Ⲇᐃ[874];
    Ⲇᐃ[477] = Xd(1, [{
      f: Dc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[478] = Ⲇᐃ[477];
    Ⲇᐃ[709] = Xd(1, [{
      f: fp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[711] = Ⲇᐃ[709];
    Ⲇᐃ[550] = Xd(1, [{
      f: Xm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[551] = Ⲇᐃ[550];
    Ⲇᐃ[480] = Xd(1, [{
      f: Dc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[481] = Ⲇᐃ[480];
    Ⲇᐃ[483] = Xd(1, [{
      f: Dc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[484] = Ⲇᐃ[483];
    Ⲇᐃ[486] = Xd(1, [{
      f: Dc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[487] = Ⲇᐃ[486];
    Ⲇᐃ[489] = [];
    Ⲇᐃ[489][0] = Δᐃ.ᐃⲆⵠΔⲆΔᐃ;
    Ⲇᐃ[489][1] = Δᐃ.ᐃⵠᐃⲆΔΔΔ;
    Ⲇᐃ[489][2] = Δᐃ.ΔⵠΔⲆⵠᐃⲆ;
    Ⲇᐃ[491] = Ⲇᐃ[489];
    Ⲇᐃ[490] = Ⲇᐃ[489];
    Ⲇᐃ[1195] = [];
    Ⲇᐃ[1195][0] = Δᐃ.ⲆⵠᐃᐃΔᐃᐃ;
    Ⲇᐃ[1195][1] = Δᐃ.ⲆⵠⲆⵠⲆᐃⲆ;
    Ⲇᐃ[1195][2] = Δᐃ.Ⲇᐃⵠⵠⵠᐃᐃ;
    Ⲇᐃ[1197] = Ⲇᐃ[1195];
    Ⲇᐃ[1196] = Ⲇᐃ[1195];
    Ⲇᐃ[1199] = [];
    Ⲇᐃ[1199][0] = Δᐃ.ⵠⲆⵠᐃⲆᐃⵠ;
    Ⲇᐃ[1199][1] = Δᐃ.ⵠᐃᐃΔⲆᐃⵠ;
    Ⲇᐃ[1199][2] = Δᐃ.ΔⵠΔⵠⲆⲆΔ;
    Ⲇᐃ[1201] = Ⲇᐃ[1199];
    Ⲇᐃ[1200] = Ⲇᐃ[1199];
    Ⲇᐃ[1203] = [];
    Ⲇᐃ[1203][0] = Δᐃ.ⲆⲆΔⵠⵠᐃⵠ;
    Ⲇᐃ[1203][1] = Δᐃ.ⲆΔᐃⵠⲆⲆᐃ;
    Ⲇᐃ[1203][2] = Δᐃ.ᐃᐃⵠΔΔΔⲆ;
    Ⲇᐃ[1205] = Ⲇᐃ[1203];
    Ⲇᐃ[1204] = Ⲇᐃ[1203];
    Ⲇᐃ[1207] = [];
    Ⲇᐃ[1207][0] = Δᐃ.ᐃⲆᐃⲆᐃᐃⵠ;
    Ⲇᐃ[1207][1] = Δᐃ.ⲆⲆⵠⲆᐃᐃⲆ;
    Ⲇᐃ[1207][2] = Δᐃ.ⵠᐃⵠΔᐃᐃⲆ;
    Ⲇᐃ[1209] = Ⲇᐃ[1207];
    Ⲇᐃ[1208] = Ⲇᐃ[1207];
    Ⲇᐃ[1211] = [];
    Ⲇᐃ[1211][0] = Δᐃ.ⵠⵠⲆⵠⲆᐃⵠ;
    Ⲇᐃ[1211][1] = Δᐃ.ⵠⲆⲆⵠⲆᐃᐃ;
    Ⲇᐃ[1211][2] = Δᐃ.ΔⵠΔⲆᐃΔⵠ;
    Ⲇᐃ[1213] = Ⲇᐃ[1211];
    Ⲇᐃ[1212] = Ⲇᐃ[1211];
    Ⲇᐃ[1215] = [];
    Ⲇᐃ[1215][0] = Δᐃ.ⵠᐃⲆΔΔᐃᐃ;
    Ⲇᐃ[1215][1] = Δᐃ.ⵠᐃⲆⵠᐃᐃᐃ;
    Ⲇᐃ[1215][2] = Δᐃ.ᐃᐃΔΔⵠⵠⲆ;
    Ⲇᐃ[1217] = Ⲇᐃ[1215];
    Ⲇᐃ[1216] = Ⲇᐃ[1215];
    Ⲇᐃ[518] = Xd(1, [{
      f: Rm,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[519] = Ⲇᐃ[518];
    Ⲇᐃ[532] = Xd(1, [{
      f: Zm,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 5,
      c: ["#141414", "#c4a23a", "#816511"]
    }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[533] = Ⲇᐃ[532];
    Ⲇᐃ[521] = Xd(1, [{
      f: _m,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    Ⲇᐃ[523] = Xd(1, [{
      f: _m,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    Ⲇᐃ[529] = Xd(1, [{
      f: Em,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba"]
    }, {
      f: Im,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
      f: $m,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0"]
    }, {
      f: ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[530] = Ⲇᐃ[529];
    Ⲇᐃ[553] = Xd(1, [{
      f: Am,
      x: 45,
      y: 70,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[555] = Ⲇᐃ[553];
    Ⲇᐃ[541] = Xd(1, [{
      f: pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[542] = Ⲇᐃ[541];
    Ⲇᐃ[779] = Xd(1, [{
      f: sp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[780] = Ⲇᐃ[779];
    Ⲇᐃ[767] = Xd(1, [{
      f: hp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041"]
    }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[768] = Ⲇᐃ[767];
    Ⲇᐃ[776] = Xd(1, [{
      f: lp,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[777] = Ⲇᐃ[776];
    Ⲇᐃ[771] = Xd(1, [{
      f: lp,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[772] = Ⲇᐃ[771];
    Ⲇᐃ[756] = Xd(1, [{
      f: yp,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[758] = Ⲇᐃ[756];
    Ⲇᐃ[760] = Xd(1, [{
      f: yp,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[762] = Ⲇᐃ[760];
    Ⲇᐃ[764] = Xd(1, [{
      f: yp,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[770] = Ⲇᐃ[764];
    Ⲇᐃ[910] = Xd(1, [{
      f: uc,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[912] = Ⲇᐃ[910];
    Ⲇᐃ[911] = Ⲇᐃ[910];
    Ⲇᐃ[732] = Xd(1, [{
      f: Uc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[734] = Ⲇᐃ[732];
    Ⲇᐃ[563] = Xd(1, [{
      f: jm,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[564] = Ⲇᐃ[563];
    Ⲇᐃ[751] = Xd(1, [{
      f: Nm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[252] = Xd(1, [{
      f: Pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[753] = Xd(1, [{
      f: Nm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[253] = Xd(1, [{
      f: Pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[176] = Xd(1, [{
      f: Mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[177] = Xd(1, [{
      f: Mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[175] = Xd(1, [{
      f: Mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[616] = Xd(1, [{
      f: vp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[618] = Ⲇᐃ[616];
    Ⲇᐃ[699] = Xd(1, [{
      f: vp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[700] = Ⲇᐃ[699];
    Ⲇᐃ[702] = Xd(1, [{
      f: vp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[704] = Ⲇᐃ[702];
    Ⲇᐃ[705] = Xd(1, [{
      f: vp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[706] = Ⲇᐃ[705];
    Ⲇᐃ[420] = Xd(1, [{
      f: Tm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[421] = Ⲇᐃ[420];
    Ⲇᐃ[826] = Xd(1, [{
      f: Cm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#252525", "#73583e", "#493425", "#7d6144"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[827] = Ⲇᐃ[826];
    Ⲇᐃ[429] = Xd(1, [{
      f: cm,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[430] = Ⲇᐃ[429];
    Ⲇᐃ[432] = Xd(1, [{
      f: mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#dbce71", "#b29c32", "#c4bc51"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[433] = Ⲇᐃ[432];
    Ⲇᐃ[435] = Xd(1, [{
      f: fm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[436] = Ⲇᐃ[435];
    Ⲇᐃ[438] = Xd(1, [{
      f: tp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[439] = Ⲇᐃ[438];
    Ⲇᐃ[441] = Xd(1, [{
      f: Fm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[442] = Ⲇᐃ[441];
    Ⲇᐃ[418] = Xd(1, [{
      f: Vc,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#c27add", "#cd98e5"]
    }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[609] = Xd(1, [{
      f: xm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#D7C393", "#a48c6c"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[142] = Xd(1, [{
      f: ep,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#93CBCE", "#E9F6F6"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[140] = Xd(1, [{
      f: xm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#866432", "#6b4f25"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[180] = Xd(1, [{
      f: bp,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[181] = Xd(1, [{
      f: rp,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[784] = Ⲇᐃ[180];
    Ⲇᐃ[785] = Ⲇᐃ[181];
    Ⲇᐃ[789] = Xd(1, [{
      f: Vm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
    }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[791] = Ⲇᐃ[789];
    Ⲇᐃ[613] = Xd(1, [{
      f: up,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[612] = Xd(1, [{
      f: gp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[715] = Ⲇᐃ[613];
    Ⲇᐃ[611] = Ⲇᐃ[612];
    Ⲇᐃ[634] = Xd(1, [{
      f: eu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[635] = Ⲇᐃ[634];
    Ⲇᐃ[200] = Xd(1, [{
      f: fu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[866] = Xd(1, [{
      f: Zt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[143] = Xd(1, [{
      f: Dm,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[690] = Ⲇᐃ[143];
    Ⲇᐃ[662] = Xd(1, [{
      f: su,
      x: -3,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[664] = Xd(1, [{
      f: tc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1d051e", "#42261A", "#281818"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[666] = Ⲇᐃ[664];
    Ⲇᐃ[649] = Xd(1, [{
      f: xu,
      x: -3,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[650] = Ⲇᐃ[649];
    Ⲇᐃ[674] = Xd(1, [{
      f: Yd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[646] = Xd(1, [{
      f: qu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇᐃ[647] = Ⲇᐃ[646];
    Ⲇᐃ[685] = Xd(1, [{
      f: Sm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[684] = Ⲇᐃ[685];
    Ⲇᐃ[870] = Xd(1, [{
      f: gd,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[871] = Ⲇᐃ[870];
    Ⲇᐃ[605] = Xd(1, [{
      f: op,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[604] = Ⲇᐃ[605];
    Ⲇᐃ[842] = Xd(1, [{
      f: cd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[843] = Ⲇᐃ[842];
    Ⲇᐃ[652] = Xd(1, [{
      f: Ym,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
    Ⲇᐃ[654] = Ⲇᐃ[652];
    Ⲇᐃ[626] = Xd(1, [{
      f: Ym,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[627] = Ⲇᐃ[626];
    Ⲇᐃ[629] = Xd(1, [{
      f: np,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[196] = Xd(1, [{
      f: du,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[898] = Ⲇᐃ[196];
    Ⲇᐃ[659] = Xd(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[660] = Ⲇᐃ[659];
    Ⲇᐃ[145] = Xd(1, [{
      f: qd,
      x: -2,
      y: -8,
      a: 1,
      r: 0,
      c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇᐃ[730] = Ⲇᐃ[145];
    Ⲇᐃ[566] = [];
    Ⲇᐃ[566][0] = Δᐃ.ΔⵠΔᐃᐃⲆⲆ;
    Ⲇᐃ[566][1] = Δᐃ.ⲆⵠᐃᐃⵠⵠΔ;
    Ⲇᐃ[566][2] = Δᐃ.ⲆⲆᐃⵠⲆΔΔ;
    Ⲇᐃ[567] = Ⲇᐃ[566];
    Ⲇᐃ[568] = Ⲇᐃ[566];
    Ⲇᐃ[877] = [];
    Ⲇᐃ[877][0] = Δᐃ.ⵠᐃⵠⵠᐃᐃⵠ;
    Ⲇᐃ[877][1] = Δᐃ.ⲆΔⵠᐃΔΔⲆ;
    Ⲇᐃ[877][2] = Δᐃ.ⲆΔᐃⵠⵠᐃᐃ;
    Ⲇᐃ[879] = Ⲇᐃ[877];
    Ⲇᐃ[878] = Ⲇᐃ[877];
    Ⲇᐃ[933] = Ⲇᐃ[932];
    Ⲇᐃ[934] = Ⲇᐃ[932];
    Ⲇᐃ[932] = [];
    Ⲇᐃ[932][0] = Δᐃ.ᐃⵠⵠⵠⵠᐃⲆ;
    Ⲇᐃ[932][1] = Δᐃ.ⲆⲆΔΔΔⵠⵠ;
    Ⲇᐃ[932][2] = Δᐃ.ⵠⵠΔΔⵠΔᐃ;
    Ⲇᐃ[933] = Ⲇᐃ[932];
    Ⲇᐃ[934] = Ⲇᐃ[932];
    Ⲇᐃ[943] = [];
    Ⲇᐃ[943][0] = Δᐃ.ᐃΔⲆⲆᐃΔⵠ;
    Ⲇᐃ[943][1] = Δᐃ.ⲆⲆᐃⲆᐃΔⲆ;
    Ⲇᐃ[943][2] = Δᐃ.ᐃΔⲆΔⵠⵠⲆ;
    Ⲇᐃ[944] = Ⲇᐃ[943];
    Ⲇᐃ[945] = Ⲇᐃ[943];
    Ⲇᐃ[921] = [];
    Ⲇᐃ[921][0] = Δᐃ.ᐃⵠⲆⲆⵠⲆᐃ;
    Ⲇᐃ[921][1] = Δᐃ.ΔⲆⲆᐃⲆᐃⵠ;
    Ⲇᐃ[921][2] = Δᐃ.ⵠᐃⲆⲆⲆⵠΔ;
    Ⲇᐃ[922] = Ⲇᐃ[921];
    Ⲇᐃ[923] = Ⲇᐃ[921];
    Ⲇᐃ[925] = [];
    Ⲇᐃ[925][0] = Δᐃ.ⵠⵠⲆΔᐃΔⲆ;
    Ⲇᐃ[925][1] = Δᐃ.ⲆΔΔⵠⵠⲆⵠ;
    Ⲇᐃ[925][2] = Δᐃ.ⲆᐃⵠⵠⲆᐃⲆ;
    Ⲇᐃ[926] = Ⲇᐃ[925];
    Ⲇᐃ[927] = Ⲇᐃ[925];
    Ⲇᐃ[929] = [];
    Ⲇᐃ[929][0] = Δᐃ.ᐃⵠⲆᐃⵠΔⵠ;
    Ⲇᐃ[929][1] = Δᐃ.ⲆΔᐃⲆⲆⵠᐃ;
    Ⲇᐃ[929][2] = Δᐃ.ΔᐃⵠᐃⲆⵠⵠ;
    Ⲇᐃ[930] = Ⲇᐃ[929];
    Ⲇᐃ[931] = Ⲇᐃ[929];
    Ⲇᐃ[946] = [];
    Ⲇᐃ[946][0] = Δᐃ.ΔⵠⵠᐃΔⵠᐃ;
    Ⲇᐃ[946][1] = Δᐃ.ΔᐃⲆΔⵠⲆⵠ;
    Ⲇᐃ[946][2] = Δᐃ.ΔⲆⵠΔⲆᐃΔ;
    Ⲇᐃ[947] = Ⲇᐃ[946];
    Ⲇᐃ[948] = Ⲇᐃ[946];
    Ⲇᐃ[735] = [];
    Ⲇᐃ[735][0] = Δᐃ.ᐃΔΔᐃⲆⵠⲆ;
    Ⲇᐃ[735][1] = Δᐃ.ᐃⲆΔΔⵠᐃⲆ;
    Ⲇᐃ[735][2] = Δᐃ.ⵠⵠⵠⵠⵠᐃᐃ;
    Ⲇᐃ[737] = Ⲇᐃ[735];
    Ⲇᐃ[736] = Ⲇᐃ[735];
    Ⲇᐃ[1164] = [];
    Ⲇᐃ[1164][0] = Δᐃ.ⲆⲆⲆⵠⲆᐃⵠ;
    Ⲇᐃ[1164][1] = Δᐃ.ⲆᐃΔⲆΔⵠⵠ;
    Ⲇᐃ[1164][2] = Δᐃ.ⵠⲆⲆⵠᐃⲆⵠ;
    Ⲇᐃ[Sr.ᐃⲆΔⲆⲆᐃⵠᐃᐃ] = Ⲇᐃ[1164];
    Ⲇᐃ[1165] = Ⲇᐃ[1164];
    Ⲇᐃ[738] = [];
    Ⲇᐃ[738][0] = Δᐃ.ΔⵠⲆⵠΔΔⲆ;
    Ⲇᐃ[738][1] = Δᐃ.ⲆΔΔⵠⵠⵠⵠ;
    Ⲇᐃ[738][2] = Δᐃ.ⲆⲆΔⲆΔΔΔ;
    Ⲇᐃ[740] = Ⲇᐃ[738];
    Ⲇᐃ[739] = Ⲇᐃ[738];
    Ⲇᐃ[741] = [];
    Ⲇᐃ[741][0] = Δᐃ.ⵠⵠΔⵠΔᐃΔ;
    Ⲇᐃ[741][1] = Δᐃ.ᐃⲆⲆⵠᐃⲆᐃ;
    Ⲇᐃ[741][2] = Δᐃ.ᐃΔⵠᐃⲆΔᐃ;
    Ⲇᐃ[743] = Ⲇᐃ[741];
    Ⲇᐃ[742] = Ⲇᐃ[741];
    Ⲇᐃ[938] = [];
    Ⲇᐃ[938][0] = Δᐃ.ⵠᐃⵠⲆᐃⵠⲆ;
    Ⲇᐃ[938][1] = Δᐃ.ᐃΔΔⲆᐃⲆⲆ;
    Ⲇᐃ[938][2] = Δᐃ.ΔΔⲆⲆⲆΔⵠ;
    Ⲇᐃ[939] = Ⲇᐃ[938];
    Ⲇᐃ[936] = [];
    Ⲇᐃ[936][0] = Δᐃ.ΔΔᐃⲆⵠⲆⲆ;
    Ⲇᐃ[936][1] = Δᐃ.ⵠΔᐃⵠⲆⵠᐃ;
    Ⲇᐃ[936][2] = Δᐃ.ⲆⵠⲆⵠᐃᐃΔ;
    Ⲇᐃ[937] = Ⲇᐃ[936];
    Ⲇᐃ[617] = Ⲇᐃ[616];
    Ⲇᐃ[701] = Ⲇᐃ[699];
    Ⲇᐃ[703] = Ⲇᐃ[702];
    Ⲇᐃ[707] = Ⲇᐃ[705];
    Ⲇᐃ[348] = Ⲇᐃ[311];
    Ⲇᐃ[633] = Ⲇᐃ[631];
    Ⲇᐃ[645] = Ⲇᐃ[644];
    Ⲇᐃ[640] = Ⲇᐃ[639];
    Ⲇᐃ[273] = Ⲇᐃ[309];
    Ⲇᐃ[590] = Ⲇᐃ[252];
    Ⲇᐃ[752] = Ⲇᐃ[751];
    Ⲇᐃ[591] = Ⲇᐃ[253];
    Ⲇᐃ[754] = Ⲇᐃ[753];
    Ⲇᐃ[276] = Ⲇᐃ[328];
    Ⲇᐃ[863] = Ⲇᐃ[865];
    Ⲇᐃ[862] = Ⲇᐃ[860];
    Ⲇᐃ[831] = Ⲇᐃ[829];
    Ⲇᐃ[340] = Ⲇᐃ[261];
    Ⲇᐃ[596] = Ⲇᐃ[594];
    Ⲇᐃ[345] = Ⲇᐃ[292];
    Ⲇᐃ[346] = Ⲇᐃ[293];
    Ⲇᐃ[457] = Ⲇᐃ[455];
    Ⲇᐃ[274] = Ⲇᐃ[313];
    Ⲇᐃ[341] = Ⲇᐃ[312];
    Ⲇᐃ[272] = Ⲇᐃ[258];
    Ⲇᐃ[344] = Ⲇᐃ[296];
    Ⲇᐃ[459] = Ⲇᐃ[458];
    Ⲇᐃ[342] = Ⲇᐃ[315];
    Ⲇᐃ[270] = Ⲇᐃ[297];
    Ⲇᐃ[271] = Ⲇᐃ[298];
    Ⲇᐃ[343] = Ⲇᐃ[316];
    Ⲇᐃ[269] = Ⲇᐃ[277];
    Ⲇᐃ[358] = Ⲇᐃ[310];
    Ⲇᐃ[354] = Ⲇᐃ[329];
    Ⲇᐃ[356] = Ⲇᐃ[331];
    Ⲇᐃ[355] = Ⲇᐃ[330];
    Ⲇᐃ[494] = Ⲇᐃ[492];
    Ⲇᐃ[349] = Ⲇᐃ[317];
    Ⲇᐃ[350] = Ⲇᐃ[319];
    Ⲇᐃ[275] = Ⲇᐃ[300];
    Ⲇᐃ[351] = Ⲇᐃ[323];
    Ⲇᐃ[353] = Ⲇᐃ[305];
    Ⲇᐃ[514] = Ⲇᐃ[513];
    Ⲇᐃ[352] = Ⲇᐃ[303];
    Ⲇᐃ[520] = Ⲇᐃ[518];
    Ⲇᐃ[534] = Ⲇᐃ[532];
    Ⲇᐃ[531] = Ⲇᐃ[529];
    Ⲇᐃ[522] = Ⲇᐃ[521];
    Ⲇᐃ[524] = Ⲇᐃ[523];
    Ⲇᐃ[565] = Ⲇᐃ[563];
    Ⲇᐃ[554] = Ⲇᐃ[553];
    Ⲇᐃ[357] = Ⲇᐃ[335];
    Ⲇᐃ[359] = Ⲇᐃ[337];
    Ⲇᐃ[339] = Ea(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      id(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      ed(e, c[0], c[1], 4);
      e.save();
      id(e, a * 30, a * 115, a * 60, a * 5, a * 15);
      e.restore();
      ed(e, c[2], c[3], 4);
      e.save();
      id(e, a * 50, a * 117, a * 20, a * 10, a * 15);
      e.restore();
      ed(e, c[2]);
      return d;
    }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
    Ⲇᐃ[366] = Xd(0.5, [{
      f: fc,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#ffffff"]
    }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
    Ⲇᐃ[382] = Ⲇᐃ[361];
    Ⲇᐃ[383] = Ⲇᐃ[362];
    Ⲇᐃ[384] = Ⲇᐃ[364];
    Ⲇᐃ[497] = Ⲇᐃ[495];
    Ⲇᐃ[385] = Ⲇᐃ[392];
    Ⲇᐃ[774] = Ⲇᐃ[178];
    Ⲇᐃ[775] = Ⲇᐃ[179];
    Ⲇᐃ[386] = Ⲇᐃ[368];
    Ⲇᐃ[625] = Ⲇᐃ[624];
    Ⲇᐃ[394] = Ⲇᐃ[393];
    Ⲇᐃ[1163] = Ⲇᐃ[1162];
    Ⲇᐃ[506] = Ⲇᐃ[505];
    Ⲇᐃ[387] = Ⲇᐃ[369];
    Ⲇᐃ[504] = Ⲇᐃ[502];
    Ⲇᐃ[388] = Ⲇᐃ[372];
    Ⲇᐃ[389] = Ⲇᐃ[375];
    Ⲇᐃ[390] = Ⲇᐃ[378];
    Ⲇᐃ[501] = Ⲇᐃ[499];
    Ⲇᐃ[391] = Ⲇᐃ[381];
    Ⲇᐃ[403] = Ⲇᐃ[401];
    Ⲇᐃ[397] = Ⲇᐃ[395];
    Ⲇᐃ[400] = Ⲇᐃ[398];
    Ⲇᐃ[406] = Ⲇᐃ[404];
    Ⲇᐃ[474] = Ⲇᐃ[472];
    Ⲇᐃ[875] = Ⲇᐃ[874];
    Ⲇᐃ[552] = Ⲇᐃ[550];
    Ⲇᐃ[710] = Ⲇᐃ[709];
    Ⲇᐃ[479] = Ⲇᐃ[477];
    Ⲇᐃ[482] = Ⲇᐃ[480];
    Ⲇᐃ[485] = Ⲇᐃ[483];
    Ⲇᐃ[488] = Ⲇᐃ[486];
    Ⲇᐃ[410] = Ⲇᐃ[408];
    Ⲇᐃ[719] = Ⲇᐃ[717];
    Ⲇᐃ[422] = Ⲇᐃ[420];
    Ⲇᐃ[431] = Ⲇᐃ[429];
    Ⲇᐃ[434] = Ⲇᐃ[432];
    Ⲇᐃ[437] = Ⲇᐃ[435];
    Ⲇᐃ[543] = Ⲇᐃ[541];
    Ⲇᐃ[733] = Ⲇᐃ[732];
    Ⲇᐃ[440] = Ⲇᐃ[438];
    Ⲇᐃ[443] = Ⲇᐃ[441];
    Ⲇᐃ[446] = Ⲇᐃ[418];
    Ⲇᐃ[606] = Ⲇᐃ[605];
    Ⲇᐃ[844] = Ⲇᐃ[842];
    Ⲇᐃ[683] = Ⲇᐃ[685];
    Ⲇᐃ[610] = Ⲇᐃ[609];
    Ⲇᐃ[689] = Ⲇᐃ[143];
    Ⲇᐃ[686] = Ⲇᐃ[142];
    Ⲇᐃ[682] = Ⲇᐃ[140];
    Ⲇᐃ[615] = Ⲇᐃ[613];
    Ⲇᐃ[614] = Ⲇᐃ[612];
    Ⲇᐃ[628] = Ⲇᐃ[626];
    Ⲇᐃ[630] = Ⲇᐃ[629];
    Ⲇᐃ[636] = Ⲇᐃ[634];
    Ⲇᐃ[868] = Ⲇᐃ[200];
    Ⲇᐃ[867] = Ⲇᐃ[866];
    Ⲇᐃ[648] = Ⲇᐃ[646];
    Ⲇᐃ[651] = Ⲇᐃ[649];
    Ⲇᐃ[653] = Ⲇᐃ[652];
    Ⲇᐃ[661] = Ⲇᐃ[659];
    Ⲇᐃ[898] = Ⲇᐃ[196];
    Ⲇᐃ[663] = Ⲇᐃ[662];
    Ⲇᐃ[665] = Ⲇᐃ[664];
    Ⲇᐃ[675] = Ⲇᐃ[674];
    Ⲇᐃ[731] = Ⲇᐃ[145];
    Ⲇᐃ[757] = Ⲇᐃ[756];
    Ⲇᐃ[759] = Ⲇᐃ[176];
    Ⲇᐃ[761] = Ⲇᐃ[760];
    Ⲇᐃ[763] = Ⲇᐃ[177];
    Ⲇᐃ[765] = Ⲇᐃ[764];
    Ⲇᐃ[766] = Ⲇᐃ[175];
    Ⲇᐃ[769] = Ⲇᐃ[767];
    Ⲇᐃ[773] = Ⲇᐃ[771];
    Ⲇᐃ[778] = Ⲇᐃ[776];
    Ⲇᐃ[781] = Ⲇᐃ[779];
    Ⲇᐃ[787] = Ⲇᐃ[181];
    Ⲇᐃ[786] = Ⲇᐃ[180];
    Ⲇᐃ[790] = Ⲇᐃ[789];
    Ⲇᐃ[801] = Ⲇᐃ[800];
    Ⲇᐃ[810] = Ⲇᐃ[808];
    Ⲇᐃ[836] = Ⲇᐃ[834];
    Ⲇᐃ[847] = Ⲇᐃ[845];
    Ⲇᐃ[828] = Ⲇᐃ[826];
  }
  function Pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    id(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    id(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    ed(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    id(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    ed(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    id(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    id(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    ed(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    ed(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    ed(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    id(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    ed(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    id(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    ed(e, c[3], c[4], a * 6);
    return d;
  }
  function kp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      ed(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    ed(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    ed(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    ed(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    ed(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    ed(e, b[3], b[3], a * 12);
    return d;
  }
  function Ap(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      $b(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      ed(g, d[1], d[5], b * 20);
      $b(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      ed(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      id(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      ed(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      id(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      ed(g, d[1], d[5], b * 20);
    }
    $b(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    ed(g, d[1], d[2], b * 7);
    $b(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    ed(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    ed(g, d[1], d[2], b * 8);
    $b(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    ed(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    ed(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    ed(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    ed(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    ed(g, d[3], d[2], b * 4);
    $b(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    ed(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    id(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    ed(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    id(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    ed(g, d[1], d[2], b * 7);
    return f;
  }
  function xp() {
    var a = 1;
    new Date().getTime();
    Tp();
    wp();
    Ⲇᐃ[540] = [];
    Ⲇᐃ[540][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[540][Sr.ⲆᐃⲆ] = [];
    for (var b = 0; b < Sr.ΔᐃᐃⲆⲆⵠΔ; b++) {
      Ⲇᐃ[540][Sr.ΔΔⵠ].push(Ea(vu(a, 4 + b, "#59B8CE")));
      Ⲇᐃ[540][Sr.ⲆᐃⲆ].push(Ea(vu(a, 4 + b, "#90DDD9")));
    }
    Ⲇᐃ[470] = [];
    Ⲇᐃ[470][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[470][Sr.ⲆᐃⲆ] = [];
    for (b = 0; b < Sr.ⲆⵠⲆⵠᐃᐃᐃ; b++) {
      Ⲇᐃ[470][Sr.ΔΔⵠ].push(Ea(vu(a, 4 + b, "#fff")));
      Ⲇᐃ[470][Sr.ⲆᐃⲆ].push(Ea(vu(a, 4 + b, "#fff")));
    }
    Ⲇᐃ[471] = [];
    Ⲇᐃ[471][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[471][Sr.ⲆᐃⲆ] = [];
    for (b = 0; b < Sr.ⲆⵠⲆⵠᐃᐃᐃ; b++) {
      Ⲇᐃ[471][Sr.ΔΔⵠ].push(Ea(vu(a, 6 + b, "#DDCD8A")));
      Ⲇᐃ[471][Sr.ⲆᐃⲆ].push(Ea(vu(a, 6 + b, "#155E57")));
    }
    Ⲇᐃ[942] = [];
    Ⲇᐃ[942][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[942][Sr.ⲆᐃⲆ] = [];
    for (b = 0; Sr.ⲆᐃΔΔⵠⲆⲆ > b; b++) {
      Ⲇᐃ[942][Sr.ΔΔⵠ].push(Ea(vu(a, 4 + b, "#353326")));
      Ⲇᐃ[942][Sr.ⲆᐃⲆ].push(Ea(vu(a, 4 + b, "#1D2526")));
    }
    Ⲇᐃ[201] = [];
    Ⲇᐃ[201][Sr.ΔΔⵠ] = Ea(ud(a * 1.5, 0, ["#ee71a9"]));
    Ⲇᐃ[201][Sr.ⲆᐃⲆ] = Ea(ud(a * 1.5, 0, ["#ee71a9"]));
    Ⲇᐃ[872] = [Ⲇᐃ[201]];
    Ⲇᐃ[872][1] = [];
    Ⲇᐃ[872][2] = [];
    Ⲇᐃ[872][3] = [];
    Ⲇᐃ[872][4] = [];
    Ⲇᐃ[872][1][Sr.ΔΔⵠ] = Ea(ud(a * 1.5, 0, ["#e2d63b"]));
    Ⲇᐃ[872][1][Sr.ⲆᐃⲆ] = Ea(ud(a * 1.5, 0, ["#e2d63b"]));
    Ⲇᐃ[872][2][Sr.ΔΔⵠ] = Ea(ud(a * 1.5, 0, ["#309cbd"]));
    Ⲇᐃ[872][2][Sr.ⲆᐃⲆ] = Ea(ud(a * 1.5, 0, ["#309cbd"]));
    Ⲇᐃ[872][3][Sr.ΔΔⵠ] = Ea(ud(a * 1.5, 0, ["#cd232d"]));
    Ⲇᐃ[872][3][Sr.ⲆᐃⲆ] = Ea(ud(a * 1.5, 0, ["#cd232d"]));
    Ⲇᐃ[872][4][Sr.ΔΔⵠ] = Ea(ud(a * 1.5, 0, ["#42b672"]));
    Ⲇᐃ[872][4][Sr.ⲆᐃⲆ] = Ea(ud(a * 1.5, 0, ["#42b672"]));
    if (ᐃⵠⲆΔ.ᐃᐃᐃᐃⲆⵠΔ("cti", za.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Ea = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    Ⲇᐃ[797] = Ea(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    Ⲇᐃ[108] = [];
    Ⲇᐃ[108][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[108][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[108][Sr.ΔΔⵠ].push(Ea(gu(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇᐃ[108][Sr.ΔΔⵠ].push(Ea(gu(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇᐃ[108][Sr.ΔΔⵠ].push(Ea(gu(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇᐃ[108][Sr.ⲆᐃⲆ].push(Ea(gu(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇᐃ[108][Sr.ⲆᐃⲆ].push(Ea(gu(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇᐃ[108][Sr.ⲆᐃⲆ].push(Ea(gu(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇᐃ[111] = [];
    Ⲇᐃ[111][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[111][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[111][Sr.ΔΔⵠ].push(Ea(ou(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇᐃ[111][Sr.ΔΔⵠ].push(Ea(ou(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇᐃ[111][Sr.ΔΔⵠ].push(Ea(ou(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇᐃ[111][Sr.ⲆᐃⲆ].push(Ea(ou(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇᐃ[111][Sr.ⲆᐃⲆ].push(Ea(ou(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇᐃ[111][Sr.ⲆᐃⲆ].push(Ea(ou(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇᐃ[112] = [];
    Ⲇᐃ[112][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[112][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[112][Sr.ΔΔⵠ].push(Ea(wu(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇᐃ[112][Sr.ΔΔⵠ].push(Ea(wu(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇᐃ[112][Sr.ΔΔⵠ].push(Ea(wu(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇᐃ[112][Sr.ⲆᐃⲆ].push(Ea(wu(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇᐃ[112][Sr.ⲆᐃⲆ].push(Ea(wu(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇᐃ[112][Sr.ⲆᐃⲆ].push(Ea(wu(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇᐃ[239] = [];
    Ⲇᐃ[239][Sr.ΔΔⵠ] = Δᐃ.ᐃᐃᐃᐃΔᐃⲆ;
    Ⲇᐃ[239][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔⲆΔΔΔⵠ;
    Ⲇᐃ[286] = [];
    Ⲇᐃ[286][Sr.ΔΔⵠ] = Ea(Rt(a * 0.6, ["#0d1b1c"]));
    Ⲇᐃ[286][Sr.ⲆᐃⲆ] = Ea(Rt(a * 0.6, ["#030d14"]));
    Ⲇᐃ[793] = [];
    Ⲇᐃ[793][Sr.ΔΔⵠ] = Ea(It(a * 0.6, ["#2a2938", "#242330"]));
    Ⲇᐃ[793][Sr.ⲆᐃⲆ] = Ea(It(a * 0.6, ["#1b1e30", "#161921"]));
    Ⲇᐃ[820] = [];
    Ⲇᐃ[820][Sr.ΔΔⵠ] = Ea(fd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    Ⲇᐃ[820][Sr.ⲆᐃⲆ] = Ea(fd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    Ⲇᐃ[821] = [];
    Ⲇᐃ[821][Sr.ΔΔⵠ] = Ea(pd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    Ⲇᐃ[821][Sr.ⲆᐃⲆ] = Ea(pd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    Ⲇᐃ[822] = [];
    Ⲇᐃ[822][Sr.ΔΔⵠ] = Ea(Kt(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    Ⲇᐃ[822][Sr.ⲆᐃⲆ] = Ea(Kt(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
    Ⲇᐃ[823] = Ea(Td(a * 0.6, ["#BB0000"]));
    Ⲇᐃ[824] = Ea(Td(a * 0.6, ["#DBE71C"]));
    Ⲇᐃ[825] = Ea(Td(a * 0.6, ["#00BB00"]));
    Ⲇᐃ[109] = [];
    Ⲇᐃ[109][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[109][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[109][Sr.ΔΔⵠ].push(Ut(a * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
    Ⲇᐃ[109][Sr.ΔΔⵠ].push(Ut(a * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
    Ⲇᐃ[109][Sr.ΔΔⵠ].push(Ut(a * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], kh, 0));
    Ⲇᐃ[109][Sr.ΔΔⵠ].push(Ut(a * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], wq, 0));
    Ⲇᐃ[109][Sr.ΔΔⵠ].push(Ut(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], zj, 0));
    Ⲇᐃ[109][Sr.ΔΔⵠ].push(Ut(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
    Ⲇᐃ[109][Sr.ⲆᐃⲆ].push(Ut(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
    Ⲇᐃ[109][Sr.ⲆᐃⲆ].push(Ut(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
    Ⲇᐃ[109][Sr.ⲆᐃⲆ].push(Ut(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], false, 0));
    Ⲇᐃ[109][Sr.ⲆᐃⲆ].push(Ut(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
    Ⲇᐃ[109][Sr.ⲆᐃⲆ].push(Ut(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], Tr, 0));
    Ⲇᐃ[109][Sr.ⲆᐃⲆ].push(Ut(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    Ⲇᐃ[307] = [];
    Ⲇᐃ[307][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[307][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[307][Sr.ΔΔⵠ].push(Ea(Pt(Tt(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), Ⲇᐃ[109][Sr.ΔΔⵠ][0])));
    Ⲇᐃ[307][Sr.ΔΔⵠ].push(Ea(Pt(Tt(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], kn), Ⲇᐃ[109][Sr.ΔΔⵠ][1])));
    Ⲇᐃ[307][Sr.ⲆᐃⲆ].push(Ea(Pt(Tt(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], rl), Ⲇᐃ[109][Sr.ⲆᐃⲆ][0])));
    Ⲇᐃ[307][Sr.ⲆᐃⲆ].push(Ea(Pt(Tt(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], On), Ⲇᐃ[109][Sr.ⲆᐃⲆ][1])));
    Ⲇᐃ[307][Sr.ΔΔⵠ].push(Ea(Pt(Tt(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Qi), Ⲇᐃ[109][Sr.ΔΔⵠ][2])));
    Ⲇᐃ[307][Sr.ΔΔⵠ].push(Ea(Pt(Tt(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), Ⲇᐃ[109][Sr.ΔΔⵠ][2])));
    Ⲇᐃ[307][Sr.ⲆᐃⲆ].push(Ea(Pt(Tt(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Tr), Ⲇᐃ[109][Sr.ⲆᐃⲆ][2])));
    Ⲇᐃ[307][Sr.ⲆᐃⲆ].push(Ea(Pt(Tt(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), Ⲇᐃ[109][Sr.ⲆᐃⲆ][3])));
    Ⲇᐃ[109][Sr.ΔΔⵠ][5] = Ea(Ⲇᐃ[109][Sr.ΔΔⵠ][5]);
    Ⲇᐃ[109][Sr.ΔΔⵠ][4] = Ea(Ⲇᐃ[109][Sr.ΔΔⵠ][4]);
    Ⲇᐃ[109][Sr.ΔΔⵠ][3] = Ea(Ⲇᐃ[109][Sr.ΔΔⵠ][3]);
    Ⲇᐃ[109][Sr.ΔΔⵠ][2] = Ea(Ⲇᐃ[109][Sr.ΔΔⵠ][2]);
    Ⲇᐃ[109][Sr.ΔΔⵠ][1] = Ea(Ⲇᐃ[109][Sr.ΔΔⵠ][1]);
    Ⲇᐃ[109][Sr.ΔΔⵠ][0] = Ea(Ⲇᐃ[109][Sr.ΔΔⵠ][0]);
    Ⲇᐃ[109][Sr.ⲆᐃⲆ][5] = Ea(Ⲇᐃ[109][Sr.ⲆᐃⲆ][5]);
    Ⲇᐃ[109][Sr.ⲆᐃⲆ][4] = Ea(Ⲇᐃ[109][Sr.ⲆᐃⲆ][4]);
    Ⲇᐃ[109][Sr.ⲆᐃⲆ][3] = Ea(Ⲇᐃ[109][Sr.ⲆᐃⲆ][3]);
    Ⲇᐃ[109][Sr.ⲆᐃⲆ][2] = Ea(Ⲇᐃ[109][Sr.ⲆᐃⲆ][2]);
    Ⲇᐃ[109][Sr.ⲆᐃⲆ][1] = Ea(Ⲇᐃ[109][Sr.ⲆᐃⲆ][1]);
    Ⲇᐃ[109][Sr.ⲆᐃⲆ][0] = Ea(Ⲇᐃ[109][Sr.ⲆᐃⲆ][0]);
    Ⲇᐃ[8] = [];
    Ⲇᐃ[8][Sr.ΔΔⵠ] = Ea(sd(4, Ot(a * 0.75, uq, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    Ⲇᐃ[8][Sr.ⲆᐃⲆ] = Ea(sd(4, Ot(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    Ⲇᐃ[1] = [];
    Ⲇᐃ[1][Sr.ΔΔⵠ] = Ea(sd(4, Ot(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    Ⲇᐃ[1][Sr.ⲆᐃⲆ] = Ea(sd(4, Ot(a * 0.75, u, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    Ⲇᐃ[3] = [];
    Ⲇᐃ[3][Sr.ΔΔⵠ] = Ea(sd(4, Ot(a * 0.75, kn, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    Ⲇᐃ[3][Sr.ⲆᐃⲆ] = Ea(sd(4, Ot(a * 0.75, lj, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    Ⲇᐃ[4] = [];
    Ⲇᐃ[4][Sr.ΔΔⵠ] = Ea(sd(4, Ot(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    Ⲇᐃ[4][Sr.ⲆᐃⲆ] = Ea(sd(4, Ot(a * 0.75, Qe, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    Ⲇᐃ[31] = [];
    Ⲇᐃ[31][Sr.ΔΔⵠ] = Ea(sd(4, Ot(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    Ⲇᐃ[31][Sr.ⲆᐃⲆ] = Ea(sd(4, Ot(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    Ⲇᐃ[9] = [];
    Ⲇᐃ[9][Sr.ΔΔⵠ] = Ea(sd(3, lu(a * 0.17, Qe, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    Ⲇᐃ[9][Sr.ⲆᐃⲆ] = Ea(sd(3, lu(a * 0.17, Qn, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    Ⲇᐃ[199] = [];
    Ⲇᐃ[199][Sr.ΔΔⵠ] = Ea(sd(3, bu(a * 0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    Ⲇᐃ[199][Sr.ⲆᐃⲆ] = Ea(sd(3, bu(a * 0.42, th, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    Ⲇᐃ[57] = [];
    Ⲇᐃ[57][Sr.ΔΔⵠ] = Ea(sd(3, St(a * 0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    Ⲇᐃ[57][Sr.ⲆᐃⲆ] = Ea(sd(3, St(a * 0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    Ⲇᐃ[0] = [];
    Ⲇᐃ[0][Sr.ΔΔⵠ] = Ea(sd(3, _t(a * 0.4, On, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    Ⲇᐃ[0][Sr.ⲆᐃⲆ] = Ea(sd(3, _t(a * 0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    Ⲇᐃ[5] = [];
    Ⲇᐃ[5][Sr.ΔΔⵠ] = Ea(sd(3, Xt(a * 0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    Ⲇᐃ[5][Sr.ⲆᐃⲆ] = Ea(sd(3, Xt(a * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    Ⲇᐃ[6] = [];
    Ⲇᐃ[6][Sr.ΔΔⵠ] = Ea(sd(3, $t(a * 0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    Ⲇᐃ[6][Sr.ⲆᐃⲆ] = Ea(sd(3, $t(a * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    Ⲇᐃ[30] = [];
    Ⲇᐃ[30][Sr.ΔΔⵠ] = Ea(sd(3, ju(a * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    Ⲇᐃ[30][Sr.ⲆᐃⲆ] = Ea(sd(3, ju(a * 0.4, lj, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    Ⲇᐃ[285] = [];
    Ⲇᐃ[285][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[285][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[285][Sr.ΔΔⵠ].push(Ea(ru(a * 0.9, 0, ["#0d4f35"], 0)));
    Ⲇᐃ[285][Sr.ΔΔⵠ].push(Ea(ru(a * 0.9, 0, ["#0d4f35"], 1)));
    Ⲇᐃ[285][Sr.ΔΔⵠ].push(Ea(ru(a * 0.9, 0, ["#0d4f35"], 2)));
    Ⲇᐃ[285][Sr.ⲆᐃⲆ].push(Ea(ru(a * 0.9, 0, ["#053339"], 0)));
    Ⲇᐃ[285][Sr.ⲆᐃⲆ].push(Ea(ru(a * 0.9, 0, ["#053339"], 1)));
    Ⲇᐃ[285][Sr.ⲆᐃⲆ].push(Ea(ru(a * 0.9, 0, ["#053339"], 2)));
    Ⲇᐃ[285][Sr.ΔΔⵠ].push(Ea(tu(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    Ⲇᐃ[285][Sr.ΔΔⵠ].push(Ea(tu(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
    Ⲇᐃ[285][Sr.ⲆᐃⲆ].push(Ea(tu(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
    Ⲇᐃ[285][Sr.ⲆᐃⲆ].push(Ea(tu(a * 0.8, ["#052918", "#08491c", "#063417"])));
    Ⲇᐃ[183] = [];
    Ⲇᐃ[183][Sr.ΔΔⵠ] = Ea(sd(Math.PI / 2, Yc(a * 0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    Ⲇᐃ[183][Sr.ⲆᐃⲆ] = Ea(sd(Math.PI / 2, Yc(a * 0.25, wq, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    Ⲇᐃ[803] = [];
    Ⲇᐃ[803].push(Ea(Mc(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    Ⲇᐃ[803].push(Ea(Mc(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    Ⲇᐃ[803].push(Ea(Mc(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    Ⲇᐃ[802] = [];
    Ⲇᐃ[802][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[802][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[802][Sr.ΔΔⵠ].push(Ea(sd(Math.PI / 2, Qc(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    Ⲇᐃ[802][Sr.ⲆᐃⲆ].push(Ea(sd(Math.PI / 2, Qc(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    Ⲇᐃ[802][Sr.ΔΔⵠ].push(Ea(sd(Math.PI / 2, Qc(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    Ⲇᐃ[802][Sr.ⲆᐃⲆ].push(Ea(sd(Math.PI / 2, Qc(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    Ⲇᐃ[802][Sr.ΔΔⵠ].push(Ea(sd(Math.PI / 2, Qc(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    Ⲇᐃ[802][Sr.ⲆᐃⲆ].push(Ea(sd(Math.PI / 2, Qc(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    Ⲇᐃ[802][Sr.ΔΔⵠ].push(Ea(sd(Math.PI / 2, Qc(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    Ⲇᐃ[802][Sr.ⲆᐃⲆ].push(Ea(sd(Math.PI / 2, Qc(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    Ⲇᐃ[110] = [];
    Ⲇᐃ[110][Sr.ΔΔⵠ] = [Ea(yu(a * 1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
    Ⲇᐃ[110][Sr.ⲆᐃⲆ] = [Ea(yu(a * 1.2, th, ["#030d14", "#084442", "#0a4049"]))];
    Ⲇᐃ[623] = [];
    Ⲇᐃ[623][Sr.ΔΔⵠ] = Ea(yu(a * 0.8, true, ["#0e3022", "#68622D", "#665329"]));
    Ⲇᐃ[623][Sr.ⲆᐃⲆ] = Ea(yu(a * 0.8, Eh, ["#030d14", "#0F3A24", "#083326"]));
    Ⲇᐃ[189] = [];
    Ⲇᐃ[189][Sr.ΔΔⵠ] = Ea(Qm(a * 0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    Ⲇᐃ[189][Sr.ⲆᐃⲆ] = Ea(Qm(a * 0.5, fr, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    Ⲇᐃ[192] = [];
    Ⲇᐃ[192][Sr.ΔΔⵠ] = Ea(bd(a * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    Ⲇᐃ[192][Sr.ⲆᐃⲆ] = Ea(bd(a * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    Ⲇᐃ[194] = [];
    Ⲇᐃ[194][Sr.ΔΔⵠ] = Ea(cp(a * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    Ⲇᐃ[194][Sr.ⲆᐃⲆ] = Ea(cp(a * 0.5, il, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    Ⲇᐃ[287] = [];
    Ⲇᐃ[287][Sr.ΔΔⵠ] = Ea(yu(a * 0.8, Vq, ["#1b170c", "#0b8052", "#077b49"]));
    Ⲇᐃ[287][Sr.ⲆᐃⲆ] = Ea(yu(a * 0.8, Ro, ["#030d14", "#084442", "#0a4049"]));
    Ⲇᐃ[813] = [];
    Ⲇᐃ[813][Sr.ΔΔⵠ] = Ea(Qm(a * 0.5, Rj, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    Ⲇᐃ[813][Sr.ⲆᐃⲆ] = Ea(Qm(a * 0.5, Qn, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    Ⲇᐃ[839] = [];
    Ⲇᐃ[839][Sr.ΔΔⵠ] = Ea(bd(a * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    Ⲇᐃ[839][Sr.ⲆᐃⲆ] = Ea(bd(a * 0.5, Qn, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    Ⲇᐃ[869] = [];
    Ⲇᐃ[869][Sr.ΔΔⵠ] = Ea(cp(a * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    Ⲇᐃ[869][Sr.ⲆᐃⲆ] = Ea(cp(a * 0.5, kn, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    Ⲇᐃ[854] = [];
    Ⲇᐃ[854][Sr.ΔΔⵠ] = Ea(Pp(a * 0.45, Rj, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    Ⲇᐃ[854][Sr.ⲆᐃⲆ] = Ea(Pp(a * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    Ⲇᐃ[859] = Ea(Pp(a * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    Ⲇᐃ[294] = [];
    Ⲇᐃ[294][Sr.ΔΔⵠ] = Ea(uu(a * 1.4, 0, ["#ac222a", "#e6636a"]));
    Ⲇᐃ[294][Sr.ⲆᐃⲆ] = Ea(uu(a * 1.4, 0, ["#46195e", "#744188"]));
    Ⲇᐃ[288] = [];
    Ⲇᐃ[288][Sr.ΔΔⵠ] = Ea(Et(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    Ⲇᐃ[288][Sr.ⲆᐃⲆ] = Ea(Et(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    Ⲇᐃ[118] = [];
    Ⲇᐃ[118][Sr.ΔΔⵠ] = Ea(Zd(a * 0.9, 0, ["#4d2d14", "#432516"]));
    Ⲇᐃ[118][Sr.ⲆᐃⲆ] = Ea(Zd(a * 0.9, 0, ["#282404", "#0a0a01"]));
    Ⲇᐃ[113] = [];
    Ⲇᐃ[113][Sr.ΔΔⵠ] = Ea($d(a * 0.9, 0, ["#4d2d14", "#432516"]));
    Ⲇᐃ[113][Sr.ⲆᐃⲆ] = Ea($d(a * 0.9, 0, ["#282404", "#0a0a01"]));
    Ⲇᐃ[289] = [];
    Ⲇᐃ[289][Sr.ΔΔⵠ] = Ea(Ht(a * 0.9, 0, ["#efd435"]));
    Ⲇᐃ[289][Sr.ⲆᐃⲆ] = Ea(Ht(a * 0.9, 0, ["#fffabb"]));
    Ⲇᐃ[282] = [];
    Ⲇᐃ[282][Sr.ΔΔⵠ] = Ea(Jt(a * 0.9, 0, ["#efd435"]));
    Ⲇᐃ[282][Sr.ⲆᐃⲆ] = Ea(Jt(a * 0.9, 0, ["#fffabb"]));
    Ⲇᐃ[816] = [];
    Ⲇᐃ[816][Sr.ΔΔⵠ] = Ea(Ht(a * 0.9, 0, ["#efd435"]));
    Ⲇᐃ[816][Sr.ⲆᐃⲆ] = Ea(Ht(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
    Ⲇᐃ[817] = [];
    Ⲇᐃ[817][Sr.ΔΔⵠ] = Ea(Jt(a * 0.9, 0, ["#efd435"]));
    Ⲇᐃ[817][Sr.ⲆᐃⲆ] = Ea(Jt(a * 0.9, 0, ["#ff5704"]));
    Ⲇᐃ[324] = Ea(Bd(a, "#ffffff"));
    Ⲇᐃ[301] = Ea(Bd(a * 1.5, "#ffffff"));
    Ⲇᐃ[306] = Ea(cu(a, "Your score:", a * 15, "#FFF"));
    Ⲇᐃ[655] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      $b(d, a * 119.5, a * 140.125, a * 19);
      ed(d, at, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      ed(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      ed(d, undefined, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      ed(d, ls, b[3], a * 10);
      $b(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      ed(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      ed(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      ed(d, undefined, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      id(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      ed(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      id(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      ed(d, b[9]);
      return c;
    }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    Ⲇᐃ[656] = Δᐃ.ᐃᐃΔⲆⲆᐃⵠ;
    Ⲇᐃ[135] = [];
    Ⲇᐃ[135][Sr.ΔΔⵠ] = Ea(Ud(a * 1.5, _h, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇᐃ[135][Sr.ⲆᐃⲆ] = Ea(Ud(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇᐃ[641] = [];
    Ⲇᐃ[641][Sr.ΔΔⵠ] = Ea(Od(a * 2, Rj, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇᐃ[641][Sr.ⲆᐃⲆ] = Ea(Od(a * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇᐃ[642] = [];
    Ⲇᐃ[642][Sr.ΔΔⵠ] = Ea(Kd(a * 1.5, u, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇᐃ[642][Sr.ⲆᐃⲆ] = Ea(Kd(a * 1.5, il, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇᐃ[134] = [];
    Ⲇᐃ[134][Sr.ΔΔⵠ] = Ea(Nd(a * 2.2, 0, ["#A89F67", "#9E8456"]));
    Ⲇᐃ[134][Sr.ⲆᐃⲆ] = Ea(Nd(a * 2.2, 0, ["#0B4049", "#08383D"]));
    Ⲇᐃ[638] = [];
    Ⲇᐃ[638][Sr.ΔΔⵠ] = Ea(Nd(a * 2.2, 0, ["#68622D", "#665329"]));
    Ⲇᐃ[638][Sr.ⲆᐃⲆ] = Ea(Nd(a * 2.2, 0, ["#0F3A24", "#083326"]));
    Ⲇᐃ[321] = [];
    Ⲇᐃ[321][Sr.ΔΔⵠ] = Ea(Yt(a * 0.8, 0, ["#A89F67", "#9E8456"]));
    Ⲇᐃ[321][Sr.ⲆᐃⲆ] = Ea(Yt(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
    Ⲇᐃ[811] = [];
    Ⲇᐃ[811][Sr.ΔΔⵠ] = Ea(Yt(a * 0.8, 0, ["#c67933", "#b17238"]));
    Ⲇᐃ[811][Sr.ⲆᐃⲆ] = Ea(Yt(a * 0.8, 0, ["#043c37", "#032b23"]));
    Ⲇᐃ[984] = [];
    Ⲇᐃ[984][Sr.ΔΔⵠ] = Ea(Yt(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
    Ⲇᐃ[984][Sr.ⲆᐃⲆ] = Ea(Yt(a * 0.8, 0, ["#032d29", "#044640"]));
    Ⲇᐃ[837] = [];
    Ⲇᐃ[837][Sr.ΔΔⵠ] = Ea(Yt(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    Ⲇᐃ[837][Sr.ⲆᐃⲆ] = Ea(Yt(a * 0.8, 0, ["#1c6161", "#07413f"]));
    Ⲇᐃ[848] = [];
    Ⲇᐃ[848][Sr.ΔΔⵠ] = Ea(Yt(a * 0.8, 0, ["#328a56", "#449573"]));
    Ⲇᐃ[848][Sr.ⲆᐃⲆ] = Ea(Yt(a * 0.8, 0, ["#043c37", "#032b23"]));
    Ⲇᐃ[952] = [];
    Ⲇᐃ[952][Sr.ΔΔⵠ] = Ea(Yt(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
    Ⲇᐃ[952][Sr.ⲆᐃⲆ] = Ea(Yt(a * 0.8, 0, ["#043c37", "#032b23"]));
    Ⲇᐃ[962] = [];
    Ⲇᐃ[962][Sr.ΔΔⵠ] = Ea(Yt(a * 0.8, 0, ["#b22419", "#99110e"]));
    Ⲇᐃ[962][Sr.ⲆᐃⲆ] = Ea(Yt(a * 0.8, 0, ["#04323c", "#03222b"]));
    Ⲇᐃ[969] = [];
    Ⲇᐃ[969][Sr.ΔΔⵠ] = Ea(Yt(a * 0.8, 0, ["#13a56d", "#098a58"]));
    Ⲇᐃ[969][Sr.ⲆᐃⲆ] = Ea(Yt(a * 0.8, 0, ["#043c37", "#032b23"]));
    Ⲇᐃ[657] = Xd(1, [{
      f: Nd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇᐃ[723] = Xd(1, [{
      f: $d,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇᐃ[724] = Xd(1, [{
      f: Dm,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇᐃ[334] = Xd(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇᐃ[115] = [];
    Ⲇᐃ[115][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
    Ⲇᐃ[115][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#084442", "#125e5a"]));
    Ⲇᐃ[132] = [];
    Ⲇᐃ[132][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#9E8456", "#A89F67"]));
    Ⲇᐃ[132][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    Ⲇᐃ[668] = [];
    Ⲇᐃ[668][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#665329", "#68622D"]));
    Ⲇᐃ[668][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#083326", "#0F3A24"]));
    Ⲇᐃ[188] = [];
    Ⲇᐃ[188][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#c67933", "#ec952d"]));
    Ⲇᐃ[188][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#0e6553", "#094437"]));
    Ⲇᐃ[210] = [];
    Ⲇᐃ[210][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#375809", "#4b770e"]));
    Ⲇᐃ[210][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
    Ⲇᐃ[985] = [];
    Ⲇᐃ[985][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#585809", "#72770e"]));
    Ⲇᐃ[985][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#295209", "#305d0d"]));
    Ⲇᐃ[191] = [];
    Ⲇᐃ[191][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
    Ⲇᐃ[191][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#126366", "#0d484b"]));
    Ⲇᐃ[193] = [];
    Ⲇᐃ[193][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#3f8662", "#30915d"]));
    Ⲇᐃ[193][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#0e6553", "#094437"]));
    Ⲇᐃ[812] = [];
    Ⲇᐃ[812][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#c79153", "#dfa868"]));
    Ⲇᐃ[812][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#073927", "#075040"]));
    Ⲇᐃ[838] = [];
    Ⲇᐃ[838][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#768b5b", "#819984"]));
    Ⲇᐃ[838][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#0c4540", "#0e5153"]));
    Ⲇᐃ[849] = [];
    Ⲇᐃ[849][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#567465", "#627c6e"]));
    Ⲇᐃ[849][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#073927", "#075040"]));
    Ⲇᐃ[204] = [];
    Ⲇᐃ[204][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#996b3a", "#bf956b"]));
    Ⲇᐃ[204][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#0e6553", "#094437"]));
    Ⲇᐃ[953] = [];
    Ⲇᐃ[953][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#7a634a", "#a68f77"]));
    Ⲇᐃ[953][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#1e4d43", "#113c32"]));
    Ⲇᐃ[206] = [];
    Ⲇᐃ[206][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#99403c", "#bc796c"]));
    Ⲇᐃ[206][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#1e434d", "#11303c"]));
    Ⲇᐃ[963] = [];
    Ⲇᐃ[963][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#88504e", "#b3857c"]));
    Ⲇᐃ[963][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#253b41", "#162930"]));
    Ⲇᐃ[208] = [];
    Ⲇᐃ[208][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#0f8870", "#23af93"]));
    Ⲇᐃ[208][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#032829", "#083233"]));
    Ⲇᐃ[970] = [];
    Ⲇᐃ[970][Sr.ΔΔⵠ] = Ea(zd(a * 0.9, 0, ["#618a20", "#84a74e"]));
    Ⲇᐃ[970][Sr.ⲆᐃⲆ] = Ea(zd(a * 0.9, 0, ["#1f4632", "#335d47"]));
    Ⲇᐃ[114] = [];
    Ⲇᐃ[114][Sr.ΔΔⵠ] = Ea(Qd(a * 1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    Ⲇᐃ[114][Sr.ⲆᐃⲆ] = Ea(Qd(a * 1.2, uq, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    Ⲇᐃ[162] = [];
    Ⲇᐃ[162][Sr.ΔΔⵠ] = Ea(rc(a * 1, Eh, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    Ⲇᐃ[162][Sr.ⲆᐃⲆ] = Ea(rc(a * 1, Co, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇᐃ[165] = [];
    Ⲇᐃ[165][Sr.ΔΔⵠ] = Ea(Du(a * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇᐃ[165][Sr.ⲆᐃⲆ] = Ea(Du(a * 1, Rj, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇᐃ[122] = [];
    Ⲇᐃ[122][Sr.ΔΔⵠ] = Ea(ic(a * 1, Rj, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇᐃ[122][Sr.ⲆᐃⲆ] = Ea(ic(a * 1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇᐃ[163] = [];
    Ⲇᐃ[163][Sr.ΔΔⵠ] = Ea(ic(a * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    Ⲇᐃ[163][Sr.ⲆᐃⲆ] = Ea(ic(a * 1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    Ⲇᐃ[164] = [];
    Ⲇᐃ[164][Sr.ΔΔⵠ] = Ea(oc(a * 1, Co, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    Ⲇᐃ[164][Sr.ⲆᐃⲆ] = Ea(oc(a * 1, fr, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    Ⲇᐃ[160] = [];
    Ⲇᐃ[160][Sr.ΔΔⵠ] = Ea(xc(a * 0.8, Rj, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    Ⲇᐃ[160][Sr.ⲆᐃⲆ] = Ea(xc(a * 0.8, _h, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇᐃ[169] = [];
    Ⲇᐃ[169][Sr.ΔΔⵠ] = Ea(Gc(a * 0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    Ⲇᐃ[169][Sr.ⲆᐃⲆ] = Ea(Gc(a * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    Ⲇᐃ[170] = [];
    Ⲇᐃ[170][Sr.ΔΔⵠ] = Ea(Jc(a * 0.8, u, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇᐃ[170][Sr.ⲆᐃⲆ] = Ea(Jc(a * 0.8, Ro, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇᐃ[168] = [];
    Ⲇᐃ[168][Sr.ΔΔⵠ] = Ea(Oc(a * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    Ⲇᐃ[168][Sr.ⲆᐃⲆ] = Ea(Oc(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    Ⲇᐃ[123] = [];
    Ⲇᐃ[123][Sr.ΔΔⵠ] = Ea(Oc(a * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇᐃ[123][Sr.ⲆᐃⲆ] = Ea(Oc(a * 0.8, fr, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇᐃ[166] = [];
    Ⲇᐃ[166][Sr.ΔΔⵠ] = Ea(Bu(a * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    Ⲇᐃ[166][Sr.ⲆᐃⲆ] = Ea(Bu(a * 1.5, il, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇᐃ[336] = [];
    Ⲇᐃ[336][Sr.ΔΔⵠ] = Ea(Bu(a * 1, Ol, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇᐃ[336][Sr.ⲆᐃⲆ] = Ea(Bu(a * 1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    Ⲇᐃ[171] = [];
    Ⲇᐃ[171][Sr.ΔΔⵠ] = Ea(nc(a * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    Ⲇᐃ[171][Sr.ⲆᐃⲆ] = Ea(nc(a * 1.5, _h, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    Ⲇᐃ[373] = [];
    Ⲇᐃ[373][Sr.ΔΔⵠ] = Ea(nc(a * 1, Nn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇᐃ[373][Sr.ⲆᐃⲆ] = Ea(nc(a * 1, Nq, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇᐃ[124] = [];
    Ⲇᐃ[124][Sr.ΔΔⵠ] = Ea(nc(a * 1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇᐃ[124][Sr.ⲆᐃⲆ] = Ea(nc(a * 1.5, kn, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇᐃ[500] = [];
    Ⲇᐃ[500][Sr.ΔΔⵠ] = Ea(nc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇᐃ[500][Sr.ⲆᐃⲆ] = Ea(nc(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇᐃ[172] = [];
    Ⲇᐃ[172][Sr.ΔΔⵠ] = Ea(ec(a * 1.5, Rj, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    Ⲇᐃ[172][Sr.ⲆᐃⲆ] = Ea(ec(a * 1.5, Eh, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    Ⲇᐃ[376] = [];
    Ⲇᐃ[376][Sr.ΔΔⵠ] = Ea(ec(a * 1, _a, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇᐃ[376][Sr.ⲆᐃⲆ] = Ea(ec(a * 1, fk, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇᐃ[173] = [];
    Ⲇᐃ[173][Sr.ΔΔⵠ] = Ea(mc(a * 1.5, uq, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇᐃ[173][Sr.ⲆᐃⲆ] = Ea(mc(a * 1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇᐃ[379] = [];
    Ⲇᐃ[379][Sr.ΔΔⵠ] = Ea(mc(a * 1, Eq, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇᐃ[379][Sr.ⲆᐃⲆ] = Ea(mc(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇᐃ[167] = [];
    Ⲇᐃ[167][Sr.ΔΔⵠ] = Ea(bc(a * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    Ⲇᐃ[167][Sr.ⲆᐃⲆ] = Ea(bc(a * 0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    Ⲇᐃ[691] = [];
    Ⲇᐃ[691][Sr.ΔΔⵠ] = Ea(mp(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    Ⲇᐃ[691][Sr.ⲆᐃⲆ] = Ea(mp(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    Ⲇᐃ[264] = [];
    Ⲇᐃ[264][Sr.ΔΔⵠ] = Ea(Id(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    Ⲇᐃ[264][Sr.ⲆᐃⲆ] = Ea(Id(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    Ⲇᐃ[260] = [];
    Ⲇᐃ[260][Sr.ΔΔⵠ] = Ea(sd(Math.PI, Rd(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    Ⲇᐃ[260][Sr.ⲆᐃⲆ] = Ea(sd(Math.PI, Rd(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    Ⲇᐃ[266] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      ed(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      ed(d, Fr, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      ed(d, Fr, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      ed(d, Fl, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      ed(d, Es, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      ed(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      ed(d, kg, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      ed(d, Yh, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      ed(d, Es, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      ed(d, undefined, b[0], 4);
      return c;
    }(a * 0.6, ["#FFFFFF"]));
    Ⲇᐃ[299] = [];
    Ⲇᐃ[299][Sr.ΔΔⵠ] = Ea(Sd(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    Ⲇᐃ[299][Sr.ⲆᐃⲆ] = Ea(Sd(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    Ⲇᐃ[10] = [];
    Ⲇᐃ[10][Sr.ΔΔⵠ] = Ea(Nc(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    Ⲇᐃ[10][Sr.ⲆᐃⲆ] = Ea(Nc(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    Ⲇᐃ[11] = [];
    Ⲇᐃ[11][Sr.ΔΔⵠ] = Ea(vc(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    Ⲇᐃ[11][Sr.ⲆᐃⲆ] = Ea(vc(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    Ⲇᐃ[40] = [];
    Ⲇᐃ[40][Sr.ΔΔⵠ] = Ea(Sc(a * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    Ⲇᐃ[40][Sr.ⲆᐃⲆ] = Ea(Sc(a * 0.63, Co, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    Ⲇᐃ[41] = [];
    Ⲇᐃ[41][Sr.ΔΔⵠ] = Ea(Gt(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    Ⲇᐃ[41][Sr.ⲆᐃⲆ] = Ea(Gt(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    Ⲇᐃ[42] = [];
    Ⲇᐃ[42][Sr.ΔΔⵠ] = Ea(Lt(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    Ⲇᐃ[42][Sr.ⲆᐃⲆ] = Ea(Lt(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    Ⲇᐃ[716] = [];
    Ⲇᐃ[716][Sr.ΔΔⵠ] = Ea(km(a * 0.42, Lr, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    Ⲇᐃ[716][Sr.ⲆᐃⲆ] = Ea(km(a * 0.42, th, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    Ⲇᐃ[720] = [];
    Ⲇᐃ[720][Sr.ΔΔⵠ] = Ea(Jm(a * 0.9, ["#e4c027"]));
    Ⲇᐃ[720][Sr.ⲆᐃⲆ] = Ea(Jm(a * 0.9, ["#D8E57F"]));
    Ⲇᐃ[144] = [];
    Ⲇᐃ[144][Sr.ΔΔⵠ] = Ea(Bm(a * 0.42, On, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    Ⲇᐃ[144][Sr.ⲆᐃⲆ] = Ea(Bm(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    Ⲇᐃ[722] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      id(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      ed(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      id(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      ed(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      ed(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      ed(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      ed(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      ed(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      id(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      ed(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      id(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      ed(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      id(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      ed(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      ed(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      ed(d, b[3], b[3], a * 10);
      return c;
    }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    Ⲇᐃ[407] = [];
    Ⲇᐃ[407][Sr.ΔΔⵠ] = Ea(Cu(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    Ⲇᐃ[407][Sr.ⲆᐃⲆ] = Ea(Cu(a * 0.5, il, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    Ⲇᐃ[119] = [];
    Ⲇᐃ[119][Sr.ΔΔⵠ] = Ea(lc(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    Ⲇᐃ[119][Sr.ⲆᐃⲆ] = Ea(lc(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    Ⲇᐃ[411] = Ea(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      id(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      ed(e, c[0], c[1], 4);
      return d;
    }(a * 0.8, 0, ["#5f6061", "#939393"]));
    Ⲇᐃ[412] = Xd(1, [{
      f: $d,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    Ⲇᐃ[198] = [];
    Ⲇᐃ[198][Sr.ΔΔⵠ] = Ea(dc(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    Ⲇᐃ[198][Sr.ⲆᐃⲆ] = Ea(dc(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    Ⲇᐃ[913] = [];
    Ⲇᐃ[913][Sr.ΔΔⵠ] = Ea(wc(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    Ⲇᐃ[913][Sr.ⲆᐃⲆ] = Ea(wc(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    Ⲇᐃ[18] = [];
    Ⲇᐃ[18][Sr.ΔΔⵠ] = Ea(sd(3, yc(a * 0.7, uq, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    Ⲇᐃ[18][Sr.ⲆᐃⲆ] = Ea(sd(3, yc(a * 0.7, Ro, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    Ⲇᐃ[12] = [];
    Ⲇᐃ[12][Sr.ΔΔⵠ] = Ea(sd(3, cc(a * 0.7, u, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    Ⲇᐃ[12][Sr.ⲆᐃⲆ] = Ea(sd(3, cc(a * 0.7, On, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    Ⲇᐃ[13] = [];
    Ⲇᐃ[13][Sr.ΔΔⵠ] = Ea(sd(3, kc(a * 0.65, wh, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    Ⲇᐃ[13][Sr.ⲆᐃⲆ] = Ea(sd(3, kc(a * 0.65, Ro, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    Ⲇᐃ[14] = [];
    Ⲇᐃ[14][Sr.ΔΔⵠ] = Ea(sd(3, zc(a * 0.67, Lr, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    Ⲇᐃ[14][Sr.ⲆᐃⲆ] = Ea(sd(3, zc(a * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    Ⲇᐃ[15] = [];
    Ⲇᐃ[15][Sr.ΔΔⵠ] = Ea(sd(3, pc(a * 0.67, Ok, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    Ⲇᐃ[15][Sr.ⲆᐃⲆ] = Ea(sd(3, pc(a * 0.67, Eh, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    Ⲇᐃ[33] = [];
    Ⲇᐃ[33][Sr.ΔΔⵠ] = Ea(sd(3, Cc(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    Ⲇᐃ[33][Sr.ⲆᐃⲆ] = Ea(sd(3, Cc(a * 0.67, uq, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    Ⲇᐃ[16] = [];
    Ⲇᐃ[16][Sr.ΔΔⵠ] = Ea(sd(3, Tc(a * 1, Eh, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    Ⲇᐃ[16][Sr.ⲆᐃⲆ] = Ea(sd(3, Tc(a * 1, _h, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    Ⲇᐃ[35] = [];
    Ⲇᐃ[35][Sr.ΔΔⵠ] = Ea(sd(3, Dc(a * 1, On, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    Ⲇᐃ[35][Sr.ⲆᐃⲆ] = Ea(sd(3, Dc(a * 1, Rj, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    Ⲇᐃ[55] = [];
    Ⲇᐃ[55][Sr.ΔΔⵠ] = Ea(sd(3, fp(a * 0.5, uq, ["#0d1b1c", "#939393", "#5f6061"])));
    Ⲇᐃ[55][Sr.ⲆᐃⲆ] = Ea(sd(3, fp(a * 0.5, On, ["#030d14", "#485e66", "#1f343f"])));
    Ⲇᐃ[45] = [];
    Ⲇᐃ[45][Sr.ΔΔⵠ] = Ea(sd(3, Xm(a * 1, Lr, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    Ⲇᐃ[45][Sr.ⲆᐃⲆ] = Ea(sd(3, Xm(a * 1, wh, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    Ⲇᐃ[36] = [];
    Ⲇᐃ[36][Sr.ΔΔⵠ] = Ea(sd(3, Dc(a * 1, fr, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    Ⲇᐃ[36][Sr.ⲆᐃⲆ] = Ea(sd(3, Dc(a * 1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    Ⲇᐃ[37] = [];
    Ⲇᐃ[37][Sr.ΔΔⵠ] = Ea(sd(3, Dc(a * 1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    Ⲇᐃ[37][Sr.ⲆᐃⲆ] = Ea(sd(3, Dc(a * 1, lj, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    Ⲇᐃ[38] = [];
    Ⲇᐃ[38][Sr.ΔΔⵠ] = Ea(sd(3, Dc(a * 1, Qe, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    Ⲇᐃ[38][Sr.ⲆᐃⲆ] = Ea(sd(3, Dc(a * 1, On, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    Ⲇᐃ[148] = [];
    Ⲇᐃ[148][Sr.ΔΔⵠ] = Ea(Rm(a * 0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    Ⲇᐃ[148][Sr.ⲆᐃⲆ] = Ea(Rm(a * 0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    Ⲇᐃ[536] = [];
    Ⲇᐃ[536].push(Ea(Rm(a * 0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    Ⲇᐃ[536].push(Ea(Rm(a * 0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    Ⲇᐃ[536].push(Ea(Rm(a * 0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    Ⲇᐃ[538] = [];
    Ⲇᐃ[538].push(Ⲇᐃ[536][0]);
    Ⲇᐃ[538].push(Ⲇᐃ[536][0]);
    Ⲇᐃ[538].push(Ⲇᐃ[536][0]);
    Ⲇᐃ[158] = [];
    Ⲇᐃ[158][Sr.ΔΔⵠ] = Ea(Zm(a * 0.06, rl, ["#141414", "#c4a23a", "#816511"]));
    Ⲇᐃ[158][Sr.ⲆᐃⲆ] = Ea(Zm(a * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
    Ⲇᐃ[535] = [];
    Ⲇᐃ[535].push(Ea(Zm(a * 0.08, ph, ["#141414", "#c4a23a", "#816511"])));
    Ⲇᐃ[535].push(Ea(Zm(a * 0.08, ph, ["#141414", "#e2bd4e", "#a38018"])));
    Ⲇᐃ[535].push(Ea(Zm(a * 0.08, Go, ["#141414", "#b0902e", "#634d09"])));
    Ⲇᐃ[149] = Xd(1.5, [{
      f: _m,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    Ⲇᐃ[526] = [];
    Ⲇᐃ[526][Sr.ΔΔⵠ] = Ea(Em(a * 0.8, 0, ["#347f93", "#54a4ba"]));
    Ⲇᐃ[526][Sr.ⲆᐃⲆ] = Ea(Em(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
    Ⲇᐃ[527] = [];
    Ⲇᐃ[527][Sr.ΔΔⵠ] = Ea(ip(a * 0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    Ⲇᐃ[527][Sr.ⲆᐃⲆ] = Ea(ip(a * 0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    Ⲇᐃ[528] = [];
    Ⲇᐃ[528][Sr.ΔΔⵠ] = Ea($m(a * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
    Ⲇᐃ[528][Sr.ⲆᐃⲆ] = Ea($m(a * 0.8, 0, ["#83ddd4", "#485e66"]));
    Ⲇᐃ[151] = [];
    Ⲇᐃ[151][Sr.ΔΔⵠ] = Ea(Im(a * 0.8, Vq, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    Ⲇᐃ[151][Sr.ⲆᐃⲆ] = Ea(Im(a * 0.8, Rj, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    Ⲇᐃ[1192] = [];
    Ⲇᐃ[1192][Sr.ΔΔⵠ] = Δᐃ.ΔᐃⵠⵠⲆΔΔ;
    Ⲇᐃ[1192][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃⲆⵠⲆⲆᐃ;
    Ⲇᐃ[1193] = [];
    Ⲇᐃ[1193][Sr.ΔΔⵠ] = Δᐃ.ΔⲆΔΔᐃᐃᐃ;
    Ⲇᐃ[1193][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃⵠⵠⵠⲆΔ;
    Ⲇᐃ[1194] = [];
    Ⲇᐃ[1194][Sr.ΔΔⵠ] = Δᐃ.ΔᐃΔᐃⵠᐃⲆ;
    Ⲇᐃ[1194][Sr.ⲆᐃⲆ] = Δᐃ.ⲆΔᐃΔⵠⵠᐃ;
    Ⲇᐃ[152] = [];
    Ⲇᐃ[152][Sr.ΔΔⵠ] = Δᐃ.ΔⵠⲆⵠᐃΔΔ;
    Ⲇᐃ[152][Sr.ⲆᐃⲆ] = Δᐃ.ⲆᐃΔᐃⵠⵠⲆ;
    Ⲇᐃ[1198] = [];
    Ⲇᐃ[1198][Sr.ΔΔⵠ] = Δᐃ.ⵠᐃⲆΔⲆⲆⲆ;
    Ⲇᐃ[1198][Sr.ⲆᐃⲆ] = Δᐃ.ΔⵠⲆⵠⵠΔⲆ;
    Ⲇᐃ[153] = [];
    Ⲇᐃ[153][Sr.ΔΔⵠ] = Δᐃ.ᐃⲆΔᐃⵠⵠⵠ;
    Ⲇᐃ[153][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆⲆΔⲆⲆⲆ;
    Ⲇᐃ[1202] = [];
    Ⲇᐃ[1202][Sr.ΔΔⵠ] = Δᐃ.ⵠⲆΔΔΔⲆⲆ;
    Ⲇᐃ[1202][Sr.ⲆᐃⲆ] = Δᐃ.ᐃⲆᐃΔⲆᐃΔ;
    Ⲇᐃ[154] = [];
    Ⲇᐃ[154][Sr.ΔΔⵠ] = Δᐃ.ⲆΔⲆΔⵠⵠⵠ;
    Ⲇᐃ[154][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃⲆΔΔΔΔ;
    Ⲇᐃ[1206] = [];
    Ⲇᐃ[1206][Sr.ΔΔⵠ] = Δᐃ.ᐃᐃⲆⵠⵠᐃΔ;
    Ⲇᐃ[1206][Sr.ⲆᐃⲆ] = Δᐃ.ⵠⲆΔΔⲆⵠΔ;
    Ⲇᐃ[155] = [];
    Ⲇᐃ[155][Sr.ΔΔⵠ] = Δᐃ.ⲆΔᐃᐃᐃⲆⵠ;
    Ⲇᐃ[155][Sr.ⲆᐃⲆ] = Δᐃ.ᐃΔΔΔⵠᐃⲆ;
    Ⲇᐃ[1210] = [];
    Ⲇᐃ[1210][Sr.ΔΔⵠ] = Δᐃ.ΔⵠΔΔⵠᐃΔ;
    Ⲇᐃ[1210][Sr.ⲆᐃⲆ] = Δᐃ.ΔᐃⲆΔᐃⲆⵠ;
    Ⲇᐃ[156] = [];
    Ⲇᐃ[156][Sr.ΔΔⵠ] = Δᐃ.ⲆⲆⵠⲆᐃⵠᐃ;
    Ⲇᐃ[156][Sr.ⲆᐃⲆ] = Δᐃ.ΔΔᐃᐃᐃΔᐃ;
    Ⲇᐃ[1214] = [];
    Ⲇᐃ[1214][Sr.ΔΔⵠ] = Δᐃ.ΔⵠΔⵠᐃΔⲆ;
    Ⲇᐃ[1214][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⵠᐃᐃⲆⲆⵠ;
    Ⲇᐃ[157] = [];
    Ⲇᐃ[157][Sr.ΔΔⵠ] = Δᐃ.ⵠΔⵠΔⵠΔΔ;
    Ⲇᐃ[157][Sr.ⲆᐃⲆ] = Δᐃ.ⵠᐃⲆⲆⵠⵠΔ;
    Ⲇᐃ[245] = [];
    Ⲇᐃ[245][Sr.ΔΔⵠ] = Δᐃ.ΔᐃⵠᐃᐃⵠⲆ;
    Ⲇᐃ[245][Sr.ⲆᐃⲆ] = Δᐃ.ΔⲆⲆⵠΔⵠⵠ;
    Ⲇᐃ[246] = Δᐃ.ΔⲆⲆⲆΔΔᐃ;
    Ⲇᐃ[159] = [];
    Ⲇᐃ[159][Sr.ΔΔⵠ] = Ea(Hm(a * 0.75, _h, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    Ⲇᐃ[159][Sr.ⲆᐃⲆ] = Ea(Hm(a * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    Ⲇᐃ[558] = Ea(wm(a * 0.3, ["#092813", "#1f773d"], 0));
    Ⲇᐃ[559] = Ea(wm(a * 0.3, ["#092813", "#1f773d"], 1));
    Ⲇᐃ[885] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      ed(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      ed(d, b[1]);
      return c;
    }(a * 0.6, ["#092813", "#1f773d"]));
    Ⲇᐃ[556] = [];
    Ⲇᐃ[556].push(Ea(Gm(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    Ⲇᐃ[556].push(Ea(Gm(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    Ⲇᐃ[556].push(Ea(Gm(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    Ⲇᐃ[560] = [];
    var c = Ea(Gm(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    Ⲇᐃ[560].push(c);
    Ⲇᐃ[560].push(c);
    Ⲇᐃ[560].push(c);
    Ⲇᐃ[557] = [];
    Ⲇᐃ[557].push(Ea(Gm(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    Ⲇᐃ[557].push(Ea(Gm(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    Ⲇᐃ[557].push(Ea(Gm(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    Ⲇᐃ[681] = Ea(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        rd(e, 3, b * 18, b * 4);
        ed(e, c[0]);
        e.restore();
      }
      e.restore();
      $b(e, 0, 0, b * 40);
      ed(e, Bg, c[0], b * 6);
      $b(e, 0, 0, b * 20);
      ed(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    Ⲇᐃ[794] = Ea(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      $b(e, a, h, b * 40);
      ed(e, undefined, c[0], b * 7);
      $b(e, a, h, b * 30);
      ed(e, undefined, c[0], b * 7);
      $b(e, a, h, b * 20);
      ed(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    Ⲇᐃ[562] = Ea(wm(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    Ⲇᐃ[667] = Ea(sd(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      id(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      ed(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      ed(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      ed(d, b[0], b[0], a * 15);
      return c;
    }(a * 0.2, ["#FFFFFF"])));
    Ⲇᐃ[43] = [];
    Ⲇᐃ[43][Sr.ΔΔⵠ] = Ea(pm(a * 0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    Ⲇᐃ[43][Sr.ⲆᐃⲆ] = Ea(pm(a * 0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    Ⲇᐃ[561] = [];
    Ⲇᐃ[561].push(Ea(Gm(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    Ⲇᐃ[561].push(Ea(Gm(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    Ⲇᐃ[561].push(Ea(Gm(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    Ⲇᐃ[83] = [];
    Ⲇᐃ[83][Sr.ΔΔⵠ] = Ea(hp(a * 0.37, 0, ["#2a2938", "#242330", "#313041"]));
    Ⲇᐃ[83][Sr.ⲆᐃⲆ] = Ea(hp(a * 0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    Ⲇᐃ[85] = [];
    Ⲇᐃ[85][Sr.ΔΔⵠ] = Ea(sp(a * 0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    Ⲇᐃ[85][Sr.ⲆᐃⲆ] = Ea(sp(a * 0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    Ⲇᐃ[86] = [];
    Ⲇᐃ[86][Sr.ΔΔⵠ] = Ea(lp(a * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    Ⲇᐃ[86][Sr.ⲆᐃⲆ] = Ea(lp(a * 0.55, wq, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    Ⲇᐃ[84] = [];
    Ⲇᐃ[84][Sr.ΔΔⵠ] = Ea(lp(a * 0.55, Qe, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    Ⲇᐃ[84][Sr.ⲆᐃⲆ] = Ea(lp(a * 0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    Ⲇᐃ[77] = [];
    Ⲇᐃ[77][Sr.ΔΔⵠ] = Ea(yp(a * 0.2, Eh, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    Ⲇᐃ[77][Sr.ⲆᐃⲆ] = Ea(yp(a * 0.2, Qe, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    Ⲇᐃ[78] = [];
    Ⲇᐃ[78][Sr.ΔΔⵠ] = Ea(yp(a * 0.2, Qn, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    Ⲇᐃ[78][Sr.ⲆᐃⲆ] = Ea(yp(a * 0.2, wq, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    Ⲇᐃ[79] = [];
    Ⲇᐃ[79][Sr.ΔΔⵠ] = Ea(yp(a * 0.2, kn, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    Ⲇᐃ[79][Sr.ⲆᐃⲆ] = Ea(yp(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    Ⲇᐃ[61] = [];
    Ⲇᐃ[61][Sr.ΔΔⵠ] = Ea(uc(a * 0.24, fr, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    Ⲇᐃ[61][Sr.ⲆᐃⲆ] = Ea(uc(a * 0.24, il, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    Ⲇᐃ[59] = [];
    Ⲇᐃ[59][Sr.ΔΔⵠ] = Ea(Uc(a * 0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    Ⲇᐃ[59][Sr.ⲆᐃⲆ] = Ea(Uc(a * 0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    Ⲇᐃ[62] = [];
    Ⲇᐃ[62][Sr.ΔΔⵠ] = Ea(sd(3, jm(a * 0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    Ⲇᐃ[62][Sr.ⲆᐃⲆ] = Ea(sd(3, jm(a * 0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    Ⲇᐃ[750] = [];
    Ⲇᐃ[750][Sr.ΔΔⵠ] = Ea(sd(3, jm(a * 1, kn, [Ho, undefined, fh, "#c8efef", "#c8efef"])));
    Ⲇᐃ[750][Sr.ⲆᐃⲆ] = Ea(sd(3, jm(a * 1, true, [undefined, Ho, Bg, "#87d2e6", "#87d2e6"])));
    Ⲇᐃ[755] = [];
    Ⲇᐃ[755].push(Ea(Ap(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    Ⲇᐃ[755].push(Ea(Ap(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    Ⲇᐃ[755].push(Ea(Ap(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    Ⲇᐃ[795] = [];
    Ⲇᐃ[795].push(Ea(Jp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    Ⲇᐃ[795].push(Ea(Jp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    Ⲇᐃ[795].push(Ea(Jp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    Ⲇᐃ[782] = [];
    Ⲇᐃ[782].push(Ea(Nt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    Ⲇᐃ[782].push(Ea(Nt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    Ⲇᐃ[782].push(Ea(Nt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    Ⲇᐃ[783] = [];
    Ⲇᐃ[783].push(Ea(Nt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    Ⲇᐃ[783].push(Ea(Nt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    Ⲇᐃ[783].push(Ea(Nt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    Ⲇᐃ[46] = [];
    Ⲇᐃ[46][Sr.ΔΔⵠ] = Ea(sd(3, vp(a * 0.7, Qn, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    Ⲇᐃ[46][Sr.ⲆᐃⲆ] = Ea(sd(3, vp(a * 0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    Ⲇᐃ[50] = [];
    Ⲇᐃ[50][Sr.ΔΔⵠ] = Ea(sd(3, vp(a * 0.7, Eh, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    Ⲇᐃ[50][Sr.ⲆᐃⲆ] = Ea(sd(3, vp(a * 0.7, Lr, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    Ⲇᐃ[51] = [];
    Ⲇᐃ[51][Sr.ΔΔⵠ] = Ea(sd(3, vp(a * 0.7, Vq, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    Ⲇᐃ[51][Sr.ⲆᐃⲆ] = Ea(sd(3, vp(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    Ⲇᐃ[52] = [];
    Ⲇᐃ[52][Sr.ΔΔⵠ] = Ea(sd(3, vp(a * 0.7, _h, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    Ⲇᐃ[52][Sr.ⲆᐃⲆ] = Ea(sd(3, vp(a * 0.7, Ok, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    Ⲇᐃ[592] = [];
    Ⲇᐃ[592].push(Ea(ym(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    Ⲇᐃ[592].push(Ea(ym(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    Ⲇᐃ[592].push(Ea(ym(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    Ⲇᐃ[326] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      ed(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      ed(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      ed(d, b[0], b[0], a * 2);
      return c;
    }(a * 1.1, ["#BB0000"]));
    Ⲇᐃ[333] = Ea(sd(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      $b(d, a * 213.5, a * 256.75, a * 75);
      ed(d, b);
      $b(d, a * 213.5, a * 175.75, a * 25);
      ed(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(a * 0.9, "#BB0000")));
    Ⲇᐃ[23] = [];
    Ⲇᐃ[23][Sr.ΔΔⵠ] = Ea(Tm(a * 0.55, wq, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    Ⲇᐃ[23][Sr.ⲆᐃⲆ] = Ea(Tm(a * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    Ⲇᐃ[58] = [];
    Ⲇᐃ[58][Sr.ΔΔⵠ] = Ea(Cm(a * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    Ⲇᐃ[58][Sr.ⲆᐃⲆ] = Ea(Cm(a * 0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    Ⲇᐃ[25] = [];
    Ⲇᐃ[25][Sr.ΔΔⵠ] = Ea(cm(a * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    Ⲇᐃ[25][Sr.ⲆᐃⲆ] = Ea(cm(a * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    Ⲇᐃ[26] = [];
    Ⲇᐃ[26][Sr.ΔΔⵠ] = Ea(mm(a * 0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    Ⲇᐃ[26][Sr.ⲆᐃⲆ] = Ea(mm(a * 0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    Ⲇᐃ[27] = [];
    Ⲇᐃ[27][Sr.ΔΔⵠ] = Ea(fm(a * 0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    Ⲇᐃ[27][Sr.ⲆᐃⲆ] = Ea(fm(a * 0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    Ⲇᐃ[413] = [];
    Ⲇᐃ[413][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[413][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[413][Sr.ΔΔⵠ].push(Ea(em(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    Ⲇᐃ[413][Sr.ΔΔⵠ].push(Ea(Zc(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    Ⲇᐃ[413][Sr.ΔΔⵠ].push(Ea(Bc(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    Ⲇᐃ[413][Sr.ⲆᐃⲆ].push(Ea(em(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    Ⲇᐃ[413][Sr.ⲆᐃⲆ].push(Ea(Zc(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    Ⲇᐃ[413][Sr.ⲆᐃⲆ].push(Ea(Bc(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    Ⲇᐃ[449] = [];
    Ⲇᐃ[449][Sr.ΔΔⵠ] = Ea(nm(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    Ⲇᐃ[449][Sr.ⲆᐃⲆ] = Ea(nm(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    Ⲇᐃ[451] = [];
    Ⲇᐃ[451][Sr.ΔΔⵠ] = Ea(vm(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    Ⲇᐃ[451][Sr.ⲆᐃⲆ] = Ea(vm(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    Ⲇᐃ[452] = [];
    Ⲇᐃ[452][Sr.ΔΔⵠ] = Ea(dm(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    Ⲇᐃ[452][Sr.ⲆᐃⲆ] = Ea(dm(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    Ⲇᐃ[243] = [];
    Ⲇᐃ[243][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[243][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[243][Sr.ΔΔⵠ] = [Δᐃ.ⵠΔⵠΔⵠᐃⲆ, Δᐃ.ⲆΔⵠⵠᐃⵠⵠ, Δᐃ.ⵠᐃⵠΔᐃΔᐃ, Δᐃ.ⵠⲆⲆⵠⲆⵠᐃ, Δᐃ.Ⲇᐃᐃᐃᐃᐃᐃ, Δᐃ.ⵠᐃⲆΔⲆΔᐃ, Δᐃ.ΔⲆᐃⵠⲆⵠⵠ, Δᐃ.ⵠⲆΔΔⲆⵠⵠ, Δᐃ.ⲆⲆⵠⵠⵠⵠⵠ, Δᐃ.ⵠⲆΔⵠⵠΔⵠ, Δᐃ.ΔᐃⵠΔΔⵠⲆ, Δᐃ.ⲆΔᐃⵠΔⲆⲆ, Δᐃ.ⵠᐃΔⵠⵠⲆⵠ, Δᐃ.ΔΔⲆΔⲆΔᐃ, Δᐃ.ⲆΔⲆⲆᐃΔᐃ, Δᐃ.ⵠⲆΔΔⵠⵠⲆ, Δᐃ.ΔΔⵠᐃΔⲆⲆ, Δᐃ.ⲆⲆΔᐃⲆⲆᐃ, Δᐃ.ⲆΔΔⲆⵠⵠᐃ, Δᐃ.ᐃᐃⵠΔⲆⲆⵠ, Δᐃ.ⵠⲆⵠⲆⵠⵠⵠ, Δᐃ.ᐃΔΔⵠⲆⲆⵠ, Δᐃ.ᐃⵠⵠᐃΔᐃΔ, Δᐃ.ᐃⵠⵠΔΔⲆΔ, Δᐃ.ΔᐃⵠΔΔᐃⵠ, Δᐃ.ⵠΔᐃᐃᐃᐃⵠ, Δᐃ.ᐃᐃⲆⵠᐃΔΔ, Δᐃ.ⵠᐃᐃⲆⵠⲆⲆ, Δᐃ.ⵠᐃᐃΔΔᐃΔ, Δᐃ.ⵠΔᐃⲆⲆⵠᐃ, Δᐃ.ᐃⲆᐃⵠᐃⲆⲆ, Δᐃ.ΔᐃⲆᐃΔΔⵠ, Δᐃ.ⲆⲆᐃΔᐃΔⵠ, Δᐃ.ᐃⲆΔⲆΔⲆⲆ, Δᐃ.ᐃⵠᐃⵠⵠΔᐃ, Δᐃ.ⵠⲆᐃⲆⲆⲆᐃ, Δᐃ.ΔⵠⵠⲆΔΔΔ, Δᐃ.ⲆᐃΔᐃⵠᐃⵠ, Δᐃ.ⲆᐃᐃᐃⵠⲆⵠ, Δᐃ.ⲆᐃⵠΔᐃⲆⲆ, Δᐃ.ⵠᐃⲆⵠΔⲆⲆ, Δᐃ.ⵠⲆΔⲆΔⵠⵠ, Δᐃ.ⵠⲆⵠᐃᐃⵠΔ, Δᐃ.ⲆᐃᐃⵠⲆᐃΔ, Δᐃ.ⵠⵠⲆΔΔⲆΔ, Δᐃ.ᐃⵠⲆⲆᐃᐃⲆ, Δᐃ.ᐃᐃΔᐃᐃᐃᐃ, Δᐃ.ΔⲆᐃΔΔⲆⲆ, Δᐃ.ΔᐃᐃⵠᐃΔΔ, Δᐃ.ⵠⵠⲆⵠⵠΔⲆ, Δᐃ.ᐃⲆΔⲆᐃᐃⲆ, Δᐃ.ᐃⵠᐃΔⲆᐃᐃ, Δᐃ.ΔⵠΔΔᐃⵠⲆ, Δᐃ.ΔⲆⲆⲆⵠⲆⵠ, Δᐃ.ᐃⲆⲆᐃⲆⲆᐃ, Δᐃ.ᐃⵠⲆⲆᐃⵠⲆ];
    Ⲇᐃ[243][Sr.ⲆᐃⲆ] = [Δᐃ.ᐃⵠΔΔᐃᐃⲆ, Δᐃ.ⲆΔΔⲆⵠΔΔ, Δᐃ.ⲆⵠΔᐃΔᐃΔ, Δᐃ.ᐃΔᐃᐃᐃᐃⵠ, Δᐃ.ⲆΔΔΔΔⲆΔ, Δᐃ.ᐃᐃΔⵠΔⵠΔ, Δᐃ.ΔᐃⲆⵠᐃⲆᐃ, Δᐃ.ⵠΔⲆΔΔⵠⲆ, Δᐃ.ΔⵠⲆⵠᐃⲆⵠ, Δᐃ.ⵠᐃᐃΔᐃⲆⲆ, Δᐃ.ΔᐃᐃⲆⵠⲆΔ, Δᐃ.ΔᐃⵠⵠⵠᐃΔ, Δᐃ.ⲆᐃᐃⲆⲆΔᐃ, Δᐃ.ᐃᐃΔⲆᐃⲆΔ, Δᐃ.ΔⵠᐃᐃΔⲆᐃ, Δᐃ.ΔΔⲆⲆⲆΔᐃ, Δᐃ.ⲆΔⲆᐃⲆΔⵠ, Δᐃ.ᐃⲆΔⵠΔΔᐃ, Δᐃ.ΔΔⲆᐃⲆᐃΔ, Δᐃ.ΔⵠⲆΔⵠᐃᐃ, Δᐃ.ΔⵠⲆⲆⲆΔⲆ, Δᐃ.ΔⲆᐃΔⵠΔΔ, Δᐃ.ᐃΔᐃⵠⲆⵠᐃ, Δᐃ.ᐃΔΔⲆⲆⵠⵠ, Δᐃ.ⵠΔⵠⵠᐃⲆΔ, Δᐃ.ᐃΔⵠΔⵠᐃⵠ, Δᐃ.ⵠᐃⵠⵠⵠⵠᐃ, Δᐃ.ⲆᐃᐃⲆᐃⲆⵠ, Δᐃ.ⲆⵠⲆᐃᐃⵠᐃ, Δᐃ.ⲆᐃᐃⵠⲆⵠΔ, Δᐃ.ⵠΔⲆⵠⲆΔⲆ, Δᐃ.ᐃⲆΔⲆⵠΔⲆ, Δᐃ.ⲆⵠᐃΔⲆΔⵠ, Δᐃ.ⲆⵠⵠΔᐃΔⵠ, Δᐃ.ΔⵠⵠΔⲆΔΔ, Δᐃ.ⲆΔⵠⵠⲆᐃⵠ, Δᐃ.ᐃⲆⵠⵠⲆⲆΔ, Δᐃ.ᐃᐃⲆΔᐃⲆᐃ, Δᐃ.ⵠΔΔᐃⵠΔⵠ, Δᐃ.ⵠⲆΔⲆⵠⵠΔ, Δᐃ.ⲆΔΔⲆⲆᐃᐃ, Δᐃ.ⲆⲆΔᐃᐃΔⵠ, Δᐃ.ᐃⲆᐃΔⲆⲆᐃ, Δᐃ.ΔⵠΔⵠΔⵠᐃ, Δᐃ.ⵠⲆⵠⲆᐃΔᐃ, Δᐃ.ᐃΔᐃⵠᐃΔⵠ, Δᐃ.ⲆⵠΔᐃΔⲆⵠ, Δᐃ.ΔⲆⲆⵠⲆⵠΔ, Δᐃ.ⲆᐃⲆᐃⲆᐃΔ, Δᐃ.ΔᐃᐃⲆΔᐃΔ, Δᐃ.ΔⵠⲆⵠⵠΔᐃ, Δᐃ.ⵠⵠᐃΔΔⵠᐃ, Δᐃ.ⲆⵠⵠΔΔⲆⲆ, Δᐃ.ⵠⲆΔᐃⵠᐃⲆ, Δᐃ.ΔⲆΔⵠⲆΔⵠ, Δᐃ.ᐃⵠΔΔⲆΔΔ];
    Ⲇᐃ[676] = [];
    Ⲇᐃ[676][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[676][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[676][Sr.ΔΔⵠ].push(Ea(nu(a * 1.1, Qi, ["#252B28", "#747471", "#83827e"], 0)));
    Ⲇᐃ[676][Sr.ΔΔⵠ].push(Ea(nu(a * 0.9, wr, ["#252B28", "#747471", "#83827e"], 1)));
    Ⲇᐃ[676][Sr.ΔΔⵠ].push(Ea(nu(a * 1, Ur, ["#252B28", "#747471", "#83827e"], 2)));
    Ⲇᐃ[676][Sr.ΔΔⵠ].push(Ea(nu(a * 0.9, kh, ["#252B28", "#747471", "#83827e"], 2)));
    Ⲇᐃ[676][Sr.ⲆᐃⲆ].push(Ea(nu(a * 1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
    Ⲇᐃ[676][Sr.ⲆᐃⲆ].push(Ea(nu(a * 0.9, wr, ["#030d14", "#123335", "#183f3f"], 1)));
    Ⲇᐃ[676][Sr.ⲆᐃⲆ].push(Ea(nu(a * 1, false, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇᐃ[676][Sr.ⲆᐃⲆ].push(Ea(nu(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇᐃ[679] = [];
    Ⲇᐃ[679][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[679][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[679][Sr.ΔΔⵠ].push(Ea(nu(a * 1.1, il, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇᐃ[679][Sr.ΔΔⵠ].push(Ea(nu(a * 0.9, Qn, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇᐃ[679][Sr.ΔΔⵠ].push(Ea(nu(a * 1, il, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇᐃ[679][Sr.ΔΔⵠ].push(Ea(nu(a * 0.9, Qn, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇᐃ[679][Sr.ⲆᐃⲆ].push(Ea(nu(a * 1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇᐃ[679][Sr.ⲆᐃⲆ].push(Ea(nu(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇᐃ[679][Sr.ⲆᐃⲆ].push(Ea(nu(a * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇᐃ[679][Sr.ⲆᐃⲆ].push(Ea(nu(a * 0.9, Rj, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇᐃ[415] = [];
    Ⲇᐃ[415][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[415][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[415][Sr.ΔΔⵠ].push(Ea(ou(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇᐃ[415][Sr.ΔΔⵠ].push(Ea(ou(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇᐃ[415][Sr.ΔΔⵠ].push(Ea(ou(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇᐃ[415][Sr.ⲆᐃⲆ].push(Ea(ou(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇᐃ[415][Sr.ⲆᐃⲆ].push(Ea(ou(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇᐃ[415][Sr.ⲆᐃⲆ].push(Ea(ou(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇᐃ[416] = [];
    Ⲇᐃ[416][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[416][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[416][Sr.ΔΔⵠ].push(Ea(wu(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇᐃ[416][Sr.ΔΔⵠ].push(Ea(wu(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇᐃ[416][Sr.ΔΔⵠ].push(Ea(wu(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇᐃ[416][Sr.ⲆᐃⲆ].push(Ea(wu(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇᐃ[416][Sr.ⲆᐃⲆ].push(Ea(wu(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇᐃ[416][Sr.ⲆᐃⲆ].push(Ea(wu(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇᐃ[121] = [];
    Ⲇᐃ[121][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[121][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[121][Sr.ΔΔⵠ].push(Ea(Vc(a * 1.7, Ok, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇᐃ[121][Sr.ΔΔⵠ].push(Ea(Vc(a * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇᐃ[121][Sr.ΔΔⵠ].push(Ea(Vc(a * 1.3, Ro, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇᐃ[121][Sr.ⲆᐃⲆ].push(Ea(Vc(a * 1.7, uq, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇᐃ[121][Sr.ⲆᐃⲆ].push(Ea(Vc(a * 1.5, fr, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇᐃ[121][Sr.ⲆᐃⲆ].push(Ea(Vc(a * 1.3, Lr, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇᐃ[678] = [];
    Ⲇᐃ[678][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[678][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[678][Sr.ΔΔⵠ].push(Ea(Xc(a, ["#2d53c4"])));
    Ⲇᐃ[678][Sr.ⲆᐃⲆ].push(Ea(Xc(a, ["#2d53c4"])));
    Ⲇᐃ[696] = [];
    Ⲇᐃ[696][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[696][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[696][Sr.ΔΔⵠ].push(Ea(Xc(a, ["#c4912d"])));
    Ⲇᐃ[696][Sr.ⲆᐃⲆ].push(Ea(Xc(a, ["#c4912d"])));
    Ⲇᐃ[680] = [];
    Ⲇᐃ[680][Sr.ΔΔⵠ] = Ea(gm(a, ["#414040"]));
    Ⲇᐃ[680][Sr.ⲆᐃⲆ] = Ea(gm(a, ["#153635"]));
    Ⲇᐃ[508] = [];
    Ⲇᐃ[508][Sr.ΔΔⵠ] = Ea(Bu(a * 1, Ur, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇᐃ[508][Sr.ⲆᐃⲆ] = Ea(Bu(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇᐃ[509] = [];
    Ⲇᐃ[509][Sr.ΔΔⵠ] = Ea(nc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇᐃ[509][Sr.ⲆᐃⲆ] = Ea(nc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇᐃ[512] = [];
    Ⲇᐃ[512][Sr.ΔΔⵠ] = Ea(nc(a * 1, Eq, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇᐃ[512][Sr.ⲆᐃⲆ] = Ea(nc(a * 1, Cl, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇᐃ[511] = [];
    Ⲇᐃ[511][Sr.ΔΔⵠ] = Ea(mc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇᐃ[511][Sr.ⲆᐃⲆ] = Ea(mc(a * 1, Ol, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇᐃ[510] = [];
    Ⲇᐃ[510][Sr.ΔΔⵠ] = Ea(ec(a * 1, _a, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇᐃ[510][Sr.ⲆᐃⲆ] = Ea(ec(a * 1, Nq, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇᐃ[419] = [];
    Ⲇᐃ[419][Sr.ΔΔⵠ] = Ea(um(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    Ⲇᐃ[419][Sr.ⲆᐃⲆ] = Ea(um(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    Ⲇᐃ[445] = [];
    Ⲇᐃ[445][Sr.ΔΔⵠ] = Ea(om(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    Ⲇᐃ[445][Sr.ⲆᐃⲆ] = Ea(om(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    Ⲇᐃ[259] = [];
    Ⲇᐃ[818] = [];
    Ⲇᐃ[516] = [];
    Ⲇᐃ[819] = [];
    for (b = 0; b < 2; b++) {
      Ⲇᐃ[259][b] = document.createElement("canvas");
      Ⲇᐃ[259][b].width = 193;
      Ⲇᐃ[259][b].height = 193;
      Ⲇᐃ[818][b] = Ⲇᐃ[259][b].getContext("2d");
      Ⲇᐃ[516][b] = document.createElement("canvas");
      Ⲇᐃ[516][b].width = 600;
      Ⲇᐃ[516][b].height = 600;
      Ⲇᐃ[819][b] = Ⲇᐃ[516][b].getContext("2d");
    }
    Ⲇᐃ[475] = [];
    Ⲇᐃ[475][Sr.ΔΔⵠ] = Ea(gm(a, ["#c8e0de"]));
    Ⲇᐃ[475][Sr.ⲆᐃⲆ] = Ea(gm(a, ["#147071"]));
    Ⲇᐃ[476] = [];
    Ⲇᐃ[476][Sr.ΔΔⵠ] = Ea(gm(a, ["#231912"]));
    Ⲇᐃ[476][Sr.ⲆᐃⲆ] = Ea(gm(a, ["#021719"]));
    Ⲇᐃ[697] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      id(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      ed(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      id(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      ed(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      id(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      ed(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      id(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      ed(d, b[0]);
      return c;
    }(a * 0.5, ["#BB0000"]));
    Ⲇᐃ[461] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      ed(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      ed(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      ed(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    Ⲇᐃ[462] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      ed(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      ed(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      ed(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    Ⲇᐃ[463] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      ed(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      ed(d, b[0]);
      return c;
    }(a * 1, ["#BB0000"]));
    Ⲇᐃ[466] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      ed(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      ed(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      ed(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    Ⲇᐃ[467] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      ed(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      ed(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      ed(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    Ⲇᐃ[322] = Ea(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      ed(e, c, c, a);
      return d;
    }(a * 0.9, "#BB0000"));
    Ⲇᐃ[279] = Ea(hd(a * 0.6, "#BB0000"));
    Ⲇᐃ[280] = Ea(hd(a * 0.6, "#1CE7E0"));
    Ⲇᐃ[281] = Ea(hd(a * 0.6, "#DBE71C"));
    Ⲇᐃ[308] = Ea(hd(a * 0.6, "#00BB00"));
    Ⲇᐃ[602] = [];
    Ⲇᐃ[602][Sr.ΔΔⵠ] = Ea(gm(a, ["#dac291"]));
    Ⲇᐃ[602][Sr.ⲆᐃⲆ] = Ea(gm(a, ["#0D423D"]));
    Ⲇᐃ[698] = [];
    Ⲇᐃ[698][Sr.ΔΔⵠ] = Ea(gm(a, ["#dac291"]));
    Ⲇᐃ[698][Sr.ⲆᐃⲆ] = Ea(gm(a, ["#0D423D"]));
    Ⲇᐃ[788] = [];
    Ⲇᐃ[788][Sr.ΔΔⵠ] = Ea(Vm(a * 0.3, Ro, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    Ⲇᐃ[788][Sr.ⲆᐃⲆ] = Ea(Vm(a * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    Ⲇᐃ[182] = [];
    Ⲇᐃ[182][Sr.ΔΔⵠ] = Ea(Vm(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    Ⲇᐃ[182][Sr.ⲆᐃⲆ] = Ea(Vm(a * 0.3, Eh, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    Ⲇᐃ[127] = [Ea(up(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    Ⲇᐃ[128] = [Ea(up(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    Ⲇᐃ[603] = [];
    Ⲇᐃ[603][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[603][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[603][Sr.ΔΔⵠ].push(Ea($c(a * 1, ["#0B6A84"])));
    Ⲇᐃ[603][Sr.ΔΔⵠ].push(Ea(tm(a * 1, ["#0B6A84"])));
    Ⲇᐃ[603][Sr.ΔΔⵠ].push(Ea(rm(a * 1, ["#0B6A84"])));
    Ⲇᐃ[603][Sr.ΔΔⵠ].push(Ea(sm(a * 1, ["#0B6A84"])));
    Ⲇᐃ[603][Sr.ΔΔⵠ].push(Ea(am(a * 1, ["#0B6A84"])));
    Ⲇᐃ[603][Sr.ΔΔⵠ].push(Ea(hm(a * 1, ["#0B6A84"])));
    Ⲇᐃ[603][Sr.ΔΔⵠ].push(Ea(lm(a * 1, ["#0B6A84"])));
    Ⲇᐃ[603][Sr.ⲆᐃⲆ].push(Ea($c(a * 1, ["#09373F"])));
    Ⲇᐃ[603][Sr.ⲆᐃⲆ].push(Ea(tm(a * 1, ["#09373F"])));
    Ⲇᐃ[603][Sr.ⲆᐃⲆ].push(Ea(rm(a * 1, ["#09373F"])));
    Ⲇᐃ[603][Sr.ⲆᐃⲆ].push(Ea(sm(a * 1, ["#09373F"])));
    Ⲇᐃ[603][Sr.ⲆᐃⲆ].push(Ea(am(a * 1, ["#09373F"])));
    Ⲇᐃ[603][Sr.ⲆᐃⲆ].push(Ea(hm(a * 1, ["#09373F"])));
    Ⲇᐃ[603][Sr.ⲆᐃⲆ].push(Ea(lm(a * 1, ["#09373F"])));
    Ⲇᐃ[692] = [];
    Ⲇᐃ[692][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[692][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[692][Sr.ΔΔⵠ].push(Ea(Ic(a * 1.7, ["#FBEFBC"], 0)));
    Ⲇᐃ[692][Sr.ΔΔⵠ].push(Ea(Ic(a * 1.9, ["#FBEFBC"], 1)));
    Ⲇᐃ[692][Sr.ΔΔⵠ].push(Ea(Ic(a * 1.7, ["#FBEFBC"], 2)));
    Ⲇᐃ[692][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 1.7, ["#0F4C48"], 0)));
    Ⲇᐃ[692][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 1.9, ["#0F4C48"], 1)));
    Ⲇᐃ[692][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 1.7, ["#0F4C48"], 2)));
    Ⲇᐃ[694] = [];
    Ⲇᐃ[694][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[694][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[694][Sr.ΔΔⵠ].push(Ea(Ic(a * 1.8, ["#A9D6D3"], 0)));
    Ⲇᐃ[694][Sr.ΔΔⵠ].push(Ea(Ic(a * 2, ["#A9D6D3"], 1)));
    Ⲇᐃ[694][Sr.ΔΔⵠ].push(Ea(Ic(a * 1.8, ["#A9D6D3"], 2)));
    Ⲇᐃ[694][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 1.8, ["#115E60"], 0)));
    Ⲇᐃ[694][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 2, ["#115E60"], 1)));
    Ⲇᐃ[694][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 1.8, ["#115E60"], 2)));
    Ⲇᐃ[695] = [];
    Ⲇᐃ[695][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[695][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[695][Sr.ΔΔⵠ].push(Ea(Ic(a * 1.9, ["#2A8B9B"], 0)));
    Ⲇᐃ[695][Sr.ΔΔⵠ].push(Ea(Ic(a * 2.1, ["#2A8B9B"], 1)));
    Ⲇᐃ[695][Sr.ΔΔⵠ].push(Ea(Ic(a * 1.9, ["#2A8B9B"], 2)));
    Ⲇᐃ[695][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 1.9, ["#0F464C"], 0)));
    Ⲇᐃ[695][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 2.1, ["#0F464C"], 1)));
    Ⲇᐃ[695][Sr.ⲆᐃⲆ].push(Ea(Ic(a * 1.9, ["#0F464C"], 2)));
    Ⲇᐃ[693] = [];
    Ⲇᐃ[693][Sr.ΔΔⵠ] = [];
    Ⲇᐃ[693][Sr.ⲆᐃⲆ] = [];
    Ⲇᐃ[693][Sr.ΔΔⵠ].push(Ea(sc(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇᐃ[693][Sr.ΔΔⵠ].push(Ea(sc(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇᐃ[693][Sr.ΔΔⵠ].push(Ea(sc(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇᐃ[693][Sr.ⲆᐃⲆ].push(Ea(sc(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇᐃ[693][Sr.ⲆᐃⲆ].push(Ea(sc(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇᐃ[693][Sr.ⲆᐃⲆ].push(Ea(sc(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇᐃ[637] = [];
    Ⲇᐃ[637][Sr.ΔΔⵠ] = Ea(Um(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    Ⲇᐃ[637][Sr.ⲆᐃⲆ] = Ea(Um(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    Ⲇᐃ[687] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      ed(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.8, ["#B6222A"]));
    Ⲇᐃ[673] = [];
    Ⲇᐃ[673][Sr.ΔΔⵠ] = Ea(Km(a * 0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    Ⲇᐃ[673][Sr.ⲆᐃⲆ] = Ea(Km(a * 0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    Ⲇᐃ[688] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      ed(d, b[0], b[0], a * 10);
      return c;
    }(a * 0.8, ["#B6222A"]));
    Ⲇᐃ[902] = [];
    Ⲇᐃ[902][Sr.ΔΔⵠ] = Ea(wd(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    Ⲇᐃ[902][Sr.ⲆᐃⲆ] = Ea(wd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    Ⲇᐃ[903] = [];
    Ⲇᐃ[903][Sr.ΔΔⵠ] = Ea(wd(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    Ⲇᐃ[903][Sr.ⲆᐃⲆ] = Ea(wd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    Ⲇᐃ[Sr.ⲆⲆᐃⲆⲆⵠⵠ] = [];
    Ⲇᐃ[Sr.ⲆⲆᐃⲆⲆⵠⵠ][Sr.ΔΔⵠ] = Ea(wd(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    Ⲇᐃ[Sr.ⲆⲆᐃⲆⲆⵠⵠ][Sr.ⲆᐃⲆ] = Ea(wd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    Ⲇᐃ[904] = Ea(kd(a * 0.4, ["#B6222A"]));
    Ⲇᐃ[905] = Ea(kd(a * 0.4, ["#B6222A"]));
    Ⲇᐃ[Sr.ⲆⲆΔⵠⵠⲆⲆᐃⲆ] = Ea(kd(a * 0.4, ["#B6222A"]));
    Ⲇᐃ[230] = Ea(Pc(a * 0.35, wq, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    Ⲇᐃ[229] = Ea(du(a * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    Ⲇᐃ[886] = [];
    Ⲇᐃ[886][Sr.ΔΔⵠ] = Ea(Wt(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    Ⲇᐃ[886][Sr.ⲆᐃⲆ] = Ea(Wt(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    Ⲇᐃ[887] = [];
    Ⲇᐃ[887][Sr.ΔΔⵠ] = Ea(Wt(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    Ⲇᐃ[887][Sr.ⲆᐃⲆ] = Ea(Wt(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    Ⲇᐃ[894] = [];
    Ⲇᐃ[894][Sr.ΔΔⵠ] = Ea(iu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    Ⲇᐃ[894][Sr.ⲆᐃⲆ] = Ea(iu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    Ⲇᐃ[895] = [];
    Ⲇᐃ[895][Sr.ΔΔⵠ] = Ea(au(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    Ⲇᐃ[895][Sr.ⲆᐃⲆ] = Ea(au(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    Ⲇᐃ[896] = [];
    Ⲇᐃ[896][Sr.ΔΔⵠ] = Ea(iu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    Ⲇᐃ[896][Sr.ⲆᐃⲆ] = Ea(iu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    Ⲇᐃ[897] = [];
    Ⲇᐃ[897][Sr.ΔΔⵠ] = Ea(au(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    Ⲇᐃ[897][Sr.ⲆᐃⲆ] = Ea(au(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    Ⲇᐃ[888] = Ea(ku(a * 0.35, ["#B6222A"]));
    Ⲇᐃ[889] = Ea(iu(a * 0.35, 0, [Ms, "#B6222A"]));
    Ⲇᐃ[890] = Ea(au(a * 0.35, 0, [undefined, "#B6222A"]));
    Ⲇᐃ[891] = Ea(ku(a * 0.35, ["#22E066"]));
    Ⲇᐃ[892] = Ea(iu(a * 0.35, 0, [undefined, "#22E066"]));
    Ⲇᐃ[893] = Ea(au(a * 0.35, 0, [Lq, "#22E066"]));
    Ⲇᐃ[48] = [];
    Ⲇᐃ[48][Sr.ΔΔⵠ] = Ea(xu(a * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    Ⲇᐃ[48][Sr.ⲆᐃⲆ] = Ea(xu(a * 0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    Ⲇᐃ[47] = [];
    Ⲇᐃ[47][Sr.ΔΔⵠ] = Ea(qu(a * 0.45, kn, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    Ⲇᐃ[47][Sr.ⲆᐃⲆ] = Ea(qu(a * 0.45, u, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    Ⲇᐃ[141] = [];
    Ⲇᐃ[141][Sr.ΔΔⵠ] = Ea(Sm(a * 0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    Ⲇᐃ[141][Sr.ⲆᐃⲆ] = Ea(Sm(a * 0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    Ⲇᐃ[125] = [];
    Ⲇᐃ[125][Sr.ΔΔⵠ] = Ea(op(a, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    Ⲇᐃ[125][Sr.ⲆᐃⲆ] = Ea(op(a, On, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    Ⲇᐃ[221] = [];
    Ⲇᐃ[221][Sr.ΔΔⵠ] = Δᐃ.ⲆΔⲆΔⲆⲆᐃⵠⲆ;
    Ⲇᐃ[221][Sr.ⲆᐃⲆ] = Δᐃ.ⲆⲆΔΔⲆᐃⵠΔᐃ;
    Ⲇᐃ[190] = [];
    Ⲇᐃ[190][Sr.ΔΔⵠ] = Ea(cd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇᐃ[190][Sr.ⲆᐃⲆ] = Ea(cd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇᐃ[853] = [Ⲇᐃ[190]];
    Ⲇᐃ[853][1] = [];
    Ⲇᐃ[853][2] = [];
    Ⲇᐃ[853][1][Sr.ΔΔⵠ] = Ea(vd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇᐃ[853][1][Sr.ⲆᐃⲆ] = Ea(vd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇᐃ[853][2][Sr.ΔΔⵠ] = Ea(md(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇᐃ[853][2][Sr.ⲆᐃⲆ] = Ea(md(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇᐃ[49] = [];
    Ⲇᐃ[49][Sr.ΔΔⵠ] = Ea(sd(3 - Math.PI / 2, Ym(a * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    Ⲇᐃ[49][Sr.ⲆᐃⲆ] = Ea(sd(3 - Math.PI / 2, Ym(a * 0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    Ⲇᐃ[728] = [];
    Ⲇᐃ[728][Sr.ΔΔⵠ] = Ea(Fd(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    Ⲇᐃ[728][Sr.ⲆᐃⲆ] = Ea(Fd(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    Ⲇᐃ[798] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      id(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      ed(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      id(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      ed(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      id(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      ed(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      id(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      ed(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      id(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      ed(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      id(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      ed(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      id(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      ed(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      ed(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      ed(d, Fl, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      ed(d, Lq, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      ed(d, Di, b[1], a * 12);
      return c;
    }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    Ⲇᐃ[729] = Ea(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      id(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      ed(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      id(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      ed(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      id(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      ed(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      id(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      ed(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      id(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      ed(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      id(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      ed(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      id(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      ed(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      id(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      ed(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.3, ["#BB0000"]));
    Ⲇᐃ[658] = Xd(1, [{
      f: np,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇᐃ[150] = Xd(1.5, [{
      f: _m,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    Ⲇᐃ[669] = dp(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
    Ⲇᐃ[670] = dp(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    Ⲇᐃ[671] = dp(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    Ⲇᐃ[672] = dp(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ⲆⲆⵠᐃᐃⵠⲆ) {
      Ⲇᐃ[278] = Ea(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        id(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        ed(d, "#1D6055");
        d.globalAlpha = 1;
        var a = cu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(a));
    } else {
      Ⲇᐃ[278] = Ea(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        id(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        ed(d, "#1D6055");
        d.globalAlpha = 1;
        var a = cu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(a));
    }
    if (ⲆⲆⵠᐃᐃⵠⲆ) {
      Ⲇᐃ[267] = Ea(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var l = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        id(d, k, 0, f, a, h);
        ed(d, null, "#69A148", l);
        d.translate(0, j);
        id(d, k, 0, f, a, h);
        ed(d, null, "#AF352A", l);
        d.translate(0, j);
        id(d, k, 0, f, a, h);
        ed(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      Ⲇᐃ[267] = Ea(function (b) {
        var c = document.createElement("canvas");
        var e = c.getContext("2d");
        var f = b * 950;
        var i = b * 180;
        var j = b * 50;
        var a = b * 20;
        var k = b * 240;
        var m = b * 35;
        var h = b * 1;
        var l = b * 4;
        var g = b * 4;
        c.width = f;
        c.height = j;
        e.translate(0, b * 15);
        id(e, m, h, i, a, l);
        ed(e, null, "#69A148", g);
        var n = Ⲇᐃ[669];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        id(e, m, h, i, a, l);
        ed(e, null, "#AF352A", g);
        n = Ⲇᐃ[671];
        e.drawImage(n, 17, -9);
        e.translate(k, 0);
        id(e, m, h, i, a, l);
        ed(e, null, "#669BB1", g);
        n = Ⲇᐃ[670];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        id(e, m, h, i, a, l);
        ed(e, null, "#074A87", g);
        n = Ⲇᐃ[672];
        e.drawImage(n, 17, -8);
        return c;
      }(a));
    }
    if (ⲆⲆⵠᐃᐃⵠⲆ) {
      Ⲇᐃ[608] = Ea(zp(0.75));
    } else {
      Ⲇᐃ[608] = Ea(zp(a));
    }
    Ⲇᐃ[792] = Ea(cm(a * 0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    Ⲇᐃ[537] = Ea(sd(5.8, hu(a * 0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    Ⲇᐃ[283] = [];
    Ⲇᐃ[465] = [];
    for (b = 0; b < 18; b++) {
      Ⲇᐃ[465][b] = cu(a, "" + (b + 1), 12, "#FFF");
    }
    Ⲇᐃ[708] = [];
    Ⲇᐃ[708].push(Ea(kp(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    Ⲇᐃ[708].push(Ea(kp(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    Ⲇᐃ[708].push(Ea(kp(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    Ⲇᐃ[725] = [];
    Ⲇᐃ[725].push(Ea(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      $b(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      ed(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      $b(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      ed(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      ed(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      ed(c, "#3A2A0D");
      $b(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      ed(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      ed(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      ed(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      ed(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      ed(c, Lq, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      ed(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      ed(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      ed(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      ed(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      ed(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      ed(c, Bg, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      ed(c, Fl, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      ed(c, Ho, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      ed(c, ls, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      ed(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      ed(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      ed(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      ed(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      ed(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      ed(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      ed(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      ed(c, "#ECBE35", "#EDCE4F", a * 8);
      $b(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      ed(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    Ⲇᐃ[725].push(Ea(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      $b(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      ed(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      $b(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      ed(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      ed(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      ed(c, "#071A1B");
      $b(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      ed(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      ed(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      ed(c, Aa, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      ed(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      ed(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      ed(c, Es, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      ed(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      ed(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      ed(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      ed(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      ed(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      ed(c, Ak, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      ed(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      ed(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      ed(c, ls, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      ed(c, Bg, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      ed(c, Ms, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      ed(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      ed(c, Fl, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      ed(c, Fl, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      ed(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      ed(c, "#E1DDD5", "#EAE7E4", a * 8);
      $b(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      ed(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    Ⲇᐃ[726] = Ea(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      $b(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      ed(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      ed(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      id(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      ed(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      id(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      ed(c, "#C09D6F");
      $b(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      ed(c, "#C09D6F");
      return b;
    }(a * 0.22));
    Ⲇᐃ[727] = [];
    Ⲇᐃ[727].push(Ea(Jd(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
    Ⲇᐃ[727].push(Ea(Jd(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    Ⲇᐃ[727].push(Ea(Jd(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    Ⲇᐃ[546] = Δᐃ.ⵠΔᐃΔⲆᐃⵠ;
    Ⲇᐃ[547] = Δᐃ.ⲆⵠΔΔⲆᐃⵠ;
    Ⲇᐃ[548] = Δᐃ.ᐃⵠⲆⵠⲆⲆⵠ;
    Ⲇᐃ[549] = Δᐃ.ᐃⲆⵠᐃⲆⲆⲆ;
    Ⲇᐃ[517] = cu(a, "Show spectators", 25, "#FFF", Aa, undefined, "#000", 5, 220);
    Ⲇᐃ[525] = cu(a, "Reconnecting...", 30, "#FFF");
    console.log(undefined, undefined);
  }
  function Jp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      ed(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    ed(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    ed(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    ed(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    ed(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    ed(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      ed(e, undefined, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      ed(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    ed(e, Ho, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    ed(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    ed(e, undefined, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    ed(e, b[2], b[2], a * 10);
    return d;
  }
  function Mp() {
    if (!qx.ⵠⲆⵠΔ.open && !qx.ΔΔⵠⲆⲆ.open) {
      qx.ΔΔⲆᐃ.open = Fh;
      var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; px.ᐃᐃΔ[32].length > d; d++) {
          var e = px.ᐃᐃΔ[32][d];
          var f = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(e, b);
          if (f < c) {
            c = f;
            qx.ΔΔⲆᐃ.open = Vq;
            qx.ΔΔⲆᐃ.ⲆⵠᐃⲆⲆΔⵠ = e.info & 255;
            qx.ΔΔⲆᐃ.ⲆⵠⲆᐃΔ = (e.info & 65280) >> 8;
            qx.ΔΔⲆᐃ.ΔⵠΔΔ = e.ΔⵠΔΔ;
            qx.ΔΔⲆᐃ.ᐃΔᐃⲆⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = Ⲇᐃ[655];
          var a = (k = sx.ⲆᐃⲆⲆΔⵠⵠ).info.translate.x - 33;
          jp(Hn, g, a, 0);
          if (qx.ΔΔⲆᐃ.ⲆⵠᐃⲆⲆΔⵠ > 0) {
            k.ΔⵠⲆⲆ(Hn);
            if ((j = qx.ΔΔⲆᐃ.ⲆⵠᐃⲆⲆΔⵠ) > 1) {
              Gp(j, k);
            }
          }
          var j;
          var k = sx.ᐃⲆᐃᐃΔⵠⲆ;
          if (qx.ΔΔⲆᐃ.ⲆⵠⲆᐃΔ > 0) {
            k.ΔⵠⲆⲆ(Hn);
            if ((j = qx.ΔΔⲆᐃ.ⲆⵠⲆᐃΔ) > 1) {
              Gp(j, k);
            }
          }
        }
      }
    }
  }
  function Bp(b, c, d) {
    var e = Ⲇᐃ[465][b];
    var f = c.info.translate.x + ro * 5;
    var g = c.info.translate.y + ro * 5;
    if (c.info.state == gf || d) {
      g += ro * 5;
    }
    jp(Hn, e, f, g);
  }
  function Dp() {
    qx.ⵠⲆⵠΔ.id = -1;
    qx.ⵠⲆⵠΔ.lock = false;
    qx.ⵠⲆⵠΔ.locked = Nn;
    qx.ⵠⲆⵠΔ.ⵠᐃⵠⵠΔΔⲆ = false;
    qx.ⵠⲆⵠΔ.ᐃΔᐃⲆⵠⲆᐃ = rl;
    qx.ⵠⲆⵠΔ.open = Cl;
    var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
    var c = 100;
    if (b) {
      for (var d = 0; px.ᐃᐃΔ[11].length > d; d++) {
        var e = px.ᐃᐃΔ[11][d];
        var f = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(e, b);
        if (c > f) {
          c = f;
          qx.ⵠⲆⵠΔ.open = true;
          qx.ⵠⲆⵠΔ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          qx.ⵠⲆⵠΔ.ⵠΔᐃᐃ = e.info;
          qx.ⵠⲆⵠΔ.ΔⵠΔΔ = e.ΔⵠΔΔ;
          qx.ⵠⲆⵠΔ.ᐃΔᐃⲆⲆ = e.id;
          qx.ⵠⲆⵠΔ.locked = e.lock;
          qx.ⵠⲆⵠΔ.lock = !!e.lock && qx.id != e.ΔⵠΔΔ && !qx.ᐃᐃᐃⲆΔΔⲆ(e.ΔⵠΔΔ);
          qx.ⵠⲆⵠΔ.ᐃΔᐃⲆⵠⲆᐃ = qx.id !== e.ΔⵠΔΔ || qx.ⵠⲆⵠΔ.locked || qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(148) == -1 ? Ol : u;
          if (qx.ⵠⲆⵠΔ.locked && qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(158) != -1) {
            qx.ⵠⲆⵠΔ.ⵠᐃⵠⵠΔΔⲆ = Ro;
          }
        }
      }
      if (c < 100) {
        var g = Ⲇᐃ[339];
        var a = sx.ⵠΔΔ[0];
        var j = Math.floor(a.info.translate.x + (a.info.ᐃΔ[0].width - g.width) / 2);
        var k = Math.floor(a.info.translate.y + (a.info.ᐃΔ[0].height - g.height) / 2) + 3;
        jp(Hn, g, j, k);
        if ((!qx.ⵠⲆⵠΔ.lock || qx.ⵠⲆⵠΔ.ΔⵠΔΔ === qx.id) && qx.ⵠⲆⵠΔ.id >= 0) {
          (a = sx.ⵠΔΔ[qx.ⵠⲆⵠΔ.id]).ΔⵠⲆⲆ(Hn);
          var h = qx.ⵠⲆⵠΔ.ⵠΔᐃᐃ;
          if (h > 1) {
            Gp(h, a);
          }
        }
        if (qx.ⵠⲆⵠΔ.lock) {
          sx.ᐃᐃΔⲆⵠⵠᐃ.ΔⵠⲆⲆ(Hn);
        } else if (qx.ⵠⲆⵠΔ.ᐃΔᐃⲆⵠⲆᐃ) {
          sx.ⵠΔⲆⲆⲆⵠᐃ.ΔⵠⲆⲆ(Hn);
        }
        if (qx.ⵠⲆⵠΔ.ⵠᐃⵠⵠΔΔⲆ) {
          sx.ⵠⵠⵠΔΔⵠⵠ.ΔⵠⲆⲆ(Hn);
        }
      }
    }
  }
  ⵠΔⲆⲆΔ = [];
  ᐃⲆᐃᐃⵠⲆΔ = [];
  var Ep = za.console;
  function Ip() {
    var a = sx.ΔⲆⲆⲆᐃ;
    var b = a.id;
    if (a.ⲆᐃⲆⵠᐃ === 1 && a.display === 1) {
      if (ⵠΔⲆⲆΔ[b] === undefined) {
        ⵠΔⲆⲆΔ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = kb[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          Ab = 2;
          for (; Ab < e.length; Ab++) {
            f = Math.max(f, d.measureText(e[Ab]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          id(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            Ab = 2;
            for (; e.length > Ab; Ab++) {
              d.fillText(e[Ab], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ᐃⲆⵠⵠ === 1) {
        jp(Hn, ⵠΔⲆⲆΔ[b], a.x, a.y);
      } else if (a.x - 80 + ⵠΔⲆⲆΔ[b].width > Sn) {
        jp(Hn, ⵠΔⲆⲆΔ[b], Sn - ⵠΔⲆⲆΔ[b].width - 10, a.y - ⵠΔⲆⲆΔ[b].height - 10);
      } else {
        jp(Hn, ⵠΔⲆⲆΔ[b], a.x - 80, a.y - ⵠΔⲆⲆΔ[b].height - 10);
      }
    }
  }
  function Sp() {
    if (qx.ᐃⵠΔⲆⵠⲆΔ) {
      Hn.globalAlpha = 0.5;
      Hn.fillStyle = "#000";
      Hn.fillRect(0, 0, Sn, Zn);
      Hn.globalAlpha = 0.8;
      var b = Ⲇᐃ[516][px.time];
      var c = $n - b.width / 2;
      var d = _n - b.height / 2;
      jp(Hn, b, c, d);
      Hn.globalAlpha = 1;
      if (sx.ⵠⲆⵠΔⵠ.ΔⵠΔⲆΔⲆΔ.x > -1) {
        Hn.fillStyle = "#660000";
        $b(Hn, c + sx.ⵠⲆⵠΔⵠ.ΔⵠΔⲆΔⲆΔ.x * 3 * ro, d + ro * (sx.ⵠⲆⵠΔⵠ.ΔⵠΔⲆΔⲆΔ.y * 3), ro * 14);
        Hn.fill();
      }
      for (var e = sx.ⵠⲆⵠΔⵠ.ΔΔᐃᐃ, f = 0; f < e.length; f++) {
        var g = e[f];
        px.time;
        Hn.fillStyle = "#ff0000";
        $b(Hn, c + g.x / (px.ᐃⲆⲆᐃⲆ * 100) * 600 * ro, d + g.y / (px.ⲆⲆⲆᐃᐃ * 100) * 600 * ro, ro * 6);
        Hn.fill();
      }
      var h = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      if (h) {
        Hn.fillStyle = px.time ? "#fff" : "#e39716";
        $b(Hn, c + h.x / (px.ᐃⲆⲆᐃⲆ * 100) * 600 * ro, d + h.y / (px.ⲆⲆⲆᐃᐃ * 100) * 600 * ro, ro * 12);
        Hn.fill();
      }
    }
  }
  function Qp() {
    qx.ⲆᐃΔΔⲆ.open = false;
    var a = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
    var b = 100;
    if (a) {
      for (var c = 0; c < px.ᐃᐃΔ[22].length; c++) {
        var d = px.ᐃᐃΔ[22][c];
        var e = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(d, a);
        if (e < b) {
          b = e;
          qx.ⲆᐃΔΔⲆ.open = Ro;
          qx.ⲆᐃΔΔⲆ.ΔⵠΔΔ = d.ΔⵠΔΔ;
          qx.ⲆᐃΔΔⲆ.ᐃΔᐃⲆⲆ = d.id;
        }
      }
      if (b < 100) {
        sx.ⲆᐃΔΔⲆ.ΔⵠⲆⲆ(Hn);
      }
    }
  }
  function _p() {
    if (!qx.ⵠⲆⵠΔ.open && !qx.ΔΔⵠⲆⲆ.open && !qx.ΔΔⲆᐃ.open && !qx.ⲆⲆᐃΔ.open && !qx.ΔΔΔⵠ.open) {
      qx.sign.open = false;
      var a = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      var b = 100;
      if (a) {
        for (var c = 0; px.ᐃᐃΔ[36].length > c; c++) {
          var d = px.ᐃᐃΔ[36][c];
          var e = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(d, a);
          if (e < b && d.info === 0 && qx.id === d.ΔⵠΔΔ) {
            qx.sign.open = true;
            b = e;
            qx.sign.ᐃΔᐃⲆⲆ = d.id;
          }
        }
        if (b < 100) {
          sx.sign.button.ΔⵠⲆⲆ(Hn);
        }
      }
    }
  }
  function Fp() {
    if (!qx.ⵠⲆⵠΔ.open) {
      qx.ΔΔⵠⲆⲆ.ⵠΔᐃᐃ = 0;
      qx.ΔΔⵠⲆⲆ.open = Nn;
      var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < px.ᐃᐃΔ[18].length; d++) {
          var e = px.ᐃᐃΔ[18][d];
          var f = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(e, b);
          if (f < c) {
            c = f;
            qx.ΔΔⵠⲆⲆ.open = true;
            qx.ΔΔⵠⲆⲆ.ⵠΔᐃᐃ = e.info;
            qx.ΔΔⵠⲆⲆ.ΔⵠΔΔ = e.ΔⵠΔΔ;
            qx.ΔΔⵠⲆⲆ.ᐃΔᐃⲆⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = Ⲇᐃ[411];
          var a = sx.ⵠⵠᐃᐃⵠⲆⵠ;
          var j = Math.floor(a.info.translate.x + (a.info.ᐃΔ[0].width - g.width) / 2);
          var k = Math.floor(a.info.translate.y + (a.info.ᐃΔ[0].height - g.height) / 2) + 3;
          jp(Hn, g, j, k);
          if (qx.ΔΔⵠⲆⲆ.ⵠΔᐃᐃ > 0) {
            a.ΔⵠⲆⲆ(Hn);
            var h = qx.ΔΔⵠⲆⲆ.ⵠΔᐃᐃ;
            if (h > 1) {
              Gp(h, a);
            }
          }
        }
      }
    }
  }
  function Rp() {
    qx.Δⵠⵠᐃᐃ.id = -1;
    qx.Δⵠⵠᐃᐃ.ΔⵠΔΔ = -1;
    if (!qx.ⲆΔᐃΔⲆⵠΔ && !qx.Δⵠⵠᐃᐃ.wait && !qx.ᐃⲆⵠΔᐃ) {
      var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < px.ᐃᐃΔ[29].length; d++) {
          var e = px.ᐃᐃΔ[29][d];
          var f = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(e, b);
          if (f < c) {
            c = f;
            qx.Δⵠⵠᐃᐃ.id = e.id;
            qx.Δⵠⵠᐃᐃ.ΔⵠΔΔ = e.ΔⵠΔΔ;
            qx.Δⵠⵠᐃᐃ.info = e.info;
            qx.Δⵠⵠᐃᐃ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = sx.ᐃᐃᐃⵠⵠ;
      sx.ᐃᐃᐃⵠⵠ = -1;
      if (qx.Δⵠⵠᐃᐃ.ΔⵠΔΔ == -1 || qx.ⵠΔΔΔΔ.length != 0 && qx.id != qx.Δⵠⵠᐃᐃ.ΔⵠΔΔ) {
        if (qx.ⵠΔΔΔΔ.length != 0 && qx.ⵠΔΔΔΔ[0] != qx.id) {
          sx.ᐃᐃᐃⵠⵠ = 2;
        } else if (qx.ⵠΔΔΔΔ.length != 0 && qx.id == qx.ⵠΔΔΔΔ[0]) {
          sx.ᐃᐃᐃⵠⵠ = 1;
        } else if (qx.ⵠΔΔΔΔ.length != 0) {
          sx.ᐃᐃᐃⵠⵠ = 3;
        }
      } else if (qx.ⵠΔΔΔΔ.length == 0 && qx.Δⵠⵠᐃᐃ.info >= 8) {
        sx.ᐃᐃᐃⵠⵠ = 4;
      } else if (qx.ⵠΔΔΔΔ.length == 0) {
        sx.ᐃᐃᐃⵠⵠ = 3;
      } else {
        sx.ᐃᐃᐃⵠⵠ = 0;
      }
      if (sx.ᐃᐃᐃⵠⵠ != -1) {
        sx.ⵠⲆⲆⲆⵠ[sx.ᐃᐃᐃⵠⵠ].button.ΔⵠⲆⲆ(Hn);
      }
      var a = document.getElementById("team_box").style;
      if (sx.ᐃᐃᐃⵠⵠ != -1 && sx.ᐃᐃᐃⵠⵠ != g && a.display == "inline-block") {
        sx.ⵠⲆⲆⲆⵠ[sx.ᐃᐃᐃⵠⵠ].action();
      }
    }
  }
  function jp(b, c, d, e, f, g, a, i, j, h) {
    if (c.ⵠΔⲆⲆΔΔⵠ === undefined || c.ⵠΔⲆⲆΔΔⵠ() === 1) {
      if (Fr !== h) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
      } else if (g !== Ho) {
        b.drawImage(c, d, e, f, g);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Lp() {
    if (!qx.ⵠⲆⵠΔ.open && !qx.ΔΔⵠⲆⲆ.open && !qx.ΔΔⲆᐃ.open && !qx.ΔΔΔⵠ.open) {
      qx.ⲆⲆᐃΔ.open = fk;
      var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; px.ᐃᐃΔ[34].length > d; d++) {
          var e = px.ᐃᐃΔ[34][d];
          var f = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(e, b);
          if (f < c) {
            c = f;
            qx.ⲆⲆᐃΔ.open = true;
            qx.ⲆⲆᐃΔ.ⵠᐃᐃΔΔΔΔ = e.info & 31;
            qx.ⲆⲆᐃΔ.ⲆⵠⲆᐃΔ = (e.info & 992) >> 5;
            qx.ⲆⲆᐃΔ.ⲆΔΔΔΔΔⲆ = (e.info & 31744) >> 10;
            qx.ⲆⲆᐃΔ.ΔⵠΔΔ = e.ΔⵠΔΔ;
            qx.ⲆⲆᐃΔ.ᐃΔᐃⲆⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = Ⲇᐃ[722];
          var a = (j = sx.ᐃᐃⵠⵠⵠⵠᐃ).info.translate.x - 32;
          jp(Hn, g, a, 0);
          if (qx.ⲆⲆᐃΔ.ⵠᐃᐃΔΔΔΔ > 0) {
            j.ΔⵠⲆⲆ(Hn);
            if ((k = qx.ⲆⲆᐃΔ.ⵠᐃᐃΔΔΔΔ) > 1) {
              Gp(k, j);
            }
          }
          var j = sx.ᐃⲆⵠᐃⵠᐃⵠ;
          if (qx.ⲆⲆᐃΔ.ⲆΔΔΔΔΔⲆ > 0) {
            j.ΔⵠⲆⲆ(Hn);
            if ((k = qx.ⲆⲆᐃΔ.ⲆΔΔΔΔΔⲆ) > 1) {
              Gp(k, j);
            }
          }
          var k;
          j = sx.ⲆᐃΔⵠⲆᐃΔ;
          if (qx.ⲆⲆᐃΔ.ⲆⵠⲆᐃΔ > 0) {
            j.ΔⵠⲆⲆ(Hn);
            if ((k = qx.ⲆⲆᐃΔ.ⲆⵠⲆᐃΔ) > 1) {
              Gp(k, j);
            }
          }
        }
      }
    }
  }
  function Gp(a, b) {
    Ⲇᐃ[283][a] ||= cu(ro, "x" + a, 17, "#FFF");
    var c = Ⲇᐃ[283][a];
    var d = b.info.translate.x + b.info.ᐃΔ[0].width - c.width - ro * 14;
    var e = b.info.translate.y + b.info.ᐃΔ[0].height - c.height - ro * 19;
    if (gf == b.info.state) {
      e += ro * 5;
    }
    jp(Hn, c, d, e);
  }
  function Wp() {
    if (!qx.ⵠⲆⵠΔ.open && !qx.ΔΔⵠⲆⲆ.open) {
      qx.ΔΔΔⵠ.open = false;
      var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < Sf.length; d++) {
          for (var e = Sf[d][0], f = Sf[d][1], j = 0; px.ᐃᐃΔ[e].length > j; j++) {
            var k = px.ᐃᐃΔ[e][j];
            var m = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(k, b);
            if (c > m) {
              c = m;
              qx.ΔΔΔⵠ.ⲆⵠⵠΔⵠⵠⲆ = f;
              qx.ΔΔΔⵠ.type = e;
              qx.ΔΔΔⵠ.open = Lr;
              qx.ΔΔΔⵠ.ⵠᐃᐃΔΔΔΔ = k.info & 255;
              qx.ΔΔΔⵠ.ᐃᐃᐃⵠᐃⵠΔ = (k.info & 65280) >> 8;
              qx.ΔΔΔⵠ.ΔⵠΔΔ = k.ΔⵠΔΔ;
              qx.ΔΔΔⵠ.ᐃΔᐃⲆⲆ = k.id;
            }
          }
        }
        if (c < 100) {
          var p;
          var q = Ⲇᐃ[656];
          var l = (g = sx.ⵠⵠⵠᐃⵠΔΔ).info.translate.x - 33;
          jp(Hn, q, l, 0);
          if (qx.ΔΔΔⵠ.ⵠᐃᐃΔΔΔΔ > 0) {
            g.ΔⵠⲆⲆ(Hn);
            if ((p = qx.ΔΔΔⵠ.ⵠᐃᐃΔΔΔΔ) > 1) {
              Gp(p, g);
            }
          }
          switch (qx.ΔΔΔⵠ.ⲆⵠⵠΔⵠⵠⲆ) {
            case 108:
              var g = sx.ᐃΔⵠⲆΔΔⲆ;
              break;
            case 111:
              g = sx.ΔⲆⲆⵠᐃⲆⲆ;
              break;
            case 112:
              g = sx.ⵠⲆᐃᐃⲆᐃᐃ;
              break;
            case 121:
              g = sx.ᐃΔΔⵠᐃΔⲆ;
              break;
            case 202:
              g = sx.ⲆⲆΔⲆⲆⲆᐃ;
          }
          if (qx.ΔΔΔⵠ.ᐃᐃᐃⵠᐃⵠΔ > 0) {
            g.ΔⵠⲆⲆ(Hn);
            if ((p = qx.ΔΔΔⵠ.ᐃᐃᐃⵠᐃⵠΔ) > 1) {
              Gp(p, g);
            }
          }
        }
      }
    }
  }
  function Op() {
    if (qx.reconnect.enabled) {
      Hn.globalAlpha = 0.9;
      Hn.fillStyle = "#000";
      id(Hn, $n - 150, _n - 90, 300, 180, 15);
      Hn.fill();
      Hn.globalAlpha = 1;
      var a = Ⲇᐃ[301];
      Hn.save();
      qx.reconnect.rotate = (qx.reconnect.rotate + xx * 2) % (Math.PI * 2);
      Hn.translate(Sn / 2, Zn / 2 - 25);
      Hn.rotate(qx.reconnect.rotate);
      jp(Hn, a, -a.width / 2, -a.height / 2);
      Hn.restore();
      a = Ⲇᐃ[525];
      jp(Hn, a, (Sn - a.width) / 2, (Zn - a.height) / 2 + 25);
    }
  }
  Ep.log = Ep.info = Ep.error = Ep.warn = Ep.debug = Ep.ⵠⲆⲆᐃⵠᐃᐃᐃΔ = Ep.trace = Ep.time = Ep.timeEnd = function () { };
  const Np = 3;
  function qp() {
    if (qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ.length > 0) {
      var b = {
        x: sx.ⵠⲆⵠΔⵠ.translate.x,
        y: sx.ⵠⲆⵠΔⵠ.translate.y - ro * 120
      };
    } else {
      b = {
        x: sx.ⵠⲆⵠΔⵠ.translate.x,
        y: sx.ⵠⲆⵠΔⵠ.translate.y - ro * 50
      };
    }
    Hn.globalAlpha = 0.8;
    var c = Ⲇᐃ[259][px.time];
    jp(Hn, c, b.x, b.y);
    Hn.globalAlpha = 1;
    if (sx.ⵠⲆⵠΔⵠ.ΔⵠΔⲆΔⲆΔ.x > -1) {
      Hn.fillStyle = "#660000";
      $b(Hn, b.x + sx.ⵠⲆⵠΔⵠ.ΔⵠΔⲆΔⲆΔ.x * ro, b.y + ro * sx.ⵠⲆⵠΔⵠ.ΔⵠΔⲆΔⲆΔ.y, ro * 5);
      Hn.fill();
    }
    var d = ro;
    for (var f = sx.ⵠⲆⵠΔⵠ.ΔΔᐃᐃ, g = 0; g < f.length; g++) {
      var h = f[g];
      px.time;
      Hn.fillStyle = "#ff0000";
      $b(Hn, b.x + h.x / (px.ᐃⲆⲆᐃⲆ * 100) * 193 * ro, b.y + ro * (h.y / (px.ⲆⲆⲆᐃᐃ * 100) * 193), ro * 2);
      Hn.fill();
    }
    var i = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
    if (i) {
      Hn.fillStyle = px.time ? "#fff" : "#e39716";
      $b(Hn, b.x + ro * (i.x / (px.ᐃⲆⲆᐃⲆ * 100) * 193), b.y + i.y / (px.ⲆⲆⲆᐃᐃ * 100) * 193 * ro, ro * 4);
      Hn.fill();
    }
    ro = d;
  }
  var Hp = [];
  function Up() {
    var a = qx.ⵠⵠⲆΔⲆ;
    if (a.wait) {
      var b = a.timeout.ᐃΔΔ();
      Hn.save();
      var c = Ⲇᐃ[792];
      Hn.translate(c.width - ro * 2, sx.ⵠⲆⲆⵠ.translate.y - ro * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      jp(Hn, c, d, e);
      Hn.beginPath();
      Hn.lineWidth = ro * 5;
      Hn.strokeStyle = Sr.ⲆᐃⲆⵠΔᐃⲆ[px.time];
      Hn.lineCap = "round";
      Hn.arc(9, e + c.height / 2, ro * 25, 0, a.timeout.ⵠΔⵠ * (Math.PI * 2));
      Hn.stroke();
      Hn.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⵠΔⵠ = 0;
        a.timeout.ⲆᐃΔ = false;
      }
    }
  }
  function Yp() {
    var a = qx.ΔⵠⲆⲆΔ;
    if (a.wait) {
      var b = a.timeout.ᐃΔΔ();
      Hn.save();
      var c = Ⲇᐃ[537];
      Hn.translate(c.width - ro * 2, sx.ⵠⲆⲆⵠ.translate.y - ro * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      jp(Hn, c, d, e);
      Hn.beginPath();
      Hn.lineWidth = ro * 5;
      Hn.strokeStyle = Sr.ⵠⵠΔⲆⵠⲆᐃ[px.time];
      Hn.lineCap = "round";
      Hn.arc(0, e + c.height / 2, ro * 25, 0, Math.PI * 2 * a.timeout.ⵠΔⵠ);
      Hn.stroke();
      Hn.restore();
      if (b) {
        a.wait = zj;
        a.timeout.ⵠΔⵠ = 0;
        a.timeout.ⲆᐃΔ = zj;
      }
    }
  }
  function Kp() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[321][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function Vp(a) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var b = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
      var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    ᐃΔ = Ⲇᐃ[a][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2 + c, -ᐃⲆᐃ / 2 + d, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function Xp() {
    Hn.save();
    var a = ro;
    if (qx.ⵠⲆⲆⵠ.ⲆⲆΔᐃⵠ.x < 0.25) {
      Hn.globalAlpha = qx.ⵠⲆⲆⵠ.ⲆⵠΔⵠⵠⲆᐃ.ⵠΔⵠ;
    }
    var b = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ.length > 0 ? -70 : 0;
    if (qx.ⵠⲆⵠΔ.open || qx.ΔΔⵠⲆⲆ.open && qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(109) != -1 || qx.ΔΔⲆᐃ.open && qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(134) != -1 || qx.ΔΔΔⵠ.open && qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(109) != -1 || qx.ΔⲆⲆⵠΔ.open && qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(180) != -1 || qx.ⲆⲆᐃΔ.open && (qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(109) != -1 || qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(131) != -1)) {
      b -= ro * 50;
    }
    Hn.translate((Sn - ro * 950) / 2, b);
    Hn.fillStyle = "#69A148";
    Hn.fillRect(this.translate.x + ro * 37, this.translate.y + ro * 17, ro * (qx.ⵠⲆⲆⵠ.ⲆⲆΔᐃⵠ.x * 178), ro * 18);
    Hn.globalAlpha = 1;
    if (qx.ⵠⲆⲆⵠ.ᐃⵠⵠⲆΔᐃⲆ.x < 0.35) {
      Hn.fillStyle = "#8F050A";
      Hn.globalAlpha = qx.ⵠⲆⲆⵠ.ⵠΔᐃⲆᐃΔΔ.ⵠΔⵠ;
      Hn.fillRect(this.translate.x + ro * 277, this.translate.y + ro * 17, ro * 178, ro * 18);
      Hn.globalAlpha = 1;
    }
    Hn.fillStyle = "#AF352A";
    Hn.fillRect(this.translate.x + ro * 277, this.translate.y + ro * 17, ro * (qx.ⵠⲆⲆⵠ.ᐃⵠⵠⲆΔᐃⲆ.x * 178), ro * 18);
    if (qx.ⵠⲆⲆⵠ.ⵠᐃⲆΔᐃ.x < 0.35) {
      Hn.fillStyle = "#366B91";
      Hn.globalAlpha = qx.ⵠⲆⲆⵠ.ⲆΔΔⵠᐃΔⲆ.ⵠΔⵠ;
      Hn.fillRect(this.translate.x + ro * 517, this.translate.y + ro * 17, ro * 178, ro * 18);
      Hn.globalAlpha = 1;
    }
    Hn.fillStyle = "#669BB1";
    Hn.fillRect(this.translate.x + ro * 517, this.translate.y + ro * 17, qx.ⵠⲆⲆⵠ.ⵠᐃⲆΔᐃ.x * 178 * ro, ro * 18);
    if (qx.ⵠⲆⲆⵠ.ⵠᐃⲆΔᐃ.x > 0.99) {
      if (qx.ⵠⲆⲆⵠ.ΔⲆΔᐃⵠⵠΔ.x < 0.35) {
        Hn.fillStyle = "#6C4036";
        Hn.globalAlpha = qx.ⵠⲆⲆⵠ.ΔᐃⵠⵠᐃⲆⲆ.ⵠΔⵠ;
        Hn.fillRect(this.translate.x + ro * 517, this.translate.y + ro * 17, ro * 178, ro * 18);
        Hn.globalAlpha = 1;
      }
      Hn.fillStyle = "#9C4036";
      Hn.fillRect(this.translate.x + ro * 517, this.translate.y + ro * 17, (1 - qx.ⵠⲆⲆⵠ.ΔⲆΔᐃⵠⵠΔ.x) * 178 * ro, ro * 18);
    }
    if (qx.ⵠⲆⲆⵠ.ⲆⲆΔⵠᐃⵠΔ.x < 0.35) {
      Hn.fillStyle = "#001A57";
      Hn.globalAlpha = qx.ⵠⲆⲆⵠ.ΔᐃΔⲆⲆᐃᐃ.ⵠΔⵠ;
      Hn.fillRect(this.translate.x + ro * 757, this.translate.y + ro * 17, ro * 178, ro * 18);
      Hn.globalAlpha = 1;
    }
    Hn.fillStyle = "#074A87";
    Hn.fillRect(this.translate.x + ro * 757, this.translate.y + ro * 17, ro * (qx.ⵠⲆⲆⵠ.ⲆⲆΔⵠᐃⵠΔ.x * 178), ro * 18);
    ro = a;
    jp(Hn, this.ᐃΔ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Hn.restore();
    if (qx.ⵠⲆⲆⵠ.ΔᐃᐃⲆᐃΔⲆ.x < 0.99) {
      var c = Math.floor($n - Ⲇᐃ[608].width / 2);
      b += this.translate.y - Ⲇᐃ[608].height - ro * 5;
      Hn.fillStyle = "#BBE8EF";
      Hn.fillRect(c + 5, b + ro * 5, qx.ⵠⲆⲆⵠ.ΔᐃᐃⲆᐃΔⲆ.x * (ro * 588), ro * 10);
      if (qx.ⵠⲆⲆⵠ.ΔᐃᐃⲆᐃΔⲆ.x < 0.35) {
        Hn.fillStyle = "#9BA8AF";
        Hn.globalAlpha = qx.ⵠⲆⲆⵠ.ⵠᐃΔΔΔΔⲆ.ⵠΔⵠ;
        Hn.fillRect(c + 5, b + 5, ro * 588, ro * 10);
        Hn.globalAlpha = 1;
      }
      jp(Hn, Ⲇᐃ[608], c, b);
      this.y = b;
    }
  }
  function Zp() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && rl == this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var a = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
      var b = a * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var c = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    ᐃΔ = Ⲇᐃ[167][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2 + b, -ᐃⲆᐃ / 2 + c, ΔΔᐃ, ᐃⲆᐃ);
    if (this.lock) {
      ᐃΔ = Ⲇᐃ[148][px.time];
      ΔΔᐃ = -ᐃΔ.width;
      ᐃⲆᐃ = -ᐃΔ.height;
      jp(Hn, ᐃΔ, -ΔΔᐃ / 2 + b - ro * 1, -ᐃⲆᐃ / 2 + c, ΔΔᐃ, ᐃⲆᐃ);
    }
    Hn.restore();
  }
  function $p(a) {
    if ((a = a / 100) <= 0.95) {
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
      Hn.rotate(this.angle);
      if (this.ⲆⲆⲆ.ᐃΔΔ) {
        if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
          this.ⲆⲆⲆ.ᐃΔΔ = false;
        }
        var b = ro * ((1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600);
        var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
        var d = b * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      Hn.globalAlpha = 0.5;
      ad(Hn, c, d, ro * 28, a);
      ed(Hn, null, "#000000", ro * 18);
      Hn.globalAlpha = 1;
      ad(Hn, c, d, ro * 28, a);
      ed(Hn, null, Sr.ΔᐃᐃⲆⲆᐃⵠ[px.time], ro * 6);
      Hn.restore();
    }
  }
  function Eu(a) {
    if ((a = a / 100) <= 0.8) {
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
      Hn.rotate(this.angle);
      if (this.ⲆⲆⲆ.ᐃΔΔ) {
        if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && _a == this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ) {
          this.ⲆⲆⲆ.ᐃΔΔ = nl;
        }
        var b = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
        var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
        var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Hn.globalAlpha = 0.5;
      ad(Hn, c, d, ro * 18, a);
      ed(Hn, null, "#000000", ro * 18);
      Hn.globalAlpha = 1;
      ad(Hn, c, d, ro * 18, a);
      ed(Hn, null, Sr.ΔΔᐃⵠⲆΔᐃ[px.time], ro * 6);
      Hn.restore();
    }
  }
  function Fu(b) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == Cl) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var c = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
      var d = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * c;
      var e = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !px.transition) {
      var f = 0;
      for (var g = px.ᐃᐃΔ[0], a = 0; a < g.length; a++) {
        var h = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - xx / 1.5) : Math.min(1, this.opacity + xx / 1.5);
      Hn.globalAlpha = this.opacity;
    }
    ᐃΔ = Ⲇᐃ[b][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2 + d, -ᐃⲆᐃ / 2 + e, ΔΔᐃ, ᐃⲆᐃ);
    Hn.globalAlpha = 1;
    Hn.restore();
  }
  function Gu() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[239][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function Hu() {
    var b = qx.Δⵠⵠᐃᐃ;
    if (b.wait) {
      var c = b.timeout.ᐃΔΔ();
      Hn.save();
      var d = Ⲇᐃ[562];
      var e = Ⲇᐃ[537].height + ro * 25;
      Hn.translate(d.width, sx.ⵠⲆⲆⵠ.translate.y - ro * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      jp(Hn, d, f + 2, g);
      Hn.beginPath();
      Hn.lineWidth = ro * 5;
      Hn.strokeStyle = Sr.ⵠⵠΔⲆⵠⲆᐃ[px.time];
      Hn.lineCap = "round";
      Hn.arc(0, g + d.height / 2, ro * 25, 0, b.timeout.ⵠΔⵠ * (Math.PI * 2));
      Hn.stroke();
      Hn.restore();
      if (c) {
        b.wait = false;
        b.timeout.ⵠΔⵠ = 0;
        b.timeout.ⲆᐃΔ = kh;
      }
    }
  }
  function Iu(a) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = Nn;
      }
      var b = ro * ((1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600);
      var c = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.ᐃΔⵠⲆΔ.ᐃΔΔ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ᐃΔ = Ⲇᐃ[872][Math.floor(this.id + this.color) % 5][px.time];
    ΔΔᐃ = -ᐃΔ.width * this.ᐃΔⵠⲆΔ.ⵠΔⵠ;
    ᐃⲆᐃ = this.ᐃΔⵠⲆΔ.ⵠΔⵠ * -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2 + c, -ᐃⲆᐃ / 2 + d, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function Ju() {
    for (var b = qx.ⵠⲆΔⲆ, c = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ], d = 0; b.ⲆΔΔⵠᐃ.length > d; d++) {
      var e = b.ⲆΔΔⵠᐃ[d];
      var f = false;
      if ((c = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ]) && (c.right == e.id || e.id == c.ᐃΔⲆⵠᐃ && c.ᐃΔⲆⵠᐃ > 0)) {
        f = lj;
        jp(Hn, e.info.ᐃΔ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ΔⵠⲆⲆ(Hn);
      }
      var g = qx.ⵠⲆΔⲆ.ⵠᐃⵠ[e.id];
      if (g > 1) {
        Gp(g, e);
      }
      if (g > 0) {
        Bp(d, e, f);
      }
      var h = qx.ⵠⲆⵠΔ;
      if (!!h.open && (h.id < 0 || h.id == e.id) && (!h.lock || qx.id == h.ΔⵠΔΔ)) {
        sx.ΔⲆⵠⲆⲆ[e.id].ΔⵠⲆⲆ(Hn);
      }
      if (qx.ΔΔⵠⲆⲆ.open && e.id == 109) {
        sx.ΔⲆⵠⲆⲆ[e.id].ΔⵠⲆⲆ(Hn);
      }
      if (qx.ΔⲆⲆⵠΔ.open && e.id == 180) {
        sx.ΔⲆⵠⲆⲆ[e.id].ΔⵠⲆⲆ(Hn);
      }
      if (qx.ΔΔⲆᐃ.open && e.id == 134) {
        sx.ΔⲆⵠⲆⲆ[e.id].ΔⵠⲆⲆ(Hn);
      }
      if (qx.ΔΔΔⵠ.open && e.id == 109) {
        sx.ΔⲆⵠⲆⲆ[e.id].ΔⵠⲆⲆ(Hn);
      }
      if (qx.ⲆⲆᐃΔ.open && (e.id == 109 || e.id == 131)) {
        sx.ΔⲆⵠⲆⲆ[e.id].ΔⵠⲆⲆ(Hn);
      }
    }
    if (e && d < b.max) {
      var j = Ⲇᐃ[334][2];
      ᐃⲆ = e.info.translate.x;
      ⲆΔᐃ = e.info.translate.y;
      ᐃⵠᐃⲆ = 1;
      for (; b.max > d; d++, ᐃⵠᐃⲆ++) {
        jp(Hn, j, ᐃⲆ + (j.width + 5) * ᐃⵠᐃⲆ, ⲆΔᐃ);
      }
    }
  }
  function Ku() {
    var a = qx.ΔⲆⵠᐃΔ;
    if (a.wait) {
      var b = a.timeout.ᐃΔΔ();
      Hn.save();
      var c = Ⲇᐃ[794];
      Hn.translate(c.width - ro * 12, sx.ⵠⲆⲆⵠ.translate.y - ro * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      jp(Hn, c, d, e);
      Hn.beginPath();
      Hn.lineWidth = ro * 5;
      Hn.strokeStyle = Sr.ⲆᐃⲆⵠΔᐃⲆ[px.time];
      Hn.lineCap = "round";
      Hn.arc(9, e + c.height / 2, ro * 25, 0, a.timeout.ⵠΔⵠ * (Math.PI * 2));
      Hn.stroke();
      Hn.restore();
      if (b) {
        a.wait = Eq;
        a.timeout.ⵠΔⵠ = 0;
        a.timeout.ⲆᐃΔ = false;
      }
    }
  }
  function Lu() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[837][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function Mu() {
    var a = -8;
    if (qx.ᐃⵠᐃᐃΔ.enabled) {
      var b = Ⲇᐃ[546];
      jp(Hn, b, qx.ᐃⵠᐃᐃΔ.translate.x, qx.ᐃⵠᐃᐃΔ.translate.y + a);
      a += 70;
    }
    if (qx.ᐃᐃⵠⵠᐃⲆⵠ === 1) {
      b = Ⲇᐃ[549];
      jp(Hn, b, qx.ᐃⵠᐃᐃΔ.translate.x, qx.ᐃⵠᐃᐃΔ.translate.y + a);
      a += 70;
    } else if (qx.ⵠⲆⲆⵠ.ⵠᐃⲆΔᐃ.x < 0.25 || qx.ⵠⲆⲆⵠ.ᐃⵠⵠⲆΔᐃⲆ.x < 0.25 || qx.ⵠⲆⲆⵠ.ⲆⲆΔⵠᐃⵠΔ.x < 0.25 || qx.ⵠⲆⲆⵠ.ΔᐃᐃⲆᐃΔⲆ.x < 0.25 || qx.ⵠⲆⲆⵠ.ΔⲆΔᐃⵠⵠΔ.x < 0.25) {
      b = Ⲇᐃ[548];
      jp(Hn, b, qx.ᐃⵠᐃᐃΔ.translate.x, qx.ᐃⵠᐃᐃΔ.translate.y + a);
      a += 70;
    }
    if (qx.ᐃᐃⲆⵠΔ > 0) {
      b = Ⲇᐃ[547];
      jp(Hn, b, qx.ᐃⵠᐃᐃΔ.translate.x, qx.ᐃⵠᐃᐃΔ.translate.y + a);
      var c = Hp[qx.ᐃᐃⲆⵠΔ];
      if (Bg === c) {
        c = cu(ro, qx.ᐃᐃⲆⵠΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        Hp[qx.ᐃᐃⲆⵠΔ] = c;
      }
      if (qx.ᐃᐃⲆⵠΔ < 9) {
        jp(Hn, c, qx.ᐃⵠᐃᐃΔ.translate.x - 39, qx.ᐃⵠᐃᐃΔ.translate.y + a + 20);
      } else {
        jp(Hn, c, qx.ᐃⵠᐃᐃΔ.translate.x - 46, qx.ᐃⵠᐃᐃΔ.translate.y + a + 20);
      }
    }
  }
  function Pu() {
    var b = qx.ΔᐃⲆⲆⵠ;
    var c = sx.ᐃᐃΔᐃ;
    if (b.ᐃΔΔ) {
      b.ᐃΔΔ = Fh;
      var d = b.ⲆᐃΔΔΔ;
      var e = c.ⲆΔ.width;
      var f = c.ⲆΔ.height;
      var g = c.Ⲇ;
      var a = px.ΔΔᐃᐃ;
      var i = fk;
      g.clearRect(0, 0, e, f);
      g.drawImage(c.ᐃΔ, 0, 0);
      for (var j = 0; d.length > j; j++) {
        var k = a[d[j]];
        if ((px.mode !== 1 || k.ⵠΔᐃΔⲆ !== "spectator") && (px.mode !== 2 || k.ⵠᐃⵠⲆ !== 0)) {
          if (qx.id == d[j]) {
            i = uq;
            if (px.mode === 3 && k.ⵠᐃⵠⲆ === 0) {
              ⵠᐃ = "#FF0000";
            } else {
              ⵠᐃ = "#FFF";
            }
          } else if (px.mode === 3 && k.ⵠᐃⵠⲆ === 0) {
            ⵠᐃ = "#990000";
          } else {
            ⵠᐃ = "#A1BDCD";
          }
          g.drawImage(cu(ro, "" + (j + 1), ro * 15, ⵠᐃ), ro * 20, ro * (40 + j * 22));
          if (!k.ᐃΔⲆⵠⵠᐃΔ) {
            k.ᐃΔⲆⵠⵠᐃΔ = cu(ro, k.ⵠΔᐃΔⲆ, ro * 15, ⵠᐃ, undefined, Ho, undefined, undefined, ro * 110);
          }
          g.drawImage(k.ᐃΔⲆⵠⵠᐃΔ, ro * 39, (40 + j * 22) * ro);
          g.drawImage(cu(ro, ᐃⵠⲆΔ.ⵠⲆᐃⵠΔᐃⵠ(k.ᐃᐃΔⲆΔ), ro * 15, ⵠᐃ), ro * 156, ro * (40 + j * 22));
        }
      }
      if (!i) {
        if (px.mode === 0 || px.mode === 3 || px.mode === 4 || px.mode === 5 || px.mode === 7 || px.mode === 1 && !qx.ⲆΔᐃΔⲆⵠΔ || px.mode === 2 && !qx.ᐃⲆⵠΔᐃ) {
          g.drawImage(Ⲇᐃ[306], ro * 15, ro * (46 + j * 22));
          g.drawImage(cu(ro, ᐃⵠⲆΔ.ⵠⲆᐃⵠΔᐃⵠ(px.ΔΔᐃᐃ[qx.id].ᐃᐃΔⲆΔ), ro * 15, "#FFF"), ro * 100, ro * (46 + j * 22));
        }
      }
    }
    jp(Hn, c.ⲆΔ, c.translate.x, c.translate.y);
  }
  function Qu() {
    var b = qx.ᐃⲆⵠⵠ;
    if (!b.ᐃⵠᐃΔᐃ && b.ⲆΔᐃΔ > 0) {
      var c = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      if (!c) {
        return;
      }
      Hn.save();
      if (Zr[b.ⲆΔᐃΔ].ΔΔⵠⵠ === 0 && b.mode === 0) {
        Hn.translate(qx.ⲆⲆᐃ.x + c.x, qx.ⲆⲆᐃ.y + c.y);
        Hn.rotate(c.angle);
        Hn.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = qx.ⲆⲆᐃ.x + (d - d % 100 + 50);
        e = qx.ⲆⲆᐃ.y + (e - e % 100 + 50);
        Hn.translate(d, e);
      }
      var f = Ⲇᐃ[b.ⲆΔᐃΔ][px.time];
      Hn.globalAlpha = 0.5;
      jp(Hn, f, -f.width / 2, -f.height / 2);
      Hn.globalAlpha = 1;
      Hn.restore();
      if (Zr[b.ⲆΔᐃΔ].ΔΔⵠⵠ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = cu(ro, kb[336], 20, "#e2c340");
          } else {
            b.label[1] = cu(ro, kb[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        jp(Hn, f, $n + -f.width / 2, sx.ⵠⲆⲆⵠ.y - 26);
      }
    }
    if (b.ᐃⵠᐃΔᐃ) {
      var g = b.timeout.ᐃΔΔ();
      for (var a = 0; b.ᐃⲆⵠᐃΔ.length > a; a++) {
        var i = b.ᐃⲆⵠᐃΔ[a];
        if (b.id == i.id) {
          var j = ro * 42;
          var k = ro * 17;
          id(Hn, i.info.translate.x, i.info.translate.y + (1 - b.timeout.ⵠΔⵠ) * j, i.info.width, j * b.timeout.ⵠΔⵠ + k, ro * 10);
          Hn.fillStyle = "#55B973";
          Hn.fill();
          Hn.globalAlpha = 0.8;
          i.ΔⵠⲆⲆ(Hn);
        } else {
          Hn.globalAlpha = 0.5;
          i.ΔⵠⲆⲆ(Hn);
        }
        Hn.globalAlpha = 1;
      }
      if (g) {
        b.ᐃⵠᐃΔᐃ = false;
        b.timeout.ⵠΔⵠ = 0;
        b.timeout.ⲆᐃΔ = rl;
      }
      return true;
    }
    for (a = 0; a < b.ᐃⲆⵠᐃΔ.length; a++) {
      b.ᐃⲆⵠᐃΔ[a].ΔⵠⲆⲆ(Hn);
    }
    return _a;
  }
  function Ru(a) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && Eq == this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var b = ro * ((1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600);
      var c = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = Ⲇᐃ[a][px.time];
    ΔΔᐃ = -e.width;
    ᐃⲆᐃ = -e.height;
    jp(Hn, e, -ΔΔᐃ / 2 + c, -ᐃⲆᐃ / 2 + d, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function Su() {
    var a = px.ⲆⲆΔᐃΔ;
    var b = Ⲇᐃ[725][px.time];
    jp(Hn, b, a.translate.x, a.translate.y);
    Hn.save();
    Hn.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    px.ⲆⲆΔᐃΔ.now = (new Date().getTime() - a.ⵠΔⵠⵠⲆ + a.ⵠⵠⲆⵠⵠ) % 480000;
    var c = Math.PI * 2 * px.ⲆⲆΔᐃΔ.now / 480000 - Math.PI / 2;
    Hn.rotate(c);
    jp(Hn, Ⲇᐃ[726], -b.width / 2, -b.height / 2);
    Hn.restore();
  }
  function Tu() {
    var a = qx.ᐃⲆⵠⵠ;
    if (a.ᐃⵠᐃΔᐃ) {
      var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + b.x, qx.ⲆⲆᐃ.y + b.y);
      var c = Ⲇᐃ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - ro * 125;
      jp(Hn, c, d, e);
      Hn.beginPath();
      Hn.lineWidth = ro * 5;
      Hn.strokeStyle = Sr.ΔᐃᐃⲆⲆᐃⵠ[px.time];
      Hn.lineCap = "round";
      Hn.arc(0, e + c.height / 2, ro * 25, 0, a.timeout.ⵠΔⵠ * (Math.PI * 2));
      Hn.stroke();
      Hn.restore();
    }
  }
  function Uu() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[848][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function Vu(b) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = lh;
      }
      var c = ro * ((1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600);
      var d = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * c;
      var e = c * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    var f = Ⲇᐃ[853].length;
    ᐃΔ = Ⲇᐃ[853][(this.ᐃⵠᐃⲆ + this.ⵠⵠ % 2) % f][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    var g = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
    if (g && (this.ΔⵠΔΔ === qx.id || qx.ᐃᐃᐃⲆΔΔⲆ(this.ΔⵠΔΔ))) {
      if (ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - xx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + xx, 1);
      }
    } else if (g && ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ]) < 150) {
      this.opacity = Math.max(this.opacity - xx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + xx, 1);
    }
    var a = Hn.globalAlpha;
    Hn.globalAlpha *= this.opacity;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2 + d, -ᐃⲆᐃ / 2 + e, ΔΔᐃ, ᐃⲆᐃ);
    Hn.globalAlpha = a;
    Hn.restore();
  }
  function Wu() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[811][px.time];
    ΔΔᐃ = -ᐃΔ.width;
    ᐃⲆᐃ = -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  var Xu = 0;
  function Yu() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ᐃΔⵠⲆΔ.ᐃΔΔ();
    ᐃΔ = Ⲇᐃ[289][px.time];
    ΔΔᐃ = -ᐃΔ.width * this.ᐃΔⵠⲆΔ.ⵠΔⵠ;
    ᐃⲆᐃ = this.ᐃΔⵠⲆΔ.ⵠΔⵠ * -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function Zu() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    var a = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + xx / 2, 1.8) : Math.max(this.scale - xx, 1);
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.rotate.ᐃΔΔ();
    this.ⵠⵠⲆΔ = a < 350 ? Math.max(0, this.ⵠⵠⲆΔ - xx * 2.2) : Math.min(1, this.ⵠⵠⲆΔ + xx * 2.2);
    b = this.info & 1 ? Ⲇᐃ[1114][px.time] : Ⲇᐃ[1113][px.time];
    ΔΔᐃ = this.scale * (this.ΔᐃΔᐃ.ⵠΔⵠ * -b.width);
    ᐃⲆᐃ = this.scale * (-b.height * this.ΔᐃΔᐃ.ⵠΔⵠ);
    Hn.globalAlpha = 1 - this.ⵠⵠⲆΔ;
    jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    b = this.info & 1 ? Ⲇᐃ[1098][px.time] : Ⲇᐃ[235][px.time];
    ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -b.width * this.scale;
    ᐃⲆᐃ = this.scale * (-b.height * this.ΔᐃΔᐃ.ⵠΔⵠ);
    Hn.globalAlpha = this.ⵠⵠⲆΔ;
    jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == wr) {
        this.action -= 2;
      }
      Hn.globalAlpha = (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ) * (1 - this.ⵠⵠⲆΔ);
      var b = Ⲇᐃ[1115];
      ΔΔᐃ = -b.width * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
      ᐃⲆᐃ = this.scale * (this.ΔᐃΔᐃ.ⵠΔⵠ * -b.height);
      jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = this.ⵠⵠⲆΔ * (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ);
      b = Ⲇᐃ[1107];
      ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -b.width * this.scale;
      ᐃⲆᐃ = this.scale * (this.ΔᐃΔᐃ.ⵠΔⵠ * -b.height);
      jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    b = (this.info & 1) === 0 ? Ⲇᐃ[1102][px.time] : Ⲇᐃ[1101][px.time];
    ΔΔᐃ = -b.width * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    ᐃⲆᐃ = -b.height * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    Hn.save();
    Hn.translate(ro * -20, ro * 0);
    Hn.rotate(this.rotate.ⵠΔⵠ);
    Hn.globalAlpha = this.ⵠⵠⲆΔ;
    jp(Hn, b, -ΔΔᐃ * ro / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = this.ⵠⵠⲆΔ * (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ);
      b = Ⲇᐃ[1108];
      jp(Hn, b, -ΔΔᐃ * ro / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    b = (this.info & 1) === 0 ? Ⲇᐃ[1105][px.time] : Ⲇᐃ[1104][px.time];
    Hn.save();
    Hn.translate(ro * 20, ro * 0);
    Hn.rotate(-this.rotate.ⵠΔⵠ);
    Hn.globalAlpha = this.ⵠⵠⲆΔ;
    jp(Hn, b, -ΔΔᐃ * ro / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ) * this.ⵠⵠⲆΔ;
      b = Ⲇᐃ[1109];
      jp(Hn, b, -ΔΔᐃ * ro / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.globalAlpha = 1;
    Hn.restore();
    Hn.restore();
  }
  function $u() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == _a) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var a = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
      var b = a * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var c = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Hn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[154][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xx * 3) % (Math.PI * 2);
    }
    Hn.rotate(this.rotate);
    ᐃΔ = Ⲇᐃ[1202][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
  }
  function _u() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == _a) {
        this.ⲆⲆⲆ.ᐃΔΔ = Fh;
      }
      var a = ro * (xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600);
      var b = a * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃΔΔⲆᐃᐃⵠ = (this.ᐃΔΔⲆᐃᐃⵠ + xx * 3) % (Math.PI * 2);
    this.ΔⵠⵠⵠᐃᐃΔ = (this.ΔⵠⵠⵠᐃᐃΔ - xx * 3) % (Math.PI * 2);
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.save();
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[152][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
    Hn.save();
    Hn.rotate(this.ᐃΔΔⲆᐃᐃⵠ);
    ᐃΔ = Ⲇᐃ[1194][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
    Hn.save();
    Hn.rotate(this.ΔⵠⵠⵠᐃᐃΔ);
    ᐃΔ = Ⲇᐃ[1193][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
    Hn.restore();
  }
  function av() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == _a) {
        this.ⲆⲆⲆ.ᐃΔΔ = Ol;
      }
      var a = ro * ((1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600);
      var b = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Hn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[157][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xx * 3) % (Math.PI * 2);
    }
    Hn.rotate(this.rotate);
    ᐃΔ = Ⲇᐃ[1214][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
  }
  ;
  function bv(a, b, c) {
    if (a >= 0) {
      ᐃΔ = Ⲇᐃ[a][px.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (0 + b), -ᐃΔ.height / 4 + (c + 35) * ro);
          break;
        case 74:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - (1 + b) * ro, -ᐃΔ.height / 4 + ro * (c + 45));
          break;
        case 75:
        case 76:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (1 + b), -ᐃΔ.height / 4 + (c + 40) * ro);
      }
    }
  }
  function cv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == ph) {
        this.ⲆⲆⲆ.ᐃΔΔ = Nn;
      }
      var b = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
      var c = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Hn.rotate(this.angle);
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      if (this.info & 16) {
        var f = Ⲇᐃ[812][px.time];
      } else {
        f = Ⲇᐃ[188][px.time];
      }
      var g = -f.width * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
      var a = -f.height * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
      jp(Hn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇᐃ[813][px.time];
      } else {
        f = Ⲇᐃ[189][px.time];
      }
      Hn.translate(0, f.height / 2);
      jp(Hn, f, c - f.width / 2, -f.height + d);
    }
    Hn.restore();
  }
  function dv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var b = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
      var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Hn.rotate(this.angle);
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      if (this.info & 16) {
        var f = Ⲇᐃ[849][px.time];
      } else {
        f = Ⲇᐃ[193][px.time];
      }
      var g = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -f.width;
      var a = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -f.height;
      jp(Hn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇᐃ[869][px.time];
      } else {
        f = Ⲇᐃ[194][px.time];
      }
      Hn.translate(0, f.height / 2);
      jp(Hn, f, c - f.width / 2, -f.height + d);
    }
    Hn.restore();
  }
  function ev() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && rl == this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ) {
        this.ⲆⲆⲆ.ᐃΔΔ = Nq;
      }
      var a = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
      var b = a * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var c = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃΔΔⲆᐃᐃⵠ = (this.ᐃΔΔⲆᐃᐃⵠ + xx * 3) % (Math.PI * 2);
    this.ΔⵠⵠⵠᐃᐃΔ = (this.ΔⵠⵠⵠᐃᐃΔ - xx * 3) % (Math.PI * 2);
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.save();
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[151][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
    Hn.save();
    Hn.rotate(this.ᐃΔΔⲆᐃᐃⵠ);
    ᐃΔ = Ⲇᐃ[528][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
    Hn.save();
    Hn.rotate(this.ΔⵠⵠⵠᐃᐃΔ);
    ᐃΔ = Ⲇᐃ[527][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
    Hn.restore();
  }
  function fv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.ᐃⲆⵠΔⵠᐃⲆ.ᐃΔΔ();
    this.ⵠᐃⵠΔᐃᐃΔ.ᐃΔΔ();
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    c = this.info === 0 ? Ⲇᐃ[887][px.time] : Ⲇᐃ[886][px.time];
    ΔΔᐃ = -c.width * this.ΔᐃΔᐃ.ⵠΔⵠ;
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -c.height;
    jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var c = Ⲇᐃ[888];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃⲆⲆΔⵠ.ᐃΔΔ() && kh == this.ᐃⲆⲆΔⵠ.ⲆᐃΔ) {
        this.action -= 4;
      }
      Hn.globalAlpha = 0.6 - this.ᐃⲆⲆΔⵠ.ⵠΔⵠ;
      c = Ⲇᐃ[891];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle + b);
    Hn.translate(55, 0);
    Hn.rotate(a);
    c = this.info === 0 ? Ⲇᐃ[894][px.time] : Ⲇᐃ[896][px.time];
    ΔΔᐃ = this.ᐃⲆⵠΔⵠᐃⲆ.ⵠΔⵠ * -c.width;
    ᐃⲆᐃ = -c.height * this.ᐃⲆⵠΔⵠᐃⲆ.ⵠΔⵠ;
    jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      c = Ⲇᐃ[889];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Hn.globalAlpha = 0.6 - this.ᐃⲆⲆΔⵠ.ⵠΔⵠ;
      c = Ⲇᐃ[892];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle + a + b);
    Hn.translate(55, 0);
    Hn.rotate(a);
    c = this.info === 0 ? Ⲇᐃ[895][px.time] : Ⲇᐃ[897][px.time];
    ΔΔᐃ = this.ⵠᐃⵠΔᐃᐃΔ.ⵠΔⵠ * -c.width;
    ᐃⲆᐃ = this.ⵠᐃⵠΔᐃᐃΔ.ⵠΔⵠ * -c.height;
    jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      c = Ⲇᐃ[890];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Hn.globalAlpha = 0.6 - this.ᐃⲆⲆΔⵠ.ⵠΔⵠ;
      c = Ⲇᐃ[893];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
  }
  function gv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ᐃΔⵠⲆΔ.ᐃΔΔ();
    ᐃΔ = Ⲇᐃ[1192][px.time];
    ΔΔᐃ = -ᐃΔ.width * this.ᐃΔⵠⲆΔ.ⵠΔⵠ;
    ᐃⲆᐃ = this.ᐃΔⵠⲆΔ.ⵠΔⵠ * -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function hv() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      var a = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
      var b = a * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xx * 0.5) % (Math.PI * 2);
    }
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.save();
    Hn.rotate(this.rotate);
    ᐃΔ = Ⲇᐃ[641][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
    Hn.save();
    Hn.rotate(this.ΔᐃⵠⲆⵠᐃᐃΔᐃ);
    ᐃΔ = Ⲇᐃ[642][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
    Hn.restore();
  }
  function iv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == fk) {
        this.ⲆⲆⲆ.ᐃΔΔ = wr;
      }
      var a = ro * (xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600);
      var b = a * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ᐃΔ = Ⲇᐃ[183][px.time];
    } else {
      ᐃΔ = Ⲇᐃ[802][px.time][this.info - 1];
    }
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2 + b, -ᐃΔ.height / 2 + c);
    Hn.restore();
  }
  function jv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + xx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - xx, 1);
    }
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.rotate.ᐃΔΔ();
    a = Ⲇᐃ[449][px.time];
    ΔΔᐃ = -a.width * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.height * this.scale;
    jp(Hn, a, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && Qi == this.ⲆⲆⲆ.ⲆᐃΔ) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var a = Ⲇᐃ[463];
      jp(Hn, a, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    a = Ⲇᐃ[451][px.time];
    ΔΔᐃ = this.scale * (this.ΔᐃΔᐃ.ⵠΔⵠ * -a.width);
    ᐃⲆᐃ = -a.height * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    Hn.save();
    Hn.translate(ro * -30, ro * 70);
    Hn.rotate(this.rotate.ⵠΔⵠ);
    jp(Hn, a, ro * -10, ro * -40, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      a = Ⲇᐃ[466];
      jp(Hn, a, ro * -10, ro * -40, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    a = Ⲇᐃ[452][px.time];
    Hn.save();
    Hn.translate(ro * 30, ro * 70);
    Hn.rotate(-this.rotate.ⵠΔⵠ);
    jp(Hn, a, ro * 10 - ΔΔᐃ, ro * -40, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      a = Ⲇᐃ[467];
      jp(Hn, a, ro * 10 - ΔΔᐃ, ro * -40, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    Hn.restore();
  }
  function kv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var b = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
      var c = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Hn.rotate(this.angle);
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      if (this.info & 16) {
        var f = Ⲇᐃ[838][px.time];
      } else {
        f = Ⲇᐃ[191][px.time];
      }
      var g = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -f.width;
      var a = -f.height * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
      jp(Hn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇᐃ[839][px.time];
      } else {
        f = Ⲇᐃ[192][px.time];
      }
      Hn.translate(0, f.height / 2);
      jp(Hn, f, c - f.width / 2, -f.height + d);
    }
    Hn.restore();
  }
  function lv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = Nn;
      }
      var b = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
      var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Hn.rotate(this.angle);
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      if (this.info & 16) {
        var f = Ⲇᐃ[668][px.time];
      } else {
        f = Ⲇᐃ[132][px.time];
      }
      var g = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -f.width;
      var a = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -f.height;
      jp(Hn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ⵠⵠᐃΔⲆⵠΔ.ᐃΔΔ();
      if (this.info & 16) {
        f = Ⲇᐃ[638][px.time];
      } else {
        f = Ⲇᐃ[134][px.time];
      }
      Hn.translate(0, f.height / 2);
      Hn.rotate(this.ⵠⵠᐃΔⲆⵠΔ.ⵠΔⵠ);
      jp(Hn, f, c - f.width / 2, -f.height + d);
    }
    Hn.restore();
  }
  function mv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + xx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - xx, 1);
    }
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.rotate.ᐃΔΔ();
    a = this.info === 0 ? Ⲇᐃ[232][px.time] : Ⲇᐃ[1068][px.time];
    ΔΔᐃ = this.scale * (this.ΔᐃΔᐃ.ⵠΔⵠ * -a.width);
    ᐃⲆᐃ = this.scale * (-a.height * this.ΔᐃΔᐃ.ⵠΔⵠ);
    jp(Hn, a, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var a = Ⲇᐃ[1077];
      jp(Hn, a, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    a = this.info === 0 ? Ⲇᐃ[1072][px.time] : Ⲇᐃ[1071][px.time];
    ΔΔᐃ = -a.width * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    ᐃⲆᐃ = this.scale * (-a.height * this.ΔᐃΔᐃ.ⵠΔⵠ);
    Hn.save();
    Hn.translate(ro * -40, ro * 10);
    Hn.rotate(this.rotate.ⵠΔⵠ);
    jp(Hn, a, -ΔΔᐃ * ro / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      a = Ⲇᐃ[1078];
      jp(Hn, a, ro * -ΔΔᐃ / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    a = this.info === 0 ? Ⲇᐃ[1075][px.time] : Ⲇᐃ[1074][px.time];
    Hn.save();
    Hn.translate(ro * 40, ro * 10);
    Hn.rotate(-this.rotate.ⵠΔⵠ);
    jp(Hn, a, ro * -ΔΔᐃ / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      a = Ⲇᐃ[1079];
      jp(Hn, a, ro * -ΔΔᐃ / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    Hn.restore();
  }
  function nv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ᐃΔⵠⲆΔ.ᐃΔΔ();
    ᐃΔ = Ⲇᐃ[526][px.time];
    ΔΔᐃ = -ᐃΔ.width * this.ᐃΔⵠⲆΔ.ⵠΔⵠ;
    ᐃⲆᐃ = -ᐃΔ.height * this.ᐃΔⵠⲆΔ.ⵠΔⵠ;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function ov(a, b, c) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + b, qx.ⲆⲆᐃ.y + c);
    Hn.rotate(this.angle);
    Hn.translate(this.x - b, this.y - c);
    this.ΔᐃΔᐃ.ᐃΔΔ();
    ᐃΔ = Ⲇᐃ[a][px.time];
    ΔΔᐃ = -ᐃΔ.width * this.ΔᐃΔᐃ.ⵠΔⵠ;
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function pv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ᐃᐃⲆᐃ.ᐃΔΔ();
    Hn.globalAlpha = 0.3;
    var a = Ⲇᐃ[282][px.time];
    var b = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -a.width;
    var c = -a.height * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
    jp(Hn, a, -b / 2, -c / 2, b, c);
    Hn.globalAlpha = 1;
    Hn.restore();
  }
  function qv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && ph == this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ) {
        this.ⲆⲆⲆ.ᐃΔΔ = lh;
      }
      var b = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
      var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Hn.rotate(this.angle);
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      if (this.info & 16) {
        var f = Ⲇᐃ[970][px.time];
      } else {
        f = Ⲇᐃ[208][px.time];
      }
      var g = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -f.width;
      var a = -f.height * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
      jp(Hn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇᐃ[971][px.time];
      } else {
        f = Ⲇᐃ[209][px.time];
      }
      Hn.translate(0, f.height / 2);
      jp(Hn, f, c - f.width / 2, -f.height + d);
    }
    Hn.restore();
  }
  function rv() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == Qi) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var a = ro * ((1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600);
      var b = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Hn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[156][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xx * 3) % (Math.PI * 2);
    }
    Hn.rotate(this.rotate);
    ᐃΔ = Ⲇᐃ[1210][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
  }
  function sv() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && Nq == this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var a = ro * ((1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600);
      var b = a * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[135][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
  }
  function tv(a, b) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ΔᐃΔᐃ.ᐃΔΔ();
    c = Ⲇᐃ[a][px.time];
    ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -c.width;
    ᐃⲆᐃ = -c.height * this.ΔᐃΔᐃ.ⵠΔⵠ;
    jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var c = Ⲇᐃ[b];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
  }
  function uv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + xx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - xx, 1);
    }
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.rotate.ᐃΔΔ();
    a = Ⲇᐃ[450][px.time];
    ΔΔᐃ = this.scale * (-a.width * this.ΔᐃΔᐃ.ⵠΔⵠ);
    ᐃⲆᐃ = -a.height * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    jp(Hn, a, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var a = Ⲇᐃ[464];
      jp(Hn, a, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    a = Ⲇᐃ[453][px.time];
    ΔΔᐃ = this.scale * (-a.width * this.ΔᐃΔᐃ.ⵠΔⵠ);
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.height * this.scale;
    Hn.save();
    Hn.translate(ro * -60, ro * 20);
    Hn.rotate(this.rotate.ⵠΔⵠ);
    jp(Hn, a, ro * -ΔΔᐃ / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      a = Ⲇᐃ[468];
      jp(Hn, a, ro * -ΔΔᐃ / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    a = Ⲇᐃ[454][px.time];
    Hn.save();
    Hn.translate(ro * 60, ro * 20);
    Hn.rotate(-this.rotate.ⵠΔⵠ);
    jp(Hn, a, ro * -ΔΔᐃ / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      a = Ⲇᐃ[469];
      jp(Hn, a, ro * -ΔΔᐃ / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    Hn.restore();
  }
  function vv() {
    this.ΔᐃΔᐃ.ᐃΔΔ();
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    a = this.info === 0 ? Ⲇᐃ[248][px.time] : Ⲇᐃ[1222][px.time];
    ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.width;
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.height;
    jp(Hn, a, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == kh) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var a = Ⲇᐃ[1223];
      jp(Hn, a, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
  }
  function wv() {
    if ((this.info & 1) == 1) {
      this.ᐃΔᐃⵠΔ = Math.min(this.ᐃΔᐃⵠΔ + xx, 2.2);
    } else {
      this.ᐃΔᐃⵠΔ = Math.max(this.ᐃΔᐃⵠΔ - xx, 0);
      this.ⵠⵠⵠⲆⲆΔⲆ += xx;
      if (this.ⵠⵠⵠⲆⲆΔⲆ > 0.1) {
        this.ⵠⵠⵠⲆⲆΔⲆ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ᐃᐃⲆᐃ.push(a);
      }
    }
    for (var b = 0; b < this.ᐃᐃⲆᐃ.length; b++) {
      a = this.ᐃᐃⲆᐃ[b];
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + a.x, qx.ⲆⲆᐃ.y + a.y);
      a.a = Math.min(1, 0 + xx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      Hn.globalAlpha = c * 0.8;
      $b(Hn, 0, 0, a.r);
      ed(Hn, Sr.ⲆⵠΔⵠΔⵠᐃ[px.time]);
      Hn.restore();
      if (1 === 0) {
        this.ᐃᐃⲆᐃ.splice(b, 1);
        b--;
      }
    }
  }
  function xv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ⲆⲆΔⲆⵠ.ᐃΔΔ();
    ᐃΔ = Ⲇᐃ[288][px.time];
    ΔΔᐃ = -ᐃΔ.width * this.ⲆⲆΔⲆⵠ.ⵠΔⵠ;
    ᐃⲆᐃ = this.ⲆⲆΔⲆⵠ.ⵠΔⵠ * -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    this.ᐃΔⵠⲆΔ.ᐃΔΔ();
    ᐃΔ = Ⲇᐃ[289][px.time];
    ΔΔᐃ = -ᐃΔ.width * this.ᐃΔⵠⲆΔ.ⵠΔⵠ;
    ᐃⲆᐃ = this.ᐃΔⵠⲆΔ.ⵠΔⵠ * -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function yv(a) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ΔᐃΔᐃ.ᐃΔΔ();
    ᐃΔ = Ⲇᐃ[a][px.time];
    ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -ᐃΔ.width;
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -ᐃΔ.height;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.restore();
  }
  function zv(b) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ᐃᐃⲆᐃ.ᐃΔΔ();
    Hn.globalAlpha = 0.3;
    var c = Ⲇᐃ[282][px.time];
    var d = -c.width * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
    var e = -c.height * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
    jp(Hn, c, -d / 2, -e / 2, d, e);
    Hn.globalAlpha = 1;
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == lh) {
        this.ⲆⲆⲆ.ᐃΔΔ = Cl;
      }
      var f = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
      var g = f * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var h = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * f;
    } else {
      g = 0;
      h = 0;
    }
    c = Ⲇᐃ[b][px.time];
    jp(Hn, c, -c.width / 2 + g, -c.height / 2 + h);
    Hn.restore();
  }
  function Av() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    var a = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + xx / 2, 1.8) : Math.max(this.scale - xx, 1);
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.rotate.ᐃΔΔ();
    this.ⵠⵠⲆΔ = a < 350 ? Math.max(0, this.ⵠⵠⲆΔ - xx * 2.2) : Math.min(1, this.ⵠⵠⲆΔ + xx * 2.2);
    b = Ⲇᐃ[1135][px.time];
    ΔΔᐃ = this.scale * (this.ΔᐃΔᐃ.ⵠΔⵠ * -b.width);
    ᐃⲆᐃ = this.scale * (this.ΔᐃΔᐃ.ⵠΔⵠ * -b.height);
    Hn.globalAlpha = 1 - this.ⵠⵠⲆΔ;
    jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    b = Ⲇᐃ[1119][px.time];
    ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -b.width * this.scale;
    ᐃⲆᐃ = this.scale * (this.ΔᐃΔᐃ.ⵠΔⵠ * -b.height);
    Hn.globalAlpha = this.ⵠⵠⲆΔ;
    jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ) * (1 - this.ⵠⵠⲆΔ);
      var b = Ⲇᐃ[1136];
      ΔΔᐃ = this.scale * (-b.width * this.ΔᐃΔᐃ.ⵠΔⵠ);
      ᐃⲆᐃ = this.scale * (-b.height * this.ΔᐃΔᐃ.ⵠΔⵠ);
      jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = this.ⵠⵠⲆΔ * (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ);
      b = Ⲇᐃ[1128];
      ΔΔᐃ = -b.width * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
      ᐃⲆᐃ = this.scale * (-b.height * this.ΔᐃΔᐃ.ⵠΔⵠ);
      jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    b = Ⲇᐃ[1122][px.time];
    ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -b.width * this.scale;
    ᐃⲆᐃ = -b.height * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    Hn.save();
    Hn.translate(ro * -40, ro * 80);
    Hn.rotate(this.rotate.ⵠΔⵠ);
    Hn.globalAlpha = this.ⵠⵠⲆΔ;
    jp(Hn, b, ro * -ΔΔᐃ / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ) * this.ⵠⵠⲆΔ;
      b = Ⲇᐃ[1129];
      jp(Hn, b, -ΔΔᐃ * ro / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    b = Ⲇᐃ[1125][px.time];
    Hn.save();
    Hn.translate(ro * 40, ro * 80);
    Hn.rotate(-this.rotate.ⵠΔⵠ);
    Hn.globalAlpha = this.ⵠⵠⲆΔ;
    jp(Hn, b, ro * -ΔΔᐃ / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ) * this.ⵠⵠⲆΔ;
      b = Ⲇᐃ[1130];
      jp(Hn, b, ro * -ΔΔᐃ / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.globalAlpha = 1;
    Hn.restore();
    Hn.restore();
  }
  function Bv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var a = ro * ((1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600);
      var b = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ᐃΔ = Ⲇᐃ[407][px.time];
    } else {
      ᐃΔ = Ⲇᐃ[119][px.time];
    }
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2 + b, -ᐃΔ.height / 2 + c);
    Hn.restore();
  }
  function Cv() {
    this.ΔᐃΔᐃ.ᐃΔΔ();
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    a = this.info === 0 ? Ⲇᐃ[1042][px.time] : Ⲇᐃ[1044][px.time];
    ΔΔᐃ = -a.width * this.ΔᐃΔᐃ.ⵠΔⵠ;
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.height;
    jp(Hn, a, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == ph) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var a = Ⲇᐃ[1045];
      jp(Hn, a, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
  }
  function Dv(a, b, c) {
    if (a >= 0) {
      ᐃΔ = Ⲇᐃ[a][px.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Fw(a, ᐃΔ, -ᐃΔ.width / 2 - (45 + b) * ro, -ᐃΔ.height / 2 + (c + 22) * ro);
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (52 + b), -ᐃΔ.height / 4 + ro * (c + 20));
          break;
        case 98:
        case 99:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - (57 + b) * ro, -ᐃΔ.height / 4 + ro * (c + 20));
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (47 + b), -ᐃΔ.height / 4 + (c + 45) * ro);
          break;
        case 30:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - (52 + b) * ro, -ᐃΔ.height / 4 + ro * (c + 45));
          break;
        case 19:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * ro, -ᐃΔ.height / 4 + (c + 44) * ro);
          break;
        case 9:
          Fw(a, ᐃΔ, -ᐃΔ.width / 2 - (47 + b) * ro, -ᐃΔ.height / 2 + ro * (c + 44));
          break;
        case 62:
          Fw(a, ᐃΔ, -ᐃΔ.width / 2 - (40 + b) * ro, -ᐃΔ.height / 2 + (c + 65) * ro);
          break;
        case 12:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - (37 + b) * ro, -ᐃΔ.height / 4 + ro * (c + 85));
          break;
        case 34:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (37 + b), -ᐃΔ.height / 4 + ro * (c + 85));
          break;
        case 54:
        case 53:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - (26 + b) * ro, -ᐃΔ.height / 4 + (c + 77) * ro);
          break;
        case 17:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (37 + b), -ᐃΔ.height / 4 + (c + 85) * ro);
          break;
        case 63:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (47 + b), -ᐃΔ.height / 4 + (c + 44) * ro);
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (37 + b), -ᐃΔ.height / 4 + (c + 30) * ro);
          break;
        case 56:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (47 + b), -ᐃΔ.height / 4 + (c + 35) * ro);
          break;
        case 92:
        case 93:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * ro, -ᐃΔ.height / 4 + (c + 40) * ro);
          break;
        case 89:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (47 + b), -ᐃΔ.height / 4 + ro * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - (37 + b) * ro, -ᐃΔ.height / 4 + ro * (c + 90));
          break;
        case 18:
          zw(a, ᐃΔ, -ᐃΔ.width / 4 - ro * (40 + b), -ᐃΔ.height / 4 + ro * (c + 85));
          break;
        case 16:
          Fw(a, ᐃΔ, -ᐃΔ.width / 2 - ro * (39 + b), -ᐃΔ.height / 2 + (c + 90) * ro);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Fw(a, ᐃΔ, -ᐃΔ.width / 2 - (46 + b) * ro, -ᐃΔ.height / 2 + ro * (c + 35));
          break;
        case 49:
          Fw(a, ᐃΔ, -ᐃΔ.width / 2 - (47 + b) * ro, -ᐃΔ.height / 2 + ro * (c + 54));
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Fw(a, ᐃΔ, -ᐃΔ.width / 2 - (46 + b) * ro, -ᐃΔ.height / 2 + ro * (c + 35));
          break;
        case 55:
          Fw(a, ᐃΔ, -ᐃΔ.width / 2 - (47 + b) * ro, -ᐃΔ.height / 2 + ro * (c + 20));
      }
    }
  }
  function Ev() {
    if (this.info !== 10) {
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
      Hn.rotate(this.angle);
      if (this.ⲆⲆⲆ.ᐃΔΔ) {
        if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
          this.ⲆⲆⲆ.ᐃΔΔ = false;
        }
        var b = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
        var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
        var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = Ⲇᐃ[623][px.time];
      } else {
        e = Ⲇᐃ[287][px.time];
      }
      jp(Hn, e, -e.width / 2 + c, -e.width / 2 + d);
      Hn.restore();
      for (var f = this.info & 15, g = 0; f > g; g++) {
        this.ΔⲆᐃⲆ[g].ΔⵠⲆⲆ(294);
      }
    }
  }
  function Fv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + xx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - xx, 1);
    }
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.rotate.ᐃΔΔ();
    a = this.info === 0 ? Ⲇᐃ[233][px.time] : Ⲇᐃ[1083][px.time];
    ΔΔᐃ = -a.width * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.height * this.scale;
    jp(Hn, a, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var a = Ⲇᐃ[1092];
      jp(Hn, a, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    a = this.info === 0 ? Ⲇᐃ[1087][px.time] : Ⲇᐃ[1086][px.time];
    ΔΔᐃ = -a.width * this.ΔᐃΔᐃ.ⵠΔⵠ * this.scale;
    ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.height * this.scale;
    Hn.save();
    Hn.translate(ro * -40, ro * 10);
    Hn.rotate(this.rotate.ⵠΔⵠ);
    jp(Hn, a, -ΔΔᐃ * ro / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      a = Ⲇᐃ[1093];
      jp(Hn, a, -ΔΔᐃ * ro / 4, ro * -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    a = this.info === 0 ? Ⲇᐃ[1090][px.time] : Ⲇᐃ[1089][px.time];
    Hn.save();
    Hn.translate(ro * 40, ro * 10);
    Hn.rotate(-this.rotate.ⵠΔⵠ);
    jp(Hn, a, ro * -ΔΔᐃ / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      a = Ⲇᐃ[1094];
      jp(Hn, a, ro * -ΔΔᐃ / 4, -ᐃⲆᐃ * ro / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    Hn.restore();
  }
  function Gv() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == Tr) {
        this.ⲆⲆⲆ.ᐃΔΔ = Cl;
      }
      var a = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
      var b = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Hn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[155][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xx * 3) % (Math.PI * 2);
    }
    Hn.rotate(this.rotate);
    ᐃΔ = Ⲇᐃ[1206][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
  }
  function Hv(a, b) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    c = Ⲇᐃ[a][px.time];
    ΔΔᐃ = -c.width;
    ᐃⲆᐃ = -c.height;
    jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var c = Ⲇᐃ[b];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
  }
  function Iv() {
    if (this.info >= 10) {
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
      Hn.rotate(this.angle);
      if (this.ⲆⲆⲆ.ᐃΔΔ) {
        if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && lh == this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ) {
          this.ⲆⲆⲆ.ᐃΔΔ = false;
        }
        var b = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
        var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
        var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      var e = Ⲇᐃ[115][px.time];
      var f = -e.width * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
      var g = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -e.height;
      jp(Hn, e, -f / 2 + c, -g / 2 + d, f, g);
      Hn.restore();
    }
  }
  function Jv() {
    var a = undefined;
    var b = Xg;
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.rotate.ᐃΔΔ();
    if (this.ᐃΔᐃⵠΔ >= 0.1 && this.ᐃΔᐃⵠΔ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ᐃΔᐃⵠΔ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = Ⲇᐃ[1150][px.time];
      ΔΔᐃ = -a.width * this.ΔᐃΔᐃ.ⵠΔⵠ;
      ᐃⲆᐃ = -a.height * this.ΔᐃΔᐃ.ⵠΔⵠ;
      Hn.globalAlpha = c;
      jp(Hn, a, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      b = Ⲇᐃ[1151];
    }
    if (this.ᐃΔᐃⵠΔ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ᐃΔᐃⵠΔ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = Ⲇᐃ[1152][px.time];
      ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.width;
      ᐃⲆᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -a.height;
      Hn.globalAlpha = c;
      jp(Hn, a, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      b = Ⲇᐃ[1153];
    }
    if (this.action & 2 && fh !== b) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = c * (0.6 - this.ⲆⲆⲆ.ⵠΔⵠ);
      ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -b.width;
      ᐃⲆᐃ = -b.height * this.ΔᐃΔᐃ.ⵠΔⵠ;
      jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    }
    Hn.globalAlpha = 1;
    Hn.restore();
  }
  function Kv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && Cl == this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ) {
        this.ⲆⲆⲆ.ᐃΔΔ = wr;
      }
      var b = ro * (xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600);
      var c = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Hn.rotate(this.angle);
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      if (this.info & 16) {
        var f = Ⲇᐃ[985][px.time];
      } else {
        f = Ⲇᐃ[210][px.time];
      }
      var g = -f.width * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
      var a = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -f.height;
      jp(Hn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇᐃ[986][px.time];
      } else {
        f = Ⲇᐃ[211][px.time];
      }
      Hn.translate(0, f.height / 2);
      jp(Hn, f, c - f.width / 2, -f.height + d);
    }
    Hn.restore();
  }
  function Lv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == ph) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var b = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
      var c = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = Ⲇᐃ[716][px.time];
      jp(Hn, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ᐃΔΔ();
      var e = Ⲇᐃ[720][px.time];
      var f = this.up.ⵠΔⵠ * -e.width;
      var g = this.up.ⵠΔⵠ * -e.height;
      jp(Hn, e, -f / 2 + ro * 1, -g / 2 + ro * 3, f, g);
    } else {
      e = Ⲇᐃ[144][px.time];
      jp(Hn, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    Hn.restore();
  }
  function Mv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃⵠΔⵠΔ.length == 0 || this.ᐃⵠΔⵠΔ[this.ᐃⵠΔⵠΔ.length - 1] <= Sr.ᐃᐃⵠⵠⵠⲆᐃ)) {
      this.ᐃⵠΔⵠΔ.push(Sr.ᐃΔᐃᐃᐃΔᐃ);
    }
    for (var a = 0; a < this.ᐃⵠΔⵠΔ.length; a++) {
      this.ᐃⵠΔⵠΔ[a] = Math.max(0, this.ᐃⵠΔⵠΔ[a] - xx * Sr.ⲆΔᐃⵠᐃⵠⲆ);
      Hn.globalAlpha = this.ᐃⵠΔⵠΔ[a] / 1.3;
      var b = (1 - this.ᐃⵠΔⵠΔ[a]) * 40;
      var c = (1 - this.ᐃⵠΔⵠΔ[a]) * 35 + 10;
      $b(Hn, ro * -68 + b * Math.sin(-this.angle - Math.PI / 2), ro * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
      ed(Hn, "#333333");
    }
    Hn.globalAlpha = 1;
    if (this.ᐃⵠΔⵠΔ.length > 0 && this.ᐃⵠΔⵠΔ[0] === 0) {
      this.ᐃⵠΔⵠΔ.shift();
    }
    Hn.restore();
  }
  function Ov() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; b > c; c++) {
        this.ΔⲆᐃⲆ[c].ΔⵠⲆⲆ(207, this.x, this.y);
      }
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
      Hn.rotate(this.angle);
      if (this.ⲆⲆⲆ.ᐃΔΔ) {
        if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
          this.ⲆⲆⲆ.ᐃΔΔ = false;
        }
        var d = xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600 * ro;
        var e = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * d;
        var f = d * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = Ⲇᐃ[958][px.time];
      } else {
        g = Ⲇᐃ[957][px.time];
      }
      jp(Hn, g, -g.width / 2 + e, -g.width / 2 + f);
      Hn.restore();
    }
  }
  function Pv() {
    if (this.info >= 10) {
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
      Hn.rotate(this.angle);
      if (this.ⲆⲆⲆ.ᐃΔΔ) {
        if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == Qi) {
          this.ⲆⲆⲆ.ᐃΔΔ = false;
        }
        var b = (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
        var c = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * b;
        var d = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      var e = Ⲇᐃ[206][px.time];
      var f = -e.width * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
      var g = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -e.height;
      jp(Hn, e, -f / 2 + c, -g / 2 + d, f, g);
      Hn.restore();
    }
  }
  function Qv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var b = ro * (xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600);
      var c = b * Math.sin(this.ⲆⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ⲆⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Hn.rotate(this.angle);
      this.ᐃᐃⲆᐃ.ᐃΔΔ();
      if (this.info & 16) {
        var f = Ⲇᐃ[953][px.time];
      } else {
        f = Ⲇᐃ[204][px.time];
      }
      var g = -f.width * this.ᐃᐃⲆᐃ.ⵠΔⵠ;
      var a = this.ᐃᐃⲆᐃ.ⵠΔⵠ * -f.height;
      jp(Hn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇᐃ[954][px.time];
      } else {
        f = Ⲇᐃ[205][px.time];
      }
      Hn.translate(0, f.height / 2);
      jp(Hn, f, c - f.width / 2, -f.height + d);
    }
    Hn.restore();
  }
  function Rv(f, e, i, j, k, n, a, o, p) {
    if (Wa === o) {
      o = 0;
    }
    for (var h = f; h <= e; h++) {
      for (var q = i; q <= j; q++) {
        var r = nx.ΔΔΔⲆ[h][q];
        if (r !== undefined && r[n] !== undefined) {
          var t = r[n];
          var w = Ⲇᐃ[k][px.time][t.ΔⵠⵠⵠⲆᐃⵠ];
          jp(Hn, w, qx.ⲆⲆᐃ.x + "#a7983c" - w.width / (ᐃⵠΔⲆᐃ * 4), qx.ⲆⲆᐃ.y + "Защищает от холода вне воды." - w.height / (ᐃⵠΔⲆᐃ * 4), w.width / (ᐃⵠΔⲆᐃ * 2), w.height / (ᐃⵠΔⲆᐃ * 2));
          if (mx.ᐃᐃⵠΔⵠ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(y * 5 * Ⲇᐃ[1025][px.time][t.ΔⵠⵠⵠⲆᐃⵠ].length);
              w = Ⲇᐃ[1025][px.time][t.ΔⵠⵠⵠⲆᐃⵠ][y];
              jp(Hn, w, qx.ⲆⲆᐃ.x + "#a7983c" - w.width / (ᐃⵠΔⲆᐃ * 4), qx.ⲆⲆᐃ.y + "Защищает от холода вне воды." - w.height / (ᐃⵠΔⲆᐃ * 4), w.width / (ᐃⵠΔⲆᐃ * 2), w.height / (ᐃⵠΔⲆᐃ * 2));
            } else if (t.ΔᐃᐃᐃⵠⲆⲆ !== 0) {
              w = Ⲇᐃ[1026][px.time];
              var z = (Xu + h % 2 * 30) % 60;
              Hn.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              jp(Hn, w, qx.ⲆⲆᐃ.x + "#a7983c" - w.width / (ᐃⵠΔⲆᐃ * 4), qx.ⲆⲆᐃ.y + "Защищает от холода вне воды." - w.height / (ᐃⵠΔⲆᐃ * 4) - 30 + z, w.width / (ᐃⵠΔⲆᐃ * 2), w.height / (ᐃⵠΔⲆᐃ * 2));
              Hn.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Sv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ΔᐃΔᐃ.ᐃΔΔ();
    this.ᐃⲆⵠΔⵠᐃⲆ.ᐃΔΔ();
    this.ⵠᐃⵠΔᐃᐃΔ.ᐃΔΔ();
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    c = this.info === 0 ? Ⲇᐃ[231][px.time] : Ⲇᐃ[1053][px.time];
    ΔΔᐃ = -c.width * this.ΔᐃΔᐃ.ⵠΔⵠ;
    ᐃⲆᐃ = -c.height * this.ΔᐃΔᐃ.ⵠΔⵠ;
    jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && kh == this.ⲆⲆⲆ.ⲆᐃΔ) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var c = Ⲇᐃ[1056];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃⲆⲆΔⵠ.ᐃΔΔ() && this.ᐃⲆⲆΔⵠ.ⲆᐃΔ == Qi) {
        this.action -= 4;
      }
      Hn.globalAlpha = 0.6 - this.ᐃⲆⲆΔⵠ.ⵠΔⵠ;
      c = Ⲇᐃ[1065];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle + b);
    Hn.translate(100, 0);
    Hn.rotate(a);
    c = this.info === 0 ? Ⲇᐃ[1060][px.time] : Ⲇᐃ[1059][px.time];
    ΔΔᐃ = this.ᐃⲆⵠΔⵠᐃⲆ.ⵠΔⵠ * -c.width;
    ᐃⲆᐃ = -c.height * this.ᐃⲆⵠΔⵠᐃⲆ.ⵠΔⵠ;
    jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      c = Ⲇᐃ[1057];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Hn.globalAlpha = 0.6 - this.ᐃⲆⲆΔⵠ.ⵠΔⵠ;
      c = Ⲇᐃ[1066];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle + a + b);
    Hn.translate(100, 0);
    Hn.rotate(a);
    c = this.info === 0 ? Ⲇᐃ[1063][px.time] : Ⲇᐃ[1062][px.time];
    ΔΔᐃ = this.ⵠᐃⵠΔᐃᐃΔ.ⵠΔⵠ * -c.width;
    ᐃⲆᐃ = this.ⵠᐃⵠΔᐃᐃΔ.ⵠΔⵠ * -c.height;
    jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      c = Ⲇᐃ[1058];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Hn.globalAlpha = 0.6 - this.ᐃⲆⲆΔⵠ.ⵠΔⵠ;
      c = Ⲇᐃ[1067];
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
  }
  function Tv(a, b) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ΔᐃΔᐃ.ᐃΔΔ();
    c = Ⲇᐃ[a][px.time];
    ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -c.width;
    ᐃⲆᐃ = -c.height * this.ΔᐃΔᐃ.ⵠΔⵠ;
    jp(Hn, c, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var c = Ⲇᐃ[b];
      jp(Hn, c, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
  }
  function Uv(a, b) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ᐃΔ = Ⲇᐃ[a][this.info][px.time];
    ΔΔᐃ = -ᐃΔ.width / 2;
    ᐃⲆᐃ = -ᐃΔ.height / 2;
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    if (this.action & 2) {
      if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
        this.action -= 2;
      }
      Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
      var c = _v(this.info, ᐃΔ, ᐃᐃⲆΔΔΔΔᐃⲆ);
      jp(Hn, c, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      Hn.globalAlpha = 1;
    }
    Hn.restore();
  }
  function Vv() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    Hn.rotate(this.angle);
    this.ⵠᐃⵠⲆⵠⵠᐃ = Math.min(1, this.ⵠᐃⵠⲆⵠⵠᐃ + xx * 2);
    Hn.globalAlpha = this.ⵠᐃⵠⲆⵠⵠᐃ * Math.min(1, Math.max(0, ᐃⵠⲆΔ.ⲆⵠᐃⲆ(this, this.r) / 80));
    this.ΔᐃΔᐃ.ᐃΔΔ();
    ᐃΔ = Ⲇᐃ[247][px.time][this.ᐃᐃⲆⲆⲆᐃᐃ];
    if (this.ᐃᐃⲆⲆⲆᐃᐃ < 2) {
      ΔΔᐃ = this.ΔᐃΔᐃ.ⵠΔⵠ * -ᐃΔ.width;
      ᐃⲆᐃ = -ᐃΔ.height * this.ΔᐃΔᐃ.ⵠΔⵠ;
    } else if (this.ⲆΔⵠⲆⵠⵠⲆ === 0) {
      ΔΔᐃ = -ᐃΔ.width;
      ᐃⲆᐃ = -ᐃΔ.height;
    } else {
      ΔΔᐃ = -ᐃΔ.width * 1.35;
      ᐃⲆᐃ = -ᐃΔ.height * 1.35;
    }
    jp(Hn, ᐃΔ, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
    Hn.globalAlpha = 1;
    Hn.restore();
  }
  function Wv() {
    if (this.ⲆⲆⲆ.ᐃΔΔ) {
      if (this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⲆᐃΔ == 0) {
        this.ⲆⲆⲆ.ᐃΔΔ = false;
      }
      var a = ro * (xx * (1 - this.ⲆⲆⲆ.ᐃⵠⲆⲆ.ⵠΔⵠ) * 600);
      var b = Math.sin(this.ⲆⲆⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ⲆⲆⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Hn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Hn.translate(qx.ⲆⲆᐃ.x + this.x + b, qx.ⲆⲆᐃ.y + this.y + c);
    Hn.rotate(this.angle);
    ᐃΔ = Ⲇᐃ[153][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xx * 3) % (Math.PI * 2);
    }
    Hn.rotate(this.rotate);
    ᐃΔ = Ⲇᐃ[1198][px.time];
    jp(Hn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
    Hn.restore();
  }
  function Xv(a) {
    if (a > 0) {
      var b = Ⲇᐃ[a][px.time];
      switch (a) {
        case 58:
          Fw(a, b, -b.width / 2 + ro * 2, -b.height / 2 - ro * 5);
          break;
        case 10:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 18);
          break;
        case 11:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 10);
          break;
        case 23:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 19);
          break;
        case 24:
          zw(a, b, -b.width / 4, -b.height / 4 - ro * 20);
          break;
        case 25:
          Fw(a, b, -b.width / 2 - ro * 1, -b.height / 2 - ro * 23);
          break;
        case 26:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 5);
          break;
        case 27:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 2);
          break;
        case 43:
          Fw(a, b, -b.width / 2 + ro * 1.5, -b.height / 2 - ro * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          zw(a, b, -b.width / 4, -b.height / 4 + ro * 2);
          break;
        case 41:
        case 42:
          Fw(a, b, -b.width / 2 - ro * 5, -b.height / 2 - ro * 2);
          break;
        case 40:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 2);
          break;
        case 85:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 2);
          break;
        case 48:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 2);
          break;
        case 47:
          Fw(a, b, -b.width / 2 + ro * 2, -b.height / 2);
          break;
        case 59:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 5);
          break;
        case 77:
        case 78:
        case 79:
          Fw(a, b, -b.width / 2 - ro * 1, -b.height / 2);
          break;
        case 83:
          Fw(a, b, -b.width / 2, -b.height / 2 + ro * 2);
          break;
        case 84:
        case 86:
          Fw(a, b, -b.width / 2, -b.height / 2 + ro * 8);
          break;
        case 61:
          Fw(a, b, -b.width / 2, -b.height / 2 - ro * 4);
      }
    }
  }
  function Yv() {
    if (!this.ΔⲆⵠΔⵠ && this.ⵠⵠᐃⵠⵠ !== 0) {
      if (this.x != this.r.x || this.r.y != this.y) {
        var a = (ᐃⵠⲆΔ.ⵠΔⲆⲆⲆⲆⵠ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ΔⲆⵠᐃⵠ = ᐃⵠⲆΔ.ⵠᐃᐃᐃⵠⲆΔ(a, this.ΔⲆⵠᐃⵠ);
        this.ΔⲆⵠᐃⵠ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(this.ΔⲆⵠᐃⵠ, a, 0.018);
      }
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
      Hn.rotate(this.ΔⲆⵠᐃⵠ);
      if (this.ⵠⵠᐃⵠⵠ === 223) {
        if (this.ΔΔΔΔᐃ > 50 || this.ΔⲆᐃᐃⲆ > 0) {
          if (this.ΔΔΔΔᐃ > 50) {
            this.ΔⲆᐃᐃⲆ = Math.min(1, this.ΔⲆᐃᐃⲆ + xx);
          } else {
            this.ΔⲆᐃᐃⲆ = Math.max(0, this.ΔⲆᐃᐃⲆ - xx);
          }
          Hn.globalAlpha = this.ΔⲆᐃᐃⲆ;
          var b = Ⲇᐃ[225][px.time];
          zw(225, b, -b.width / 4, -b.height / 4);
          Hn.globalAlpha = 1;
        }
        b = Ⲇᐃ[223][px.time];
        zw(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠᐃⵠⵠ === 229) {
        this.ⲆⵠⲆⵠᐃ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(this.ⲆⵠⲆⵠᐃ, this.ΔΔΔΔᐃ, 0.018);
        this.ⵠᐃΔΔΔΔᐃ.ᐃΔΔ();
        if (this.ΔΔΔΔᐃ > 85) {
          this.ΔⲆᐃᐃⲆ = Math.min(1, this.ΔⲆᐃᐃⲆ + xx / 4);
        } else {
          this.ΔⲆᐃᐃⲆ = Math.max(0.1, this.ΔⲆᐃᐃⲆ - xx);
        }
        b = Ⲇᐃ[1100][px.time];
        zw(1100, b, -b.width / 4, -b.height / 4);
        b = Ⲇᐃ[1103][px.time];
        ΔΔᐃ = -b.width;
        ᐃⲆᐃ = -b.height;
        Hn.save();
        Hn.translate(ro * -20, ro * -20);
        Hn.rotate(this.ΔⲆᐃᐃⲆ * this.ⵠᐃΔΔΔΔᐃ.ⵠΔⵠ);
        jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
        Hn.restore();
        b = Ⲇᐃ[1106][px.time];
        Hn.save();
        Hn.translate(ro * 20, ro * -20);
        Hn.rotate(this.ΔⲆᐃᐃⲆ * -this.ⵠᐃΔΔΔΔᐃ.ⵠΔⵠ);
        jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
        Hn.restore();
      } else if (this.ⵠⵠᐃⵠⵠ === 228) {
        this.ⲆⵠⲆⵠᐃ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(this.ⲆⵠⲆⵠᐃ, this.ΔΔΔΔᐃ, 0.018);
        this.ⵠᐃΔΔΔΔᐃ.ᐃΔΔ();
        if (this.ΔΔΔΔᐃ > 85) {
          this.ΔⲆᐃᐃⲆ = Math.min(1, this.ΔⲆᐃᐃⲆ + xx / 4);
        } else {
          this.ΔⲆᐃᐃⲆ = Math.max(0.1, this.ΔⲆᐃᐃⲆ - xx);
        }
        b = Ⲇᐃ[1085][px.time];
        zw(1085, b, -b.width / 4, -b.height / 4);
        b = Ⲇᐃ[1088][px.time];
        ΔΔᐃ = -b.width;
        ᐃⲆᐃ = -b.height;
        Hn.save();
        Hn.translate(ro * -40, ro * -45);
        Hn.rotate(this.ΔⲆᐃᐃⲆ * this.ⵠᐃΔΔΔΔᐃ.ⵠΔⵠ);
        jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
        Hn.restore();
        b = Ⲇᐃ[1091][px.time];
        Hn.save();
        Hn.translate(ro * 40, ro * -45);
        Hn.rotate(-this.ⵠᐃΔΔΔΔᐃ.ⵠΔⵠ * this.ΔⲆᐃᐃⲆ);
        jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
        Hn.restore();
      } else if (this.ⵠⵠᐃⵠⵠ === 227) {
        this.ⲆⵠⲆⵠᐃ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(this.ⲆⵠⲆⵠᐃ, this.ΔΔΔΔᐃ, 0.018);
        this.ⵠᐃΔΔΔΔᐃ.ᐃΔΔ();
        if (this.ΔΔΔΔᐃ > 85) {
          this.ΔⲆᐃᐃⲆ = Math.min(1, this.ΔⲆᐃᐃⲆ + xx / 4);
        } else {
          this.ΔⲆᐃᐃⲆ = Math.max(0.1, this.ΔⲆᐃᐃⲆ - xx);
        }
        b = Ⲇᐃ[1070][px.time];
        zw(1070, b, -b.width / 4, -b.height / 4);
        b = Ⲇᐃ[1073][px.time];
        ΔΔᐃ = -b.width;
        ᐃⲆᐃ = -b.height;
        Hn.save();
        Hn.translate(ro * -40, ro * -45);
        Hn.rotate(this.ΔⲆᐃᐃⲆ * this.ⵠᐃΔΔΔΔᐃ.ⵠΔⵠ);
        jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
        Hn.restore();
        b = Ⲇᐃ[1076][px.time];
        Hn.save();
        Hn.translate(ro * 40, ro * -45);
        Hn.rotate(-this.ⵠᐃΔΔΔΔᐃ.ⵠΔⵠ * this.ΔⲆᐃᐃⲆ);
        jp(Hn, b, -ΔΔᐃ / 4, -ᐃⲆᐃ / 4, ΔΔᐃ / 2, ᐃⲆᐃ / 2);
        Hn.restore();
      } else if (this.ⵠⵠᐃⵠⵠ === 91) {
        this.ⲆⵠⲆⵠᐃ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(this.ⲆⵠⲆⵠᐃ, this.ΔΔΔΔᐃ, 0.018);
        b = Ⲇᐃ[91][px.time];
        zw(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠᐃⵠⵠ === 230) {
        this.ⲆⵠⲆⵠᐃ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(this.ⲆⵠⲆⵠᐃ, this.ΔΔΔΔᐃ, 0.018);
        b = Ⲇᐃ[236][px.time];
        zw(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠᐃⵠⵠ === 224) {
        b = Ⲇᐃ[224][px.time];
        zw(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠᐃⵠⵠ === 239) {
        b = Ⲇᐃ[1221][px.time];
        if (this.ΔΔΔΔᐃ > 85) {
          this.ΔⲆᐃᐃⲆ = Math.min(1, this.ΔⲆᐃᐃⲆ + xx / 4);
        } else {
          this.ΔⲆᐃᐃⲆ = Math.max(0, this.ΔⲆᐃᐃⲆ - xx);
        }
        this.ⲆᐃΔⵠᐃ += xx * 60;
        if (this.ⲆᐃΔⵠᐃ > 60) {
          this.ⲆᐃΔⵠᐃ -= 60;
        }
        var c = this.ΔⲆᐃᐃⲆ * (-6 + (this.ⲆᐃΔⵠᐃ < 30 ? this.ⲆᐃΔⵠᐃ / 30 : 1 - (this.ⲆᐃΔⵠᐃ - 30) / 30) * 12);
        zw(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⵠⵠᐃⵠⵠ === 225) {
        b = Ⲇᐃ[1043][px.time];
        if (this.ΔΔΔΔᐃ > 85) {
          this.ΔⲆᐃᐃⲆ = Math.min(1, this.ΔⲆᐃᐃⲆ + xx / 4);
        } else {
          this.ΔⲆᐃᐃⲆ = Math.max(0, this.ΔⲆᐃᐃⲆ - xx);
        }
        this.ⲆᐃΔⵠᐃ += xx * 60;
        if (this.ⲆᐃΔⵠᐃ > 60) {
          this.ⲆᐃΔⵠᐃ -= 60;
        }
        c = ((this.ⲆᐃΔⵠᐃ < 30 ? this.ⲆᐃΔⵠᐃ / 30 : 1 - (this.ⲆᐃΔⵠᐃ - 30) / 30) * 12 - 6) * this.ΔⲆᐃᐃⲆ;
        zw(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⵠⵠᐃⵠⵠ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = Ⲇᐃ[1055][px.time];
        if (this.ΔΔΔΔᐃ > 85) {
          this.ΔⲆᐃᐃⲆ = Math.min(1, this.ΔⲆᐃᐃⲆ + xx / 4);
        } else {
          this.ΔⲆᐃᐃⲆ = Math.max(0, this.ΔⲆᐃᐃⲆ - xx);
        }
        this.ⲆᐃΔⵠᐃ += xx * 60;
        if (this.ⲆᐃΔⵠᐃ > 60) {
          this.ⲆᐃΔⵠᐃ -= 60;
        }
        c = this.ΔⲆᐃᐃⲆ * ((this.ⲆᐃΔⵠᐃ < 30 ? this.ⲆᐃΔⵠᐃ / 30 : 1 - (this.ⲆᐃΔⵠᐃ - 30) / 30) * 12 - 6);
        zw(1055, b, -b.width / 4 + c, -b.height / 4);
        Hn.restore();
        Hn.save();
        Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
        Hn.rotate(Math.PI + this.ΔⲆⵠᐃⵠ + e);
        Hn.translate(120, c);
        Hn.rotate(d);
        b = Ⲇᐃ[1060][px.time];
        ΔΔᐃ = -b.width;
        ᐃⲆᐃ = -b.height;
        jp(Hn, b, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
        Hn.restore();
        Hn.save();
        Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
        Hn.rotate(Math.PI + this.ΔⲆⵠᐃⵠ + d + e);
        Hn.translate(120, c);
        Hn.rotate(d);
        b = Ⲇᐃ[1063][px.time];
        ΔΔᐃ = -b.width;
        ᐃⲆᐃ = -b.height;
        jp(Hn, b, -ΔΔᐃ / 2, -ᐃⲆᐃ / 2, ΔΔᐃ, ᐃⲆᐃ);
      }
      Hn.restore();
    }
  }
  function Zv() {
    if (this.enabled && this.ΔⲆⲆΔΔ >= 0) {
      var a = new Date().getTime() - this.ΔⲆⲆΔΔ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      if ((a = Math.floor(a / 1000)) < 60) {
        a = 60 - a;
        if (!this.label) {
          this.label = cu(ro, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        if (this.now != a || !this.ᐃⲆᐃⲆᐃΔᐃ) {
          this.now = a;
          this.ᐃⲆᐃⲆᐃΔᐃ = cu(ro, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        jp(Hn, this.label, (Sn - this.label.width) / 2, ro * 100);
        Hn.globalAlpha = b;
        jp(Hn, this.ᐃⲆᐃⲆᐃΔᐃ, (Sn - this.label.width) / 2 - this.ᐃⲆᐃⲆᐃΔᐃ.width + ro * 15, ro * 100);
        Hn.globalAlpha = 1;
      }
    }
  }
  function $v() {
    if (this.message !== at) {
      var a = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ.length > 0 ? -95 : 0;
      jp(Hn, this.message, 0, Zn - this.message.height + a);
    }
  }
  function _v(b, c, d) {
    if (c.ⵠΔⲆⲆΔΔⵠ() !== 1) {
      return c;
    }
    var e = ᐃⵠⵠⵠᐃⲆΔ[d][b];
    if (fh === e) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ΔΔΔΔⲆⲆⵠⲆΔ[d];
      f.fillRect(0, 0, g, a);
      ᐃⵠⵠⵠᐃⲆΔ[d][b] = e;
    }
    return e;
  }
  function aw() {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = od(ro, this.text[a]);
          this.ᐃᐃΔᐃⲆᐃⲆ[a] = 0;
          this.ⲆⲆᐃⲆⵠᐃⲆ[a] = 0;
        }
        if (a === 1) {
          this.ⲆⲆᐃⲆⵠᐃⲆ[0] = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(this.ᐃΔⵠⵠⵠⲆᐃ) * 30;
        }
      }
      this.ᐃᐃΔᐃⲆᐃⲆ[0] += xx;
      if (this.text.length > 1) {
        this.ᐃΔⵠⵠⵠⲆᐃ = Math.min(this.ᐃΔⵠⵠⵠⲆᐃ + xx, 1);
        if (this.ᐃᐃΔᐃⲆᐃⲆ[0] > 1 && this.ᐃΔⵠⵠⵠⲆᐃ > 0.5) {
          this.ᐃᐃΔᐃⲆᐃⲆ[1] += xx;
        }
      }
      for (a = 0; a < this.text.length && a < 2; a++) {
        var b = this.ᐃᐃΔᐃⲆᐃⲆ[a];
        if (b > 0) {
          Hn.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          jp(Hn, this.label[a], -this.label[a].width / 2, -this.ⲆⲆᐃⲆⵠᐃⲆ[a] + -this.label[a].height / 2 - ro * 110);
        }
      }
      if (this.ᐃᐃΔᐃⲆᐃⲆ[0] > 4) {
        this.ᐃᐃΔᐃⲆᐃⲆ.shift();
        this.text.shift();
        this.ⲆⲆᐃⲆⵠᐃⲆ.shift();
        this.label.shift();
        this.ᐃΔⵠⵠⵠⲆᐃ = 0;
      }
    }
    Hn.restore();
  }
  function bw(a, b) {
    if (this.text) {
      if (this.timeout.ⲆᐃΔ) {
        Hn.globalAlpha = 1 - this.timeout.ⵠΔⵠ;
      } else {
        Hn.globalAlpha = 1;
      }
      this.label ||= cu(ro, this.text, 40, a, null, null, null, null, null, b, 10);
      jp(Hn, this.label, (Sn - this.label.width) / 2, ro * 50);
      Hn.globalAlpha = 1;
      if (this.timeout.ᐃΔΔ() && this.timeout.ⲆᐃΔ == 0) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function cw() {
    var b = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        b = 1;
    }
    if (this.ΔⲆⵠΔⵠ) {
      for (var c = 0; this.bubbles.length > c; c++) {
        var f = this.bubbles[c];
        if (f.ⲆⲆΔᐃⵠ > 0.5) {
          var j = 1 - (f.ⲆⲆΔᐃⵠ - 0.5) * 2;
        } else {
          j = f.ⲆⲆΔᐃⵠ * 2;
        }
        Hn.globalAlpha = j;
        var k = Ⲇᐃ[540][px.time][f.id];
        jp(Hn, k, qx.ⲆⲆᐃ.x + f.x - k.width / 2, qx.ⲆⲆᐃ.y + f.y - k.height / 2);
        Hn.globalAlpha = 1;
      }
    } else {
      Hn.save();
      Hn.translate(qx.ⲆⲆᐃ.x + this.x, qx.ⲆⲆᐃ.y + this.y);
      px.ΔΔᐃⲆⲆΔⵠΔᐃ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                Hn.save();
                var b = a.attack.ⵠΔⵠ * -3 / Math.PI;
                if (a.attack.ⲆᐃΔ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ⵠΔⵠ) / 3;
                } else {
                  c = a.attack.ⵠΔⵠ;
                }
                Hn.rotate(a.angle - Math.PI / 2 + c);
                Hn.globalAlpha = b / 1.2;
                $b(Hn, ro * -40, ro * 90, ro * 5);
                ed(Hn, "#0B6A84");
                Hn.globalAlpha = b / 1.2;
                $b(Hn, ro * -52, ro * 100, ro * 8);
                ed(Hn, "#0B6A84");
                Hn.globalAlpha = b / 1.2;
                $b(Hn, ro * -30, ro * 95, ro * 4);
                ed(Hn, "#0B6A84");
                Hn.globalAlpha = 1;
                Hn.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ⲆΔⵠⲆⵠⵠⲆ === 1) {
                  break;
                }
                if (a.ⲆᐃⲆΔΔ > 0) {
                  var d = Sr.ΔΔᐃⵠⲆⲆᐃ[px.time];
                } else {
                  d = a.ΔⵠᐃⲆⵠᐃⲆ > 0 || a.ΔⲆⲆΔᐃ > 0 ? Sr.ⲆΔⲆⲆⵠΔᐃ[px.time] : Sr.ⲆᐃⲆᐃΔΔⲆ[px.time];
                }
                b = a.attack.ⵠΔⵠ * -3 / Math.PI;
                if ((c = a.attack.ⲆᐃΔ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ⲆⵠⵠⵠⵠΔᐃ = a.angle;
                }
                Hn.save();
                Hn.rotate(a.ⲆⵠⵠⵠⵠΔᐃ - Math.PI / 2);
                Hn.globalAlpha = b;
                var e = ro * 25 + c * 25;
                $b(Hn, e, ro * 80, ro * 15);
                ed(Hn, d);
                $b(Hn, -e, ro * 80, ro * 15);
                ed(Hn, d);
                Hn.globalAlpha = 1;
                Hn.restore();
            }
          }
        })(this);
      }
      Hn.save();
      Hn.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ⵠⵠᐃⵠⵠ !== 0) {
          this.ᐃⲆᐃⲆᐃⲆⵠ.ᐃΔΔ();
        } else if (this.action & 32) {
          this.ⵠⵠΔⵠⵠᐃⵠ.ᐃΔΔ();
        }
      }
      var m;
      var p = this.ᐃⲆᐃⲆᐃⲆⵠ.ⵠΔⵠ;
      var q = this.ⵠⵠΔⵠⵠᐃⵠ.ⵠΔⵠ;
      if (this.ᐃΔⲆⵠᐃ === 85) {
        k = Ⲇᐃ[793][px.time];
        m = 793;
      } else if (this.ᐃΔⲆⵠᐃ === 20) {
        k = Ⲇᐃ[920][px.time];
        m = 920;
      } else if (this.ᐃΔⲆⵠᐃ === 21) {
        k = Ⲇᐃ[924][px.time];
        m = 924;
      } else if (this.ᐃΔⲆⵠᐃ === 22) {
        k = Ⲇᐃ[928][px.time];
        m = 928;
      } else if (this.ⵠⵠⲆΔᐃⲆⲆ) {
        k = Ⲇᐃ[822][px.time];
        m = 822;
      } else {
        k = Ⲇᐃ[7][this.ⵠᐃⵠⲆ][px.time];
        m = 7;
      }
      ⲆⲆΔᐃ = Ⲇᐃ[286][px.time];
      var w = k;
      var h = m;
      if (this.action & 16) {
        if (this.attack.ᐃΔΔ() && kh == this.attack.ⲆᐃΔ) {
          this.ᐃΔΔⵠΔ = !this.ᐃΔΔⵠΔ;
          this.action -= 16;
          if (this.ᐃΔⲆⵠ == qx.ᐃΔⲆⵠ) {
            qx.control.ΔⲆⲆⵠ = 0;
          }
        }
        if (this.right >= 0) {
          this.ᐃΔΔⵠΔ = Eh;
        }
        var l = this.ᐃΔΔⵠΔ ? this.attack.ⵠΔⵠ : -this.attack.ⵠΔⵠ / 3;
        var x = this.ᐃΔΔⵠΔ ? this.attack.ⵠΔⵠ / 3 : -this.attack.ⵠΔⵠ;
        if (this.ⵠⵠⲆΔᐃⲆⲆ) {
          Hn.save();
          Hn.rotate(l);
          Fw(m, k, -k.width / 2 - (66 + p) * ro, -k.height / 2 + ro * (5 + q));
          Hn.restore();
          Hn.save();
          Hn.rotate(x);
          Fw(m, k, -k.width / 2 + (66 + p) * ro, -k.height / 2 + (5 + q) * ro);
          Hn.restore();
        } else if (b === 0) {
          if (this.right === 64) {
            l = -ᐃⵠⲆΔ.ᐃⲆᐃΔΔᐃⲆ(-l);
          }
          Hn.save();
          Hn.rotate(l);
          Fw(286, ⲆⲆΔᐃ, -ⲆⲆΔᐃ.width / 2 - (49 + p) * ro, -ⲆⲆΔᐃ.height / 2 + (15 + q) * ro);
          if (this.right === 28) {
            var u = Ⲇᐃ[this.right][this.ΔⵠᐃⲆⵠ][px.time];
            tf(this.right, this.ΔⵠᐃⲆⵠ, u, -u.width / 4 - ro * (62 + p), -u.height / 4 + (q + 18) * ro);
          } else {
            Dv(this.right, p, q);
          }
          if (m >= 920) {
            zw(m, k, -k.width / 4 - ro * (49 + p), -k.height / 4 + ro * (11 + q));
          } else if (m !== 793) {
            tf(m, this.ⵠᐃⵠⲆ, k, -k.width / 4 - (49 + p) * ro, -k.height / 4 + (11 + q) * ro);
          } else {
            Fw(m, k, -k.width / 2 - ro * (49 + p), -k.height / 2 + ro * (11 + q));
          }
          Hn.restore();
          Hn.save();
          Hn.rotate(x);
          Fw(286, ⲆⲆΔᐃ, -ⲆⲆΔᐃ.width / 2 + ro * (49 + p), -ⲆⲆΔᐃ.height / 2 + (15 + q) * ro);
          if (m >= 920) {
            zw(m, k, -k.width / 4 + ro * (49 + p), -k.height / 4 + ro * (11 + q));
          } else if (m !== 793) {
            tf(m, this.ⵠᐃⵠⲆ, k, -k.width / 4 + ro * (49 + p), -k.height / 4 + ro * (11 + q));
          } else {
            Fw(m, k, -k.width / 2 + ro * (49 + p), -k.height / 2 + (11 + q) * ro);
          }
          Hn.restore();
        }
      } else if (this.ⵠⵠⲆΔᐃⲆⲆ) {
        Fw(m, k, -k.width / 2 - ro * (66 + p), -k.height / 2 + (5 + q) * ro);
        Fw(m, k, -k.width / 2 + ro * (66 + p), -k.height / 2 + (5 + q) * ro);
      } else if (b === 0) {
        Fw(286, ⲆⲆΔᐃ, -ⲆⲆΔᐃ.width / 2 - ro * (49 + p), -ⲆⲆΔᐃ.height / 2 + ro * (15 + q));
        if (this.right === 28) {
          u = Ⲇᐃ[this.right][this.ΔⵠᐃⲆⵠ][px.time];
          tf(this.right, this.ΔⵠᐃⲆⵠ, u, -u.width / 4 - (62 + p) * ro, -u.height / 4 + (q + 18) * ro);
        } else {
          Dv(this.right, p, q);
        }
        if (m >= 920) {
          zw(m, k, -k.width / 4 - (49 + p) * ro, -k.height / 4 + (11 + q) * ro);
        } else if (m !== 793) {
          tf(m, this.ⵠᐃⵠⲆ, k, -k.width / 4 - (49 + p) * ro, -k.height / 4 + ro * (11 + q));
        } else {
          Fw(m, k, -k.width / 2 - ro * (49 + p), -k.height / 2 + (11 + q) * ro);
        }
        Fw(286, ⲆⲆΔᐃ, -ⲆⲆΔᐃ.width / 2 + ro * (49 + p), -ⲆⲆΔᐃ.height / 2 + ro * (15 + q));
        if (m >= 920) {
          zw(m, k, -k.width / 4 + (49 + p) * ro, -k.height / 4 + (11 + q) * ro);
        } else if (m !== 793) {
          tf(m, this.ⵠᐃⵠⲆ, k, -k.width / 4 + ro * (49 + p), -k.height / 4 + (11 + q) * ro);
        } else {
          Fw(m, k, -k.width / 2 + ro * (49 + p), -k.height / 2 + (11 + q) * ro);
        }
      }
      if (this.ⵠⵠᐃᐃⵠ && this.ᐃΔⲆⵠᐃ < 1) {
        k = Ⲇᐃ[29][this.ⵠΔⲆᐃⲆᐃⲆ][px.time];
        tf(29, this.ⵠΔⲆᐃⲆᐃⲆ, k, -k.width / 4, -k.height / 4 - ro * 39);
      }
      if (this.ⵠⵠⲆΔᐃⲆⲆ) {
        k = Ⲇᐃ[820][px.time];
        Fw(820, k, -k.width / 2, -k.height / 2);
        this.ⵠⵠΔⲆⲆΔΔ.ᐃΔΔ();
        k = Ⲇᐃ[821][px.time];
        Fw(821, k, -k.width / 2, -k.height / 2 + this.ⵠⵠΔⲆⲆΔΔ.ⵠΔⵠ);
      } else {
        k = Ⲇᐃ[255][this.ⵠᐃⵠⲆ][px.time];
        if (this.ᐃΔⲆⵠᐃ !== 85 && (tf(255, this.ⵠᐃⵠⲆ, k, -k.width / 4, -k.height / 4), this.ᐃΔⵠⲆᐃ > 0)) {
          k = Ⲇᐃ[796][this.ᐃΔⵠⲆᐃ][px.time];
          tf(796, this.ᐃΔⵠⲆᐃ, k, -k.width / 4, -k.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ᐃⲆⲆΔⵠ.ᐃΔΔ() && this.ᐃⲆⲆΔⵠ.ⲆᐃΔ == Ur) {
          this.action -= 128;
        }
        Hn.globalAlpha = 0.6 - this.ᐃⲆⲆΔⵠ.ⵠΔⵠ;
        if (this.ⵠⵠⲆΔᐃⲆⲆ) {
          k = Ⲇᐃ[825];
          jp(Hn, k, -k.width / 2, -k.height / 2);
        } else {
          k = _v(this.ⵠᐃⵠⲆ, Ⲇᐃ[255][this.ⵠᐃⵠⲆ][0], ᐃΔⵠΔⵠⲆᐃⲆᐃ);
          jp(Hn, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        Hn.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ⵠⵠⵠᐃΔⵠⲆ.ᐃΔΔ() && this.ⵠⵠⵠᐃΔⵠⲆ.ⲆᐃΔ == 0) {
          this.action -= 256;
        }
        Hn.globalAlpha = 0.6 - this.ⵠⵠⵠᐃΔⵠⲆ.ⵠΔⵠ;
        k = Ⲇᐃ[266];
        jp(Hn, k, -k.width / 2, -k.height / 2);
        Hn.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ⲆⲆⲆ.ᐃΔΔ() && this.ⲆⲆⲆ.ⲆᐃΔ == 0) {
          this.action -= 2;
        }
        Hn.globalAlpha = 0.6 - this.ⲆⲆⲆ.ⵠΔⵠ;
        if (this.ⵠⵠⲆΔᐃⲆⲆ) {
          k = Ⲇᐃ[823];
          jp(Hn, k, -k.width / 2, -k.height / 2);
        } else {
          k = _v(this.ⵠᐃⵠⲆ, Ⲇᐃ[255][this.ⵠᐃⵠⲆ][0], ΔᐃⲆΔⵠᐃⲆΔΔ);
          jp(Hn, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        Hn.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ᐃΔΔ() && Eq == this.freeze.ⲆᐃΔ) {
          this.action -= 4;
        }
        Hn.globalAlpha = 0.6 - this.freeze.ⵠΔⵠ;
        k = _v(this.ⵠᐃⵠⲆ, Ⲇᐃ[255][this.ⵠᐃⵠⲆ][0], ⲆᐃⵠᐃᐃⲆΔΔΔ);
        jp(Hn, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        Hn.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ⵠⲆᐃⲆΔΔΔ.ᐃΔΔ() && this.ⵠⲆᐃⲆΔΔΔ.ⲆᐃΔ == 0) {
          this.action -= 8;
        }
        Hn.globalAlpha = 0.6 - this.ⵠⲆᐃⲆΔΔΔ.ⵠΔⵠ;
        if (this.ⵠⵠⲆΔᐃⲆⲆ) {
          k = Ⲇᐃ[824];
          jp(Hn, k, -k.width / 2, -k.height / 2);
        } else {
          k = _v(this.ⵠᐃⵠⲆ, Ⲇᐃ[255][this.ⵠᐃⵠⲆ][0], ⵠⲆⲆⲆᐃΔⵠᐃⲆ);
          jp(Hn, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        Hn.globalAlpha = 1;
      }
      Xv(this.ᐃΔⲆⵠᐃ);
      if (b === 1) {
        if (this.action & 16) {
          p += this.attack.ⵠΔⵠ * 15;
        }
        Fw(286, ⲆⲆΔᐃ, -ⲆⲆΔᐃ.width / 2 - ro * 26, -ⲆⲆΔᐃ.height / 2 + (31 + q + p) * ro);
        if (h >= 920) {
          zw(h, w, -w.width / 4 - ro * 26, -w.height / 4 + (27 + q + p) * ro);
        } else if (h !== 793) {
          tf(h, this.ⵠᐃⵠⲆ, w, -w.width / 4 - ro * 26, -w.height / 4 + ro * (27 + q + p));
        } else {
          Fw(h, w, -w.width / 2 - ro * 26, -w.height / 2 + ro * (27 + q + p));
        }
        Fw(286, ⲆⲆΔᐃ, -ⲆⲆΔᐃ.width / 2 + ro * 26, -ⲆⲆΔᐃ.height / 2 + (31 + q + p) * ro);
        if (h >= 920) {
          zw(h, w, -w.width / 4 + ro * 26, -w.height / 4 + (27 + q + p) * ro);
        } else if (h !== 793) {
          tf(h, this.ⵠᐃⵠⲆ, w, -w.width / 4 + ro * 26, -w.height / 4 + (27 + q + p) * ro);
        } else {
          Fw(h, w, -w.width / 2 + ro * 26, -w.height / 2 + ro * (27 + q + p));
        }
        bv(this.right, 0, q + p);
      }
      Hn.restore();
      if (this.ᐃΔⲆⵠᐃ !== 83 && this.ᐃΔⲆⵠᐃ !== 85) {
        if (this.ⲆᐃⲆΔΔ > 0) {
          this.ΔⲆⵠΔ.ⲆᐃⵠⲆᐃⵠΔ ||= cu(ro, this.ΔⲆⵠΔ.ⵠΔᐃΔⲆ, 20, "#187484", "#000", 2, null, null, ro * 300);
          k = this.ΔⲆⵠΔ.ⲆᐃⵠⲆᐃⵠΔ;
        } else {
          this.ΔⲆⵠΔ.label ||= cu(ro, this.ΔⲆⵠΔ.ⵠΔᐃΔⲆ, 20, "#FFF", "#000", 2, null, null, ro * 300);
          k = this.ΔⲆⵠΔ.label;
        }
        if (px.Δᐃⵠ == Sr.ⲆᐃⲆ) {
          Hn.globalAlpha = 0.5;
        }
        p = Math.floor(-k.width / 2);
        q = Math.floor(-k.height / 2 - ro * 70);
        jp(Hn, k, p, q);
        if (this.ΔⲆⵠΔ.level > 0) {
          var y = p + k.width + 5;
          k = Ⲇᐃ[885];
          if (ᐃⲆᐃᐃⵠⲆΔ[this.ΔⲆⵠΔ.level] === Bg) {
            ᐃⲆᐃᐃⵠⲆΔ[this.ΔⲆⵠΔ.level] = cu(ro, "[" + this.ΔⲆⵠΔ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, ro * 50);
          }
          jp(Hn, ᐃⲆᐃᐃⵠⲆΔ[this.ΔⲆⵠΔ.level], y, q);
        }
        Hn.globalAlpha = 1;
      } else {
        q = Math.floor(ro * -70);
        p = Math.floor(Ⲇᐃ[558].width / 1.5);
      }
      if (qx.ᐃᐃᐃⲆΔΔⲆ(this.ΔⵠΔΔ)) {
        if (qx.ⵠΔΔΔΔ[0] == this.ΔⵠΔΔ) {
          k = Ⲇᐃ[559];
        } else {
          k = Ⲇᐃ[558];
        }
        jp(Hn, k, p - k.width - 5, q - 6);
      }
      Hn.restore();
    }
  }
  ΔᐃⲆΔⵠᐃⲆΔΔ = 0;
  ᐃΔⵠΔⵠⲆᐃⲆᐃ = 1;
  ⲆᐃⵠᐃᐃⲆΔΔΔ = 2;
  ⵠⲆⲆⲆᐃΔⵠᐃⲆ = 3;
  ᐃᐃⲆΔΔΔΔᐃⲆ = 4;
  ᐃⵠⵠⵠᐃⲆΔ = [[], [], [], [], []];
  ΔΔΔΔⲆⲆⵠⲆΔ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var dw = 0;
  function ew(j, e, i, k, n, o, a, q) {
    if (q === Ak) {
      q = 0;
    }
    for (var r = a; r >= q; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; k >= w; w++) {
          var x = nx.ΔΔΔⲆ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== Ak) {
              for (var z = 0; z < y.length; z++) {
                var A = y[z];
                var B = Ⲇᐃ[n][px.time][r];
                var D = (dw + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                var F = (1 + E * 0.9 / 30) * -B.width;
                var G = (1 + E * 0.9 / 30) * -B.height;
                E = (D = (dw + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = Hn.globalAlpha;
                Hn.globalAlpha = H * (0.9 + E * 0.1);
                jp(Hn, B, qx.ⲆⲆᐃ.x + A.x - F / 2, qx.ⲆⲆᐃ.y + A.y - G / 2, F, G);
                Hn.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  function fw(j, e, i, k, n, o, a, q) {
    if (q === fh) {
      q = 0;
    }
    px.ΔᐃΔᐃ[n].ᐃΔΔ();
    for (var r = a; r >= q; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; k >= w; w++) {
          var x = nx.ΔΔΔⲆ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== undefined) {
              for (var z = 0; z < y.length; z++) {
                var A = y[z];
                if (A.ᐃΔΔ) {
                  if (A.ⲆⲆⲆ.ᐃΔΔ() && A.ⲆⲆⲆ.ⲆᐃΔ == Nn) {
                    A.ᐃΔΔ = false;
                  }
                  var B = ro * (xx * (1 - A.ⲆⲆⲆ.ⵠΔⵠ) * 600);
                  var D = Math.sin(A.angle) * B;
                  var E = B * Math.cos(A.angle);
                } else {
                  D = 0;
                  E = 0;
                }
                var F = Ⲇᐃ[n][px.time][r];
                var G = px.ΔᐃΔᐃ[n].ⵠΔⵠ * -F.width;
                var H = -F.height * px.ΔᐃΔᐃ[n].ⵠΔⵠ;
                jp(Hn, F, qx.ⲆⲆᐃ.x + A.x - G / 2 + D, qx.ⲆⲆᐃ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  var gw = [];
  for (Ab = 0; Ab < 100; Ab++) {
    var hw = 1;
    if (Math.random() < 0.25) {
      hw = 0;
    }
    gw.push(hw);
  }
  function iw(c, e, f, i, j, k, a, m = 0, n) {
    for (var h = c; e >= h; h++) {
      for (var o = f; o <= i; o++) {
        var p = nx.ΔΔΔⲆ[h][o];
        if (p !== undefined && p[k] !== undefined) {
          var q = p[k];
          if (Wa !== q) {
            if (q.scale === 1) {
              var r = Ⲇᐃ[j][px.time][q.ᐃⲆⵠⲆ];
              Hn.save();
              Hn.translate(qx.ⲆⲆᐃ.x + "#a7983c", qx.ⲆⲆᐃ.y + "Защищает от холода вне воды.");
              Hn.rotate(q.angle);
              jp(Hn, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              Hn.restore();
            } else if (q.scale === 3) {
              for (var s = 0; s < q.ᐃⵠᐃ.length; s++) {
                Hn.save();
                Hn.translate(qx.ⲆⲆᐃ.x + "#a7983c", qx.ⲆⲆᐃ.y + "Защищает от холода вне воды.");
                Hn.rotate(q.ᐃⵠᐃ[s].angle);
                r = Ⲇᐃ[j][px.time][q.ᐃⵠᐃ[s].ᐃⲆⵠⲆ];
                jp(Hn, r, -r.width / 3 + q.ᐃⵠᐃ[s].x, -r.height / 3 + q.ᐃⵠᐃ[s].y, r.width / 1.5, r.height / 1.5);
                Hn.restore();
              }
            } else {
              r = Ⲇᐃ[j][px.time][q.ᐃⲆⵠⲆ];
              Hn.save();
              Hn.translate(qx.ⲆⲆᐃ.x + "#a7983c", qx.ⲆⲆᐃ.y + "Защищает от холода вне воды.");
              Hn.rotate(q.angle);
              jp(Hn, r, -r.width / 2, -r.height / 2, r.width, r.height);
              Hn.restore();
            }
          }
        }
      }
    }
  }
  function jw(j, e, i, k, n, o, a, q = 0, r) {
    for (var h = a; h >= q; h--) {
      for (var s = j; s <= e; s++) {
        for (var t = i; t <= k; t++) {
          var w = nx.ΔΔΔⲆ[s][t];
          if (w !== undefined && Xg !== w[o]) {
            var x = w[o][h];
            if (Y !== x) {
              for (var A = 0; x.length > A; A++) {
                var B = x[A];
                if (B.ᐃΔΔ) {
                  if (B.ⲆⲆⲆ.ᐃΔΔ() && B.ⲆⲆⲆ.ⲆᐃΔ == Nn) {
                    B.ᐃΔΔ = _a;
                  }
                  var D = (1 - B.ⲆⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
                  var E = Math.sin(B.angle) * D;
                  var F = D * Math.cos(B.angle);
                } else {
                  E = 0;
                  F = 0;
                }
                for (var G = 0; G < ⵠⵠᐃᐃⲆΔᐃ[h].ⵠΔᐃᐃ; G++) {
                  if (px.Ⲇᐃⵠⵠⵠ[G].ᐃΔⵠΔΔⲆΔ !== wx) {
                    px.Ⲇᐃⵠⵠⵠ[G].ᐃΔΔ();
                    px.Ⲇᐃⵠⵠⵠ[G].ᐃΔⵠΔΔⲆΔ = wx;
                  }
                  var H = Ⲇᐃ[941][px.time][ⵠⵠᐃᐃⲆΔᐃ[h].ⵠΔⵠΔ[G].ᐃᐃⵠ];
                  var I = -H.width * px.Ⲇᐃⵠⵠⵠ[G].ⵠΔⵠ;
                  var J = px.Ⲇᐃⵠⵠⵠ[G].ⵠΔⵠ * -H.height;
                  jp(Hn, H, qx.ⲆⲆᐃ.x + B.x - I / 4 + E + ⵠⵠᐃᐃⲆΔᐃ[h].ⵠΔⵠΔ[G].x, qx.ⲆⲆᐃ.y + B.y - J / 4 + F + ⵠⵠᐃᐃⲆΔᐃ[h].ⵠΔⵠΔ[G].y, I / 2, J / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function kw(f, e, i, j, k, n, a, o, q) {
    if (Kn === o) {
      o = 0;
    }
    for (var h = a; o <= h; h--) {
      for (var r = f; r <= e; r++) {
        for (var t = i; j >= t; t++) {
          if (q <= 0 || gw[(r + t * q) % gw.length] !== 1) {
            var w = nx.ΔΔΔⲆ[r][t];
            if (w !== undefined && Wa !== w[n]) {
              var x = w[n][h];
              if (x !== undefined) {
                for (var y = 0; x.length > y; y++) {
                  var z = x[y];
                  if (z.ᐃΔΔ) {
                    if (z.ⲆⲆⲆ.ᐃΔΔ() && z.ⲆⲆⲆ.ⲆᐃΔ == 0) {
                      z.ᐃΔΔ = false;
                    }
                    var A = (1 - z.ⲆⲆⲆ.ⵠΔⵠ) * xx * 600 * ro;
                    var B = A * Math.sin(z.angle);
                    var D = A * Math.cos(z.angle);
                  } else {
                    B = 0;
                    D = 0;
                  }
                  var E = Ⲇᐃ[k][px.time][h];
                  jp(Hn, E, qx.ⲆⲆᐃ.x + z.x - E.width / (ᐃⵠΔⲆᐃ * 2) + B, qx.ⲆⲆᐃ.y + z.y - E.height / (ᐃⵠΔⲆᐃ * 2) + D, E.width / ᐃⵠΔⲆᐃ, E.height / ᐃⵠΔⲆᐃ);
                }
              }
            }
          }
        }
      }
    }
  }
  ᐃⵠΔⲆᐃ = 1;
  ⵠⵠᐃᐃⲆΔᐃ = [{
    ⵠΔᐃᐃ: 10,
    ⵠΔⵠΔ: [{
      x: -128,
      y: -20,
      ᐃᐃⵠ: 0
    }, {
      x: -86,
      y: -4,
      ᐃᐃⵠ: 1
    }, {
      x: -60,
      ᐃᐃⵠ: 2,
      y: -74
    }, {
      ᐃᐃⵠ: 0,
      x: -22,
      y: -144
    }, {
      ᐃᐃⵠ: 0,
      x: -58,
      y: 86
    }, {
      ᐃᐃⵠ: 0,
      y: -30,
      x: 3
    }, {
      ᐃᐃⵠ: 1,
      y: -115,
      x: 65
    }, {
      y: -50,
      x: 118,
      ᐃᐃⵠ: 0
    }, {
      x: 73,
      y: 15,
      ᐃᐃⵠ: 1
    }, {
      ᐃᐃⵠ: 0,
      x: 67,
      y: 79
    }]
  }, {
    ⵠΔⵠΔ: [{
      x: -45,
      ᐃᐃⵠ: 0,
      y: -26
    }, {
      ᐃᐃⵠ: 2,
      y: 20,
      x: -45
    }, {
      x: 10,
      y: -60,
      ᐃᐃⵠ: 1
    }, {
      x: 52,
      ᐃᐃⵠ: 1,
      y: -17
    }, {
      x: 14,
      y: 45,
      ᐃᐃⵠ: 0
    }],
    ⵠΔᐃᐃ: 5
  }, {
    ⵠΔᐃᐃ: 3,
    ⵠΔⵠΔ: [{
      ᐃᐃⵠ: 2,
      x: -30,
      y: 3
    }, {
      x: 7,
      y: -38,
      ᐃᐃⵠ: 2
    }, {
      y: 5,
      ᐃᐃⵠ: 2,
      x: 37
    }]
  }, {
    ⵠΔᐃᐃ: 11,
    ⵠΔⵠΔ: [{
      x: -74,
      ᐃᐃⵠ: 2,
      y: -87
    }, {
      x: -11,
      ᐃᐃⵠ: 1,
      y: -10
    }, {
      x: -99,
      ᐃᐃⵠ: 1,
      y: 17
    }, {
      ᐃᐃⵠ: 0,
      x: -66,
      y: 84
    }, {
      ᐃᐃⵠ: 1,
      x: -55,
      y: 123
    }, {
      x: 10,
      y: 81,
      ᐃᐃⵠ: 2
    }, {
      y: 50,
      ᐃᐃⵠ: 0,
      x: 52
    }, {
      ᐃᐃⵠ: 1,
      y: 9,
      x: 138
    }, {
      ᐃᐃⵠ: 0,
      y: -28,
      x: 104
    }, {
      y: -56,
      x: 67,
      ᐃᐃⵠ: 2
    }, {
      ᐃᐃⵠ: 0,
      x: 5,
      y: -112
    }]
  }, {
    ⵠΔᐃᐃ: 6,
    ⵠΔⵠΔ: [{
      ᐃᐃⵠ: 2,
      y: -66,
      x: -33
    }, {
      x: -58,
      y: 10,
      ᐃᐃⵠ: 0
    }, {
      x: -19,
      y: 44,
      ᐃᐃⵠ: 1
    }, {
      x: 44,
      y: 20,
      ᐃᐃⵠ: 0
    }, {
      y: -36,
      ᐃᐃⵠ: 2,
      x: 53
    }, {
      y: -62,
      x: 7,
      ᐃᐃⵠ: 0
    }]
  }, {
    ⵠΔᐃᐃ: 3,
    ⵠΔⵠΔ: [{
      ᐃᐃⵠ: 1,
      y: -25,
      x: -19
    }, {
      x: -29,
      y: 13,
      ᐃᐃⵠ: 2
    }, {
      ᐃᐃⵠ: 0,
      y: 12,
      x: 12
    }]
  }];
  var lw = 0;
  var mw = 0;
  var nw = 0;
  var ow = 0;
  function pw(a, b) {
    if (px.transition) {
      Hn.globalAlpha = 1;
      a.ᐃⲆᐃΔⲆ(b);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1 - px.ⵠΔΔΔ.ⵠΔⵠ;
      a.ᐃⲆᐃΔⲆ(b);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1;
    } else {
      a.ᐃⲆᐃΔⲆ(b);
    }
  }
  function qw(a) {
    Hn.save();
    Hn.translate(qx.ⲆⲆᐃ.x + a.x, qx.ⲆⲆᐃ.y + a.y);
    Hn.rotate(a.angle);
    Hn.globalAlpha = a.alpha;
    var b = Ⲇᐃ[a.id][px.time];
    jp(Hn, b, -b.width / 2, -b.height / 2);
    Hn.globalAlpha = 1;
    Hn.restore();
  }
  function rw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = qx.ⲆⲆᐃ.x + f + 820;
    var l = Math.max(qx.ⲆⲆᐃ.y + e, 0);
    var g = Math.max(-qx.ⲆⲆᐃ.y + Zn - i - 100, 0);
    var r = l;
    var b = Zn - l - g;
    if (n) {
      var d = j.ᐃᐃⵠ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ᐃᐃⵠ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ᐃᐃⵠ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ᐃⲆᐃⲆⲆΔⵠ === 1) {
      if (px.transition) {
        var p = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(15, 77, 72, 252, 239, 187, p);
      } else {
        Hn.fillStyle = Sr.ΔΔⵠᐃΔᐃᐃ[px.time];
      }
      Hn.fillRect(s, r, t, b);
    } else {
      if (px.transition) {
        p = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[2], k.Δᐃⵠ[0], k.Δᐃⵠ[1], k.Δᐃⵠ[2], p);
      } else {
        Hn.fillStyle = k.ᐃⵠⲆⲆⲆ[px.time];
      }
      Hn.fillRect(s, r, t, b);
    }
  }
  function sw(a) {
    Hn.globalAlpha = a.alpha;
    $b(Hn, a.x + qx.ⲆⲆᐃ.x, a.y + qx.ⲆⲆᐃ.y, a.r);
    ed(Hn, Sr.ΔΔⲆΔΔⵠᐃ[px.time]);
    Hn.globalAlpha = 1;
  }
  function tw(b, c, d, e, f, g, a, i, j, h) {
    if (px.transition) {
      Hn.globalAlpha = 1;
      b(c, d, e, f, g, a, i, j, h);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1 - px.ⵠΔΔΔ.ⵠΔⵠ;
      b(c, d, e, f, g, a, i, j, h);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1;
    } else {
      b(c, d, e, f, g, a, i, j, h);
    }
  }
  function uw(a, b) {
    if (px.transition) {
      Hn.globalAlpha = 1;
      a.ⲆⵠᐃΔᐃ(b);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1 - px.ⵠΔΔΔ.ⵠΔⵠ;
      a.ⲆⵠᐃΔᐃ(b);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1;
    } else {
      a.ⲆⵠᐃΔᐃ(b);
    }
  }
  function vw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = qx.ⲆⲆᐃ.y + j + 710;
    var l = Math.max(qx.ⲆⲆᐃ.x + e, 0);
    var g = Math.max(-qx.ⲆⲆᐃ.x + Sn - i - 100, 0);
    var t = l;
    var b = Sn - l - g;
    if (o) {
      var d = q.ᐃᐃⵠ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var m = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ᐃᐃⵠ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ᐃᐃⵠ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = Lr;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f + 2;
    } else {
      A = false;
      u = k;
      D = -1;
    }
    f = h - 700 - u;
    if (px.transition) {
      var N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
      Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
    }
    Hn.fillRect(m, F, C, p);
    if (o) {
      if (px.transition) {
        N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(15, 70, 76, 42, 139, 155, N);
      } else {
        Hn.fillStyle = Sr.ⲆΔⵠⲆⵠᐃⵠ[px.time];
      }
    } else if (px.transition) {
      N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
      Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
    }
    Hn.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (px.transition) {
          N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
          Hn.fillStyle = Bw(17, 94, 96, 169, 214, 211, N);
        } else {
          Hn.fillStyle = Sr.ⲆΔᐃⵠⲆⵠΔ[px.time];
        }
      } else if (px.transition) {
        N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
      } else {
        Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
      }
      Hn.fillRect(J, L, B, M);
    }
    if (mx.ᐃᐃⵠΔⵠ && o) {
      q.ΔΔⵠΔⵠᐃⵠΔᐃ(k, D, G, h, -qx.ⲆⲆᐃ.x + m, -qx.ⲆⲆᐃ.x + m + C);
    }
  }
  function ww(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = qx.ⲆⲆᐃ.x + f - 700;
    var l = Math.max(qx.ⲆⲆᐃ.y + e, 0);
    var g = Math.max(-qx.ⲆⲆᐃ.y + Zn - i - 100, 0);
    var r = l;
    var b = Zn - l - g;
    if (n) {
      var d = j.ᐃᐃⵠ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ᐃᐃⵠ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ᐃᐃⵠ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ᐃⲆᐃⲆⲆΔⵠ === 1) {
      if (px.transition) {
        var p = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(15, 77, 72, 252, 239, 187, p);
      } else {
        Hn.fillStyle = Sr.ΔΔⵠᐃΔᐃᐃ[px.time];
      }
      Hn.fillRect(s, r, t, b);
    } else {
      if (px.transition) {
        p = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[2], k.Δᐃⵠ[0], k.Δᐃⵠ[1], k.Δᐃⵠ[2], p);
      } else {
        Hn.fillStyle = k.ᐃⵠⲆⲆⲆ[px.time];
      }
      Hn.fillRect(s, r, t, b);
    }
  }
  function xw(c, e, f, i, j, k) {
    var a = i.w1;
    var n = i.w2;
    var o = i.w3;
    var h = qx.ⲆⲆᐃ.y + c - 700;
    var l = Math.max(qx.ⲆⲆᐃ.x + e, 0);
    var g = Math.max(-qx.ⲆⲆᐃ.x + Sn - f - 100, 0);
    var q = l;
    var b = Sn - l - g;
    if (k) {
      var d = i.ᐃᐃⵠ(a).x;
    } else {
      d = a.r.x;
    }
    var r = h + 0;
    0;
    r += d + 0 - 2;
    if (k) {
      d = i.ᐃᐃⵠ(n).x;
    } else {
      d = n.r.x;
    }
    var s = h + 250 - r + d;
    var t = (r += s - 2) - 2;
    if (k) {
      d = i.ᐃᐃⵠ(o).x;
    } else {
      d = o.r.x;
    }
    if (r + (s = h + 350 - r + d) - 3 > t) {
      r += s - 2;
    } else {
      r = t;
    }
    s = h + 700 - r;
    if (k > 0 && j.ᐃⲆᐃⲆⲆΔⵠ === 1) {
      if (px.transition) {
        var u = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(15, 77, 72, 252, 239, 187, u);
      } else {
        Hn.fillStyle = Sr.ΔΔⵠᐃΔᐃᐃ[px.time];
      }
      Hn.fillRect(q, r, b, s);
    } else {
      if (px.transition) {
        u = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(j.ΔᐃⲆ[0], j.ΔᐃⲆ[1], j.ΔᐃⲆ[2], j.Δᐃⵠ[0], j.Δᐃⵠ[1], j.Δᐃⵠ[2], u);
      } else {
        Hn.fillStyle = j.ᐃⵠⲆⲆⲆ[px.time];
      }
      Hn.fillRect(q, r, b, s);
    }
  }
  function yw() {
    Hn.globalAlpha = 1;
    if (px.transition) {
      var a = px.ⵠΔΔΔ.ᐃΔΔ();
    }
    px.ⲆΔᐃⵠΔΔⵠⲆⵠ(-qx.ⲆⲆᐃ.x, -qx.ⲆⲆᐃ.y);
    lw = Math.max(Math.floor(-qx.ⲆⲆᐃ.x / px.ⵠΔⲆᐃⲆᐃᐃ) - 5, 0);
    mw = Math.min(Math.floor((-qx.ⲆⲆᐃ.x + qx.ⲆⲆᐃ.w) / px.ⵠΔⲆᐃⲆᐃᐃ) + 4, px.ᐃⲆⲆᐃⲆ - 1);
    nw = Math.max(Math.floor(-qx.ⲆⲆᐃ.y / px.ⵠΔⵠⵠⵠⵠΔ) - 3, 0);
    ow = Math.min(Math.floor((-qx.ⲆⲆᐃ.y + qx.ⲆⲆᐃ.ᐃⲆᐃ) / px.ⵠΔⵠⵠⵠⵠΔ) + 3, px.ⲆⲆⲆᐃᐃ - 1);
    (function () {
      for (var b = px.ΔᐃⲆⲆΔ.length - 1; b >= 0; b--) {
        var f = px.ΔᐃⲆⲆΔ[b];
        if (px.ⵠᐃⲆⲆΔ === f.ᐃᐃⵠ) {
          var j = px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ];
          if (f.x1 - 230 - Sn <= -qx.ⲆⲆᐃ.x && f.x2 + 330 >= -qx.ⲆⲆᐃ.x && -qx.ⲆⲆᐃ.y >= f.y1 - Zn && f.y2 + 100 >= -qx.ⲆⲆᐃ.y) {
            var k = f.x2;
            if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
              k -= 610;
            }
            var m = f.x1;
            if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
              m += 610;
            }
            var p = f.y2;
            if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
              p -= 610;
            }
            var q = f.y1;
            if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
              q += 610;
            }
            if (px.transition) {
              var w = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
              Hn.fillStyle = Bw(j.ΔᐃⲆ[0], j.ΔᐃⲆ[1], j.ΔᐃⲆ[2], j.Δᐃⵠ[0], j.Δᐃⵠ[1], j.Δᐃⵠ[1], w);
            } else {
              Hn.fillStyle = j.ᐃⵠⲆⲆⲆ[px.time];
            }
            var x = Math.max(qx.ⲆⲆᐃ.x + m - 2 - 230, 0);
            var y = Math.max(-qx.ⲆⲆᐃ.x + Sn - k - 330 - 2, 0);
            var z = Math.max(qx.ⲆⲆᐃ.y + q - 2, 0);
            var A = Math.max(-qx.ⲆⲆᐃ.y + Zn - p - 100 - 2, 0);
            Hn.beginPath();
            Hn.fillRect(x, z, Sn - y - x, Zn - z - A);
          }
        }
      }
      for (b = px.ΔᐃⲆⲆΔ.length - 1; b >= 0; b--) {
        f = px.ΔᐃⲆⲆΔ[b];
        if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
          k = f.x2;
          if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
            k -= 400;
          }
          m = f.x1;
          if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
            m += 400;
          }
          p = f.y2;
          if (f.ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
            p -= 300;
          }
          q = f.y1;
          if (f.ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
            q += 300;
          }
          if ((f.ⵠΔⵠ & 8) === 0 && k - Sn + 120 <= -qx.ⲆⲆᐃ.x && -qx.ⲆⲆᐃ.x <= k + 820 && q + 88 - Zn <= -qx.ⲆⲆᐃ.y && -qx.ⲆⲆᐃ.y <= p + 50) {
            rw(k, q + 88, p - 88, qx.ⲆᐃᐃⲆ[0], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 8);
            Cw(k, q + 88, p - 88, qx.ⲆᐃᐃⲆ[0], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 8);
          }
          if ((f.ⵠΔⵠ & 4) === 0 && m - Sn - 700 <= -qx.ⲆⲆᐃ.x && -qx.ⲆⲆᐃ.x <= m - 20 && -qx.ⲆⲆᐃ.y >= q + 88 - Zn && -qx.ⲆⲆᐃ.y <= p + 50) {
            ww(m, q + 88, p - 88, qx.ⲆᐃᐃⲆ[1], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 4);
            Ew(m, q + 88, p - 88, qx.ⲆᐃᐃⲆ[1], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 4);
          }
          if (!(f.ⵠΔⵠ & 2) && m - 235 - Sn <= -qx.ⲆⲆᐃ.x && k + 350 >= -qx.ⲆⲆᐃ.x && -qx.ⲆⲆᐃ.y >= p - Zn - 275 && p + 490 >= -qx.ⲆⲆᐃ.y) {
            Aw(p - 230, m - 230, k + 230, qx.ⲆᐃᐃⲆ[2], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 2);
            vw(p - 230, m - 230, k + 230, qx.ⲆᐃᐃⲆ[2], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 2);
          }
          if (!(f.ⵠΔⵠ & 1) && m - 235 - Sn <= -qx.ⲆⲆᐃ.x && k + 350 >= -qx.ⲆⲆᐃ.x && -qx.ⲆⲆᐃ.y >= q - Zn - 390 && -qx.ⲆⲆᐃ.y <= q + 315) {
            xw(q + 310, m - 230, k + 230, qx.ⲆᐃᐃⲆ[3], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 1);
            of(q + 310, m - 230, k + 230, qx.ⲆᐃᐃⲆ[3], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 1);
          }
        }
      }
      for (b = px.ΔᐃⲆⲆΔ.length - 1; b >= 0; b--) {
        f = px.ΔᐃⲆⲆΔ[b];
        if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
          k = f.x2;
          if (f.ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
            k -= 400;
          }
          m = f.x1;
          if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
            m += 400;
          }
          p = f.y2;
          if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
            p -= 300;
          }
          q = f.y1;
          if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
            q += 300;
          }
          if (f.ⵠΔⵠ & 8 && k - Sn + 120 <= -qx.ⲆⲆᐃ.x && k + 820 >= -qx.ⲆⲆᐃ.x && -qx.ⲆⲆᐃ.y >= q + 88 - Zn && p + 50 >= -qx.ⲆⲆᐃ.y) {
            rw(k, q + 88, p - 88, qx.ⲆᐃᐃⲆ[0], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 8);
          }
          if (f.ⵠΔⵠ & 4 && m - Sn - 700 <= -qx.ⲆⲆᐃ.x && m - 20 >= -qx.ⲆⲆᐃ.x && q + 88 - Zn <= -qx.ⲆⲆᐃ.y && -qx.ⲆⲆᐃ.y <= p + 50) {
            ww(m, q + 88, p - 88, qx.ⲆᐃᐃⲆ[1], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 4);
          }
          if ((f.ⵠΔⵠ & 2) !== 0 && -qx.ⲆⲆᐃ.x >= m - 235 - Sn && -qx.ⲆⲆᐃ.x <= k + 350 && -qx.ⲆⲆᐃ.y >= p - Zn - 275 && -qx.ⲆⲆᐃ.y <= p + 490) {
            Aw(p - 230, m - 230, k + 230, qx.ⲆᐃᐃⲆ[2], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 2);
          }
          if ((f.ⵠΔⵠ & 1) !== 0 && -qx.ⲆⲆᐃ.x >= m - 235 - Sn && -qx.ⲆⲆᐃ.x <= k + 350 && q - Zn - 390 <= -qx.ⲆⲆᐃ.y && -qx.ⲆⲆᐃ.y <= q + 315) {
            xw(q + 310, m - 230, k + 230, qx.ⲆᐃᐃⲆ[3], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 1);
          }
        }
      }
      for (b = px.ΔᐃⲆⲆΔ.length - 1; b >= 0; b--) {
        if ((f = px.ΔᐃⲆⲆΔ[b]).ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
          j = px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ];
          if (-qx.ⲆⲆᐃ.x >= f.x1 - 230 - Sn && f.x2 + 330 >= -qx.ⲆⲆᐃ.x && f.y1 - Zn <= -qx.ⲆⲆᐃ.y && f.y2 + 100 >= -qx.ⲆⲆᐃ.y) {
            k = f.x2;
            if (f.ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
              if (f.ⵠΔⵠ & 8) {
                k -= 610;
              } else {
                k -= 414;
              }
            }
            m = f.x1;
            if (f.ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
              if ((f.ⵠΔⵠ & 4) === 0) {
                m += 414;
              } else {
                m += 610;
              }
            }
            p = f.y2;
            if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
              if ((f.ⵠΔⵠ & 2) === 0) {
                p -= 414;
              } else {
                p -= 610;
              }
            }
            q = f.y1;
            if (f.ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
              if ((f.ⵠΔⵠ & 1) === 0) {
                q += 414;
              } else {
                q += 610;
              }
            }
            if (px.transition) {
              w = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
              Hn.fillStyle = Bw(j.ΔᐃⲆ[0], j.ΔᐃⲆ[1], j.ΔᐃⲆ[2], j.Δᐃⵠ[0], j.Δᐃⵠ[1], j.Δᐃⵠ[2], w);
            } else {
              Hn.fillStyle = j.ᐃⵠⲆⲆⲆ[px.time];
            }
            x = Math.max(qx.ⲆⲆᐃ.x + m - 2 - 230, 0);
            y = Math.max(-qx.ⲆⲆᐃ.x + Sn - k - 330 - 2, 0);
            z = Math.max(qx.ⲆⲆᐃ.y + q - 2, 0);
            A = Math.max(-qx.ⲆⲆᐃ.y + Zn - p - 100 - 2, 0);
            Hn.beginPath();
            Hn.fillRect(x, z, Sn - y - x, Zn - z - A);
          }
        }
      }
      if (mx.ᐃᐃⵠΔⵠ) {
        tw(fw, nw, ow, lw, mw, 695, "isl", 2);
        tw(fw, nw, ow, lw, mw, 694, "isl", 2);
      }
      tw(kw, nw, ow, lw, mw, 692, "isl", 2);
      if (mx.ᐃᐃⵠΔⵠ) {
        tw(iw, nw, ow, lw, mw, 243, "de");
      }
      var B = px.ᐃᐃΔ[0];
      for (b = 0; B.length > b; b++) {
        for (var d = B[b], C = 0; C < d.ᐃΔⲆⲆΔ.length; C++) {
          qw(d.ᐃΔⲆⲆΔ[C]);
        }
      }
      if ((Xu += xx * 40) > 60) {
        Xu -= 60;
      }
      tw(Rv, nw, ow, lw, mw, 1024, "r", 0);
      for (b = 0; px.ΔᐃⲆⲆΔ.length > b; b++) {
        f = px.ΔᐃⲆⲆΔ[b];
        if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
          k = f.x2;
          if (f.ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
            k -= 400;
          }
          m = f.x1;
          if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
            m += 400;
          }
          p = f.y2;
          if (px.ⵠᐃⲆⲆΔ !== f.ᐃᐃⵠ) {
            p -= 300;
          }
          q = f.y1;
          if (f.ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ) {
            q += 300;
          }
          if ((f.ⵠΔⵠ & 8) > 0 && -qx.ⲆⲆᐃ.x >= k - Sn + 120 && k + 820 >= -qx.ⲆⲆᐃ.x && q + 88 - Zn <= -qx.ⲆⲆᐃ.y && p + 50 >= -qx.ⲆⲆᐃ.y) {
            Cw(k, q + 88, p - 88, qx.ⲆᐃᐃⲆ[0], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 8);
          }
          if ((f.ⵠΔⵠ & 4) > 0 && m - Sn - 700 <= -qx.ⲆⲆᐃ.x && m - 20 >= -qx.ⲆⲆᐃ.x && q + 88 - Zn <= -qx.ⲆⲆᐃ.y && p + 50 >= -qx.ⲆⲆᐃ.y) {
            Ew(m, q + 88, p - 88, qx.ⲆᐃᐃⲆ[1], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 4);
          }
          if ((f.ⵠΔⵠ & 2) > 0 && -qx.ⲆⲆᐃ.x >= m - 235 - Sn && -qx.ⲆⲆᐃ.x <= k + 350 && -qx.ⲆⲆᐃ.y >= p - Zn - 275 && p + 490 >= -qx.ⲆⲆᐃ.y) {
            vw(p - 230, m - 230, k + 230, qx.ⲆᐃᐃⲆ[2], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 2);
          }
          if ((f.ⵠΔⵠ & 1) > 0 && -qx.ⲆⲆᐃ.x >= m - 235 - Sn && k + 350 >= -qx.ⲆⲆᐃ.x && q - Zn - 390 <= -qx.ⲆⲆᐃ.y && -qx.ⲆⲆᐃ.y <= q + 315) {
            of(q + 310, m - 230, k + 230, qx.ⲆᐃᐃⲆ[3], px.ⵠⵠΔΔᐃ[f.ᐃᐃⵠ], f.ⵠΔⵠ & 1);
          }
        }
      }
    })();
    (function () {
      var b = lw;
      var e = mw;
      var i = nw;
      var q = ow;
      if (mx.ᐃᐃⵠΔⵠ) {
        tw(kw, i, q, b, e, 621, "l", 2);
      }
      if (mx.ᐃᐃⵠΔⵠ) {
        tw(kw, i, q, b, e, Sr.ΔᐃⲆⵠⲆ, "la", 5);
      }
      tw(kw, i, q, b, e, 203, "la", 5);
      tw(fw, i, q, b, e, 620, "l", 2);
      if (mx.ᐃᐃⵠΔⵠ) {
        tw(jw, i, q, b, e, 203, "la", 5);
        tw(fw, i, q, b, e, 619, "l", 2);
      }
      tw(kw, i, q, b, e, 1052, "ma", 4);
      for (var n = px.ᐃᐃΔ[76], t = 0; t < n.length; t++) {
        n[t].ⲆⵠⵠⲆⲆⵠΔ();
      }
      var v = px.ᐃᐃΔ[0];
      for (t = 0; v.length > t; t++) {
        for (var N = v[t], V = 0; N.ΔⵠⵠⲆΔ.length > V; V++) {
          sw(N.ΔⵠⵠⲆΔ[V]);
        }
      }
      var aa = px.ᐃᐃΔ[30];
      for (t = 0; aa.length > t; t++) {
        Dw(aa[t], 125);
        aa[t].ⵠᐃᐃⲆⲆ(aa[t].info);
      }
      var l = px.ᐃᐃΔ[18];
      for (t = 0; l.length > t; t++) {
        if (l[t].action == 2) {
          uw(l[t]);
        }
      }
      var ba = px.ᐃᐃΔ[1];
      for (t = 0; t < ba.length; t++) {
        uw(ba[t], 113);
      }
      var ca = px.ᐃᐃΔ[22];
      for (t = 0; ca.length > t; t++) {
        uw(ca[t]);
      }
      var da = px.ᐃᐃΔ[23];
      for (t = 0; da.length > t; t++) {
        uw(da[t]);
      }
      var ea = px.ᐃᐃΔ[6];
      for (t = 0; t < ea.length; t++) {
        uw(ea[t], 118);
      }
      var m = px.ᐃᐃΔ[36];
      for (t = 0; m.length > t; t++) {
        Dw(m[t]);
      }
      var p = px.ᐃᐃΔ[33];
      for (t = 0; t < p.length; t++) {
        Dw(p[t], 141);
      }
      var C = px.ᐃᐃΔ[3];
      for (t = 0; t < C.length; t++) {
        uw(C[t]);
      }
      C = px.ᐃᐃΔ[43];
      t = 0;
      for (; t < C.length; t++) {
        uw(C[t]);
      }
      C = px.ᐃᐃΔ[3];
      t = 0;
      for (; t < C.length; t++) {
        pw(C[t]);
      }
      var fa = px.ᐃᐃΔ[44];
      for (t = 0; fa.length > t; t++) {
        if (!(fa[t].info & 15) || fa[t].info === 10) {
          Dw(fa[t]);
        }
      }
      var ha = px.ᐃᐃΔ[54];
      for (t = 0; t < ha.length; t++) {
        if ((ha[t].info & 15) === 0 || ha[t].info === 10) {
          Dw(ha[t]);
        }
      }
      var ia = px.ᐃᐃΔ[55];
      for (t = 0; ia.length > t; t++) {
        if ((ia[t].info & 15) === 0 || ia[t].info === 10) {
          Dw(ia[t]);
        }
      }
      var ja = px.ᐃᐃΔ[79];
      for (t = 0; ja.length > t; t++) {
        Dw(ja[t], 132);
      }
      var ka = px.ᐃᐃΔ[39];
      for (t = 0; t < ka.length; t++) {
        if ((ka[t].info & 15) === 0 || ka[t].info === 10) {
          Dw(ka[t]);
        }
      }
      var la = px.ᐃᐃΔ[40];
      for (t = 0; t < la.length; t++) {
        if ((la[t].info & 15) === 0 || la[t].info === 10) {
          Dw(la[t]);
        }
      }
      var ma = px.ᐃᐃΔ[37];
      for (t = 0; ma.length > t; t++) {
        if ((ma[t].info & 15) === 0 || ma[t].info === 10) {
          Dw(ma[t]);
        }
      }
      ja = px.ᐃᐃΔ[31];
      t = 0;
      for (; t < ja.length; t++) {
        Dw(ja[t]);
      }
      var na = px.ᐃᐃΔ[86];
      for (t = 0; na.length > t; t++) {
        Dw(na[t], 250, 729);
      }
      var x = px.ᐃᐃΔ[82];
      for (t = 0; x.length > t; t++) {
        Dw(x[t], 250, 729);
      }
      var J = px.ᐃᐃΔ[87];
      for (t = 0; t < J.length; t++) {
        Dw(J[t], 854, 859);
      }
      var M = px.ᐃᐃΔ[45];
      for (t = 0; M.length > t; t++) {
        if (M[t].info & 1) {
          Dw(M[t], 336);
        }
      }
      M = px.ᐃᐃΔ[46];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info & 1) {
          Dw(M[t], 373);
        }
      }
      M = px.ᐃᐃΔ[47];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info) {
          Dw(M[t], 376);
        }
      }
      M = px.ᐃᐃΔ[48];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info) {
          Dw(M[t], 379);
        }
      }
      M = px.ᐃᐃΔ[49];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info) {
          Dw(M[t], 500);
        }
      }
      M = px.ᐃᐃΔ[53];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info) {
          Dw(M[t], 376);
        }
      }
      M = px.ᐃᐃΔ[10];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info & 1) {
          Dw(M[t], 336);
        }
      }
      M = px.ᐃᐃΔ[15];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info & 1) {
          Dw(M[t], 373);
        }
      }
      M = px.ᐃᐃΔ[16];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info) {
          Dw(M[t], 376);
        }
      }
      M = px.ᐃᐃΔ[17];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info) {
          Dw(M[t], 379);
        }
      }
      M = px.ᐃᐃΔ[21];
      t = 0;
      for (; M.length > t; t++) {
        if (M[t].info) {
          Dw(M[t], 500);
        }
      }
      M = px.ᐃᐃΔ[51];
      t = 0;
      for (; t < M.length; t++) {
        if (M[t].info) {
          Dw(M[t], 376);
        }
      }
      var oa = px.ᐃᐃΔ[80];
      for (t = 0; oa.length > t; t++) {
        Dw(oa[t], 264, 322);
      }
      var D = px.ᐃᐃΔ[41];
      for (t = 0; t < D.length; t++) {
        Dw(D[t], 198);
      }
      n = px.ᐃᐃΔ[76];
      t = 0;
      for (; t < n.length; t++) {
        Dw(n[t], Sr.ⵠΔⲆᐃᐃᐃⲆ, Sr.ⲆⵠΔⲆΔⲆⵠⵠⵠ);
      }
      var pa = px.ᐃᐃΔ[91];
      for (t = 0; t < pa.length; t++) {
        if (pa[t].ⲆΔⵠⲆⵠⵠⲆ === 0) {
          Dw(pa[t]);
        }
      }
      v = px.ᐃᐃΔ[0];
      t = 0;
      for (; v.length > t; t++) {
        N = v[t];
        if (v[t].ⵠⵠᐃⵠⵠ !== 227 && v[t].ⵠⵠᐃⵠⵠ !== 228 && v[t].ⵠⵠᐃⵠⵠ !== 229 && v[t].ⵠⵠᐃⵠⵠ !== 230 && v[t].ⵠⵠᐃⵠⵠ !== 91) {
          if (N.ⲆΔᐃⲆᐃᐃⲆ === 0) {
            if (N.ΔΔᐃᐃⲆⲆᐃ > 0.001) {
              N.ΔΔᐃᐃⲆⲆᐃ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(N.ΔΔᐃᐃⲆⲆᐃ, 0, 0.018);
              var qa = 1 + Math.min(1, Math.max(N.ΔΔᐃᐃⲆⲆᐃ, 0) / 100) * 0.18;
              Hn.save();
              Hn.scale(qa, qa);
              qx.ⲆⲆᐃ.x /= qa;
              qx.ⲆⲆᐃ.y /= qa;
              N.x /= qa;
              N.y /= qa;
              N.r.x /= qa;
              N.r.y /= qa;
              N.ᐃⵠᐃⲆΔⵠΔ();
              N.ΔⵠⲆⲆ();
              qx.ⲆⲆᐃ.x *= qa;
              qx.ⲆⲆᐃ.y *= qa;
              N.x *= qa;
              N.y *= qa;
              N.r.x *= qa;
              N.r.y *= qa;
              Hn.restore();
            } else {
              N.ⲆΔⵠⲆⵠⵠⲆ = 0;
              N.ᐃⵠᐃⲆΔⵠΔ();
              N.ΔⵠⲆⲆ();
            }
          }
        } else if (N.ΔΔΔΔᐃ <= 180) {
          Hn.save();
          qa = 1 + Math.min(1, Math.max(N.ⲆⵠⲆⵠᐃ - 30, 0) / 180) * 0.35;
          Hn.scale(qa, qa);
          qx.ⲆⲆᐃ.x /= qa;
          qx.ⲆⲆᐃ.y /= qa;
          N.x /= qa;
          N.y /= qa;
          N.r.x /= qa;
          N.r.y /= qa;
          N.ⲆΔⵠⲆⵠⵠⲆ = 0;
          N.ᐃⵠᐃⲆΔⵠΔ();
          N.ΔⵠⲆⲆ();
          qx.ⲆⲆᐃ.x *= qa;
          qx.ⲆⲆᐃ.y *= qa;
          N.x *= qa;
          N.y *= qa;
          N.r.x *= qa;
          N.r.y *= qa;
          Hn.restore();
        }
      }
      D = px.ᐃᐃΔ[41];
      t = 0;
      for (; D.length > t; t++) {
        Dw(D[t], 913);
      }
      var ra = px.ᐃᐃΔ[67];
      for (t = 0; ra.length > t; t++) {
        Dw(ra[t]);
      }
      var Q = px.ᐃᐃΔ[62];
      for (t = 0; t < Q.length; t++) {
        Dw(Q[t], 419, 461);
      }
      var _ = px.ᐃᐃΔ[70];
      for (t = 0; t < _.length; t++) {
        Dw(_[t]);
      }
      var F = px.ᐃᐃΔ[60];
      for (t = 0; F.length > t; t++) {
        Dw(F[t], 299, 326);
      }
      var R = px.ᐃᐃΔ[72];
      for (t = 0; R.length > t; t++) {
        Dw(R[t], 232, 1077);
      }
      var j = px.ᐃᐃΔ[73];
      for (t = 0; j.length > t; t++) {
        Dw(j[t], 233, 1092);
      }
      fa = px.ᐃᐃΔ[44];
      t = 0;
      for (; fa.length > t; t++) {
        if ((fa[t].info & 15) !== 0 && fa[t].info !== 10) {
          Dw(fa[t]);
        }
      }
      ha = px.ᐃᐃΔ[54];
      t = 0;
      for (; t < ha.length; t++) {
        if ((ha[t].info & 15) !== 0 && ha[t].info !== 10) {
          Dw(ha[t]);
        }
      }
      ia = px.ᐃᐃΔ[89];
      t = 0;
      for (; ia.length > t; t++) {
        Dw(ia[t], 239);
      }
      ia = px.ᐃᐃΔ[55];
      t = 0;
      for (; ia.length > t; t++) {
        if ((ia[t].info & 15) !== 0 && ia[t].info !== 10) {
          Dw(ia[t]);
        }
      }
      C = px.ᐃᐃΔ[43];
      t = 0;
      for (; C.length > t; t++) {
        pw(C[t]);
      }
      ka = px.ᐃᐃΔ[39];
      t = 0;
      for (; t < ka.length; t++) {
        if (ka[t].info & 15 && ka[t].info !== 10) {
          Dw(ka[t]);
        }
      }
      la = px.ᐃᐃΔ[40];
      t = 0;
      for (; la.length > t; t++) {
        if ((la[t].info & 15) !== 0 && la[t].info !== 10) {
          Dw(la[t]);
        }
      }
      ma = px.ᐃᐃΔ[37];
      t = 0;
      for (; t < ma.length; t++) {
        if (ma[t].info & 15 && ma[t].info !== 10) {
          Dw(ma[t]);
        }
      }
      var L = px.ᐃᐃΔ[81];
      for (t = 0; L.length > t; t++) {
        Dw(L[t], 691, 697);
      }
      var G = px.ᐃᐃΔ[66];
      for (t = 0; G.length > t; t++) {
        Dw(G[t], 637, 687);
      }
      var W = px.ᐃᐃΔ[65];
      for (t = 0; W.length > t; t++) {
        Dw(W[t], 673, 688);
      }
      var O = px.ᐃᐃΔ[61];
      for (t = 0; t < O.length; t++) {
        Dw(O[t], 260, 333);
      }
      var H = px.ᐃᐃΔ[88];
      for (t = 0; H.length > t; t++) {
        Dw(H[t], 1033, 1034);
      }
      var U = px.ᐃᐃΔ[63];
      for (t = 0; t < U.length; t++) {
        Dw(U[t], 445, 462);
      }
      var Y = px.ᐃᐃΔ[77];
      for (t = 0; Y.length > t; t++) {
        Dw(Y[t]);
      }
      var K = px.ᐃᐃΔ[68];
      for (t = 0; K.length > t; t++) {
        Dw(K[t], 918, 919);
      }
      var X = px.ᐃᐃΔ[71];
      for (t = 0; t < X.length; t++) {
        Dw(X[t]);
      }
      var Z = px.ᐃᐃΔ[78];
      for (t = 0; Z.length > t; t++) {
        Dw(Z[t], 1218, 1219);
      }
      var sa = px.ᐃᐃΔ[64];
      for (t = 0; t < sa.length; t++) {
        if (sa[t].scale === 1) {
          Dw(sa[t], 449, 463);
        }
      }
      sa = px.ᐃᐃΔ[69];
      t = 0;
      for (; t < sa.length; t++) {
        if (sa[t].scale === 1) {
          Dw(sa[t], 450, 464);
        }
      }
      var ta = px.ᐃᐃΔ[11];
      for (t = 0; t < ta.length; t++) {
        Dw(ta[t]);
      }
      var ua = px.ᐃᐃΔ[2];
      for (t = 0; t < ua.length; t++) {
        Dw(ua[t], 114);
      }
      l = px.ᐃᐃΔ[18];
      t = 0;
      for (; l.length > t; t++) {
        Dw(l[t]);
      }
      var va = px.ᐃᐃΔ[34];
      for (t = 0; va.length > t; t++) {
        Dw(va[t]);
      }
      M = px.ᐃᐃΔ[10];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 166);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[15];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 171);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[16];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 172);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[17];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 173);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[21];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 124);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[51];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 218);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[45];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 212);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[46];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 213);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[47];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 214);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[48];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 215);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[49];
      t = 0;
      for (; M.length > t; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 216);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      M = px.ᐃᐃΔ[53];
      t = 0;
      for (; t < M.length; t++) {
        if (!(M[t].info & 1)) {
          Dw(M[t], 220);
        }
        M[t].ⵠᐃᐃⲆⲆ(M[t].info >> 1);
      }
      var wa = px.ᐃᐃΔ[4];
      for (t = 0; wa.length > t; t++) {
        Dw(wa[t], 162);
        wa[t].ⵠᐃᐃⲆⲆ(wa[t].info);
      }
      wa = px.ᐃᐃΔ[7];
      t = 0;
      for (; t < wa.length; t++) {
        Dw(wa[t], 163);
        wa[t].ⵠᐃᐃⲆⲆ(wa[t].info);
      }
      wa = px.ᐃᐃΔ[8];
      t = 0;
      for (; t < wa.length; t++) {
        Dw(wa[t], 164);
        wa[t].ⵠᐃᐃⲆⲆ(wa[t].info);
      }
      wa = px.ᐃᐃΔ[9];
      t = 0;
      for (; wa.length > t; t++) {
        Dw(wa[t], 165);
        wa[t].ⵠᐃᐃⲆⲆ(wa[t].info);
      }
      wa = px.ᐃᐃΔ[19];
      t = 0;
      for (; wa.length > t; t++) {
        Dw(wa[t], 122);
        wa[t].ⵠᐃᐃⲆⲆ(wa[t].info);
      }
      wa = px.ᐃᐃΔ[50];
      t = 0;
      for (; wa.length > t; t++) {
        Dw(wa[t], 217);
        wa[t].ⵠᐃᐃⲆⲆ(wa[t].info);
      }
      var xa = px.ᐃᐃΔ[5];
      for (t = 0; xa.length > t; t++) {
        Dw(xa[t], 160);
        xa[t].ⵠᐃᐃⲆⲆ(xa[t].info);
      }
      xa = px.ᐃᐃΔ[12];
      t = 0;
      for (; t < xa.length; t++) {
        Dw(xa[t], 168);
        xa[t].ⵠᐃᐃⲆⲆ(xa[t].info);
      }
      xa = px.ᐃᐃΔ[13];
      t = 0;
      for (; t < xa.length; t++) {
        Dw(xa[t], 169);
        xa[t].ⵠᐃᐃⲆⲆ(xa[t].info);
      }
      xa = px.ᐃᐃΔ[14];
      t = 0;
      for (; t < xa.length; t++) {
        Dw(xa[t], 170);
        xa[t].ⵠᐃᐃⲆⲆ(xa[t].info);
      }
      xa = px.ᐃᐃΔ[20];
      t = 0;
      for (; t < xa.length; t++) {
        Dw(xa[t], 123);
        xa[t].ⵠᐃᐃⲆⲆ(xa[t].info);
      }
      xa = px.ᐃᐃΔ[52];
      t = 0;
      for (; t < xa.length; t++) {
        Dw(xa[t], 219);
        xa[t].ⵠᐃᐃⲆⲆ(xa[t].info);
      }
      var ya = px.ᐃᐃΔ[35];
      for (t = 0; ya.length > t; t++) {
        var za = ya[t];
        if (za.info > 0) {
          Dw(za, 788);
        } else {
          Dw(za, 182);
        }
      }
      var Aa = px.ᐃᐃΔ[29];
      for (t = 0; t < Aa.length; t++) {
        Dw(Aa[t], 159);
      }
      tw(kw, i, q, b, e, 111, "g", 2);
      tw(kw, i, q, b, e, 415, "gw", 2);
      tw(kw, i, q, b, e, 112, "d", 2);
      tw(kw, i, q, b, e, 416, "dw", 2);
      tw(kw, i, q, b, e, 110, "p", 0);
      tw(kw, i, q, b, e, 241, "m", 2);
      tw(kw, i, q, b, e, 121, "a", 2);
      tw(kw, i, q, b, e, 202, "re", 2);
      tw(kw, i, q, b, e, 679, "cs", 3, 3);
      tw(kw, i, q, b, e, 679, "cs", 2, 2);
      tw(kw, i, q, b, e, 679, "cs", 1, 1);
      tw(kw, i, q, b, e, 679, "cs", 0, 0);
      tw(kw, i, q, b, e, 676, "cs", 3, 3);
      tw(kw, i, q, b, e, 676, "cs", 2, 2);
      tw(kw, i, q, b, e, 676, "cs", 1, 1);
      tw(kw, i, q, b, e, 676, "cs", 0, 0);
      var Ba = px.ᐃᐃΔ[100];
      for (t = 0; Ba.length > t; t++) {
        for (V = 0; V < Ba[t].info; V++) {
          Dw(Ba[t].ΔⲆᐃⲆ[V], 294);
        }
      }
      tw(kw, i, q, b, e, 108, "s", 2);
      var Ca = px.ᐃᐃΔ[24];
      for (t = 0; Ca.length > t; t++) {
        Dw(Ca[t]);
      }
      Ca = px.ᐃᐃΔ[25];
      t = 0;
      for (; Ca.length > t; t++) {
        Dw(Ca[t]);
      }
      Ca = px.ᐃᐃΔ[26];
      t = 0;
      for (; t < Ca.length; t++) {
        Dw(Ca[t]);
      }
      Ca = px.ᐃᐃΔ[27];
      t = 0;
      for (; t < Ca.length; t++) {
        Dw(Ca[t]);
      }
      Ca = px.ᐃᐃΔ[28];
      t = 0;
      for (; Ca.length > t; t++) {
        Dw(Ca[t]);
      }
      var Da = px.ᐃᐃΔ[32];
      for (t = 0; Da.length > t; t++) {
        uw(Da[t]);
      }
      ba = px.ᐃᐃΔ[1];
      t = 0;
      for (; ba.length > t; t++) {
        pw(ba[t]);
      }
      ba = px.ᐃᐃΔ[6];
      t = 0;
      for (; t < ba.length; t++) {
        pw(ba[t]);
      }
      l = px.ᐃᐃΔ[18];
      t = 0;
      for (; t < l.length; t++) {
        if (l[t].action == 2) {
          pw(l[t]);
        }
      }
      va = px.ᐃᐃΔ[34];
      t = 0;
      for (; t < va.length; t++) {
        pw(va[t]);
      }
      ca = px.ᐃᐃΔ[22];
      t = 0;
      for (; t < ca.length; t++) {
        pw(ca[t]);
      }
      da = px.ᐃᐃΔ[23];
      t = 0;
      for (; t < da.length; t++) {
        pw(da[t]);
        da[t].ⵠᐃᐃⲆⲆ(da[t].info);
      }
      tw(kw, i, q, b, e, 989, "c", 0);
      tw(kw, i, q, b, e, 109, "t", 5, 4);
      tw(kw, i, q, b, e, 413, "f", 2, 2);
      tw(kw, i, q, b, e, 693, "plm", 0, 0);
      tw(kw, i, q, b, e, 307, "b", 3, 2);
      tw(kw, i, q, b, e, 109, "t", 3, 2);
      tw(kw, i, q, b, e, 307, "b", 1, 0);
      tw(kw, i, q, b, e, 413, "f", 1, 1);
      tw(kw, i, q, b, e, 693, "plm", 1, 1);
      tw(kw, i, q, b, e, 109, "t", 1, 0);
      tw(kw, i, q, b, e, 413, "f", 0, 0);
      tw(kw, i, q, b, e, 693, "plm", 2, 2);
      Da = px.ᐃᐃΔ[32];
      t = 0;
      for (; t < Da.length; t++) {
        pw(Da[t]);
      }
      var Ea = px.ᐃᐃΔ[56];
      for (t = 0; t < Ea.length; t++) {
        Dw(Ea[t], 221);
      }
      v = px.ᐃᐃΔ[0];
      t = 0;
      for (; t < v.length; t++) {
        N = v[t];
        if (N.ⲆΔᐃⲆᐃᐃⲆ === 1 && (N.ΔΔΔΔᐃ < 180 || N.ⵠⵠᐃⵠⵠ !== 227 && N.ⵠⵠᐃⵠⵠ !== 228 && N.ⵠⵠᐃⵠⵠ !== 91 && N.ⵠⵠᐃⵠⵠ !== 229 && N.ⵠⵠᐃⵠⵠ !== 230)) {
          N.ΔΔᐃᐃⲆⲆᐃ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(N.ΔΔᐃᐃⲆⲆᐃ, 100, 0.018);
          qa = 1 + Math.min(1, Math.max(N.ΔΔᐃᐃⲆⲆᐃ, 0) / 100) * 0.18;
          Hn.save();
          Hn.scale(qa, qa);
          qx.ⲆⲆᐃ.x /= qa;
          qx.ⲆⲆᐃ.y /= qa;
          N.x /= qa;
          N.y /= qa;
          N.r.x /= qa;
          N.r.y /= qa;
          N.ᐃⵠᐃⲆΔⵠΔ();
          N.ΔⵠⲆⲆ();
          qx.ⲆⲆᐃ.x *= qa;
          qx.ⲆⲆᐃ.y *= qa;
          N.x *= qa;
          N.y *= qa;
          N.r.x *= qa;
          N.r.y *= qa;
          Hn.restore();
        }
      }
      var Fa = px.ᐃᐃΔ[38];
      for (t = 0; Fa.length > t; t++) {
        Dw(Fa[t], 190);
        Fa[t].ⵠᐃᐃⲆⲆ(Fa[t].info);
      }
      var Ga = px.ᐃᐃΔ[90];
      for (t = 0; t < Ga.length; t++) {
        Dw(Ga[t], 245, 246);
      }
      var Ha = px.ᐃᐃΔ[42];
      for (t = 0; t < Ha.length; t++) {
        Dw(Ha[t], 201);
      }
      v = px.ᐃᐃΔ[0];
      t = 0;
      for (; t < v.length; t++) {
        N = v[t];
        if ((N.ⵠⵠᐃⵠⵠ === 227 || N.ⵠⵠᐃⵠⵠ === 228 || N.ⵠⵠᐃⵠⵠ === 91 || N.ⵠⵠᐃⵠⵠ === 229 || N.ⵠⵠᐃⵠⵠ === 230) && N.ΔΔΔΔᐃ > 180) {
          N.ⲆΔⵠⲆⵠⵠⲆ = 1;
          Hn.save();
          qa = 1 + Math.min(1, Math.max(N.ⲆⵠⲆⵠᐃ - 30, 0) / 180) * 0.35;
          Hn.scale(qa, qa);
          qx.ⲆⲆᐃ.x /= qa;
          qx.ⲆⲆᐃ.y /= qa;
          N.x /= qa;
          N.y /= qa;
          N.r.x /= qa;
          N.r.y /= qa;
          N.ᐃⵠᐃⲆΔⵠΔ();
          N.ΔⵠⲆⲆ();
          qx.ⲆⲆᐃ.x *= qa;
          qx.ⲆⲆᐃ.y *= qa;
          N.x *= qa;
          N.y *= qa;
          N.r.x *= qa;
          N.r.y *= qa;
          Hn.restore();
        }
      }
      pa = px.ᐃᐃΔ[91];
      t = 0;
      for (; t < pa.length; t++) {
        if (pa[t].ⲆΔⵠⲆⵠⵠⲆ === 1) {
          Dw(pa[t]);
        }
      }
      sa = px.ᐃᐃΔ[64];
      t = 0;
      for (; t < sa.length; t++) {
        if (sa[t].scale > 1) {
          Dw(sa[t], 449, 463);
        }
      }
      sa = px.ᐃᐃΔ[69];
      t = 0;
      for (; t < sa.length; t++) {
        if (sa[t].scale > 1) {
          Dw(sa[t], 450, 464);
        }
      }
      var Ia = px.ᐃᐃΔ[74];
      for (t = 0; Ia.length > t; t++) {
        Dw(Ia[t], 235, 1107);
      }
      var Ja = px.ᐃᐃΔ[75];
      for (t = 0; Ja.length > t; t++) {
        Dw(Ja[t], 238, 1128);
      }
      if ((dw += xx * 15) > 60) {
        dw -= 60;
      }
      tw(ew, i, q, b, e, 1041, "fo", 2);
      tw(ew, i, q, b, e, 244, "fod", 2);
    })();
    if (mx.ᐃᐃⵠΔⵠ && px.mode !== 2 && px.mode !== 4 && px.mode !== 5) {
      (function () {
        var a = qx.ΔΔΔᐃΔ;
        if (a.ᐃᐃⵠΔΔ === 0) {
          a.ΔᐃⲆⵠᐃ = Math.max(0, a.ΔᐃⲆⵠᐃ - xx / 10);
        } else {
          a.ΔᐃⲆⵠᐃ = Math.min(1, a.ΔᐃⲆⵠᐃ + xx / 10);
        }
        for (var b = a.Ⲇⵠⵠⵠⵠ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃΔΔ(d);
          nf(471, d.id, qx.ⲆⲆᐃ.x + d.x, qx.ⲆⲆᐃ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          d = b[c];
          if (d.ⲆⲆΔᐃⵠ <= 0 || d.x > -qx.ⲆⲆᐃ.x + Sn || d.x < -qx.ⲆⲆᐃ.x - qx.ⲆⲆᐃ.w / 2 || -qx.ⲆⲆᐃ.y + Zn < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -qx.ⲆⲆᐃ.y;
        if (px.ΔⲆⲆΔᐃ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = qx.ᐃᐃᐃΔⵠ;
        if (a.ᐃᐃⵠΔΔ === 0) {
          a.ΔᐃⲆⵠᐃ = Math.max(0, a.ΔᐃⲆⵠᐃ - xx / 10);
        } else {
          a.ΔᐃⲆⵠᐃ = Math.min(1, a.ΔᐃⲆⵠᐃ + xx / 10);
        }
        for (var b = a.Ⲇⵠⵠⵠⵠ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃΔΔ(d);
          nf(470, d.id, qx.ⲆⲆᐃ.x + d.x, qx.ⲆⲆᐃ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⲆⲆΔᐃⵠ <= 0 || d.x > -qx.ⲆⲆᐃ.x + Sn || -qx.ⲆⲆᐃ.x > d.x || d.y > -qx.ⲆⲆᐃ.y + Zn) {
            b.splice(c, 1);
          }
        }
        var e = -qx.ⲆⲆᐃ.y;
        if (px.ⲆᐃⲆΔΔ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = qx.ᐃΔΔΔⲆⲆⲆ;
        for (var b = a.Ⲇⵠⵠⵠⵠ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃΔΔ(d);
          nf(942, d.id, qx.ⲆⲆᐃ.x + d.x, qx.ⲆⲆᐃ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⲆⲆΔᐃⵠ <= 0 || d.x > -qx.ⲆⲆᐃ.x + Sn || -qx.ⲆⲆᐃ.x > d.x || d.y > -qx.ⲆⲆᐃ.y + Zn) {
            b.splice(c, 1);
          }
        }
        var e = -qx.ⲆⲆᐃ.y;
        if (px.ΔᐃⵠΔⵠ > -1000) {
          a.add(e);
        }
      })();
    }
    if (px.transition && a) {
      px.transition = rl;
      px.ⵠΔΔΔ.ⵠΔⵠ = 0;
      px.ⵠΔΔΔ.ⲆᐃΔ = wr;
    }
  }
  function zw(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (px.transition) {
      Hn.globalAlpha = 1;
      jp(Hn, Ⲇᐃ[b][px.time], 0, 0, f, g, d, e, a, h);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1 - px.ⵠΔΔΔ.ⵠΔⵠ;
      jp(Hn, Ⲇᐃ[b][px.time], 0, 0, f, g, d, e, a, h);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1;
    } else {
      jp(Hn, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function Aw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = qx.ⲆⲆᐃ.y + f + 710;
    var l = Math.max(qx.ⲆⲆᐃ.x + e, 0);
    var g = Math.max(-qx.ⲆⲆᐃ.x + Sn - i - 100, 0);
    var r = l;
    var b = Sn - l - g;
    if (n) {
      var d = j.ᐃᐃⵠ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ᐃᐃⵠ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ᐃᐃⵠ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ᐃⲆᐃⲆⲆΔⵠ === 1) {
      if (px.transition) {
        var p = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(15, 77, 72, 252, 239, 187, p);
      } else {
        Hn.fillStyle = Sr.ΔΔⵠᐃΔᐃᐃ[px.time];
      }
      Hn.fillRect(r, s, b, t);
    } else {
      if (px.transition) {
        p = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(k.ΔᐃⲆ[0], k.ΔᐃⲆ[1], k.ΔᐃⲆ[2], k.Δᐃⵠ[0], k.Δᐃⵠ[1], k.Δᐃⵠ[2], p);
      } else {
        Hn.fillStyle = k.ᐃⵠⲆⲆⲆ[px.time];
      }
      Hn.fillRect(r, s, b, t);
    }
  }
  function Bw(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(e * a + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(a * f + c * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(a * g + d * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function Cw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = qx.ⲆⲆᐃ.x + j + 820;
    var l = Math.max(qx.ⲆⲆᐃ.y + e, 0);
    var g = Math.max(-qx.ⲆⲆᐃ.y + Zn - i - 100, 0);
    var t = l;
    var b = Zn - l - g;
    if (o) {
      var d = q.ᐃᐃⵠ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var m = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ᐃᐃⵠ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ᐃᐃⵠ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < k) {
      var A = _h;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f + 2;
    } else {
      A = Ol;
      u = k;
      D = -1;
    }
    f = h - 700 - u;
    if (px.transition) {
      var N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
      Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
    }
    Hn.fillRect(F, m, p, C);
    if (o) {
      if (px.transition) {
        N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(15, 70, 76, 42, 139, 155, N);
      } else {
        Hn.fillStyle = Sr.ⲆΔⵠⲆⵠᐃⵠ[px.time];
      }
    } else if (px.transition) {
      N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
      Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
    }
    Hn.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (px.transition) {
          N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
          Hn.fillStyle = Bw(17, 94, 96, 169, 214, 211, N);
        } else {
          Hn.fillStyle = Sr.ⲆΔᐃⵠⲆⵠΔ[px.time];
        }
      } else if (px.transition) {
        N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
      } else {
        Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
      }
      Hn.fillRect(L, J, M, B);
    }
    if (mx.ᐃᐃⵠΔⵠ && o) {
      q.ⵠⵠᐃⵠⲆⲆⲆᐃⲆ(k, D, G, h, -qx.ⲆⲆᐃ.y + m, -qx.ⲆⲆᐃ.y + m + C);
    }
  }
  function Dw(a, b, c) {
    if (px.transition) {
      Hn.globalAlpha = 1;
      a.ΔⵠⲆⲆ(b, c);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1 - px.ⵠΔΔΔ.ⵠΔⵠ;
      a.ΔⵠⲆⲆ(b, c);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1;
    } else {
      a.ΔⵠⲆⲆ(b, c);
    }
  }
  function Ew(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = qx.ⲆⲆᐃ.x + j - 700;
    var l = Math.max(qx.ⲆⲆᐃ.y + e, 0);
    var g = Math.max(-qx.ⲆⲆᐃ.y + Zn - i - 100, 0);
    var t = l;
    var b = Zn - l - g;
    if (o) {
      var d = q.ᐃᐃⵠ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var m = t;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ᐃᐃⵠ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ᐃᐃⵠ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h + 350 - u + d.x) - 3 > k) {
      var A = il;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f - 2;
    } else {
      A = false;
      u = k;
      D = -1;
    }
    f = h + 700 - u;
    if (px.transition) {
      var N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
      Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
    }
    Hn.fillRect(F, m, p, C);
    if (o) {
      if (px.transition) {
        N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(15, 70, 76, 42, 139, 155, N);
      } else {
        Hn.fillStyle = Sr.ⲆΔⵠⲆⵠᐃⵠ[px.time];
      }
    } else if (px.transition) {
      N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
      Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
    }
    Hn.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (px.transition) {
          N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
          Hn.fillStyle = Bw(17, 94, 96, 169, 214, 211, N);
        } else {
          Hn.fillStyle = Sr.ⲆΔᐃⵠⲆⵠΔ[px.time];
        }
      } else if (px.transition) {
        N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
      } else {
        Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
      }
      Hn.fillRect(L, J, M, B);
    }
    if (mx.ᐃᐃⵠΔⵠ && o) {
      q.ΔⵠΔⵠᐃⲆΔᐃⲆ(k, D, G, h, -qx.ⲆⲆᐃ.y + m, -qx.ⲆⲆᐃ.y + m + C);
    }
  }
  function Fw(a, b, c, d) {
    if (px.transition) {
      Hn.globalAlpha = 1;
      jp(Hn, Ⲇᐃ[a][px.time], c, d);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1 - px.ⵠΔΔΔ.ⵠΔⵠ;
      jp(Hn, Ⲇᐃ[a][px.time], c, d);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1;
    } else {
      jp(Hn, b, c, d);
    }
  }
  function ef(b, c, d, e, f, g) {
    const a = (8 << (d >> 8 & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 0 & 255));
    const i = (8 << (e >> 24 & 255)) + (16 << (e & 255)) + (0 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
    const j = ~(f & 38551) & 38551 | ~(f & 38551) & f;
    return ((4769 + (Mn(~(b & 58298) & b | ~(b & 58298) & 58298, ~(c & 8488) & c | ~(c & 8488) & 8488) ^ rt(a, i, j))) * 2147483629 + 2147483587) % 2147483647;
  }
  function tf(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (px.transition) {
      Hn.globalAlpha = 1;
      jp(Hn, Ⲇᐃ[b][c][px.time], 0, 0, g, a, e, f, i, j);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1 - px.ⵠΔΔΔ.ⵠΔⵠ;
      jp(Hn, Ⲇᐃ[b][c][px.time], 0, 0, g, a, e, f, i, j);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1;
    } else {
      jp(Hn, Ⲇᐃ[b][c][px.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function nf(a, b, c, d, e) {
    if (px.transition && e == 1) {
      Hn.globalAlpha = 1;
      jp(Hn, Ⲇᐃ[a][px.time][b], c, d);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1 - px.ⵠΔΔΔ.ⵠΔⵠ;
      jp(Hn, Ⲇᐃ[a][px.time][b], c, d);
      px.time = px.time ? 0 : 1;
      Hn.globalAlpha = 1;
    } else {
      Hn.globalAlpha = e;
      jp(Hn, Ⲇᐃ[a][px.time][b], c, d);
      Hn.globalAlpha = 1;
    }
  }
  function of(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = qx.ⲆⲆᐃ.y + j - 700;
    var l = Math.max(qx.ⲆⲆᐃ.x + e, 0);
    var g = Math.max(-qx.ⲆⲆᐃ.x + Sn - i - 100, 0);
    var t = l;
    var b = Sn - l - g;
    if (o) {
      var d = q.ᐃᐃⵠ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = t;
    var m = u;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ᐃᐃⵠ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ᐃᐃⵠ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h + 350 - u + d.x) - 3 > k) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f - 2;
    } else {
      A = false;
      u = k;
      D = -1;
    }
    f = h + 700 - u;
    if (px.transition) {
      var N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
      Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
    }
    Hn.fillRect(F, m, C, p);
    if (o) {
      if (px.transition) {
        N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(15, 70, 76, 42, 139, 155, N);
      } else {
        Hn.fillStyle = Sr.ⲆΔⵠⲆⵠᐃⵠ[px.time];
      }
    } else if (px.transition) {
      N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
      Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
    }
    Hn.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (px.transition) {
          N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
          Hn.fillStyle = Bw(17, 94, 96, 169, 214, 211, N);
        } else {
          Hn.fillStyle = Sr.ⲆΔᐃⵠⲆⵠΔ[px.time];
        }
      } else if (px.transition) {
        N = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
        Hn.fillStyle = Bw(9, 55, 63, 11, 106, 132, N);
      } else {
        Hn.fillStyle = Sr.ΔᐃⲆⵠΔ[px.time];
      }
      Hn.fillRect(J, L, B, M);
    }
    if (mx.ᐃᐃⵠΔⵠ && o) {
      q.ⵠᐃᐃⵠⵠⲆⲆΔΔ(k, D, G, h, -qx.ⲆⲆᐃ.x + F, -qx.ⲆⲆᐃ.x + F + C);
    }
  }
  var af = 0;
  var rf = 1;
  var sf = 2;
  var hf = 0;
  var lf = 1;
  var gf = 2;
  function uf(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ⲆⲆᐃⲆΔ: d,
      ᐃⵠⲆⲆᐃ: e
    };
    return {
      translate: g,
      ΔⵠⲆⲆ: function (a) {
        jp(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  function bf(b, f, i, j, k, n, a, q, t, w, l, g, u, d, x) {
    if (b.length === 0) {
      b = " ";
    }
    if (a === undefined) {
      a = 0;
    }
    if (q === undefined) {
      q = 0;
    }
    if (t === undefined) {
      t = 0;
    }
    if (d === undefined) {
      d = 0;
    }
    var c = document.createElement("canvas");
    var m = c.getContext("2d");
    m.textBaseline = "middle";
    m.font = (x !== undefined ? x + " " : "") + j + "px " + f;
    k = Lq !== k ? Math.min(m.measureText(b).width, k) : m.measureText(b).width;
    c.width = k + a;
    c.height = j + q;
    if (n !== Xg) {
      if (l !== undefined) {
        m.globalAlpha = l;
      }
      m.fillStyle = n;
      if (g !== undefined) {
        ΔⲆⵠᐃᐃⵠᐃⵠΔ(m, t + 2, t, k + a - t * 2 - 4, j + q - t * 2, g);
        m.fill();
      } else {
        m.fillRect(t, t, k + a - t * 2, j + q - t * 2);
      }
      m.globalAlpha = 1;
      if (t !== 0) {
        m.lineWidth = t;
        m.strokeStyle = w;
        m.stroke();
      }
    }
    m.textBaseline = "middle";
    m.font = (x !== undefined ? x + " " : "") + j + "px " + f;
    if (u !== undefined) {
      m.strokeStyle = u;
      m.lineWidth = d;
      m.lineJoin = "miter";
      m.miterLimit = 2;
      m.strokeText(b, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
    }
    m.fillStyle = i;
    m.fillText(b, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
    c.w2 = c.width / 2;
    c.ⵠⲆⵠⵠⲆ = c.height / 2;
    return c;
  }
  function df(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function vf(f, e, i, j, k, m, n, p, q, r, t) {
    if (Yh === q) {
      q = 0;
    }
    if (p === undefined) {
      p = 0;
    }
    if (r === undefined) {
      r = 0;
    }
    if (t === Es) {
      t = 1;
    }
    if (m !== 1) {
      m = 0;
    }
    if (j) {
      var w = j;
    }
    var u;
    var x = {
      width: f,
      height: e,
      ᐃΔ: w,
      state: hf,
      translate: {
        x: p,
        y: q,
        ⲆⲆᐃⲆΔ: p,
        ᐃⵠⲆⲆᐃ: q
      },
      ⲆΔΔⲆᐃΔΔⲆΔ: m,
      ΔᐃΔᐃ: 0,
      callback: n,
      position: r,
      active: t
    };
    function d() {
      return x.ᐃΔ[x.state];
    }
    function v(a) {
      var b = x.translate;
      if (x.width === 0 || x.height === 0) {
        x.width = x.ᐃΔ[0].width;
        x.height = x.ᐃΔ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / k && a.y > b.y && a.y < b.y + x.height / k;
    }
    m = function () {
      var a = 0;
      if (x.ⲆΔΔⲆᐃΔΔⲆΔ === 1) {
        if (lf === x.state || x.state === gf) {
          x.ΔᐃΔᐃ = (0 + xx * 1000) % 1000;
        } else if (0 < 0) {
          x.ΔᐃΔᐃ = 0 > 500 ? 0 + xx * 1000 : 0 - xx * 1000;
          if (0 < 0 || 0 > 1000) {
            x.ΔᐃΔᐃ = 0;
          }
        }
        a = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(0 > 500 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((k = k === 3 ? 3 : k === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + m();
        var c = d();
        var e = x.width * b / 2;
        var f = b * x.height / 2;
        var g = (e - x.width / 2) / 2;
        var h = (f - x.height / 2) / 2;
        jp(a, c, x.translate.x - g, x.translate.y - h, e, f);
      };
    } else if (k === 3) {
      u = function (b) {
        var c = d();
        var e = x.width;
        var f = x.height;
        var g = (e - x.width) / 2;
        var h = (f - x.height) / 2;
        jp(b, c, x.translate.x - g, x.translate.y - h, e, f);
      };
      k = 1;
    } else {
      u = function (a) {
        jp(a, d(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ⲆⲆⲆᐃ: function (a, b, c) {
        if (v(b)) {
          if (rf == c) {
            x.state = gf;
          } else if (sf == c || af == c && x.state != gf) {
            x.state = lf;
          }
          return On;
        } else {
          x.state = hf;
          return false;
        }
      },
      ΔⵠⲆⲆ: u,
      ⵠᐃⵠⵠⲆⵠⲆ: v
    };
  }
  var cf = "send";
  var mf = ᐃⵠⲆΔ.ⵠⵠⲆΔΔⵠⵠ("id") === "1" ? 1 : 0;
  var pf = ᐃⵠⲆΔ.ⵠⵠⲆΔΔⵠⵠ("password");
  var Cf = ᐃⵠⲆΔ.ⵠⵠⲆΔΔⵠⵠ("debug") || undefined;
  if (Cf !== undefined) {
    Cf = JSON.parse(za.decodeURIComponent(Cf));
  }
  var Gw = ᐃⵠⲆΔ.ⵠⵠⲆΔΔⵠⵠ("server") || undefined;
  var ff = ᐃⵠⲆΔ.ⵠⵠⲆΔΔⵠⵠ("region") || at;
  var zf = "starve.io";
  var yf = "https://" + zf;
  var wf = {
    IDLE: 64,
    ΔΔΔᐃΔΔᐃ: 128,
    ⵠⲆⲆⲆᐃⲆᐃ: 32,
    ⵠⲆⵠᐃⵠⲆΔⵠᐃ: 1,
    ΔⵠⲆΔⵠⲆⲆ: 256,
    ᐃᐃᐃΔΔ: 4,
    ⵠᐃΔⵠ: 2,
    ΔⲆΔΔⵠⲆᐃ: 16,
    ᐃᐃⲆᐃⲆΔΔ: 8
  };
  var Pf = [{
    ⲆⲆΔⵠΔ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ⲆⲆΔⵠΔ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ⲆⲆΔⵠΔ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ⲆⲆΔⵠΔ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ⲆⲆΔⵠΔ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ⲆⲆΔⵠΔ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ⲆⲆΔⵠΔ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ⲆⲆΔⵠΔ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ⲆⲆΔⵠΔ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ⲆⲆΔⵠΔ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  let kf = 0;
  const Hw = [];
  var xf = {
    ⲆⲆΔⲆⲆⲆᐃΔⵠ: 25,
    ᐃⵠⲆⵠᐃⵠᐃΔΔ: 50,
    ΔΔⲆⲆᐃⵠⲆⲆⵠ: 14,
    ⲆⵠΔⵠΔᐃⵠΔⲆ: 0.58,
    ⵠΔⲆⲆᐃⲆΔΔⵠ: 2000,
    ⵠᐃᐃᐃᐃᐃⵠΔⲆ: 5,
    ⵠⲆΔᐃΔΔⵠ: 0,
    ᐃⵠⲆⲆⵠⵠᐃ: 600000,
    ⲆⲆᐃⵠΔᐃⵠ: 3,
    ΔⲆΔΔⵠⲆᐃ: 0.2,
    ⲆΔⵠΔⲆᐃⲆⲆᐃ: 8000,
    ᐃⵠΔᐃΔⲆᐃⲆᐃ: 3,
    ⵠⲆⲆⲆΔΔⵠⵠⵠ: 200,
    ᐃⵠⲆⲆⲆⲆΔ: 0.2,
    Ⲇⵠⵠⵠⵠⵠᐃⵠⵠ: 125000,
    ⵠΔⵠⵠᐃΔⲆΔΔ: 5,
    ⲆⲆΔⵠⵠⲆᐃ: 4,
    ᐃⲆᐃᐃⵠᐃⲆⲆⵠ: 60000,
    ᐃᐃⲆᐃⲆᐃⵠΔⲆ: "[6]",
    ⲆⵠⵠᐃΔⵠⵠΔᐃ: 20,
    ᐃΔⲆⵠⲆⵠⵠ: 52,
    ᐃⵠᐃⲆᐃⲆⲆ: 4,
    ΔⲆᐃⲆΔⲆᐃ: 2,
    ⲆⵠⵠΔᐃⵠⲆ: 1,
    ⵠΔⲆᐃⵠΔᐃΔⲆ: 14
  };
  var Jf = {
    ΔΔⵠ: 480000,
    ⲆΔⵠⵠΔᐃᐃ: 10,
    ⲆⲆⲆΔᐃΔⲆ: 16,
    ⵠᐃⵠΔⲆⵠΔⵠⵠ: 6,
    ⵠΔᐃΔᐃⲆΔ: 60,
    ⵠⲆΔⲆⲆ: 1,
    ⵠΔᐃⵠᐃ: 2,
    ᐃΔⲆΔΔ: 4,
    ᐃⵠᐃᐃⵠ: 8,
    ᐃⵠⲆⲆⲆⲆΔ: 10,
    ᐃⵠΔⵠⵠΔⵠ: 100,
    ⵠΔⵠⵠᐃⵠⵠ: 100,
    ΔⵠΔⵠᐃⵠᐃ: 100,
    ⲆᐃⵠΔΔᐃⵠᐃⵠ: 100,
    ⲆⲆⲆⲆᐃΔΔ: 100,
    ⵠⲆⲆⲆⲆⲆΔ: 100,
    ⵠᐃΔⲆᐃⵠᐃⲆⲆ: 100,
    ⵠⲆⲆⲆⲆⲆΔ: 100,
    ⲆΔⲆⵠᐃⲆΔ: 100,
    ᐃᐃⵠⵠΔⵠΔ: 100,
    ΔᐃⲆⲆᐃ: 0,
    ᐃⲆΔΔⵠᐃⵠ: 1,
    ⲆⲆᐃⵠⵠ: 2,
    ⵠⲆΔⲆΔ: 3,
    ⲆⲆΔⲆⲆ: 4,
    ⲆΔΔⵠΔΔⲆ: 5,
    ⵠΔΔΔᐃ: 6,
    ⲆⵠΔΔΔ: 7,
    ΔⲆᐃⵠⲆⲆᐃⲆᐃ: {
      sydney: "Sydney",
      osaka: "Osaka",
      atlanta: "Atlanta",
      frankfurt: "Frankfurt",
      losangeles: "Los Angeles"
    },
    ᐃⵠⲆᐃⲆΔΔ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ᐃᐃⲆᐃⵠΔΔ: 0,
    ᐃⵠᐃⲆᐃᐃᐃ: 0,
    ⲆⵠⲆⵠⵠⵠⵠ: 30,
    ⵠΔⲆΔⵠᐃΔⲆᐃ: 2,
    ⵠΔᐃΔᐃⲆΔ: 60000,
    ⵠΔⲆⵠⵠⲆⲆⵠⲆ: 0,
    ΔⵠⲆΔⲆΔⲆᐃΔ: 0,
    ⲆᐃⲆⲆⲆⲆΔΔΔ: 50,
    ᐃⲆⲆⲆⵠⲆⵠⲆⲆ: 0,
    ΔᐃΔⵠⵠⲆⲆΔᐃ: 40,
    ⲆᐃΔΔᐃⲆΔⵠⵠ: 39,
    ⵠⵠⵠᐃⵠΔᐃⲆⲆ: 830,
    ⲆᐃΔⵠⵠΔⵠ: 25,
    ΔⵠⵠⵠᐃΔⲆ: 8,
    ⲆΔᐃΔⵠ: 0,
    ᐃⵠᐃᐃⲆ: 0,
    ⲆᐃⵠΔⲆⲆΔ: 200,
    ᐃⲆΔᐃⲆⲆⲆ: 0,
    ΔⲆⵠⲆΔ: 250,
    ⲆΔⵠⲆⵠⲆΔ: 150,
    ᐃΔᐃΔΔⲆⲆ: 0,
    ΔⵠΔⲆΔ: 350,
    ᐃᐃⲆᐃΔΔᐃ: 100,
    ΔΔⵠⵠᐃᐃⲆ: 700,
    ⵠⲆⵠᐃⲆ: 39879
  };
  var Mf = [];
  for (Ab = 0; Ab < 500; Ab++) {
    Mf[Ab] = 0;
  }
  Mf[47] = 1;
  Mf[57] = 1;
  Mf[0] = 1;
  Mf[5] = 1;
  Mf[6] = 1;
  Mf[30] = 1;
  Mf[19] = 1;
  Mf[9] = 1;
  Mf[62] = 1;
  Mf[63] = 1;
  Mf[13] = 1;
  Mf[14] = 1;
  Mf[15] = 1;
  Mf[33] = 1;
  Mf[34] = 1;
  Mf[16] = 1;
  Mf[17] = 1;
  function Bf(a) {
    const b = za.setTimeout;
    const c = b;
    const d = function () {
      b(d, 6906);
      c(d, 5499);
    };
    d();
  }
  Mf[12] = 1;
  Mf[18] = 1;
  var Df = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var If = {
    ΔⵠⵠᐃΔ: 56,
    ΔΔⵠⵠᐃ: 15,
    ᐃᐃⵠⵠᐃ: 46,
    ᐃⵠⵠᐃᐃ: 72,
    ⲆΔⲆⵠΔ: 40,
    ᐃᐃⵠᐃᐃ: 53,
    ΔΔⵠᐃⵠ: 22,
    ΔⲆᐃⲆⲆⵠᐃ: 84,
    ⵠΔᐃⵠᐃᐃⵠ: 83,
    ⵠⲆⵠΔⲆ: 16,
    ΔΔⲆⲆΔ: 90,
    ᐃⲆΔᐃⲆ: 79,
    ΔⲆΔΔᐃ: 13,
    ⲆⲆᐃⵠⲆ: 14,
    ΔᐃΔᐃⲆ: 45,
    ᐃⵠⲆΔⲆ: 60,
    ⲆᐃⲆΔⵠ: 48,
    ΔⲆᐃⵠⵠ: 67,
    ΔΔⲆⵠⵠ: 7,
    ᐃⲆΔᐃᐃ: 31,
    ⵠⲆᐃᐃⵠ: 52,
    ⵠᐃⵠΔᐃ: 64,
    ⵠⵠⲆⲆΔ: 71,
    ⲆⵠⵠΔⲆ: 21,
    ⲆⲆⵠⲆⵠ: 38,
    ᐃᐃᐃᐃᐃ: 19,
    ⲆⲆⵠΔⵠ: 65,
    ⲆⵠⲆΔᐃ: 23,
    ⵠΔⲆᐃᐃᐃⲆ: 76,
    ᐃᐃΔⵠᐃ: 41,
    ⵠⵠⲆⵠΔ: 42,
    ⲆⲆΔⲆᐃⲆⵠ: 82,
    ᐃᐃⵠᐃⵠ: 51,
    ⵠΔⵠΔⵠ: 100,
    Δᐃⵠᐃᐃ: 81,
    ᐃΔⵠⵠⲆ: 74,
    ΔΔᐃΔⵠ: 28,
    ᐃᐃⲆⵠⵠ: 25,
    ⲆⵠⵠⲆᐃ: 80,
    ⲆⲆᐃᐃⵠ: 39,
    ⵠⲆΔⵠΔ: 18,
    ⲆᐃⵠⲆΔ: 33,
    ΔᐃⲆΔⵠ: 1,
    ⲆᐃᐃⵠΔ: 54,
    ΔΔⵠᐃᐃ: 43,
    ⵠᐃΔΔΔ: 37,
    ⲆⵠΔⵠⲆ: 75,
    ⵠΔᐃᐃⲆ: 35,
    ⵠΔΔⲆΔ: 62,
    ΔΔⲆⲆⲆ: 34,
    ⵠⲆⵠⲆⵠ: 30,
    ᐃΔⲆⲆᐃ: 0,
    ᐃⵠΔⲆΔ: 24,
    ⵠⲆⲆⲆⵠΔⲆ: 85,
    ⵠⲆΔᐃΔ: 44,
    ΔᐃΔⲆᐃ: 29,
    ⲆᐃᐃΔΔ: 47,
    ΔΔⵠⲆΔ: 69,
    ⵠⲆⵠᐃⲆ: 3,
    ⲆᐃᐃⲆᐃ: 77,
    ᐃⵠⵠⵠⲆ: 70,
    ⲆΔΔᐃⲆ: 91,
    ⵠᐃᐃⵠⲆ: 50,
    ⵠᐃⲆⵠᐃ: 2,
    ᐃⲆᐃⵠᐃ: 55,
    ⵠⵠᐃⲆⵠ: 20,
    ⲆⲆΔⵠᐃ: 8,
    ⲆΔΔᐃⵠ: 87,
    ⲆⲆΔᐃⲆ: 6,
    ⲆⲆⲆⵠΔ: 4,
    ᐃⲆⵠᐃⵠ: 9,
    ⲆⵠⲆⵠΔ: 27,
    ⵠᐃⲆᐃᐃ: 36,
    ᐃⲆⲆⵠΔ: 66,
    ⲆᐃΔⵠⲆ: 88,
    ᐃΔᐃᐃᐃ: 26,
    ⲆΔⲆΔⵠ: 17,
    ⵠⵠΔⵠⵠ: 12,
    ⵠⲆⲆⵠⵠ: 32,
    ᐃᐃⲆᐃᐃ: 73,
    ΔΔᐃⲆᐃ: 61,
    ⲆⲆⵠⵠΔ: 78,
    ⲆᐃΔⵠᐃᐃᐃ: 89,
    ⲆⵠⵠΔᐃ: 5,
    ΔᐃⲆᐃΔ: 63,
    ⵠⵠᐃⲆⲆ: 49,
    ⵠΔᐃⵠⲆ: 11,
    ΔⵠⲆᐃⲆ: 10,
    ᐃΔᐃⲆⵠ: 68,
    ᐃⵠΔⵠⵠ: 86
  };
  var Sf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Qf(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ΔⵠΔΔ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ΔⲆⲆⲆᐃⵠⲆ = i;
    this.action = a;
    this.info = j;
    this.ΔΔΔΔⲆ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ΔΔΔΔᐃ = k;
    if (px) {
      this.ᐃΔⲆⵠ = c * px.ᐃⲆᐃⵠΔᐃᐃ + d;
    }
    switch (b) {
      case 0:
        this.ΔⲆⵠΔ = px.ΔΔᐃᐃ[this.ΔⵠΔΔ];
        this.ⵠᐃⵠⲆ = this.ΔⲆⵠΔ.ⵠᐃⵠⲆ;
        this.ⵠΔⲆᐃⲆᐃⲆ = this.ΔⲆⵠΔ.ⵠΔⲆᐃⲆᐃⲆ;
        this.ΔⵠᐃⲆⵠ = this.ΔⲆⵠΔ.ΔⵠᐃⲆⵠ;
        this.ᐃΔⵠⲆᐃ = this.ΔⲆⵠΔ.ᐃΔⵠⲆᐃ;
        this.ⵠᐃⵠⲆⵠⵠΔ = -1000000;
        this.ΔᐃⵠΔⵠ = -1000000;
        this.ⲆᐃⲆΔΔ = -1000000;
        this.ΔⲆⲆΔᐃ = -1000000;
        this.ΔⵠΔⲆΔᐃⲆ = -1000000;
        this.ΔⵠᐃⲆⵠᐃⲆ = -1000000;
        this.ΔΔᐃᐃΔ = -1000000;
        this.ᐃⲆⵠΔᐃ = px.mode === 2 && this.ⵠᐃⵠⲆ === 0;
        this.ᐃᐃⲆΔⵠⵠⵠ = px.mode === 3 && this.ⵠᐃⵠⲆ === 0;
        this.ⵠⵠⲆΔᐃⲆⲆ = !!this.ᐃⲆⵠΔᐃ && this.ΔⲆⵠΔ.ⵠΔᐃΔⲆ === "  " && On;
        this.ᐃΔⲆⲆΔ = [];
        this.ⲆΔᐃⲆᐃᐃⲆ = 0;
        this.ⵠⵠⲆᐃ = true;
        this.ᐃᐃΔⲆⵠΔⵠ = 0;
        this.ⲆΔⵠⲆⵠⵠⲆ = 0;
        this.ΔⵠⵠⲆΔ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ΔⵠⲆⲆ = cw;
        this.ᐃⵠᐃⲆΔⵠΔ = Yv;
        this.ΔⲆᐃᐃⲆ = 0;
        this.ΔⲆⵠᐃⵠ = 0;
        this.ⲆᐃΔⵠᐃ = 0;
        this.ⵠᐃΔΔΔΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(rl, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⵠⲆⵠᐃ = 0;
        this.ΔΔᐃᐃⲆⲆᐃ = 0;
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(zj, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆⲆΔⵠ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Nq, 0.6, 0.6, 0, 5, 3);
        this.ⵠⲆᐃⲆΔΔΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(zj, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆᐃⲆᐃⲆⵠ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Qn, 0, 2.25, -1.5, 3.75, 7.5);
        this.ⵠⵠΔⵠⵠᐃⵠ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Cl, 0, 0, -Math.PI / 3, 6, 9);
        this.ⲆΔᐃΔⵠⵠΔᐃΔ = 0;
        this.ⵠⵠⵠᐃΔⵠⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(In, 0.6, 0.6, 0, 1, 3);
        this.ⵠⵠΔⲆⲆΔΔ = this.ⵠⵠⲆΔᐃⲆⲆ ? new ᐃⵠⲆΔ.ⲆΔⲆΔ(_h, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ⲆⵠⵠⵠⵠΔᐃ = 0;
        this.ᐃΔⵠⵠⵠⲆᐃ = 0;
        this.ᐃᐃΔᐃⲆᐃⲆ = [];
        this.ⲆⲆᐃⲆⵠᐃⲆ = [];
        this.text = [];
        this.label = [];
        this.ⵠΔⵠΔᐃⵠΔ = aw;
        this.ᐃΔΔⵠΔ = true;
        this.right = -1;
        this.ⵠⵠᐃⵠⵠ = -1;
        this.action = 64;
        this.ⲆⲆΔⲆΔᐃᐃ = Ol;
        this.ᐃΔⲆⵠᐃ = 0;
        this.ΔⲆⵠΔⵠ = lh;
        this.bubbles = [];
        this.ⵠⵠᐃᐃⵠ = 0;
        this.ΔⲆᐃⲆΔ = -1;
        this.ᐃΔΔ = function (a) {
          if (this.info & 32768) {
            this.ⲆⲆΔⲆΔᐃᐃ = true;
            this.info = this.info & -32769;
          } else {
            this.ⲆⲆΔⲆΔᐃᐃ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ⵠⵠᐃᐃⵠ = 1;
          } else {
            this.ⵠⵠᐃᐃⵠ = 0;
          }
          this.ᐃΔⲆⵠᐃ = Math.floor(this.info / 128);
          this.info -= this.ᐃΔⲆⵠᐃ * 128;
          if (this.info === 7 || this.ⵠⵠⲆΔᐃⲆⲆ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⲆΔᐃⲆᐃᐃⲆ = px.ⵠᐃᐃⵠᐃᐃᐃⵠΔ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ⵠⵠᐃⵠⵠ = this.ΔΔΔΔⲆ & 255;
          if (this.right === 2) {
            this.ΔⲆⵠΔⵠ = Qe;
          } else {
            this.ΔⲆⵠΔⵠ = nl;
          }
          if (Mf[this.right]) {
            this.ΔⵠⲆⲆΔ = true;
          } else {
            this.ΔⵠⲆⲆΔ = false;
          }
          if (a & 256) {
            this.ⵠⵠⵠᐃΔⵠⲆ.ⲆᐃΔ = false;
            this.ⵠⵠⵠᐃΔⵠⲆ.ⵠΔⵠ = 0.6;
          } else if (a & 4) {
            this.freeze.ⲆᐃΔ = false;
            this.freeze.ⵠΔⵠ = 0.6;
          } else if (a & 128) {
            this.ᐃⲆⲆΔⵠ.ⲆᐃΔ = false;
            this.ᐃⲆⲆΔⵠ.ⵠΔⵠ = 0.6;
          }
          if (a & 8) {
            this.ⵠⲆᐃⲆΔΔΔ.ⲆᐃΔ = false;
            this.ⵠⲆᐃⲆΔΔΔ.ⵠΔⵠ = 0.6;
          }
          if (a & 2) {
            this.ⲆⲆⲆ.ⲆᐃΔ = _a;
            this.ⲆⲆⲆ.ⵠΔⵠ = 0.6;
          }
          if (a & 16) {
            this.ⲆΔᐃΔⵠⵠΔᐃΔ = 0.58;
            if (tx.ⲆᐃΔᐃⲆ && this.ΔⲆᐃⲆΔ !== -1) {
              tx.ΔΔᐃᐃ[this.ΔⲆᐃⲆΔ].ⲆΔⲆΔᐃⲆⲆⵠⵠ($w[this.right]);
            }
          }
        };
        this.ᐃΔΔ();
        break;
      case 23:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(wr, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.ⲆⵠᐃΔᐃ = gv;
        this.ᐃⲆᐃΔⲆ = _u;
        this.ᐃΔⵠⲆΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔΔⲆᐃᐃⵠ = 0;
        this.ΔⵠⵠⵠᐃᐃΔ = 0;
        this.ⵠᐃᐃⲆⲆ = $p;
        break;
      case 22:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: In,
          angle: 0
        };
        this.ⲆⵠᐃΔᐃ = nv;
        this.ᐃⲆᐃΔⲆ = ev;
        this.ᐃΔⵠⲆΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔΔⲆᐃᐃⵠ = 0;
        this.ΔⵠⵠⵠᐃᐃΔ = 0;
        break;
      case 1:
      case 6:
        this.ⲆⵠᐃΔᐃ = zv;
        this.ᐃⲆᐃΔⲆ = xv;
        this.ⲆⲆΔⲆⵠ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔⵠⲆΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Go, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(zj, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        break;
      case 43:
        this.ⲆⵠᐃΔᐃ = Pv;
        this.ᐃⲆᐃΔⲆ = Ov;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(In, 1, 1, 0, 10, 10),
          ᐃΔΔ: wr,
          angle: 0
        };
        this.ΔⲆᐃⲆ = [];
        for (var l = 0; l < 3; l++) {
          this.ΔⲆᐃⲆ.push({
            ΔⵠⲆⲆ: ov,
            ΔᐃΔᐃ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔⲆᐃⲆ[0].x = this.x - 16.5;
        this.ΔⲆᐃⲆ[0].y = this.y - 15.5;
        this.ΔⲆᐃⲆ[0].angle = this.angle;
        this.ΔⲆᐃⲆ[1].x = this.x + 36;
        this.ΔⲆᐃⲆ[1].y = this.y + 17;
        this.ΔⲆᐃⲆ[1].angle = this.angle;
        this.ΔⲆᐃⲆ[2].x = this.x - 18.5;
        this.ΔⲆᐃⲆ[2].y = this.y + 39;
        this.ΔⲆᐃⲆ[2].angle = this.angle;
        break;
      case 3:
        this.ⲆⵠᐃΔᐃ = Iv;
        this.ᐃⲆᐃΔⲆ = Ev;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(nl, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.ΔⲆᐃⲆ = [];
        for (l = 0; l < 3; l++) {
          this.ΔⲆᐃⲆ.push({
            ΔⵠⲆⲆ: yv,
            ΔᐃΔᐃ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔⲆᐃⲆ[0].x = this.x - 16.5;
        this.ΔⲆᐃⲆ[0].y = this.y - 15.5;
        this.ΔⲆᐃⲆ[1].x = this.x - 5.5;
        this.ΔⲆᐃⲆ[1].y = this.y + 7.5;
        this.ΔⲆᐃⲆ[2].x = this.x + 18;
        this.ΔⲆᐃⲆ[2].y = this.y - 5;
        break;
      case 77:
        this.ΔⵠⲆⲆ = vv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(kh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ΔⵠⲆⲆ = Cv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(zj, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ΔⵠⲆⲆ = Sv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Ur, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠΔⵠᐃⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃⵠΔᐃᐃΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(nl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆⲆΔⵠ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ΔⵠⲆⲆ = fv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(rl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠΔⵠᐃⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(rl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃⵠΔᐃᐃΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Ur, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆⲆΔⵠ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ΔⵠⲆⲆ = Tv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ΔⵠⲆⲆ = tv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Tr, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ᐃᐃⲆⲆⲆᐃᐃ = this.info & 15;
        this.ⲆΔⵠⲆⵠⵠⲆ = this.ΔΔΔΔⲆ & 1;
        this.ⵠᐃⵠⲆⵠⵠᐃ = 0;
        this.x = this.info;
        this.y = this.ΔΔΔΔⲆ;
        this.ΔⵠⲆⲆ = Vv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ΔⵠⲆⲆ = tv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Go, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ΔⵠⲆⲆ = iv;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        break;
      case 34:
        this.ᐃⲆᐃΔⲆ = Mv;
        this.ΔⵠⲆⲆ = Lv;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(Fh, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.up = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.03, 0.98, 0.1, 0.1);
        this.ᐃⵠΔⵠΔ = [];
        break;
      case 87:
        this.angle = Math.random() * Math.PI / 2;
      case 86:
      case 82:
        this.ΔⵠⲆⲆ = Uv;
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ΔⵠⲆⲆ = Hv;
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ΔⵠⲆⲆ = uv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(In, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ᐃΔᐃⵠΔ = 0;
        this.ᐃᐃⲆᐃ = [];
        this.ⵠⵠⵠⲆⲆΔⲆ = 0;
        this.ⲆⵠⵠⲆⲆⵠΔ = wv;
        this.ΔⵠⲆⲆ = Jv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⲆΔ.ⲆΔⲆΔ(nl, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Ur, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ΔΔΔΔⲆ;
        this.scale = 1;
        this.ⵠⵠⲆΔ = 0;
        this.ΔⵠⲆⲆ = Av;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(ph, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(lh, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ΔΔΔΔⲆ;
        this.scale = 1;
        this.ⵠⵠⲆΔ = 0;
        this.ΔⵠⲆⲆ = Zu;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Ol, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ΔⵠⲆⲆ = Fv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⲆΔ.ⲆΔⲆΔ(zj, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ΔⵠⲆⲆ = mv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(In, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Tr, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ΔⵠⲆⲆ = jv;
        this.ΔᐃΔᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⲆⲆ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Go, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ΔⲆᐃⲆ = [];
        for (l = 0; l < 5; l++) {
          this.ΔⲆᐃⲆ.push({
            ΔⵠⲆⲆ: yv,
            ΔᐃΔᐃ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ΔⲆᐃⲆ[0].x = this.x - 20.5;
            this.ΔⲆᐃⲆ[0].y = this.y - 22.5;
            this.ΔⲆᐃⲆ[1].x = this.x - 35.5;
            this.ΔⲆᐃⲆ[1].y = this.y + 7.5;
            this.ΔⲆᐃⲆ[2].x = this.x + 7.5;
            this.ΔⲆᐃⲆ[2].y = this.y - 30;
            this.ΔⲆᐃⲆ[3].x = this.x + 22.5;
            this.ΔⲆᐃⲆ[3].y = this.y;
            this.ΔⲆᐃⲆ[4].x = this.x - 7.5;
            this.ΔⲆᐃⲆ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ΔⲆᐃⲆ[0].x = this.x - 30.5;
            this.ΔⲆᐃⲆ[0].y = this.y - 22.5;
            this.ΔⲆᐃⲆ[1].x = this.x - 15.5;
            this.ΔⲆᐃⲆ[1].y = this.y + 7.5;
            this.ΔⲆᐃⲆ[2].x = this.x + 15.5;
            this.ΔⲆᐃⲆ[2].y = this.y - 30;
            this.ΔⲆᐃⲆ[3].x = this.x + 12.5;
            this.ΔⲆᐃⲆ[3].y = this.y + 5;
            this.ΔⲆᐃⲆ[4].x = this.x - 40.5;
            this.ΔⲆᐃⲆ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ΔⲆᐃⲆ[0].x = this.x - 20.5;
            this.ΔⲆᐃⲆ[0].y = this.y - 20.5;
            this.ΔⲆᐃⲆ[1].x = this.x - 35.5;
            this.ΔⲆᐃⲆ[1].y = this.y + 15.5;
            this.ΔⲆᐃⲆ[2].x = this.x + 7.5;
            this.ΔⲆᐃⲆ[2].y = this.y - 17;
            this.ΔⲆᐃⲆ[3].x = this.x + 22.5;
            this.ΔⲆᐃⲆ[3].y = this.y + 5;
            this.ΔⲆᐃⲆ[4].x = this.x - 7.5;
            this.ΔⲆᐃⲆ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(ph, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.ΔⵠⲆⲆ = lv;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Go, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃΔⲆⵠΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Fh, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(In, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.ΔⵠⲆⲆ = dv;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: ph,
          angle: 0
        };
        this.ΔⵠⲆⲆ = kv;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Nq, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: Eq,
          angle: 0
        };
        this.ΔⵠⲆⲆ = Qv;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.ΔⵠⲆⲆ = Kv;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(nl, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(Eq, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.ΔⵠⲆⲆ = qv;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(Nq, 1, 1, 0, 10, 10),
          ᐃΔΔ: Cl,
          angle: 0
        };
        this.ΔⵠⲆⲆ = cv;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ΔⵠⲆⲆ = Wv;
        this.rotate = 0;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(Eq, 1, 1, 0, 10, 10),
          ᐃΔΔ: fk,
          angle: 0
        };
        break;
      case 25:
        this.ΔⵠⲆⲆ = $u;
        this.rotate = 0;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(kh, 1, 1, 0, 10, 10),
          ᐃΔΔ: In,
          angle: 0
        };
        break;
      case 26:
        this.ΔⵠⲆⲆ = Gv;
        this.rotate = 0;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: Eq,
          angle: 0
        };
        break;
      case 27:
        this.ΔⵠⲆⲆ = rv;
        this.rotate = 0;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        break;
      case 28:
        this.ΔⵠⲆⲆ = av;
        this.rotate = 0;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: Cl,
          angle: 0
        };
        break;
      case 32:
        this.ⲆⵠᐃΔᐃ = sv;
        this.ᐃⲆᐃΔⲆ = hv;
        this.rotate = 0;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(_a, 1, 1, 0, 10, 10),
          ᐃΔΔ: kh,
          angle: 0
        };
        break;
      case 38:
        this.ΔⵠⲆⲆ = Vu;
        this.ᐃⵠᐃⲆ = Math.floor(this.x / 100);
        this.ⵠⵠ = Math.floor(this.y / 100);
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: kh,
          angle: 0
        };
        this.opacity = 1;
        this.ⵠᐃᐃⲆⲆ = Eu;
        break;
      case 42:
        this.ΔⵠⲆⲆ = Iu;
        this.ᐃΔⵠⲆΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(Ol, 1, 1, 0, 10, 10),
          ᐃΔΔ: kh,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ΔⵠⲆⲆ = Vp;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(Nn, 1, 1, 0, 10, 10),
          ᐃΔΔ: Cl,
          angle: 0
        };
        break;
      case 30:
        this.ΔⵠⲆⲆ = Vp;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: Ur,
          angle: 0
        };
        this.ⵠᐃᐃⲆⲆ = Eu;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ΔⵠⲆⲆ = Vp;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: Go,
          angle: 0
        };
        this.ⵠᐃᐃⲆⲆ = $p;
        break;
      case 41:
        this.ΔⵠⲆⲆ = Fu;
        this.opacity = 1;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: Ur,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > m) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ΔⵠⲆⲆ = Kp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 89:
        this.ΔⵠⲆⲆ = Gu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 83:
        this.ΔⵠⲆⲆ = Wu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 84:
        this.ΔⵠⲆⲆ = Lu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 85:
        this.ΔⵠⲆⲆ = Uu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 11:
        this.ᐃΔΔ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ΔⵠⲆⲆ = Zp;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(wr, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.lock = 0;
        this.ᐃΔΔ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ΔⵠⲆⲆ = Ru;
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10),
          ᐃΔΔ: false,
          angle: 0
        };
        this.ⵠᐃᐃⲆⲆ = $p;
        break;
      case 18:
        this.ⲆⵠᐃΔᐃ = pv;
        this.ΔⵠⲆⲆ = Bv;
        this.ᐃⲆᐃΔⲆ = Yu;
        this.ᐃᐃⲆᐃ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.23, 1.18, 0.02, 0.02);
        this.ᐃΔⵠⲆΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.23, 1.18, 0.04, 0.04);
        this.ⲆⲆⲆ = {
          ᐃⵠⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(rl, 1, 1, 0, 10, 10),
          ᐃΔΔ: Nn,
          angle: 0
        };
        this.ᐃΔΔ = function (a) {
          this.action = a;
        };
    }
  }
  function _f(b) {
    function c(b, c, d) {
      var e = c;
      for (var f = d; f < px.ⲆⲆⲆᐃᐃ; f++) {
        for (var g = c; g < px.ᐃⲆⲆᐃⲆ && (d === f && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (g < e) {
          break;
        }
      }
      px.ΔᐃⲆⲆΔ.push(new px.ΔᐃᐃⲆΔⲆᐃ(px.ⵠᐃⲆⲆΔ, c, d, e - c + 1, f - d, 15));
    }
    function e(b, c, d, e, f) {
      for (var a = 0; a < f && j(b, c, d, e, 8) !== 1; a++);
      if (f === a) {
        return 0;
      } else {
        return 1;
      }
    }
    function j(c, d, e, f, i) {
      var j = d + Math.floor(px.ⵠⵠᐃⲆΔ.get() * f);
      var a = e + Math.floor(px.ⵠⵠᐃⲆΔ.get() * f);
      var k = 10 + Math.floor((px.ᐃⲆⲆᐃⲆ - j - 20) * px.ⵠⵠᐃⲆΔ.get());
      var m = 10 + Math.floor((px.ⲆⲆⲆᐃᐃ - a - 20) * px.ⵠⵠᐃⲆΔ.get());
      var h = k + j;
      var l = m + a;
      for (var g = 0; px.ΔᐃⲆⲆΔ.length > g; g++) {
        var n = px.ΔᐃⲆⲆΔ[g];
        if (ᐃⵠⲆΔ.ⵠⲆΔΔⲆᐃⲆ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      px.ΔᐃⲆⲆΔ.push(new px.ΔᐃᐃⲆΔⲆᐃ(c, k, m, j, a, 15));
      return 1;
    }
    function k(a, b) {
      for (var c = 0; b.length > c; c++) {
        l(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function o(b, e) {
      var i = px.ΔᐃⲆⲆΔ[b];
      var j = Math.floor(i.y1 / 100);
      var k = Math.floor(i.x1 / 100);
      var n = Math.floor(i.ᐃⲆᐃ / 100);
      var o = k + (z = Math.floor(i.w / 100));
      var q = 2;
      var r = n;
      var s = j;
      for (var t = k + 10 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * (z - 20)), u = t - 4; u < t + 4; u++) {
        f(j - 1, u, "wtb", 0, 1);
      }
      while (r > 0) {
        if (q !== 2) {
          if (r < 10) {
            for (A = 1; r > 0; A++) {
              a(s, t, 1, 1, 0, e, A, 1);
              r -= 1;
              s += 1;
            }
          } else if (q !== 1) {
            q = 1;
            var w = Math.floor(1 + px.ⵠⵠᐃⲆΔ.get() * 2);
            var x = 1 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * 4);
            if (t < k + 16) {
              a(s, t, w, 0, 1, e, x, x);
              t += w;
            } else if (t > o - 16) {
              a(s, t, w, 0, -1, e, x, x);
              t -= w;
            } else if (px.ⵠⵠᐃⲆΔ.get() > 0.5) {
              a(s, t, w, 0, 1, e, x, x);
              t += w;
            } else {
              a(s, t, w, 0, -1, e, x, x);
              t -= w;
            }
          } else {
            var y = Math.min(r, Math.floor(1 + px.ⵠⵠᐃⲆΔ.get() * 4));
            var z = 1 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * 4);
            a(s, t, y, 1, 0, e, z, z);
            q = 0;
            r -= y;
            s += y;
          }
        } else {
          for (var A = 10; A > 1; A--) {
            a(s, t, 1, 1, 0, e, A, 1);
            r -= 1;
            s += 1;
          }
          q = 0;
        }
      }
      for (u = t - 1; u < t + 2; u++) {
        f(s, u, "wtb", 0, 1);
      }
    }
    function a(b, j, k, m, n, o, a, p) {
      var q = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var l = Math.floor(p / 2);
      var g = Math.max(1, Math.floor(p / 2));
      for (var r = 0; r < k; r++) {
        for (var s = b - l; b + g > s; s++) {
          for (var t = j - q; j + h > t; t++) {
            if (f(s, t, "wtb", 0, 1) === 1) {
              o.push([s, t, 1]);
            }
          }
        }
        b += m;
        j += n;
      }
    }
    function i(a, b) {
      for (var c = 0; c < 6; c++) {
        d(a, "t", c, Math.floor(b * 80));
      }
      for (c = 0; c < 4; c++) {
        d(a, "b", c, Math.floor(b * 80));
      }
      for (c = 0; c < 3; c++) {
        d(a, "s", c, Math.floor(b * 50));
      }
      var e = [];
      for (c = 0; c < 6; c++) {
        o(a, e);
      }
      k(a, e);
      e = [];
      d(a, "p", 0, Math.floor(b * 28));
      for (c = 0; c < 3; c++) {
        d(a, "g", c, Math.floor(b * 7));
      }
      for (c = 0; c < 3; c++) {
        d(a, "d", c, Math.floor(b * 2));
      }
      for (c = 0; c < 3; c++) {
        d(a, "a", c, Math.floor(b * 1));
      }
      for (c = 0; c < 3; c++) {
        d(a, "m", c, Math.floor(b * 1));
      }
      d(a, "a", 0, Math.floor(b * 1));
      h(a);
    }
    function n(a, b) {
      for (var c = 0; c < 6; c++) {
        d(a, "t", c, Math.floor(b * 20));
      }
      for (c = 0; c < 4; c++) {
        d(a, "b", c, Math.floor(b * 20));
      }
      for (c = 0; c < 3; c++) {
        d(a, "s", c, Math.floor(b * 20));
      }
      var e = [];
      o(a, e);
      k(a, e);
      e = [];
      d(a, "p", 0, Math.floor(b * 24));
      for (c = 0; c < 3; c++) {
        d(a, "g", c, Math.floor(b * 5));
      }
      if (px.mode === 2) {
        for (c = 0; c < 3; c++) {
          d(a, "d", c, Math.floor(b * 3));
        }
        for (c = 0; c < 3; c++) {
          d(a, "a", c, Math.floor(b * 2));
        }
      }
      h(a);
    }
    function h(a) {
      var b = px.ΔᐃⲆⲆΔ[a];
      f(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      f(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      f(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      f(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function l(a, b, c, d) {
      if (m(a, b) && (ΔΔΔⲆ = nx.ΔΔΔⲆ, ΔΔΔⲆ[a][b] === undefined && (ΔΔΔⲆ[a][b] = {}), Fl === ΔΔΔⲆ[a][b].r)) {
        var e = 0;
        if (m(a - 1, b) && ΔΔΔⲆ[a - 1][b] !== ls && ΔΔΔⲆ[a - 1][b].wtb !== undefined) {
          e += 2;
        }
        if (m(a, b - 1) && ΔΔΔⲆ[a][b - 1] !== undefined && ΔΔΔⲆ[a][b - 1].wtb !== undefined) {
          e += 8;
        }
        if (m(a, b + 1) && ΔΔΔⲆ[a][b + 1] !== undefined && ΔΔΔⲆ[a][b + 1].wtb !== Ms) {
          e += 16;
        }
        if (m(a + 1, b) && ΔΔΔⲆ[a + 1][b] !== undefined && Y !== ΔΔΔⲆ[a + 1][b].wtb) {
          e += 64;
        }
        if (m(a - 1, b - 1) && !(~e & 10) && Kn !== ΔΔΔⲆ[a - 1][b - 1] && ΔΔΔⲆ[a - 1][b - 1].wtb !== undefined) {
          e += 1;
        }
        if (m(a - 1, b + 1) && (e & 18) === 18 && ΔΔΔⲆ[a - 1][b + 1] !== undefined && ΔΔΔⲆ[a - 1][b + 1].wtb !== undefined) {
          e += 4;
        }
        if (m(a + 1, b - 1) && (e & 72) === 72 && ΔΔΔⲆ[a + 1][b - 1] !== undefined && ΔΔΔⲆ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (!!m(a + 1, b + 1) && !(~e & 80) && ΔΔΔⲆ[a + 1][b + 1] !== undefined && ΔΔΔⲆ[a + 1][b + 1].wtb !== undefined) {
          e += 128;
        }
        ΔΔΔⲆ[a][b].r = {};
        ΔΔΔⲆ[a][b].r.ΔⵠⵠⵠⲆᐃⵠ = e;
        ΔΔΔⲆ[a][b].r.ΔᐃᐃᐃⵠⲆⲆ = d;
        ΔΔΔⲆ[a][b].r.ⲆⵠᐃⲆ = px.ⵠΔⲆᐃΔ(c, b * 100 + 50, a * 100 + 50) - 400;
        ΔΔΔⲆ[a][b].r.x = b * 100 + 50;
        ΔΔΔⲆ[a][b].r.y = a * 100 + 50;
      }
    }
    function g(a) {
      for (var b = 0; b < 3; b++) {
        d(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        d(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        d(a, "d", b, 1);
      }
      h(a);
    }
    function d(j, e, i, k, m) {
      var n = px.ΔᐃⲆⲆΔ[j];
      var a = Math.floor(n.x1 / 100);
      var q = Math.floor(n.y1 / 100);
      var t = Math.floor(n.w / 100);
      var w = Math.floor(n.ᐃⲆᐃ / 100);
      if (m !== undefined) {
        m = 1 - m;
        a += Math.floor(m * t / 2);
        q += Math.floor(w * m / 2);
        t -= Math.floor(t * m);
        w -= Math.floor(w * m);
      }
      var x = nx.ΔΔΔⲆ;
      for (var g = 0, y = 0; k > y && g <= 50000; g++) {
        var z = q + Math.floor(px.ⵠⵠᐃⲆΔ.get() * w);
        var A = a + Math.floor(t * px.ⵠⵠᐃⲆΔ.get());
        if (px.ⵠΔⲆᐃΔ(j, A * 100 + 50, z * 100 + 50) >= 400) {
          var B = x[z][A + 1];
          if (Di === B || B[e] === Lq || B[e][i] === undefined) {
            if ((B = x[z][A - 1]) === undefined || B[e] === undefined || Fr === B[e][i]) {
              if ((B = x[z + 1][A]) === undefined || B[e] === undefined || B[e][i] === undefined) {
                if ((B = x[z - 1][A]) === undefined || B[e] === undefined || p === B[e][i]) {
                  if ((B = x[z + 1][A - 1]) === p || B[e] === undefined || B[e][i] === undefined) {
                    if ((B = x[z - 1][A + 1]) === undefined || B[e] === undefined || B[e][i] === undefined) {
                      if ((B = x[z + 1][A + 1]) === undefined || Y === B[e] || B[e][i] === undefined) {
                        if ((B = x[z - 1][A - 1]) === undefined || Y === B[e] || B[e][i] === Y) {
                          if (x[z][A] === undefined) {
                            f(z, A, e, i, 1);
                            y++;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function m(a, b) {
      return a >= 0 && b >= 0 && a < px.ⲆⲆⲆᐃᐃ && b < px.ᐃⲆⲆᐃⲆ;
    }
    function q(a, b) {
      for (var c = 0; c < 3; c++) {
        d(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        d(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      d(a, "c", 0, Math.floor(b * 36));
      var e = [];
      (function (b, c) {
        var d = px.ΔᐃⲆⲆΔ[b];
        var e = Math.floor(d.y1 / 100);
        var i = Math.floor(d.x1 / 100);
        var j = Math.floor(d.ᐃⲆᐃ / 100);
        var a = Math.floor(d.w / 100);
        var k = e + Math.floor(j / 2);
        var m = i + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          f(n = Math.floor(k - 3 + px.ⵠⵠᐃⲆΔ.get() * 6), o = Math.floor(m - 3 + px.ⵠⵠᐃⲆΔ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var n;
          var o;
          if (f(n = Math.floor(k - 3 + px.ⵠⵠᐃⲆΔ.get() * 6), o = Math.floor(m - 3 + px.ⵠⵠᐃⲆΔ.get() * 6), "wtb", 0, 1) === 1) {
            c.push([n, o, 0]);
          }
        }
      })(a, e);
      k(a, e);
      e = [];
    }
    function r(a, b) {
      (function (b, c) {
        var d = px.ΔᐃⲆⲆΔ[c];
        for (var e = 0, i = 0; b > e && i < 10000; i++) {
          var j = d.y1 + d.ᐃⲆᐃ * px.ⵠⵠᐃⲆΔ.get();
          var k = d.x1 + d.w * px.ⵠⵠᐃⲆΔ.get();
          var m = Math.floor(j / 100);
          var p = Math.floor(k / 100);
          if (px.ⵠΔⲆᐃΔ(c, p * 100 + 50, m * 100 + 50) >= 600) {
            for (var q = 1, t = m - 4; q === 1 && t <= m + 4; t++) {
              for (var v = p - 4; q === 1 && v <= p + 4; v++) {
                if (nx.ΔΔΔⲆ[t][v] !== at) {
                  q = 0;
                }
              }
            }
            if (q !== 0) {
              f(m, p, "la", e % 6, 0);
              e++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < 3; c++) {
        d(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        d(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; c < 3; c++) {
        d(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      for (c = 0; c < 3; c++) {
        d(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      h(a);
    }
    function f(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && px.ⲆⲆⲆᐃᐃ > a && px.ᐃⲆⲆᐃⲆ > b) {
        ΔΔΔⲆ = nx.ΔΔΔⲆ;
        if (ΔΔΔⲆ[a][b] === at) {
          ΔΔΔⲆ[a][b] = {};
        }
        if (p !== ΔΔΔⲆ[a][b][c]) {
          return 0;
        } else {
          ΔΔΔⲆ[a][b][c] = [];
          ΔΔΔⲆ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              Ub.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function s(a, b) {
      for (var c = 0; c < 3; c++) {
        d(a, "s", c, Math.floor(b * 18));
      }
      for (c = 0; c < 3; c++) {
        d(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < 3; c++) {
        d(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = 0; c < 3; c++) {
        d(a, "g", c, Math.floor(b * 6));
      }
      h(a);
    }
    function u(a, b, c) {
      if (a[b]) {
        for (xk = 0; xk < a[b].length; xk++) {
          if (a[b][xk]) {
            for (ⵠⲆⵠᐃ = 0; a[b][xk].length > ⵠⲆⵠᐃ; ⵠⲆⵠᐃ++) {
              a[b][xk][ⵠⲆⵠᐃ].ⲆⲆⲆ = c;
              a[b][xk][ⵠⲆⵠᐃ].ᐃΔΔ = false;
              a[b][xk][ⵠⲆⵠᐃ].time = 0;
              a[b][xk][ⵠⲆⵠᐃ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ᐃⲆᐃⵠΔᐃᐃ = b;
    this.ᐃΔⵠⵠⵠ = 0;
    this.ᐃⲆⵠⵠΔᐃᐃ = 6;
    this.ΔΔᐃᐃ = [];
    this.ᐃᐃΔ = [];
    this.ᐃᐃΔ[0] = [];
    this.ᐃᐃΔ[100] = [];
    this.ᐃᐃΔ[80] = [];
    this.ᐃᐃΔ[60] = [];
    this.ᐃᐃΔ[67] = [];
    this.ᐃᐃΔ[70] = [];
    this.ᐃᐃΔ[77] = [];
    this.ᐃᐃΔ[71] = [];
    this.ᐃᐃΔ[72] = [];
    this.ᐃᐃΔ[73] = [];
    this.ᐃᐃΔ[74] = [];
    this.ᐃᐃΔ[65] = [];
    this.ᐃᐃΔ[66] = [];
    this.ᐃᐃΔ[62] = [];
    this.ᐃᐃΔ[88] = [];
    this.ᐃᐃΔ[91] = [];
    this.ᐃᐃΔ[90] = [];
    this.ᐃᐃΔ[63] = [];
    this.ᐃᐃΔ[78] = [];
    this.ᐃᐃΔ[64] = [];
    this.ᐃᐃΔ[69] = [];
    this.ᐃᐃΔ[68] = [];
    this.ᐃᐃΔ[79] = [];
    this.ᐃᐃΔ[89] = [];
    this.ᐃᐃΔ[83] = [];
    this.ᐃᐃΔ[84] = [];
    this.ᐃᐃΔ[85] = [];
    this.ᐃᐃΔ[81] = [];
    this.ᐃᐃΔ[82] = [];
    this.ᐃᐃΔ[86] = [];
    this.ᐃᐃΔ[34] = [];
    this.ᐃᐃΔ[36] = [];
    this.ᐃᐃΔ[61] = [];
    this.ᐃᐃΔ[2] = [];
    this.ᐃᐃΔ[1] = [];
    this.ᐃᐃΔ[6] = [];
    this.ᐃᐃΔ[3] = [];
    this.ᐃᐃΔ[5] = [];
    this.ᐃᐃΔ[12] = [];
    this.ᐃᐃΔ[13] = [];
    this.ᐃᐃΔ[14] = [];
    this.ᐃᐃΔ[20] = [];
    this.ᐃᐃΔ[52] = [];
    this.ᐃᐃΔ[4] = [];
    this.ᐃᐃΔ[7] = [];
    this.ᐃᐃΔ[8] = [];
    this.ᐃᐃΔ[9] = [];
    this.ᐃᐃΔ[19] = [];
    this.ᐃᐃΔ[50] = [];
    this.ᐃᐃΔ[41] = [];
    this.ᐃᐃΔ[10] = [];
    this.ᐃᐃΔ[15] = [];
    this.ᐃᐃΔ[16] = [];
    this.ᐃᐃΔ[17] = [];
    this.ᐃᐃΔ[21] = [];
    this.ᐃᐃΔ[51] = [];
    this.ᐃᐃΔ[45] = [];
    this.ᐃᐃΔ[46] = [];
    this.ᐃᐃΔ[47] = [];
    this.ᐃᐃΔ[48] = [];
    this.ᐃᐃΔ[49] = [];
    this.ᐃᐃΔ[53] = [];
    this.ᐃᐃΔ[18] = [];
    this.ᐃᐃΔ[29] = [];
    this.ᐃᐃΔ[56] = [];
    this.ᐃᐃΔ[11] = [];
    this.ᐃᐃΔ[22] = [];
    this.ᐃᐃΔ[23] = [];
    this.ᐃᐃΔ[30] = [];
    this.ᐃᐃΔ[38] = [];
    this.ᐃᐃΔ[33] = [];
    this.ᐃᐃΔ[31] = [];
    this.ᐃᐃΔ[55] = [];
    this.ᐃᐃΔ[37] = [];
    this.ᐃᐃΔ[43] = [];
    this.ᐃᐃΔ[44] = [];
    this.ᐃᐃΔ[54] = [];
    this.ᐃᐃΔ[39] = [];
    this.ᐃᐃΔ[40] = [];
    this.ᐃᐃΔ[32] = [];
    this.ᐃᐃΔ[24] = [];
    this.ᐃᐃΔ[25] = [];
    this.ᐃᐃΔ[26] = [];
    this.ᐃᐃΔ[27] = [];
    this.ᐃᐃΔ[28] = [];
    this.ᐃᐃΔ[35] = [];
    this.ᐃᐃΔ[87] = [];
    this.ᐃᐃΔ[42] = [];
    this.ⲆⲆᐃΔⵠ = [];
    this.ᐃⲆⲆᐃⲆ = 260;
    this.ⲆⲆⲆᐃᐃ = 260;
    this.ⵠΔⲆᐃⲆᐃᐃ = 100;
    this.ⵠΔⵠⵠⵠⵠΔ = 100;
    this.w = this.ⵠΔⲆᐃⲆᐃᐃ * this.ᐃⲆⲆᐃⲆ;
    this.ᐃⲆᐃ = this.ⵠΔⵠⵠⵠⵠΔ * this.ⲆⲆⲆᐃᐃ;
    this.ⵠⵠᐃⲆΔ = new tk.ⵠᐃⵠᐃᐃⲆᐃ();
    this.ΔᐃⲆⲆΔ = [];
    this.ⵠΔΔΔ = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 1, 0, 1, 1);
    this.transition = lh;
    this.ⵠⵠΔΔᐃ = [];
    this.ⲆΔᐃⲆⵠ = 0;
    this.ⲆΔⲆΔⲆⵠΔ = 1;
    this.ᐃⵠᐃⲆⵠΔⲆ = 2;
    this.ᐃᐃⵠΔᐃᐃᐃ = 3;
    this.ⵠᐃⲆⲆΔ = 4;
    this.ⲆᐃᐃⵠⲆⵠⲆ = 10;
    this.ⵠⵠΔΔᐃ[this.ⲆΔᐃⲆⵠ] = {
      ᐃⲆᐃⲆⲆΔⵠ: 1,
      Δᐃⵠ: [19, 58, 43],
      ΔᐃⲆ: [4, 43, 48],
      ᐃⵠⲆⲆⲆ: ["#133a2b", "#042b30"]
    };
    this.ⵠⵠΔΔᐃ[this.ⵠᐃⲆⲆΔ] = {
      ᐃⲆᐃⲆⲆΔⵠ: 0,
      Δᐃⵠ: [11, 106, 132],
      ΔᐃⲆ: [9, 55, 63],
      ᐃⵠⲆⲆⲆ: ["#0B6A84", "#09373F"]
    };
    this.ⵠⵠΔΔᐃ[this.ⲆΔⲆΔⲆⵠΔ] = {
      ᐃⲆᐃⲆⲆΔⵠ: 0,
      Δᐃⵠ: [235, 242, 240],
      ΔᐃⲆ: [19, 97, 103],
      ᐃⵠⲆⲆⲆ: ["#EBF2F0", "#136167"]
    };
    this.ⵠⵠΔΔᐃ[this.ᐃⵠᐃⲆⵠΔⲆ] = {
      ΔᐃⲆ: [3, 28, 30],
      ᐃⲆᐃⲆⲆΔⵠ: 0,
      Δᐃⵠ: [45, 32, 23],
      ᐃⵠⲆⲆⲆ: ["#2D2017", "#031C1E"]
    };
    this.ⵠⵠΔΔᐃ[this.ᐃᐃⵠΔᐃᐃᐃ] = {
      ᐃⲆᐃⲆⲆΔⵠ: 0,
      ᐃⵠⲆⲆⲆ: ["#4A4A4A", "#183D3C"],
      ΔᐃⲆ: [24, 61, 60],
      Δᐃⵠ: [74, 74, 74]
    };
    this.ⵠⵠΔΔᐃ[this.ⲆᐃᐃⵠⲆⵠⲆ] = {
      Δᐃⵠ: [235, 216, 166],
      ᐃⲆᐃⲆⲆΔⵠ: 0,
      ᐃⵠⲆⲆⲆ: ["#EBD8A6", "#093D38"],
      ΔᐃⲆ: [9, 61, 56]
    };
    this.ΔᐃᐃⲆΔⲆᐃ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ᐃⲆᐃ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.ᐃᐃⵠ = b;
      this.ⵠΔⵠ = g === Aa ? 15 : g;
    };
    this.ᐃⲆⲆᐃⵠ = -1000000;
    this.ⲆᐃⲆΔΔ = this.ᐃⲆⲆᐃⵠ;
    this.ΔⲆⲆΔᐃ = this.ᐃⲆⲆᐃⵠ;
    this.ΔᐃⵠΔⵠ = this.ᐃⲆⲆᐃⵠ;
    this.ⵠᐃⵠⲆⵠⵠΔ = this.ᐃⲆⲆᐃⵠ;
    this.ΔⵠΔⲆΔᐃⲆ = this.ᐃⲆⲆᐃⵠ;
    this.ΔΔᐃᐃΔ = this.ᐃⲆⲆᐃⵠ;
    this.ΔΔᐃⲆⲆΔⵠΔᐃ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ⲆᐃⲆΔΔ = px.ᐃⲆⲆᐃⵠ;
      b.ΔⲆⲆΔᐃ = px.ᐃⲆⲆᐃⵠ;
      b.ΔᐃⵠΔⵠ = px.ᐃⲆⲆᐃⵠ;
      b.ⵠᐃⵠⲆⵠⵠΔ = px.ᐃⲆⲆᐃⵠ;
      b.ΔΔᐃᐃΔ = px.ᐃⲆⲆᐃⵠ;
      b.ΔⵠᐃⲆⵠᐃⲆ = px.ᐃⲆⲆᐃⵠ;
      for (var g = 0; px.ΔᐃⲆⲆΔ[g].ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ; g++) {
        if (px.ΔᐃⲆⲆΔ[g].ᐃᐃⵠ === px.ⲆΔᐃⲆⵠ) {
          var h = px.ⵠΔⲆᐃΔ(g, c, d);
          b.ⵠᐃⵠⲆⵠⵠΔ = Math.max(b.ⵠᐃⵠⲆⵠⵠΔ, h);
          if (h > 0 && px.ⵠⵠΔΔᐃΔΔᐃᐃ(g, c, d) === 1) {
            b.ΔⵠᐃⲆⵠᐃⲆ = 1;
          }
        } else if (px.ΔᐃⲆⲆΔ[g].ᐃᐃⵠ === px.ⲆΔⲆΔⲆⵠΔ) {
          b.ⲆᐃⲆΔΔ = Math.max(b.ⲆᐃⲆΔΔ, px.ⵠΔⲆᐃΔ(g, c, d));
        } else if (px.ⲆᐃᐃⵠⲆⵠⲆ === px.ΔᐃⲆⲆΔ[g].ᐃᐃⵠ) {
          b.ΔⲆⲆΔᐃ = Math.max(b.ΔⲆⲆΔᐃ, px.ⵠΔⲆᐃΔ(g, c, d));
        } else if (px.ᐃⵠᐃⲆⵠΔⲆ === px.ΔᐃⲆⲆΔ[g].ᐃᐃⵠ) {
          b.ΔᐃⵠΔⵠ = Math.max(b.ΔᐃⵠΔⵠ, px.ⵠΔⲆᐃΔ(g, c, d));
        } else if (px.ᐃᐃⵠΔᐃᐃᐃ === px.ΔᐃⲆⲆΔ[g].ᐃᐃⵠ) {
          b.ΔΔᐃᐃΔ = Math.max(b.ΔΔᐃᐃΔ, px.ⵠΔⲆᐃΔ(g, c, d));
        }
      }
      if (nx.ΔΔΔⲆ[e][f].iblk) {
        b.ΔⵠᐃⲆⵠᐃⲆ = 1;
      }
      if (px.ⲆⲆⵠⵠⵠᐃᐃⵠⲆ(f, e)) {
        b.ΔⵠΔⲆΔᐃⲆ = b.ᐃⲆⲆᐃⵠ;
      } else if (nx.ΔΔΔⲆ[e][f].wtb || b.ⲆᐃⲆΔΔ < 0 && b.ΔᐃⵠΔⵠ < 0 && b.ⵠᐃⵠⲆⵠⵠΔ < 0 && b.ΔⵠᐃⲆⵠᐃⲆ < 0 && b.ΔΔᐃᐃΔ < 0 && b.ΔⲆⲆΔᐃ < 0) {
        b.ΔⵠΔⲆΔᐃⲆ = 1;
      } else {
        b.ΔⵠΔⲆΔᐃⲆ = b.ᐃⲆⲆᐃⵠ;
      }
    };
    this.ⲆΔᐃⵠΔΔⵠⲆⵠ = function (a, b) {
      px.ⲆᐃⲆΔΔ = px.ᐃⲆⲆᐃⵠ;
      px.ΔⲆⲆΔᐃ = px.ᐃⲆⲆᐃⵠ;
      px.ΔᐃⵠΔⵠ = px.ᐃⲆⲆᐃⵠ;
      px.ΔΔᐃᐃΔ = px.ᐃⲆⲆᐃⵠ;
      px.ⵠᐃⵠⲆⵠⵠΔ = px.ᐃⲆⲆᐃⵠ;
      for (var c = 0; px.ΔᐃⲆⲆΔ[c].ᐃᐃⵠ !== px.ⵠᐃⲆⲆΔ; c++) {
        if (px.ΔᐃⲆⲆΔ[c].ᐃᐃⵠ === px.ⲆΔᐃⲆⵠ) {
          px.ⵠᐃⵠⲆⵠⵠΔ = Math.max(px.ⵠᐃⵠⲆⵠⵠΔ, px.ⵠΔⲆᐃΔ(c, a, b));
        } else if (px.ΔᐃⲆⲆΔ[c].ᐃᐃⵠ === px.ⲆΔⲆΔⲆⵠΔ) {
          px.ⲆᐃⲆΔΔ = Math.max(px.ⲆᐃⲆΔΔ, px.ⵠΔⲆᐃΔ(c, a, b));
        } else if (px.ΔᐃⲆⲆΔ[c].ᐃᐃⵠ === px.ⲆᐃᐃⵠⲆⵠⲆ) {
          px.ΔⲆⲆΔᐃ = Math.max(px.ΔⲆⲆΔᐃ, px.ⵠΔⲆᐃΔ(c, a, b));
        } else if (px.ΔᐃⲆⲆΔ[c].ᐃᐃⵠ === px.ᐃⵠᐃⲆⵠΔⲆ) {
          px.ΔᐃⵠΔⵠ = Math.max(px.ΔᐃⵠΔⵠ, px.ⵠΔⲆᐃΔ(c, a, b));
        } else if (px.ᐃᐃⵠΔᐃᐃᐃ === px.ΔᐃⲆⲆΔ[c].ᐃᐃⵠ) {
          px.ΔΔᐃᐃΔ = Math.max(px.ΔΔᐃᐃΔ, px.ⵠΔⲆᐃΔ(c, a, b));
        }
      }
      if (px.ⲆᐃⲆΔΔ < 0 && px.ΔΔᐃᐃΔ < 0 && px.ⵠᐃⵠⲆⵠⵠΔ < 0 && px.ΔΔᐃᐃΔ < 0 && px.ΔⲆⲆΔᐃ < 0) {
        px.ΔⵠΔⲆΔᐃⲆ = 1;
      } else {
        px.ΔⵠΔⲆΔᐃⲆ = px.ᐃⲆⲆᐃⵠ;
      }
    };
    this.ⵠⵠΔΔᐃΔΔᐃᐃ = function (b, c, d) {
      var e = px.ΔᐃⲆⲆΔ[b];
      var f = 0;
      ⵠᐃⲆⲆ = e.x1 + 30 + ((e.ⵠΔⵠ & 4) === 0 ? 150 : 0);
      var g = c - ⵠᐃⲆⲆ;
      if ((e.ⵠΔⵠ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⵠΔⵠⲆ = e.y1 + 250 + (e.ⵠΔⵠ & 1 ? 0 : 150);
      g = d - ⵠΔⵠⲆ;
      if ((e.ⵠΔⵠ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆⲆΔΔ = e.x2 + 80 + (e.ⵠΔⵠ & 8 ? 0 : -200);
      g = ⲆⲆΔΔ - c;
      if ((e.ⵠΔⵠ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆΔⵠᐃ = e.y2 - 200 + (e.ⵠΔⵠ & 2 ? 0 : -200);
      g = ⲆΔⵠᐃ - d;
      if ((e.ⵠΔⵠ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (c >= ⵠᐃⲆⲆ && c <= ⲆⲆΔΔ && ⵠΔⵠⲆ <= d && d <= ⲆΔⵠᐃ) {
        return f;
      } else {
        return 0;
      }
    };
    this.ⵠΔⲆᐃΔ = function (a, b, c) {
      var d = px.ΔᐃⲆⲆΔ[a];
      ⵠᐃⲆⲆ = d.x1 + 30;
      ⵠΔⵠⲆ = d.y1 + 250;
      ⲆⲆΔΔ = d.x2 + 80;
      ⲆΔⵠᐃ = d.y2 - 200;
      if (b >= ⵠᐃⲆⲆ && b <= ⲆⲆΔΔ && c >= ⵠΔⵠⲆ && ⲆΔⵠᐃ >= c) {
        return Math.min(b - ⵠᐃⲆⲆ, ⲆⲆΔΔ - b, c - ⵠΔⵠⲆ, ⲆΔⵠᐃ - c);
      }
      var e = -1000000;
      if (b - ⵠᐃⲆⲆ < 0) {
        e = Math.max(e, b - ⵠᐃⲆⲆ);
      } else if (ⲆⲆΔΔ - b < 0) {
        e = Math.max(e, ⲆⲆΔΔ - b);
      }
      ᐃᐃΔⵠᐃⲆⵠ = -1000000;
      if (ⵠΔⵠⲆ > c || c > ⲆΔⵠᐃ) {
        if (c - ⵠΔⵠⲆ < 0) {
          ᐃᐃΔⵠᐃⲆⵠ = Math.max(ᐃᐃΔⵠᐃⲆⵠ, c - ⵠΔⵠⲆ);
        } else {
          ᐃᐃΔⵠᐃⲆⵠ = Math.max(ᐃᐃΔⵠᐃⲆⵠ, ⲆΔⵠᐃ - c);
        }
        e = e !== -1000000 && ᐃᐃΔⵠᐃⲆⵠ !== -1000000 ? Math.min(e, ᐃᐃΔⵠᐃⲆⵠ) : ᐃᐃΔⵠᐃⲆⵠ;
      }
      return e;
    };
    this.ᐃᐃᐃⲆᐃΔᐃ = function (b, c, d) {
      var e = d;
      var g = c;
      f(e, g, "isl", b, 1);
      for (var h = 0; h < 4; h++) {
        for (var i = 0; i < 3; i++) {
          f(e - i, g - h, "iblk", 0);
          f(e + i, g - h, "iblk", 0);
          f(e + i, g + h, "iblk", 0);
          f(e - i, g + h, "iblk", 0);
        }
      }
      if (b === 0) {
        for (h = 0; h < 2; h++) {
          f(e - h, g - 4, "iblk", 0);
          f(e + h, g - 4, "iblk", 0);
          f(e - h, g + 4, "iblk", 0);
          f(e + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 3; h++) {
          f(e - 3, g + h, "iblk", 0);
          f(e + 3, g + h, "iblk", 0);
          f(e - 3, g - h, "iblk", 0);
          f(e + 3, g - h, "iblk", 0);
        }
        f(e - 2, g - 4, "iblk", 0);
        f(e - 3, g - 3, "iblk", 0);
        f(e + 2, g + 4, "iblk", 0);
        f(e + 3, g + 3, "iblk", 0);
      } else if (b === 1) {
        for (h = 0; h < 3; h++) {
          f(e - h, g - 4, "iblk", 0);
          f(e + h, g - 4, "iblk", 0);
          f(e - h, g + 4, "iblk", 0);
          f(e + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 4; h++) {
          f(e - 3, g + h, "iblk", 0);
          f(e + 3, g + h, "iblk", 0);
          f(e - 3, g - h, "iblk", 0);
          f(e + 3, g - h, "iblk", 0);
        }
      } else if (b === 2) {
        for (h = 0; h < 2; h++) {
          f(e - h, g - 4, "iblk", 0);
          f(e + h, g - 4, "iblk", 0);
          f(e - h, g + 4, "iblk", 0);
          f(e + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 3; h++) {
          f(e - 3, g + h, "iblk", 0);
          f(e + 3, g + h, "iblk", 0);
          f(e - 3, g - h, "iblk", 0);
          f(e + 3, g - h, "iblk", 0);
        }
      }
    };
    this.ΔⲆⲆⲆᐃΔⲆⵠⵠ = function (b) {
      for (var c = 0; px.ΔᐃⲆⲆΔ.length > c && b > 0; c++) {
        var d = px.ΔᐃⲆⲆΔ[c];
        if (d.ᐃᐃⵠ === px.ⵠᐃⲆⲆΔ && d.w > 1800 && d.ᐃⲆᐃ > 1000) {
          var g = Math.floor((d.x1 + d.w / 2) / 100);
          var h = Math.floor((d.y1 + d.ᐃⲆᐃ / 2) / 100);
          px.ᐃᐃᐃⲆᐃΔᐃ(b % 3, g, h);
          for (var j = 0; j < 3; j++) {
            var k = h - 2 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * 4);
            var l = g - 3 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * 6);
            if (nx.ΔΔΔⲆ[k][l].s === undefined) {
              f(k, l, "plm", j);
            }
            k = h - 2 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * 4);
            l = g - 3 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * 6);
            if (nx.ΔΔΔⲆ[k][l].plm === undefined) {
              f(k, l, "s", j);
            }
          }
          k = h - 2 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * 4);
          l = g - 3 + Math.floor(px.ⵠⵠᐃⲆΔ.get() * 6);
          if (nx.ΔΔΔⲆ[k][l].plm === undefined && nx.ΔΔΔⲆ[k][l].s === Ak) {
            f(k, l, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⵠⵠⲆᐃᐃΔⵠᐃⲆ = function (b) {
      px.ⵠⵠᐃⲆΔ.ⵠΔⵠⵠⲆ(b);
      var d = 0;
      while (true) {
        if (++d > 10000) {
          return;
        }
        px.ΔᐃⲆⲆΔ = [];
        if (px.ᐃΔⵠⵠⵠ === 0 && (px.mode === 3 || px.mode === 7 || px.mode === 0)) {
          px.ᐃΔⵠⵠⵠ = Er;
        }
        if (px.mode === 2) {
          px.ΔᐃⲆⲆΔ.push(new px.ΔᐃᐃⲆΔⲆᐃ(px.ⲆΔᐃⲆⵠ, 2, 2, 80, 80, 15));
        } else if (px.mode === 4) {
          px.ΔᐃⲆⲆΔ.push(new px.ΔᐃᐃⲆΔⲆᐃ(px.ⲆΔᐃⲆⵠ, 2, 2, 150, 150, 15));
        } else if (px.ᐃΔⵠⵠⵠ !== 0 && px.ᐃΔⵠⵠⵠ.length > 0 && px.ᐃΔⵠⵠⵠ[0].length > 3) {
          for (var h = 0; px.ᐃΔⵠⵠⵠ.length > h; h++) {
            var j = px.ᐃΔⵠⵠⵠ[h];
            if (j[0] !== 0) {
              break;
            }
            var o = Jf.ⲆΔᐃⲆⵠ;
            switch (j[1]) {
              case "FOREST":
                o = px.ⲆΔᐃⲆⵠ;
                break;
              case "WINTER":
                o = px.ⲆΔⲆΔⲆⵠΔ;
                break;
              case "DESERT":
                o = px.ⲆᐃᐃⵠⲆⵠⲆ;
                break;
              case "LAVA":
                o = px.ᐃⵠᐃⲆⵠΔⲆ;
                break;
              case "DRAGON":
                o = px.ᐃᐃⵠΔᐃᐃᐃ;
            }
            px.ΔᐃⲆⲆΔ.push(new px.ΔᐃᐃⲆΔⲆᐃ(o, j[2], j[3], j[4], j[5], j[6], j[7]));
          }
        } else if (px.ᐃΔⵠⵠⵠ !== 0) {
          for (h = 0; px.ᐃΔⵠⵠⵠ.length > h; h++) {
            var t = px.ᐃΔⵠⵠⵠ[h];
            o = Jf.ⲆΔᐃⲆⵠ;
            switch (t[0]) {
              case "FOREST":
                o = px.ⲆΔᐃⲆⵠ;
                break;
              case "WINTER":
                o = px.ⲆΔⲆΔⲆⵠΔ;
                break;
              case "DESERT":
                o = px.ⲆᐃᐃⵠⲆⵠⲆ;
                break;
              case "LAVA":
                o = px.ᐃⵠᐃⲆⵠΔⲆ;
                break;
              case "DRAGON":
                o = px.ᐃᐃⵠΔᐃᐃᐃ;
            }
            if (e(o, t[1], t[2], 0, (h + 1) * 10) === 0) {
              break;
            }
          }
          if (px.ᐃΔⵠⵠⵠ.length !== h) {
            continue;
          }
        }
        break;
      }
      ⲆᐃⲆⲆⵠⲆᐃΔⵠ();
      var w = [];
      for (var u = 0; u < px.ⲆⲆⲆᐃᐃ; u++) {
        w[u] = new Array(px.ᐃⲆⲆᐃⲆ);
        for (var x = 0; px.ᐃⲆⲆᐃⲆ > x; x++) {
          w[u][x] = 0;
        }
      }
      for (u = 0; u < px.ΔᐃⲆⲆΔ.length; u++) {
        for (var A = (t = px.ΔᐃⲆⲆΔ[u]).x2 / 100, B = t.y2 / 100, D = t.x1 / 100; A >= D; D++) {
          for (var E = t.y1 / 100; E <= B; E++) {
            w[E][D] = 1;
          }
        }
      }
      for (E = 0; E < px.ⲆⲆⲆᐃᐃ; E++) {
        for (D = 0; D < px.ᐃⲆⲆᐃⲆ; D++) {
          if (w[E][D] === 0) {
            c(w, D, E);
          }
        }
      }
      nx = {
        w: px.ᐃⲆⲆᐃⲆ,
        ᐃⲆᐃ: px.ⲆⲆⲆᐃᐃ,
        ΔΔΔⲆ: []
      };
      for (u = 0; px.ⲆⲆⲆᐃᐃ > u; u++) {
        nx.ΔΔΔⲆ[u] = [];
      }
      if (px.ᐃΔⵠⵠⵠ !== 0 && px.ᐃΔⵠⵠⵠ.length > 0 && px.ᐃΔⵠⵠⵠ[0].length > 3) {
        for (h = 0; px.ᐃΔⵠⵠⵠ.length > h; h++) {
          j = px.ᐃΔⵠⵠⵠ[h];
          if (j[1] === "isl") {
            px.ᐃᐃᐃⲆᐃΔᐃ(j[2], j[3], j[4]);
          }
        }
      } else {
        px.ΔⲆⲆⲆᐃΔⲆⵠⵠ(px.ᐃⲆⵠⵠΔᐃᐃ);
      }
      if (px.ᐃΔⵠⵠⵠ !== 0 && px.ᐃΔⵠⵠⵠ.length > 0 && px.ᐃΔⵠⵠⵠ[0].length > 3) {
        var F = [];
        for (h = 0; h < px.ᐃΔⵠⵠⵠ.length; h++) {
          if ((j = px.ᐃΔⵠⵠⵠ[h])[0] === 1) {
            if (j[1] === "r") {
              f(j[3], j[2], "wtb", 0, 1);
              F.push([j[3], j[2], j[4]]);
            } else {
              f(j[4], j[3], j[1], j[2], j[5]);
            }
          }
        }
        k(0, F);
        F = [];
      } else {
        for (u = 0; px.ΔᐃⲆⲆΔ.length > u; u++) {
          t = px.ΔᐃⲆⲆΔ[u];
          if (px.mode === 4) {
            if (t.ᐃᐃⵠ === px.ⲆΔᐃⲆⵠ) {
              i(u, t.w / 10000);
            }
          } else {
            if (t.ᐃᐃⵠ === px.ⲆΔᐃⲆⵠ) {
              n(u, t.w / 10000);
            }
            if (px.ᐃⵠᐃⲆⵠΔⲆ === t.ᐃᐃⵠ) {
              r(u, t.w / 10000);
            }
            if (px.ⲆΔⲆΔⲆⵠΔ === t.ᐃᐃⵠ) {
              s(u, t.w / 10000);
            }
            if (px.ⲆᐃᐃⵠⲆⵠⲆ === t.ᐃᐃⵠ) {
              q(u, t.w / 10000);
            }
            if (px.ᐃᐃⵠΔᐃᐃᐃ === t.ᐃᐃⵠ) {
              g(u);
            }
          }
        }
      }
      Kb("isl", 1);
      Kb("wtb", 20);
      Kb("la", 1);
      Kb("c", 1);
      Kb("s", 1);
      Kb("f", 1);
      Kb("p", 1);
      Kb("g", 1);
      Kb("d", 1);
      Kb("a", 1);
      Kb("re", 1);
      Kb("m", 1);
      Ub = [];
      px.ⵠᐃᐃΔⵠᐃⵠⵠΔ(nx);
    };
    this.ⵠⵠᐃⲆ = f;
    this.ⵠᐃᐃΔⵠᐃⵠⵠΔ = function (b) {
      for (var c = 0; c < this.ⲆⲆⲆᐃᐃ; c++) {
        for (var d = 0; this.ᐃⲆⲆᐃⲆ > d; d++) {
          if (!b.ΔΔΔⲆ[c]) {
            b.ΔΔΔⲆ[c] = [];
          }
          if (b.ΔΔΔⲆ[c][d]) {
            var e = b.ΔΔΔⲆ[c][d];
            if (e.de && e.de.length > 0) {
              for (var f = 0; e.de.length > f; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = 3;
                    var g = Math.floor(Math.random() * 3 + 1);
                    e.de.ᐃⵠᐃ = [];
                    for (var h = 0; h < g; h++) {
                      e.de.ᐃⵠᐃ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ᐃⲆⵠⲆ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = 3;
                    g = Math.floor(Math.random() * 3 + 1);
                    e.de.ᐃⵠᐃ = [];
                    for (h = 0; g > h; h++) {
                      e.de.ᐃⵠᐃ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ᐃⲆⵠⲆ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= 15 || f >= 27 && f <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ᐃⲆⵠⲆ = f;
                  } else {
                    e.de.angle = Math.random() * Math.PI * 2;
                    e.de.scale = 1;
                    e.de.ᐃⲆⵠⲆ = f;
                  }
                }
              }
            }
            u(e, "p", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "t", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "s", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "g", new ᐃⵠⲆΔ.ⲆΔⲆΔ(Nn, 1, 1, 0, 10, 10));
            u(e, "d", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "b", new ᐃⵠⲆΔ.ⲆΔⲆΔ(Go, 1, 1, 0, 10, 10));
            u(e, "f", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "sw", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "gw", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "dw", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "a", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "cs", new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 10, 10));
            u(e, "plm", new ᐃⵠⲆΔ.ⲆΔⲆΔ(_a, 1, 1, 0, 10, 10));
            u(e, "re", new ᐃⵠⲆΔ.ⲆΔⲆΔ(Cl, 1, 1, 0, 10, 10));
            u(e, "c", new ᐃⵠⲆΔ.ⲆΔⲆΔ(nl, 1, 1, 0, 10, 10));
            u(e, "m", new ᐃⵠⲆΔ.ⲆΔⲆΔ(Ur, 1, 1, 0, 10, 10));
          } else {
            b.ΔΔΔⲆ[c][d] = [];
          }
        }
      }
    };
    this.time = Sr.ΔΔⵠ;
    this.ⲆⲆΔᐃΔ = {
      ⵠΔⵠⵠⲆ: 0,
      now: 0,
      ⵠⵠⲆⵠⵠ: 0,
      translate: {
        y: 0,
        x: 0
      }
    };
    this.ⲆΔⲆΔⵠⲆⵠⵠΔ = function () {
      this.ⲆⲆᐃΔⵠ = [];
      this.ᐃᐃΔ[0] = [];
      this.ᐃᐃΔ[2] = [];
      this.ᐃᐃΔ[1] = [];
      this.ᐃᐃΔ[6] = [];
      this.ᐃᐃΔ[3] = [];
      this.ᐃᐃΔ[5] = [];
      this.ᐃᐃΔ[12] = [];
      this.ᐃᐃΔ[13] = [];
      this.ᐃᐃΔ[14] = [];
      this.ᐃᐃΔ[20] = [];
      this.ᐃᐃΔ[52] = [];
      this.ᐃᐃΔ[30] = [];
      this.ᐃᐃΔ[56] = [];
      this.ᐃᐃΔ[38] = [];
      this.ᐃᐃΔ[33] = [];
      this.ᐃᐃΔ[31] = [];
      this.ᐃᐃΔ[55] = [];
      this.ᐃᐃΔ[37] = [];
      this.ᐃᐃΔ[43] = [];
      this.ᐃᐃΔ[44] = [];
      this.ᐃᐃΔ[54] = [];
      this.ᐃᐃΔ[39] = [];
      this.ᐃᐃΔ[40] = [];
      this.ᐃᐃΔ[32] = [];
      this.ᐃᐃΔ[24] = [];
      this.ᐃᐃΔ[25] = [];
      this.ᐃᐃΔ[26] = [];
      this.ᐃᐃΔ[27] = [];
      this.ᐃᐃΔ[28] = [];
      this.ᐃᐃΔ[35] = [];
      this.ᐃᐃΔ[4] = [];
      this.ᐃᐃΔ[7] = [];
      this.ᐃᐃΔ[8] = [];
      this.ᐃᐃΔ[9] = [];
      this.ᐃᐃΔ[19] = [];
      this.ᐃᐃΔ[50] = [];
      this.ᐃᐃΔ[41] = [];
      this.ᐃᐃΔ[10] = [];
      this.ᐃᐃΔ[15] = [];
      this.ᐃᐃΔ[16] = [];
      this.ᐃᐃΔ[17] = [];
      this.ᐃᐃΔ[21] = [];
      this.ᐃᐃΔ[51] = [];
      this.ᐃᐃΔ[45] = [];
      this.ᐃᐃΔ[46] = [];
      this.ᐃᐃΔ[47] = [];
      this.ᐃᐃΔ[48] = [];
      this.ᐃᐃΔ[49] = [];
      this.ᐃᐃΔ[53] = [];
      this.ᐃᐃΔ[18] = [];
      this.ᐃᐃΔ[29] = [];
      this.ᐃᐃΔ[56] = [];
      this.ᐃᐃΔ[11] = [];
      this.ᐃᐃΔ[22] = [];
      this.ᐃᐃΔ[23] = [];
      this.ᐃᐃΔ[100] = [];
      this.ᐃᐃΔ[80] = [];
      this.ᐃᐃΔ[60] = [];
      this.ᐃᐃΔ[67] = [];
      this.ᐃᐃΔ[70] = [];
      this.ᐃᐃΔ[77] = [];
      this.ᐃᐃΔ[71] = [];
      this.ᐃᐃΔ[72] = [];
      this.ᐃᐃΔ[73] = [];
      this.ᐃᐃΔ[74] = [];
      this.ᐃᐃΔ[65] = [];
      this.ᐃᐃΔ[66] = [];
      this.ᐃᐃΔ[62] = [];
      this.ᐃᐃΔ[88] = [];
      this.ᐃᐃΔ[91] = [];
      this.ᐃᐃΔ[90] = [];
      this.ᐃᐃΔ[63] = [];
      this.ᐃᐃΔ[78] = [];
      this.ᐃᐃΔ[75] = [];
      this.ᐃᐃΔ[76] = [];
      this.ᐃᐃΔ[64] = [];
      this.ᐃᐃΔ[69] = [];
      this.ᐃᐃΔ[68] = [];
      this.ᐃᐃΔ[79] = [];
      this.ᐃᐃΔ[89] = [];
      this.ᐃᐃΔ[83] = [];
      this.ᐃᐃΔ[84] = [];
      this.ᐃᐃΔ[85] = [];
      this.ᐃᐃΔ[81] = [];
      this.ᐃᐃΔ[82] = [];
      this.ᐃᐃΔ[86] = [];
      this.ᐃᐃΔ[34] = [];
      this.ᐃᐃΔ[36] = [];
      this.ᐃᐃΔ[61] = [];
      this.ᐃᐃΔ[87] = [];
      this.ᐃᐃΔ[42] = [];
    };
    this.ⵠⲆᐃΔⲆΔΔᐃᐃ = function (a) {
      if (this.ⲆⲆᐃΔⵠ[a]) {
        ΔⲆᐃΔ = this.ⲆⲆᐃΔⵠ[a].type;
        this.ⲆⲆᐃΔⵠ[a] = null;
        for (var b = this.ᐃᐃΔ[ΔⲆᐃΔ], c = 0; b.length > c; c++) {
          if (b[c].ᐃΔⲆⵠ == a) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⵠᐃᐃⵠᐃᐃᐃⵠΔ = function (a, b) {
      for (var c = 0; this.ᐃᐃΔ[56].length > c; c++) {
        var d = this.ᐃᐃΔ[56][c];
        if (b === Math.floor(d.x / 100) && Math.floor(d.y / 100) === a) {
          return 1;
        }
      }
      return 0;
    };
    this.ⲆⲆⵠⵠⵠᐃᐃⵠⲆ = function (a, b) {
      for (var c = 0; this.ᐃᐃΔ[30].length > c; c++) {
        var d = this.ᐃᐃΔ[30][c];
        if (Math.floor(d.x / 100) == a && b == Math.floor(d.y / 100)) {
          return Ro;
        }
      }
      return Fh;
    };
    this.ⵠΔΔⵠⲆ = function (j) {
      for (var e = 0; j.length > e; e++) {
        ⲆᐃᐃΔ = j[e];
        if (ⲆᐃᐃΔ.ΔⲆⲆⲆᐃⵠⲆ != ⲆᐃᐃΔ.angle) {
          var q = Math.PI * 2;
          ⲆᐃᐃΔ.angle = (ⲆᐃᐃΔ.angle + q) % q;
          ⲆᐃᐃΔ.ΔⲆⲆⲆᐃⵠⲆ = (ⲆᐃᐃΔ.ΔⲆⲆⲆᐃⵠⲆ + q) % q;
          if (ⲆᐃᐃΔ.ΔⲆⲆⲆᐃⵠⲆ != ⲆᐃᐃΔ.angle) {
            var B = ⲆᐃᐃΔ.ΔⲆⲆⲆᐃⵠⲆ - ⲆᐃᐃΔ.angle;
            var D = Math.abs(B);
            if (Math.PI < D) {
              D = Math.PI * 2 - D;
            }
            var E = xx * (D / Math.PI * 3 * 10);
            if (Math.PI < B) {
              ⲆᐃᐃΔ.angle -= E;
            } else if (B < -Math.PI) {
              ⲆᐃᐃΔ.angle += E;
            } else if (B < 0) {
              ⲆᐃᐃΔ.angle -= E;
            } else {
              ⲆᐃᐃΔ.angle += E;
            }
            ⲆᐃᐃΔ.angle = (ⲆᐃᐃΔ.angle + q) % q;
            if (E > Math.abs(ⲆᐃᐃΔ.angle - ⲆᐃᐃΔ.ΔⲆⲆⲆᐃⵠⲆ)) {
              ⲆᐃᐃΔ.angle = ⲆᐃᐃΔ.ΔⲆⲆⲆᐃⵠⲆ;
            }
          }
        }
        Math.floor(ⲆᐃᐃΔ.r.y / 100);
        Math.floor(ⲆᐃᐃΔ.r.x / 100);
        if (ⲆᐃᐃΔ.r.x != ⲆᐃᐃΔ.x || ⲆᐃᐃΔ.y != ⲆᐃᐃΔ.r.y) {
          if (ⲆᐃᐃΔ.action & 64) {
            ⲆᐃᐃΔ.action -= 64;
          }
          ⲆᐃᐃΔ.action |= 32;
          var F = ᐃⵠⲆΔ.ⲆΔⲆᐃⲆᐃⵠ(ⲆᐃᐃΔ, ⲆᐃᐃΔ.r) + Math.PI;
          var G = ⲆᐃᐃΔ.ΔΔΔΔᐃ * xx;
          var H = ᐃⵠⲆΔ.ⲆᐃⵠⲆⲆΔⲆ(G, F);
          if (ᐃⵠⲆΔ.ⲆⵠΔⲆⵠᐃᐃ(ᐃⵠⲆΔ.ⲆⵠⵠΔᐃᐃΔ(ⲆᐃᐃΔ, ⲆᐃᐃΔ.r)) > ᐃⵠⲆΔ.ⲆⵠΔⲆⵠᐃᐃ(H)) {
            ᐃⵠⲆΔ.ⲆⵠΔⵠΔᐃⲆ(ⲆᐃᐃΔ, H);
          } else {
            if (ⲆᐃᐃΔ.action & 32) {
              ⲆᐃᐃΔ.action -= 32;
            }
            ⲆᐃᐃΔ.action |= 64;
            ᐃⵠⲆΔ.ΔⲆΔΔΔⲆᐃ(ⲆᐃᐃΔ.r, ⲆᐃᐃΔ);
          }
        }
        if (ⲆᐃᐃΔ.ΔⲆⵠΔⵠ) {
          var I = ⲆᐃᐃΔ.bubbles;
          if ((M = I.length) === 0 || M < Sr.ⵠⲆⵠⲆΔⲆΔ && I[M - 1].ⲆⲆΔᐃⵠ < 0.95) {
            I.push({
              id: Math.floor(Math.random() * Ⲇᐃ[540][0].length),
              x: Math.floor(ⲆᐃᐃΔ.x + Math.random() * 80 - 40),
              y: Math.floor(ⲆᐃᐃΔ.y + Math.random() * 80 - 40),
              ⲆⲆΔᐃⵠ: 1
            });
          }
          for (var J = 0; M > J; J++) {
            I[J].ⲆⲆΔᐃⵠ = Math.max(0, I[J].ⲆⲆΔᐃⵠ - xx);
          }
          for (J = 0; J < M; J++) {
            if (I[J].ⲆⲆΔᐃⵠ === 0) {
              I.splice(J, 1);
              break;
            }
          }
        }
        var K = 0;
        if (ⲆᐃᐃΔ.ⵠⵠⲆᐃ && mx.ᐃᐃⵠΔⵠ) {
          var L = ⲆᐃᐃΔ.ΔⵠⵠⲆΔ;
          var M = L.length;
          if (ⲆᐃᐃΔ.ΔⵠΔⲆΔᐃⲆ > 0 && ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ !== 227 && ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ !== 228 && ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ !== 230 && ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ !== 229 && ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ !== 91 && !ⲆᐃᐃΔ.ΔⲆⵠΔⵠ && (K = 1, M === 0 || Sr.ⲆᐃⵠⲆⵠΔᐃ < ᐃⵠⲆΔ.ⲆⵠᐃⲆ(L[M - 1], ⲆᐃᐃΔ))) {
            var N = -ⲆᐃᐃΔ.angle;
            var O = Math.cos(N) * 45 * ro;
            var Q = ro * (Math.sin(N) * 45);
            L.push({
              x: ⲆᐃᐃΔ.x + O,
              y: ⲆᐃᐃΔ.y + Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ⲆᐃᐃΔ.x - O,
              y: ⲆᐃᐃΔ.y - Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ⲆᐃᐃΔ.x,
              y: ⲆᐃᐃΔ.y,
              r: 24,
              alpha: 1
            });
          }
          for (J = 0; J < M; J++) {
            L[J].alpha = Math.max(0, L[J].alpha - xx / 2.2);
            L[J].r += xx * 20;
          }
          if (L.length > 0 && "re".alpha === 0) {
            L.splice(0, 1);
          }
          var R = ⲆᐃᐃΔ.ᐃΔⲆⲆΔ;
          M = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ⲆᐃᐃΔ.ΔⵠᐃⲆⵠᐃⲆ));
          var V = Math.max(0, Math.sign(ⲆᐃᐃΔ.ⲆᐃⲆΔΔ));
          Math.max(0, Math.sign(ⲆᐃᐃΔ.ΔⲆⲆΔᐃ));
          var W = Math.max(0, Math.sign(ⲆᐃᐃΔ.ΔᐃⵠΔⵠ));
          var X = Math.max(0, Math.sign(ⲆᐃᐃΔ.ΔΔᐃᐃΔ));
          if (ⲆᐃᐃΔ.ΔⵠᐃⲆⵠᐃⲆ > 0 || ⲆᐃᐃΔ.ΔⲆⲆΔᐃ > 0) {
            S = 602;
          } else if (ⲆᐃᐃΔ.ΔΔᐃᐃΔ > 0) {
            S = 680;
          } else if (ⲆᐃᐃΔ.ⲆᐃⲆΔΔ > 0) {
            S = 475;
          } else if (ⲆᐃᐃΔ.ΔᐃⵠΔⵠ > 0) {
            S = 476;
          }
          if (ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 225 && (U | V | W | X) == 1) {
            S = 228;
            var Y = ⲆᐃᐃΔ.ΔⲆⵠᐃⵠ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = Sr.ΔᐃᐃᐃᐃⵠΔ;
          } else if (ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 239 && (U | V | W | X) === 1) {
            S = 249;
            Y = ⲆᐃᐃΔ.ΔⲆⵠᐃⵠ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = Sr.ΔᐃᐃᐃᐃⵠΔ;
          } else if (ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 226 && (U | V | W | X) == 1) {
            S = 234;
            Y = ⲆᐃᐃΔ.ΔⲆⵠᐃⵠ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = Sr.ΔᐃᐃᐃᐃⵠΔ * 0.9;
          } else {
            Y = ⲆᐃᐃΔ.angle;
            Z = 15;
            _ = 11;
            aa = Sr.ΔᐃᐃᐃᐃⵠΔ;
          }
          if (ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 227 || ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 228 || ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 91 || ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 229 || ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 230 || ⲆᐃᐃΔ.ΔⲆⵠΔⵠ); else if (ⲆᐃᐃΔ.ⵠⵠᐃⵠⵠ === 224) {
            if (M === 0 || Sr.ⵠᐃᐃⲆⲆⲆΔ < ᐃⵠⲆΔ.ⲆⵠᐃⲆ(R[M - 1], ⲆᐃᐃΔ)) {
              R.push({
                x: ⲆᐃᐃΔ.x,
                y: ⲆᐃᐃΔ.y,
                angle: ⲆᐃᐃΔ.ΔⲆⵠᐃⵠ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || aa < ᐃⵠⲆΔ.ⲆⵠᐃⲆ(R[M - 1], ⲆᐃᐃΔ))) {
            ⲆᐃᐃΔ.ᐃᐃΔⲆⵠΔⵠ++;
            if (Math.abs(ⲆᐃᐃΔ.x - ⲆᐃᐃΔ.r.x) > 1 && Math.abs(ⲆᐃᐃΔ.y - ⲆᐃᐃΔ.r.y) > 1) {
              if (ⲆᐃᐃΔ.x < ⲆᐃᐃΔ.r.x && ⲆᐃᐃΔ.y > ⲆᐃᐃΔ.r.y || ⲆᐃᐃΔ.r.x < ⲆᐃᐃΔ.x && ⲆᐃᐃΔ.y < ⲆᐃᐃΔ.r.y) {
                if (ⲆᐃᐃΔ.ᐃᐃΔⲆⵠΔⵠ % 2) {
                  O = -_ * ro;
                  Q = -_ * ro;
                } else {
                  Q = _ * ro;
                  O = ro * _;
                }
              } else if (ⲆᐃᐃΔ.ᐃᐃΔⲆⵠΔⵠ % 2) {
                O = ro * _;
                Q = -_ * ro;
              } else {
                Q = _ * ro;
                O = ro * -_;
              }
            } else if (ⲆᐃᐃΔ.ᐃᐃΔⲆⵠΔⵠ % 2) {
              O = ro * (Z * Math.cos(Y));
              Q = Math.sin(Y) * Z * ro;
            } else {
              O = ro * (Z * -Math.cos(Y));
              Q = -Math.sin(Y) * Z * ro;
            }
            R.push({
              x: ⲆᐃᐃΔ.x + O,
              y: ⲆᐃᐃΔ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (J = 0; J < M; J++) {
            if (R[J].id === 226) {
              R[J].alpha = Math.max(0, R[J].alpha - xx * 1.5);
            } else {
              R[J].alpha = Math.max(0, R[J].alpha - xx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ᐃΔΔ = function () {
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[0]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[80]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[60]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[67]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[70]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[77]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[71]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[72]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[73]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[74]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[61]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[62]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[88]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[91]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[90]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[63]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[78]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[75]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[76]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[64]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[68]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[65]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[66]);
      this.ⵠΔΔⵠⲆ(this.ᐃᐃΔ[69]);
    };
    this.ΔᐃΔᐃ = [];
    this.ΔᐃΔᐃ[620] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ΔᐃΔᐃ[619] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(ph, 1, 1.08, 1, 0.006, 0.006);
    this.ΔᐃΔᐃ[694] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1.02, 1, 0.008, 0.008);
    this.ΔᐃΔᐃ[695] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Ol, 1, 1.08, 1, 0.006, 0.006);
    this.Ⲇᐃⵠⵠⵠ = [];
    this.Ⲇᐃⵠⵠⵠ[0] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(lh, 0.1, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[1] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Tr, 0.4, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[2] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.3, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[3] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Cl, 0.8, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[4] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Go, 0.3, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[5] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Eq, 0.8, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[6] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.5, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[7] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.9, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[8] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.6, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[9] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(fk, 0.2, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[10] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(lh, 0.6, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[11] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(Tr, 0.4, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[12] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0.8, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[13] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(wr, 0.2, 1, 0, 0.6, 0.6);
    this.Ⲇᐃⵠⵠⵠ[14] = new ᐃⵠⲆΔ.ⲆΔⲆΔ(In, 0.7, 1, 0, 0.6, 0.6);
  }
  function Ff() {
    this.ⵠΔᐃΔⲆ = "";
    this.ⵠᐃⵠⲆ = 0;
    this.ᐃΔⵠⲆᐃ = 0;
    this.ⵠⵠᐃᐃⵠ = 0;
    this.ⵠΔⲆᐃⲆᐃⲆ = 0;
    this.ΔⵠᐃⲆⵠ = 0;
    this.ⲆⵠⲆⲆⵠ = 0;
    this.ⵠΔΔⲆᐃ = 0;
    this.level = 0;
    this.label = null;
    this.ⲆᐃⵠⲆᐃⵠΔ = null;
    this.ᐃΔⲆⵠⵠᐃΔ = null;
    this.ΔⵠⲆΔᐃ = false;
    this.ᐃᐃΔⲆΔ = 0;
  }
  function Rf(a, b, c, d) {
    this.id = a;
    this.ΔΔΔΔᐃ = (a + 5) * 8;
    this.ⲆⲆΔᐃⵠ = Sn / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.Ⲇⵠⵠⵠ = Math.cos(d);
    this.alpha = 0;
  }
  function jf(a, b) {
    const c = (8 << (a >> 24 & 255)) + (0 << (a >> 16 & 255)) + (16 << (a & 255)) + (24 << (a >> 8 & 255));
    const d = ~(b & 49201) & 49201 | ~(b & 49201) & b;
    return (2531011 + (51722 + (eb(c, d, c, d, c) ^ Cb(d, c))) * 214013) % 4294967296;
  }
  ⲆⲆⲆᐃᐃΔⲆΔⲆ = 1;
  const Lf = 5423036;
  const Gf = 5423036 .ᐃᐃⵠⲆᐃⲆⲆ;
  const Wf = `const ᐃᐃᐃᐃ = (typeof ⵠⵠΔⵠⲆᐃΔ === "${Gf}") ? 1 : 0; return ᐃᐃᐃᐃ;`;
  function Of() {
    Math.random();
    return "n";
  }
  function Nf() {
    Math.random();
    return "e";
  }
  function qf() {
    Math.random();
    return "a";
  }
  ;
  function Iw() {
    Math.random();
    return "i";
  }
  function Yf() {
    Math.random();
    return "t";
  }
  function Jw() {
    Math.random();
    return "s";
  }
  function Vf() {
    Math.random();
    return "g";
  }
  function qf() {
    Math.random();
    return "a";
  }
  function Xf() {
    Math.random();
    return "o";
  }
  function Kw() {
    Math.random();
    return "p";
  }
  function Lw() {
    this.ⵠΔⵠⵠⲆ = function () { };
    this.ⲆᐃΔΔⲆ = {
      ᐃΔᐃⲆⲆ: 1,
      open: false,
      ΔⵠΔΔ: 1
    };
    this.ΔⲆⲆⵠΔ = {
      ΔⵠΔΔ: 1,
      ᐃΔᐃⲆⲆ: -1,
      open: Go
    };
    this.ΔΔⲆᐃ = {
      ⲆⵠᐃⲆⲆΔⵠ: 0,
      ᐃΔᐃⲆⲆ: -1,
      ΔⵠΔΔ: 1,
      ⲆⵠⲆᐃΔ: 0,
      open: false
    };
    this.ΔΔΔⵠ = {
      ⵠᐃᐃΔΔΔΔ: 0,
      ᐃᐃᐃⵠᐃⵠΔ: 0,
      type: 0,
      ⲆⵠⵠΔⵠⵠⲆ: 0,
      ΔⵠΔΔ: 1,
      ᐃΔᐃⲆⲆ: -1,
      open: false
    };
    this.ⲆⲆᐃΔ = {
      ⵠᐃᐃΔΔΔΔ: 0,
      ⲆΔΔΔΔΔⲆ: 0,
      ᐃΔᐃⲆⲆ: -1,
      ⲆⵠⲆᐃΔ: 0,
      ΔⵠΔΔ: 1,
      open: Ol
    };
    this.sign = {
      ᐃΔᐃⲆⲆ: -1,
      open: false
    };
    this.ΔΔⵠⲆⲆ = {
      open: false,
      ⵠΔᐃᐃ: 0,
      ᐃΔᐃⲆⲆ: -1,
      ΔⵠΔΔ: 1
    };
    this.ΔⲆⵠΔⵠ = {
      enabled: false,
      ΔⲆⲆΔΔ: -1,
      label: Nq,
      now: -1,
      ΔⵠⲆⲆ: Zv
    };
    this.ⵠⲆⵠΔ = {
      id: -1,
      ⵠΔᐃᐃ: 0,
      ΔⵠΔΔ: 1,
      ᐃΔᐃⲆⲆ: -1,
      open: Cl,
      lock: false,
      locked: false,
      ⵠᐃⵠⵠΔΔⲆ: false,
      ᐃΔᐃⲆⵠⲆᐃ: lh
    };
    this.ΔⵠⲆΔᐃ = true;
    this.reconnect = {
      rotate: 0,
      enabled: false
    };
    this.key = ᐃⵠⲆΔ.ᐃᐃᐃᐃⲆⵠΔ("key", za.location.href);
    var a = ᐃⵠⲆΔ.ᐃᐃᐃᐃⲆⵠΔ("egg", za.location.href);
    if (a) {
      mx.ⵠᐃⵠⲆ = parseInt(a);
    }
    this.beta = za.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ᐃᐃⲆⵠ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ᐃᐃⲆⵠ.get("starve_beta");
    }
    this.ⵠⵠⲆⵠⲆ = ᐃᐃⲆⵠ.get("starve_token") ? ᐃᐃⲆⵠ.get("starve_token") : ᐃⵠⲆΔ.ⵠⵠⵠⵠᐃⵠΔ(14);
    za.baguette();
    var b = za.kot2;
    function c() {
      this.seed = 1;
      this.ⲆⵠⵠᐃᐃⵠⲆ = 2;
      this.ᐃⵠΔᐃⵠⵠⵠ = 3;
      this.ⲆⵠᐃᐃΔᐃⵠᐃΔ = 1;
      this.ⵠⲆⵠᐃⲆⲆⵠΔΔ = 2;
      this.ⲆⵠᐃⵠⲆΔⵠΔΔ = 3;
      this.ⵠⵠⲆⲆⲆΔⵠ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔᐃᐃⲆΔⲆ = function (a) {
        this.ⲆⵠⵠᐃᐃⵠⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔΔΔΔⲆΔ = function (a) {
        this.ᐃⵠΔᐃⵠⵠⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠΔᐃⲆΔᐃⵠᐃⵠ = function (a) {
        this.ⲆⵠᐃᐃΔᐃⵠᐃΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠⲆⵠⲆⵠⵠΔⲆΔ = function (a) {
        this.ⵠⲆⵠᐃⲆⲆⵠΔΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔᐃΔⵠⵠᐃᐃΔ = function (a) {
        this.ⲆⵠᐃⵠⲆΔⵠΔΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠΔΔᐃᐃᐃᐃ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = f * m % ⲆⵠΔᐃⵠⵠⵠ;
          var o = ⵠⵠⵠᐃΔⲆᐃ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && a > m) {
              var q = Math.random() > 0.5 ? xx * -10 : xx * 10;
              var r = e * p;
              this.Δⵠⵠᐃⵠᐃⵠ[n] = Math.max(-25, Math.min(25, this.Δⵠⵠᐃⵠᐃⵠ[n] + q));
              this.ΔⵠᐃⵠⵠⵠⲆ[n] = Math.max(-8, Math.min(8, this.ΔⵠᐃⵠⵠⵠⲆ[n] + q));
              if (r > 0) {
                Hn.beginPath();
                Hn.arc(m + qx.ⲆⲆᐃ.x + this.ΔⵠᐃⵠⵠⵠⲆ[n], c + this.Δⵠⵠᐃⵠᐃⵠ[n] - 20, r, 0, Math.PI * 2);
                if (px.transition) {
                  var t = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
                  Hn.fillStyle = Bw(83, 156, 160, 236, 247, 249, t);
                } else {
                  Hn.fillStyle = Sr.ΔΔⲆⵠⲆᐃⲆ[px.time];
                }
                Hn.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ⵠⲆⲆΔᐃΔⵠ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = m * f % ⲆⵠΔᐃⵠⵠⵠ;
          var o = ⵠⵠⵠᐃΔⲆᐃ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (k < m && m < a) {
              var q = Math.random() > 0.5 ? xx * -10 : xx * 10;
              var r = e * p;
              this.ΔᐃⲆᐃⵠ[n] = Math.max(-25, Math.min(25, this.ΔᐃⲆᐃⵠ[n] + q));
              this.ⵠΔᐃΔᐃ[n] = Math.max(-8, Math.min(8, this.ⵠΔᐃΔᐃ[n] + q));
              if (r > 0) {
                Hn.beginPath();
                Hn.arc(c + this.ΔᐃⲆᐃⵠ[n] - 20, m + qx.ⲆⲆᐃ.y + this.ⵠΔᐃΔᐃ[n], r, 0, Math.PI * 2);
                if (px.transition) {
                  var t = px.time ? 1 - px.ⵠΔΔΔ.ⵠΔⵠ : px.ⵠΔΔΔ.ⵠΔⵠ;
                  Hn.fillStyle = Bw(83, 156, 160, 236, 247, 249, t);
                } else {
                  Hn.fillStyle = Sr.ΔΔⲆⵠⲆᐃⲆ[px.time];
                }
                Hn.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔΔⵠΔⵠᐃⵠΔᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(d - 0 - e - 2) / 200;
        if (h === 0) {
          this.ᐃΔΔΔΔⲆΔ();
        }
        Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
        this.ⵠΔΔᐃᐃᐃᐃ(d, h, this.ᐃⵠΔᐃⵠⵠⵠ, 18, 16, f, g);
        Hn.globalAlpha = 1;
        h = -(b - 250 - e + 500) / 150;
        if (h === 0) {
          this.ⵠⵠⲆⲆⲆΔⵠ();
        }
        Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
        this.ⵠΔΔᐃᐃᐃᐃ(b, h, this.seed, 12, 10, f, g);
        Hn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ᐃΔᐃᐃⲆΔⲆ();
          }
          Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
          this.ⵠΔΔᐃᐃᐃᐃ(c, h, this.ⲆⵠⵠᐃᐃⵠⲆ, 6, 6, f, g);
          Hn.globalAlpha = 1;
        }
      };
      this.ⵠᐃᐃⵠⵠⲆⲆΔΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ᐃΔΔΔΔⲆΔ();
        }
        Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
        this.ⵠΔΔᐃᐃᐃᐃ(d, h, this.ᐃⵠΔᐃⵠⵠⵠ, 18, 16, f, g);
        Hn.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⵠⲆⲆⲆΔⵠ();
        }
        Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
        this.ⵠΔΔᐃᐃᐃᐃ(b, h, this.seed, 12, 10, f, g);
        Hn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ᐃΔᐃᐃⲆΔⲆ();
          }
          Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
          this.ⵠΔΔᐃᐃᐃᐃ(c, h, this.ⲆⵠⵠᐃᐃⵠⲆ, 6, 6, f, g);
          Hn.globalAlpha = 1;
        }
      };
      this.ΔⵠΔⵠᐃⲆΔᐃⲆ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ᐃΔΔΔΔⲆΔ();
        }
        Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
        this.ⵠⲆⲆΔᐃΔⵠ(d, h, this.ᐃⵠΔᐃⵠⵠⵠ, 18, 16, f, g);
        Hn.globalAlpha = 1;
        var h = -(-b + 250 + e) / 150;
        if (h === 0) {
          this.ⵠⵠⲆⲆⲆΔⵠ();
        }
        Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
        this.ⵠⲆⲆΔᐃΔⵠ(b, h, this.seed, 12, 10, f, g);
        Hn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ᐃΔᐃᐃⲆΔⲆ();
          }
          Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
          this.ⵠⲆⲆΔᐃΔⵠ(c, h, this.ⲆⵠⵠᐃᐃⵠⲆ, 6, 6, f, g);
          Hn.globalAlpha = 1;
        }
      };
      this.ⵠⵠᐃⵠⲆⲆⲆᐃⲆ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ᐃΔΔΔΔⲆΔ();
        }
        Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
        this.ⵠⲆⲆΔᐃΔⵠ(d, h, this.ᐃⵠΔᐃⵠⵠⵠ, 18, 16, f, g);
        Hn.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⵠⲆⲆⲆΔⵠ();
        }
        Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
        this.ⵠⲆⲆΔᐃΔⵠ(b, h, this.seed, 12, 10, f, g);
        Hn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ᐃΔᐃᐃⲆΔⲆ();
          }
          Hn.globalAlpha = ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(h);
          this.ⵠⲆⲆΔᐃΔⵠ(c, h, this.ⲆⵠⵠᐃᐃⵠⲆ, 6, 6, f, g);
          Hn.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ᐃⵠᐃΔΔⲆⵠ, 0, 10, 0, 0, 200),
        ⵠⲆⵠᐃ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ⲆⲆᐃᐃⲆΔⲆ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ΔΔⲆᐃᐃⵠⲆ, 0, 10, 0, 0, 150),
        ⵠⲆⵠᐃ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ⲆⲆᐃⲆⵠΔⵠ, 0, 10, 0, 0, 100),
        ⵠⲆⵠᐃ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ, 0, 10, 100, 100, 0)
      };
      this.ⲆⲆᐃⲆᐃⲆΔⲆΔ = function (a) {
        if (a.r.x === a.r.ⲆⵠⲆⲆⲆ) {
          if (a.ⵠⲆⵠᐃ.ⲆⵠⲆⲆⲆ === a.ⵠⲆⵠᐃ.x) {
            return a.r;
          } else {
            return a.ⵠⲆⵠᐃ;
          }
        } else {
          return a.r;
        }
      };
      this.ᐃᐃⵠ = function (a) {
        var b;
        if (a.r.ⲆⵠⲆⲆⲆ === a.r.x) {
          if (a.ⵠⲆⵠᐃ.ⲆⵠⲆⲆⲆ === a.ⵠⲆⵠᐃ.x) {
            a.r.ᐃⵠⲆⵠΔᐃⵠ();
            a.ⵠⲆⵠᐃ.ᐃⵠⲆⵠΔᐃⵠ();
            b = a.r;
          } else {
            b = a.ⵠⲆⵠᐃ;
          }
        } else {
          b = a.r;
        }
        b.ᐃΔᐃⵠΔⵠᐃ(b.ⲆⵠⲆⲆⲆ);
        return b;
      };
      this.ΔᐃⲆᐃⵠ = [];
      this.ⵠΔᐃΔᐃ = [];
      this.Δⵠⵠᐃⵠᐃⵠ = [];
      this.ΔⵠᐃⵠⵠⵠⲆ = [];
      this.ⵠΔⵠⵠⲆ = function () {
        for (var a = 0; a < ⲆⵠΔᐃⵠⵠⵠ; a++) {
          this.ΔᐃⲆᐃⵠ[a] = Math.floor(ⵠⵠⵠᐃΔⲆᐃ[a] * 25);
          this.ⵠΔᐃΔᐃ[a] = Math.floor(ⵠⵠⵠᐃΔⲆᐃ[a] * 8);
          this.Δⵠⵠᐃⵠᐃⵠ[a] = Math.floor(ⵠⵠⵠᐃΔⲆᐃ[a] * 25);
          this.ΔⵠᐃⵠⵠⵠⲆ[a] = Math.floor(ⵠⵠⵠᐃΔⲆᐃ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ⲆⵠⲆⲆⲆ;
        this.w2.r.ⵠⵠⵠⵠΔ = 3.5;
        this.w3.r.ⵠⵠⵠⵠΔ = 2;
      };
      this.ⵠΔⵠⵠⲆ();
    }
    this.ⵠⵠⲆⵠⲆ = b.substring(0, 6) + this.ⵠⵠⲆⵠⲆ.substring(6);
    this.ⵠΔⵠᐃΔⲆⲆ = ᐃᐃⲆⵠ.get("starve_token_id") ? ᐃᐃⲆⵠ.get("starve_token_id") : "";
    this.id = 0;
    this.ᐃΔⲆⵠ = 0;
    this.Δᐃⵠ = 0;
    this.ⲆᐃᐃⲆⵠᐃΔ = {
      ⲆᐃⵠΔᐃᐃⲆ: 0,
      ᐃᐃΔⲆΔ: 0,
      ⲆⵠΔΔⵠⲆᐃ: "",
      ⵠⵠⵠᐃᐃⵠΔ: 0
    };
    this.ᐃⵠⲆᐃⵠᐃΔᐃΔ = {
      connected: 0,
      ᐃΔⵠΔΔⲆΔ: new Date().getTime()
    };
    this.ⵠΔΔΔΔ = [];
    this.ᐃᐃᐃⲆΔΔⲆ = function (a) {
      for (var b = 0; this.ⵠΔΔΔΔ.length > b; b++) {
        if (this.ⵠΔΔΔΔ[b] == a) {
          return Qn;
        }
      }
      return Fh;
    };
    this.ΔⲆΔᐃⲆ = {
      ΔⲆⲆΔΔ: 0,
      time: 0,
      value: 0,
      open: false,
      ΔⵠⲆⲆ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ΔⲆⲆΔΔ) / 1000);
          if (this.time < 60) {
            sx.ΔⲆΔᐃⲆ.button.ΔⵠⲆⲆ(Hn);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = false;
          }
        }
      }
    };
    this.Δⵠⵠᐃᐃ = {
      id: -1,
      ΔⵠΔΔ: -1,
      lock: 0,
      timeout: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 1, 0, 1 / 30, 1),
      wait: false
    };
    this.ⵠⵠⲆΔⲆ = {
      timeout: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 1, 0, 1 / 5, 1),
      wait: false
    };
    this.ΔⲆⵠᐃΔ = {
      timeout: new ᐃⵠⲆΔ.ⲆΔⲆΔ(ph, 0, 1, 0, 1, 1),
      wait: ph
    };
    this.ΔⵠⲆⲆΔ = {
      timeout: new ᐃⵠⲆΔ.ⲆΔⲆΔ(rl, 0, 1, 0, 1 / 10, 1),
      wait: false
    };
    this.ⲆⲆᐃ = new ᐃⵠⲆΔ.ⲆⲆᐃⵠⵠᐃΔ(ᐃⵠⲆΔ.ᐃⲆᐃΔΔᐃⲆ, 0, 0.4, 0, 0, $n, _n, $n, _n);
    this.ⲆⲆᐃ.ΔⲆⲆΔΔ = 0;
    this.ⲆⲆᐃ.ᐃⵠⲆᐃⲆⲆⲆ = 0;
    this.ⲆⲆᐃ.ᐃΔΔ = function () {
      if (this.ᐃⵠⲆᐃⲆⲆⲆ > 0) {
        this.ᐃⵠⲆᐃⲆⲆⲆ -= xx;
      } else {
        var a = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
        if (a) {
          this.ΔⲆⲆΔΔ = 0;
          var b = Math.max(Math.min($n - a.x, -2), 2 - px.w + Sn);
          var c = Math.max(Math.min(_n - a.y, -2), 2 - px.ᐃⲆᐃ + Zn);
          this.ᐃΔᐃⵠΔⵠᐃ({
            x: b,
            y: c
          });
        } else {
          this.ΔⲆⲆΔΔ += xx;
          if (this.ΔⲆⲆΔΔ > 3) {
            this.ΔⲆⲆΔΔ = 0;
            if (!qx.reconnect.enabled) {
              ΔⵠⲆⵠ.ⵠᐃⲆⲆΔⲆⵠᐃⵠ();
            }
          }
        }
      }
    };
    this.ⲆⲆᐃ.w = screen.width;
    this.ⲆⲆᐃ.ᐃⲆᐃ = screen.height;
    this.ⲆⲆᐃ.ⲆⵠΔⲆᐃᐃⵠ = this.ⲆⲆᐃ.w;
    this.ⲆⲆᐃ.ᐃΔΔⲆᐃᐃΔ = this.ⲆⲆᐃ.ᐃⲆᐃ;
    this.ⲆⲆᐃ.rx = 0;
    this.ⲆⲆᐃ.ry = 0;
    this.ⲆⲆᐃ.ΔⵠⵠⲆⲆⵠᐃᐃⲆ = 0;
    this.ⲆⲆᐃ.ΔΔⵠΔᐃΔΔΔᐃ = 0;
    this.ⲆⲆᐃ.ⲆⵠᐃᐃⲆ = function (a, b) {
      this.x = -Math.min(Math.max(-px.ⵠΔⲆᐃⲆᐃᐃ * 2, a - px.ⵠΔⲆᐃⲆᐃᐃ - this.ⲆⵠΔⲆᐃᐃⵠ / 2), px.w - this.ⲆⵠΔⲆᐃᐃⵠ);
      this.y = -Math.min(Math.max(-px.ⵠΔⵠⵠⵠⵠΔ * 2, b - (px.ⵠΔⵠⵠⵠⵠΔ + this.ᐃΔΔⲆᐃᐃΔ) / 2), px.ᐃⲆᐃ - this.ᐃΔΔⲆᐃᐃΔ + px.ⵠΔⵠⵠⵠⵠΔ);
      this.ⲆⵠⲆⲆⲆ = this.x;
      this.ΔᐃⵠΔᐃⵠⲆ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ⵠⲆⲆᐃᐃᐃⲆ: 0,
      ΔⲆⲆⵠ: 0,
      attack: 0,
      ᐃΔΔ: function () {
        var a = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
        if (a) {
          var b = {
            x: qx.ⲆⲆᐃ.x + a.x,
            y: qx.ⲆⲆᐃ.y + a.y
          };
        } else {
          b = eo;
        }
        var c = ᐃⵠⲆΔ.ⲆΔⲆᐃⲆᐃⵠ(vx.ⵠΔⵠΔ, b);
        var d = false;
        this.ΔⲆⲆⵠ += xx;
        if (!vx.state) {
          if (a && !(a.action & 16) && this.ΔⲆⲆⵠ > 0.2) {
            this.attack = 1;
            d = uq;
            this.ΔⲆⲆⵠ = 0;
            ΔⵠⲆⵠ.ᐃᐃⵠᐃⵠᐃⲆΔⲆ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ΔⲆⲆⲆᐃⵠⲆ = c;
        }
        if (!d) {
          this.timeout += xx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              ΔⵠⲆⵠ.ΔᐃⲆᐃⵠⵠᐃⵠΔ(c);
              this.angle = c;
            }
          }
        }
        if (!qx.ΔⲆᐃⵠΔ.open && !qx.ⵠᐃⵠᐃᐃ.open) {
          var e = 0;
          if (ux.ᐃΔⲆΔΔⲆᐃ()) {
            e |= 1;
          }
          if (ux.ⵠⲆᐃΔΔΔᐃ()) {
            e |= 2;
          }
          if (ux.ⵠⵠⵠᐃΔΔⵠ()) {
            e |= 4;
          }
          if (ux.ᐃⵠⲆⲆⵠᐃᐃ()) {
            e |= 8;
          }
          if (this.ⵠⲆⲆᐃᐃᐃⲆ != e) {
            ΔⵠⲆⵠ.ⲆᐃⲆⵠᐃⵠᐃⲆⲆ(e);
          }
          this.ⵠⲆⲆᐃᐃᐃⲆ = e;
        }
      }
    };
    this.ⵠⲆⲆⵠ = {
      c: 1,
      ⵠⲆⵠᐃ: 1,
      ᐃⲆᐃ: 1,
      ᐃᐃⵠ: 1,
      ⲆᐃΔ: 1,
      ΔⲆᐃΔᐃᐃᐃ: 1,
      ⲆΔΔⵠᐃΔⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(true, 0, 1, 0, 3, 3),
      ⲆⵠΔⵠⵠⲆᐃ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(true, 0, 1, 0, 2, 2),
      ⵠΔᐃⲆᐃΔΔ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(Qn, 0, 1, 0, 3, 3),
      ΔᐃΔⲆⲆᐃᐃ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(true, 0, 1, 0, 3, 3),
      ⵠᐃΔΔΔΔⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(true, 0, 1, 0, 3, 3),
      ΔᐃⵠⵠᐃⲆⲆ: new ᐃⵠⲆΔ.ⲆΔⲆΔ(wq, 0, 1, 0, 3, 3),
      ⵠᐃⲆΔᐃ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ᐃⲆᐃΔΔᐃⲆ, 0, 1, 0, 0, 1),
      ⲆⲆΔᐃⵠ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ᐃⲆᐃΔΔᐃⲆ, 0, 1, 0, 0, 1),
      ᐃⵠⵠⲆΔᐃⲆ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ᐃⲆᐃΔΔᐃⲆ, 0, 1, 0, 0, 1),
      ⲆⲆΔⵠᐃⵠΔ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ᐃⲆᐃΔΔᐃⲆ, 0, 1, 0, 0, 1),
      ΔᐃᐃⲆᐃΔⲆ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ᐃⲆᐃΔΔᐃⲆ, 0, 1, 0, 0, 1),
      ΔⲆΔᐃⵠⵠΔ: new ᐃⵠⲆΔ.Ⲇᐃⵠⵠᐃ(ᐃⵠⲆΔ.ᐃⲆᐃΔΔᐃⲆ, 0, 1, 0, 0, 1),
      ᐃΔΔ: function () {
        this.ⲆΔΔⵠᐃΔⲆ.ᐃΔΔ();
        this.ⲆⵠΔⵠⵠⲆᐃ.ᐃΔΔ();
        this.ⵠΔᐃⲆᐃΔΔ.ᐃΔΔ();
        this.ΔᐃΔⲆⲆᐃᐃ.ᐃΔΔ();
        this.ⵠᐃΔΔΔΔⲆ.ᐃΔΔ();
        this.ΔᐃⵠⵠᐃⲆⲆ.ᐃΔΔ();
        this.ⵠᐃⲆΔᐃ.ᐃΔᐃⵠΔⵠᐃ(this.c);
        this.ⲆⲆΔᐃⵠ.ᐃΔᐃⵠΔⵠᐃ(this.ⵠⲆⵠᐃ);
        this.ᐃⵠⵠⲆΔᐃⲆ.ᐃΔᐃⵠΔⵠᐃ(this.ᐃⲆᐃ);
        this.ⲆⲆΔⵠᐃⵠΔ.ᐃΔᐃⵠΔⵠᐃ(this.ᐃᐃⵠ);
        this.ΔᐃᐃⲆᐃΔⲆ.ᐃΔᐃⵠΔⵠᐃ(this.ⲆᐃΔ);
        this.ΔⲆΔᐃⵠⵠΔ.ᐃΔᐃⵠΔⵠᐃ(this.ΔⲆᐃΔᐃᐃᐃ);
      }
    };
    this.ᐃⵠΔⲆⵠⲆΔ = false;
    this.ⲆΔᐃΔⲆⵠΔ = false;
    this.ᐃⲆⵠΔᐃ = wr;
    this.ᐃᐃⲆΔⵠⵠⵠ = false;
    this.ⵠⲆΔⲆ = {
      max: 10,
      ΔⵠΔⵠΔᐃⲆ: 0,
      ⵠⵠᐃᐃⵠ: 0,
      ⵠᐃⵠ: [],
      ⲆΔΔⵠᐃ: [],
      ᐃⲆΔⵠᐃΔᐃ: function (a, b) {
        if (a === 1) {
          this.ⵠⵠᐃᐃⵠ = Jf.ⵠᐃⵠΔⲆⵠΔⵠⵠ;
        }
        this.ΔⵠΔⵠΔᐃⲆ += b;
        this.max = 10 + this.ΔⵠΔⵠΔᐃⲆ + this.ⵠⵠᐃᐃⵠ;
      },
      ᐃΔΔΔᐃⲆⲆ: {
        item: -1,
        ᐃΔ: null,
        ⲆⲆᐃⵠΔ: 0,
        ᐃᐃᐃⲆⵠᐃⵠ: 0,
        ⲆⲆᐃⲆΔ: -1,
        ᐃⵠⲆⲆᐃ: -1,
        ⲆⲆⲆΔᐃ: function (a) {
          if (!!this.ⲆⲆᐃⵠΔ && (a.x !== this.ⲆⲆᐃⲆΔ || a.y !== this.ᐃⵠⲆⲆᐃ)) {
            this.ᐃᐃᐃⲆⵠᐃⵠ = 1;
          }
        },
        start: function (a, b) {
          this.ⲆⲆᐃⲆΔ = b.x;
          this.ᐃⵠⲆⲆᐃ = b.y;
          this.item = a;
          this.ᐃΔ = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ[a].info.ᐃΔ[2];
          this.ⲆⲆᐃⵠΔ = 1;
        },
        stop: function () {
          this.ⲆⲆᐃⵠΔ = 0;
          this.ᐃᐃᐃⲆⵠᐃⵠ = 0;
          this.ⲆⲆᐃⲆΔ = -1;
          this.ᐃⵠⲆⲆᐃ = -1;
        },
        release: function () {
          var a = -1;
          var b = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ;
          var c = 0;
          if (this.ⲆⲆᐃⵠΔ && this.ᐃᐃᐃⲆⵠᐃⵠ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === lf) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              sx.ⲆⲆΔᐃⲆᐃⲆ();
            }
          }
          this.stop();
          return c;
        },
        ΔⵠⲆⲆ: function (a, b) {
          if (this.ⲆⲆᐃⵠΔ && this.ᐃᐃᐃⲆⵠᐃⵠ) {
            jp(Hn, this.ᐃΔ, Math.floor(a - this.ᐃΔ.width / 2), Math.floor(b - this.ᐃΔ.height / 2));
          }
        }
      },
      ΔΔᐃΔᐃᐃᐃΔⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ⵠᐃⵠ[a[d][0]] == a[d][1]) {
            return true;
          }
        }
        return kh;
      },
      ⵠⲆⲆᐃⲆ: function (a) {
        for (var b = 0; b < this.ⲆΔΔⵠᐃ.length; b++) {
          if (this.ⲆΔΔⵠᐃ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ΔᐃⵠᐃΔⵠᐃ: function (a, b) {
        this.ⵠᐃⵠ[a] = 0;
        this.ⲆΔΔⵠᐃ.splice(b, 1);
        sx.ⲆⲆΔᐃⲆᐃⲆ();
      },
      ⲆⲆⲆᐃⵠⵠᐃ: function (a, b, c) {
        ᐃΔΔ = true;
        this.ⵠᐃⵠ[a] = Math.max(0, this.ⵠᐃⵠ[a] - b);
        if (!this.ⵠᐃⵠ[a] && c >= 0) {
          this.ΔᐃⵠᐃΔⵠᐃ(a, c);
        }
      }
    };
    this.ᐃΔⲆⵠⵠⵠᐃ = {
      enabled: wr,
      translate: {
        x: 0,
        y: 0
      },
      ᐃⲆⵠᐃΔⲆⲆ: function () {
        if (px.mode == 1 && !qx.ⲆΔᐃΔⲆⵠΔ) {
          qx.ᐃΔⲆⵠⵠⵠᐃ.enabled = !qx.ᐃΔⲆⵠⵠⵠᐃ.enabled;
          if (qx.ᐃΔⲆⵠⵠⵠᐃ.enabled) {
            sx.options.ⵠᐃⲆⲆᐃΔᐃ.display = "inline-block";
          } else {
            sx.options.ⵠᐃⲆⲆᐃΔᐃ.display = "none";
          }
        }
      }
    };
    sx.options.ⵠᐃⲆⲆᐃΔᐃ.display = "none";
    this.ᐃⵠᐃᐃΔ = {
      enabled: Tr,
      translate: {
        x: 0,
        y: 0
      },
      ΔⲆⲆΔΔ: 0,
      ᐃⲆⵠᐃΔⲆⲆ: function () {
        qx.ᐃⵠᐃᐃΔ.enabled = !qx.ᐃⵠᐃᐃΔ.enabled;
        if (qx.ᐃⵠᐃᐃΔ.enabled) {
          sx.options.ⵠⵠⵠⲆΔᐃⲆ.display = "inline-block";
        } else {
          sx.options.ⵠⵠⵠⲆΔᐃⲆ.display = "none";
        }
      },
      ᐃΔΔ: function () {
        if (!!this.enabled && qx.ᐃⲆⵠⵠ.id < 0 && !sx.ΔⵠⲆᐃ.open) {
          this.ΔⲆⲆΔΔ += xx;
          if (this.ΔⲆⲆΔΔ > 2) {
            this.ΔⲆⲆΔΔ = 0;
            if (qx.ⵠⲆⲆⵠ.ᐃⲆᐃ < 0.35) {
              if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[110]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(110, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(110));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[192]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(192, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(192));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[196]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(196, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(196));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[189]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(189, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(189));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[207]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(207, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(207));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[205]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(205, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(205));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[209]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(209, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(209));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[143]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(143, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(143));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[117]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(117, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(117));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[138]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(138, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(138));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[133]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(133, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(133));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[145]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(145, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(145));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[136]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(136, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(136));
              } else if (qx.ⵠⲆΔⲆ.ⵠᐃⵠ[197]) {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(197, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(197));
              }
            } else if (qx.ⵠⲆⲆⵠ.ᐃᐃⵠ < 0.35 && qx.ⵠⲆΔⲆ.ⵠᐃⵠ[127]) {
              ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(127, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(127));
            }
          }
        }
      }
    };
    sx.options.ⵠⵠⵠⲆΔᐃⲆ.display = "none";
    this.ᐃⲆⵠⵠ = {
      id: -1,
      ⵠⵠⵠᐃ: -1,
      timeout: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 1, 0, 1, 1),
      ᐃⵠᐃΔᐃ: false,
      ⲆΔᐃΔ: -1,
      mode: 0,
      label: [],
      ᐃⲆⵠᐃΔ: [],
      ᐃⵠⲆΔᐃ: false,
      ⲆⲆΔⲆⵠ: false,
      ΔⲆΔΔΔⵠⵠ: false,
      ΔⲆⲆⵠΔ: false,
      ⲆΔⵠⵠⲆᐃᐃⲆᐃ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ΔΔᐃᐃⵠΔΔᐃⵠ: function (a) {
        this.ᐃⵠⲆΔᐃ = a;
        var b = sx.ΔⵠⲆᐃ;
        if (b.open) {
          b.ⵠᐃᐃⵠⵠΔⵠ(b.button);
        }
        this.ᐃΔΔ();
      },
      ᐃⵠᐃⵠᐃᐃⲆΔᐃ: function (a) {
        var b = ot[a];
        this.id = a;
        this.ᐃⵠᐃΔᐃ = kn;
        px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
        this.timeout.ⲆΔⵠⲆⲆⲆᐃ = b.time * 8;
        this.ⵠⵠⵠᐃ = b.ⵠⵠⵠᐃ;
      },
      ⵠᐃⲆΔⲆⲆᐃⲆⵠ: function (a) {
        var b = ot[a];
        this.id = a;
        this.ᐃⵠᐃΔᐃ = Ro;
        var c = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
        if (c && c.right == 28) {
          this.timeout.ⲆΔⵠⲆⲆⲆᐃ = b.time * 3;
        } else {
          this.timeout.ⲆΔⵠⲆⲆⲆᐃ = b.time;
        }
        this.ⵠⵠⵠᐃ = b.ⵠⵠⵠᐃ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          qx.ⵠⲆΔⲆ.ⲆⲆⲆᐃⵠⵠᐃ(e[0], e[1], qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(e[0]));
        }
        sx.ⲆⲆΔᐃⲆᐃⲆ();
      },
      ᐃΔΔ: function () {
        this.ᐃⲆⵠᐃΔ = [];
        if (sx.ΔⲆⲆⲆᐃ.ᐃⲆⵠⵠ === 1) {
          sx.ΔⲆⲆⲆᐃ.display = 0;
        }
        for (var a in ot) {
          var b = ot[a];
          var c = Co;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (qx.ⵠⲆΔⲆ.max >= 16 && b.id === 100) {
                c = kh;
                break;
              }
              if (b.w > this.ᐃⵠⲆΔᐃ || b.f > this.ⲆⲆΔⲆⵠ || b.ⲆᐃΔ > this.ΔⲆΔΔΔⵠⵠ || b.e > this.ΔⲆⲆⵠΔ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!qx.ⵠⲆΔⲆ.ⵠᐃⵠ[f[0]] || qx.ⵠⲆΔⲆ.ⵠᐃⵠ[f[0]] < f[1]) {
                c = Ol;
                break;
              }
            }
            if (c) {
              this.ᐃⲆⵠᐃΔ.push(sx.ΔⵠⲆ[b.id]);
            }
          }
        }
        sx.ΔⵠᐃⵠⵠⵠΔ();
        sx.ᐃⲆⵠΔⲆΔⲆ();
        sx.ⲆⵠᐃⲆⲆᐃᐃ();
        sx.ΔⲆⵠⵠⲆⵠΔ();
        sx.ⵠⲆⲆⲆⵠⵠᐃ();
        sx.ΔΔΔᐃΔⵠⵠ();
        sx.sign.ᐃⲆⵠⵠΔⲆᐃ();
      },
      ᐃⵠⲆⵠΔᐃⵠ: function () {
        this.id = -1;
        this.ᐃⵠᐃΔᐃ = false;
        this.timeout.ⵠΔⵠ = 0;
        this.timeout.ⲆᐃΔ = Tr;
        this.ᐃΔΔ();
      }
    };
    this.ΔⵠᐃⵠⵠⲆⲆ = {
      message: undefined,
      ΔⵠⲆⲆ: $v
    };
    this.alert = {
      timeout: new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ΔⵠⲆⲆ: bw,
      list: []
    };
    this.ΔᐃⲆⲆⵠ = {
      ⲆΔ: document.createElement("canvas"),
      ⲆᐃΔΔΔ: [],
      ᐃΔΔ: il,
      translate: {
        y: 0,
        x: 0
      },
      sort: function () {
        var a = [];
        for (var b = px.ΔΔᐃᐃ, c = 0; c < b.length; c++) {
          if (b[c].ΔⵠⲆΔᐃ) {
            a.push({
              id: c,
              Ⲇⵠⵠⵠ: b[c].ᐃᐃΔⲆΔ
            });
          }
        }
        a.sort(function (a, b) {
          return b.Ⲇⵠⵠⵠ - a.Ⲇⵠⵠⵠ;
        });
        this.ⲆᐃΔΔΔ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ⲆᐃΔΔΔ.push(a[c].id);
        }
        this.ᐃΔΔ = true;
      },
      ⵠΔⵠⵠⲆ: function (a) {
        for (var b = px.ΔΔᐃᐃ, c = 0; c < b.length; c++) {
          b[c].ᐃᐃΔⲆΔ = 0;
        }
        b[qx.id].ᐃᐃΔⲆΔ = ᐃⵠⲆΔ.ΔΔⲆⵠᐃᐃⵠ(a[1]);
        this.ⲆᐃΔΔΔ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ⲆᐃΔΔΔ.push(a[c]);
          b[a[c]].ᐃᐃΔⲆΔ = ᐃⵠⲆΔ.ΔΔⲆⵠᐃᐃⵠ(a[c + 1]);
        }
        this.ᐃΔΔ = Vq;
      }
    };
    this.ΔᐃⲆⲆⵠ.ⲆΔ.width = ro * 180;
    this.ΔᐃⲆⲆⵠ.ⲆΔ.height = ro * 300;
    this.ΔᐃⲆⲆⵠ.Ⲇ = this.ΔᐃⲆⲆⵠ.ⲆΔ.getContext("2d");
    this.ⵠᐃⵠᐃᐃ = {
      open: Nq,
      input: document.getElementById("commandInput"),
      ᐃⵠᐃΔⲆⲆᐃ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ᐃΔΔⵠᐃΔⲆᐃⲆ: function (a) {
        this.ᐃⵠᐃΔⲆⲆᐃ.innerHTML += a;
      },
      ᐃΔΔ: function () {
        this.style.left = Math.floor(Sn / 2 - 300) + "px";
        this.style.top = Math.floor(Zn / 2 - 250) + "px";
      },
      ⵠⵠΔᐃⲆΔⵠΔᐃ: function () {
        this.ᐃⵠᐃΔⲆⲆᐃ.innerHTML = "";
      },
      ⲆⲆⲆⵠᐃ: function () {
        this.open = _a;
        this.style.display = "none";
      },
      ΔⵠⵠⵠⲆⲆᐃ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 === 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⲆⲆᐃΔᐃ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ᐃΔΔⵠᐃΔⲆᐃⲆ(f);
        this.ⲆΔᐃⲆⵠⵠᐃᐃᐃ();
      },
      ⲆΔᐃⲆⵠⵠᐃᐃᐃ: function () {
        this.ᐃⵠᐃΔⲆⲆᐃ.scrollTop = this.ᐃⵠᐃΔⲆⲆᐃ.scrollHeight;
      },
      ⵠΔⲆⲆᐃᐃΔ: function (b) {
        switch (b) {
          case "clean":
            this.ⵠⵠΔᐃⲆΔⵠΔᐃ();
            return lj;
          case "list":
            var c = "";
            const a = za.document.createElement("div");
            for (var d = px.ΔΔᐃᐃ, e = 0; e < d.length; e++) {
              var f = d[e];
              if (f.ΔⵠⲆΔᐃ) {
                a.innerText = f.ⵠΔᐃΔⲆ;
                c += a.innerHTML + " <span style=\"color:green\">#" + e + "</span><br />";
              }
            }
            this.ⲆⲆᐃΔᐃ("list", 1, "List all connected players", c);
            return Rj;
          case "weapon-list":
            this.ⲆⲆᐃΔᐃ("Weapons", 1, "List all weapons in the game", this.ΔⵠⵠⵠⲆⲆᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return true;
          case "tool-list":
            this.ⲆⲆᐃΔᐃ("Tools", 1, "List all tools in the game", this.ΔⵠⵠⵠⲆⲆᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ⲆⲆᐃΔᐃ("Survival Items", 1, "List all survival items in the game", this.ΔⵠⵠⵠⲆⲆᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return _h;
          case "resource-list":
            this.ⲆⲆᐃΔᐃ("Resources", 1, "List all resources in the game", this.ΔⵠⵠⵠⲆⲆᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ⲆⲆᐃΔᐃ("Food", 1, "List all food in the game", this.ΔⵠⵠⵠⲆⲆᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return fr;
          case "hat-list":
            this.ⲆⲆᐃΔᐃ("Hats", 1, "List all hats in the game", this.ΔⵠⵠⵠⲆⲆᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return wq;
          case "building-list":
            this.ⲆⲆᐃΔᐃ("Buildings", 1, "List all buildings in the game", this.ΔⵠⵠⵠⲆⲆᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return On;
          case "biome-list":
            this.ⲆⲆᐃΔᐃ("Biomes list", 1, "List all available biomes in the game", this.ΔⵠⵠⵠⲆⲆᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return Vq;
          case "help-config":
            this.ⲆⲆᐃΔᐃ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            d = px.ᐃᐃΔ[0];
            e = 0;
            for (; e < d.length; e++) {
              var g = d[e];
              if (g.ΔⵠΔΔ === qx.id) {
                this.ⲆⲆᐃΔᐃ("pos", 1, "Your position is " + Math.floor(g.x / 100) + ":" + Math.floor(g.y / 100));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ⲆⲆᐃΔᐃ("help-admin", 1, "List all available commands for admin only", this.ΔⵠⵠⵠⲆⲆᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.ⲆⲆᐃΔᐃ("help", 1, "List all available commands", this.ΔⵠⵠⵠⲆⲆᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return lj;
        }
        return Fh;
      },
      ⵠⵠⲆⵠᐃⵠⵠⵠᐃ: function () {
        if (!this.open) {
          this.open = Lr;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ΔΔᐃⵠⵠΔΔ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⵠΔⲆⲆᐃᐃΔ(a)) {
            ΔⵠⲆⵠ.ΔⵠΔΔⵠΔᐃⲆᐃ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ΔⲆᐃⵠΔ = {
      open: Fh,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ᐃΔΔ: function () {
        this.style.left = Math.floor(Sn / 2 - 150) + "px";
        this.style.top = Math.floor(Zn / 2 + 80) + "px";
      },
      ⲆⲆⲆⵠᐃ: function () {
        this.open = Fh;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (qx.alert.text) {
              qx.alert.list.push(b);
            } else {
              qx.alert.text = b;
            }
            sx.ΔΔⲆΔⵠⲆᐃ = 0;
          } else {
            sx.ΔΔⲆΔⵠⲆᐃ = 1;
          }
        }
      },
      ⵠΔⲆⲆᐃᐃΔ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return wh;
        }
        return _a;
      },
      ⲆᐃΔᐃⲆ: function () {
        if (this.open) {
          this.open = _a;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⵠΔⲆⲆᐃᐃΔ(a)) {
              ΔⵠⲆⵠ.ᐃⲆΔⲆΔᐃᐃⵠⵠ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = Qe;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ᐃΔΔΔⲆⲆⲆ = {
      Ⲇⵠⵠⵠⵠ: [],
      ᐃΔΔ: function (a) {
        a.y += xx * 80 * a.Ⲇⵠⵠⵠ;
        a.x += xx * 80 * a.c;
        a.ⲆⲆΔᐃⵠ -= xx / 6;
        if (a.ⲆⲆΔᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + xx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - xx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(Sr.ᐃΔⲆΔΔΔⲆ * (Sn / 1366), Sr.ᐃΔⲆΔΔΔⲆ + 10) * Math.max(Math.min(px.ΔᐃⵠΔⵠ + 1000, 3000) / 3000, 0));
        if (this.Ⲇⵠⵠⵠⵠ.length < c) {
          var d = Math.floor(Math.random() * Sr.ⲆᐃΔΔⵠⲆⲆ);
          var e = -qx.ⲆⲆᐃ.x + Math.floor(Math.random() * qx.ⲆⲆᐃ.w);
          var f = -qx.ⲆⲆᐃ.y + Math.floor(Math.random() * qx.ⲆⲆᐃ.ᐃⲆᐃ);
          var g = Math.random(Math.PI);
          this.Ⲇⵠⵠⵠⵠ.push(new Rf(d, e, f, g));
        }
      }
    };
    this.ᐃᐃⵠⵠᐃⲆⵠ = 0;
    this.ᐃᐃⲆⵠΔ = 0;
    this.ΔΔΔᐃΔ = {
      Ⲇⵠⵠⵠⵠ: [],
      ᐃᐃⵠΔΔ: 0,
      ΔᐃⲆⵠᐃ: 0,
      ᐃΔΔ: function (a) {
        a.y += xx * (200 + this.ΔᐃⲆⵠᐃ * 800) * a.Ⲇⵠⵠⵠ;
        a.x += xx * (200 + this.ΔᐃⲆⵠᐃ * 800) * a.c;
        a.ⲆⲆΔᐃⵠ -= xx / 6;
        if (a.ⲆⲆΔᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + xx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - xx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ΔᐃⲆⵠᐃ + 0.1) * Sr.ⲆΔᐃΔⲆⵠᐃ * (Sn / 1366), (this.ΔᐃⲆⵠᐃ + 0.1) * Sr.ⲆΔᐃΔⲆⵠᐃ + 10) * Math.max(Math.min(px.ΔⲆⲆΔᐃ + 1000, 3000) / 3000, 0));
        if (this.Ⲇⵠⵠⵠⵠ.length < c) {
          var d = Math.floor(Math.random() * Sr.ⲆᐃΔΔⵠⲆⲆ);
          var e = -qx.ⲆⲆᐃ.x + Math.floor(Math.random() * qx.ⲆⲆᐃ.w);
          var f = -qx.ⲆⲆᐃ.y + Math.floor(Math.random() * qx.ⲆⲆᐃ.ᐃⲆᐃ);
          var g = Math.random(Math.PI);
          if (qx.ΔΔΔᐃΔ.ᐃᐃⵠΔΔ !== 0) {
            e -= qx.ⲆⲆᐃ.w / 2;
          }
          this.Ⲇⵠⵠⵠⵠ.push(new Rf(d, e, f, g));
        }
      }
    };
    this.ᐃᐃᐃΔⵠ = {
      Ⲇⵠⵠⵠⵠ: [],
      ᐃᐃⵠΔΔ: 0,
      ΔᐃⲆⵠᐃ: 0,
      ᐃΔΔ: function (a) {
        if (ux.ⵠⵠⵠᐃΔΔⵠ()) {
          a.y += xx * a.ΔΔΔΔᐃ * (5.5 + this.ΔᐃⲆⵠᐃ * 10);
        } else {
          a.y += xx * a.ΔΔΔΔᐃ * (5 + this.ΔᐃⲆⵠᐃ * 10);
        }
        a.ⲆⲆΔᐃⵠ -= xx / 2;
        if (ux.ᐃΔⲆΔΔⲆᐃ()) {
          a.x += xx * (100 + this.ΔᐃⲆⵠᐃ * 400);
        } else if (ux.ⵠⲆᐃΔΔΔᐃ()) {
          a.x -= xx * (130 - this.ΔᐃⲆⵠᐃ * 400);
        } else {
          a.x -= xx * (30 - this.ΔᐃⲆⵠᐃ * 400);
        }
        if (a.ⲆⲆΔᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + xx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - xx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔᐃⲆⵠᐃ * 1.5 + 0.5) * Sr.ΔᐃΔⲆⲆᐃΔ * (Sn / 1366), (this.ΔᐃⲆⵠᐃ * 1.5 + 0.5) * Sr.ΔᐃΔⲆⲆᐃΔ + 10) * Math.max(Math.min(px.ⲆᐃⲆΔΔ + 1000, 3000) / 3000, 0));
        if (this.Ⲇⵠⵠⵠⵠ.length < b) {
          var c = Math.floor(Math.random() * Sr.ⲆⵠⲆⵠᐃᐃᐃ);
          var d = -qx.ⲆⲆᐃ.x + Math.floor(Math.random() * qx.ⲆⲆᐃ.w);
          var e = -qx.ⲆⲆᐃ.y + Math.floor(Math.random() * 400 * ro - ro * 200);
          this.Ⲇⵠⵠⵠⵠ.push(new Rf(c, d, e, 0));
        }
      }
    };
    this.ⲆᐃᐃⲆ = [];
    for (var d = 0; d < 4; d++) {
      this.ⲆᐃᐃⲆ.push(new c());
    }
  }
  function Mw() {
    Math.random();
    return "r";
  }
  function Xf() {
    Math.random();
    return "o";
  }
  function Nw() {
    Math.random();
    return "d";
  }
  function Kw() {
    Math.random();
    return "p";
  }
  function Yf() {
    Math.random();
    return "t";
  }
  function Ow() {
    Math.random();
    return "C";
  }
  setTimeout(function b() {
    var c = Of() + qf() + Yf() + Iw();
    var d = function () {
      Math.random();
      return "W";
    }() + Nf() + function () {
      Math.random();
      return "b";
    }() + function () {
      Math.random();
      return "S";
    }() + Xf() + (Math.random(), "c") + function () {
      Math.random();
      return "k";
    }() + Nf() + Yf();
    if (za[d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var e = Jw() + Nf() + Of() + Nw();
    var f = Kw() + Mw() + Xf() + Yf() + Xf() + Yf() + function () {
      Math.random();
      return "y";
    }() + Kw() + Nf();
    if (za[d][f][e].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    d = Nw() + Mw() + qf() + function () {
      Math.random();
      return "w";
    }() + (Math.random(), "I") + (Math.random(), "m") + qf() + Vf() + Nf();
    e = Ow() + qf() + Of() + (Math.random(), "v") + qf() + Jw() + function () {
      Math.random();
      return "R";
    }() + Nf() + Of() + Nw() + Nf() + Mw() + Iw() + Of() + Vf() + Ow() + Xf() + Of() + Yf() + Nf() + (Math.random(), "x") + Yf() + (Math.random(), "2") + (Math.random(), "D");
    if (za[e][f][d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    setTimeout(b, 100000);
  }, 100000);
  function Pw(a) {
    const b = function () {
      for (let a = 0; a < 5; a++) {
        za.addEventListener("click", function () {
          b();
        });
      }
    };
    b();
  }
  function Qw() {
    ᐃⵠⲆΔ.ᐃⵠᐃᐃⲆΔᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Rw(b, k) {
    this.ⲆΔ = b;
    this.Ⲇ = k;
    if (za.navigator.userAgent.indexOf("Edge") > -1) {
      this.ΔⵠⵠΔᐃᐃⲆ = "default";
      this.ⲆᐃⵠᐃⵠΔⲆ = "pointer";
    } else {
      this.ΔⵠⵠΔᐃᐃⲆ = "url('img/cursor0.png'), default";
      this.ⲆᐃⵠᐃⵠΔⲆ = "url('img/cursor1.png'), pointer";
    }
    var q = this;
    function e(b, c, e, f, i) {
      var a = this;
      for (var j = c + 9, k = 0, m = f, n = c; j > n; n++) {
        q.buttons[n].info.callback = o;
        q.buttons[n].info.ⵠⲆᐃⲆⲆᐃᐃᐃΔ = b;
      }
      function p() {
        var a = b[m];
        mx.Ⲇⵠⵠⵠᐃᐃⵠ = bf(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, Xg, 10, 8);
        if (a.level !== Kn) {
          mx.ΔᐃⲆΔⵠΔⵠ = bf("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Ho, 10, 8);
        } else {
          mx.ΔᐃⲆΔⵠΔⵠ = bf("by " + a.ᐃⲆⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Ho, 10, 8);
        }
      }
      function o() {
        if (m !== this.ⵠⵠᐃΔᐃΔΔ && this.ⵠⵠᐃΔᐃΔΔ !== -1) {
          if (this.ᐃⵠΔΔⲆΔᐃ > 0) {
            if (ᐃⲆΔⲆᐃΔᐃ === c) {
              z(y, ja, "none");
            } else {
              z(x, ja, "none");
            }
          } else if (c === ᐃⲆΔⲆᐃΔᐃ) {
            z(y, ka, "inline-block");
          } else {
            z(x, ka, "inline-block");
          }
          m = this.ⵠⵠᐃΔᐃΔΔ;
          e(this.ⵠⵠᐃΔᐃΔΔ);
          p();
        }
      }
      this.ᐃᐃΔΔᐃΔᐃ = function () {
        for (var a = c, d = k * 3; j > a && b.length > d; a++, d++) {
          if (b[d].ⲆⲆΔ !== ⵠⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ || i[d] !== 0) {
            q.buttons[a].info.ⵠⵠᐃΔᐃΔΔ = d;
            for (var e = 0; e < 3; e++) {
              q.buttons[a].info.ᐃΔ[e] = ⲆᐃⵠΔⵠⲆΔ[b[d].ⲆⲆΔ][e];
              q.buttons[a].info.active = ka;
              q.buttons[a].info.ᐃⵠΔΔⲆΔᐃ = i[d];
            }
          } else {
            q.buttons[a].info.ⵠⵠᐃΔᐃΔΔ = -1;
            q.buttons[a].info.active = ja;
          }
        }
        for (; j > a; a++) {
          q.buttons[a].info.ⵠⵠᐃΔᐃΔΔ = -1;
          q.buttons[a].info.active = ja;
        }
        p();
      };
      q.buttons[j].info.callback = function () {
        if (k > 0) {
          k--;
        }
        a.ᐃᐃΔΔᐃΔᐃ();
      };
      q.buttons[j + 1].info.callback = function () {
        if (k * 3 + 9 < b.length) {
          k++;
        }
        a.ᐃᐃΔΔᐃΔᐃ();
      };
    }
    function n() {
      var b = Number(ᐃᐃⲆⵠ.get("starve_crate"));
      var c = Number(ᐃᐃⲆⵠ.get("starve_dead"));
      var d = Number(ᐃᐃⲆⵠ.get("starve_book"));
      var e = Number(ᐃᐃⲆⵠ.get("starve_bag"));
      var f = Number(ᐃᐃⲆⵠ.get("starve_skin"));
      var a = Number(ᐃᐃⲆⵠ.get("starve_accessory"));
      q.ⵠᐃⵠⲆ = f || 0;
      q.ΔⵠᐃⲆⵠ = d || 0;
      q.ⲆⵠⲆⲆⵠ = b || 1;
      q.ᐃΔⵠⲆᐃ = a || 0;
      q.ⵠⵠᐃᐃⵠ = e || 0;
      q.ⵠΔΔⲆᐃ = c || 0;
    }
    function a() {
      for (var a = ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ, b = 0; b < a.length; b++) {
        if (a[b].ⲆⲆΔ === ⵠⵠᐃ.ΔΔΔᐃᐃ) {
          q.unlock.ⵠᐃⵠⲆ[b] = 1;
        } else {
          q.unlock.ⵠᐃⵠⲆ[b] = 0;
        }
      }
      a = ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (ⵠⵠᐃ.ΔΔΔᐃᐃ === a[b].ⲆⲆΔ) {
          q.unlock.ᐃΔⵠⲆᐃ[b] = 1;
        } else {
          q.unlock.ᐃΔⵠⲆᐃ[b] = 0;
        }
      }
      a = ⵠᐃⵠⵠ.ᐃᐃⵠΔ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⲆⲆΔ === ⵠⵠᐃ.ΔΔΔᐃᐃ) {
          q.unlock.ⵠⵠᐃᐃⵠ[b] = 1;
        } else {
          q.unlock.ⵠⵠᐃᐃⵠ[b] = 0;
        }
      }
      a = ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ;
      b = 0;
      for (; b < a.length; b++) {
        if (ⵠⵠᐃ.ΔΔΔᐃᐃ === a[b].ⲆⲆΔ) {
          q.unlock.ΔⵠᐃⲆⵠ[b] = 1;
        } else {
          q.unlock.ΔⵠᐃⲆⵠ[b] = 0;
        }
      }
      a = ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ⲆⲆΔ === ⵠⵠᐃ.ΔΔΔᐃᐃ) {
          q.unlock.ⲆⵠⲆⲆⵠ[b] = 1;
          q.unlock.ⵠΔΔⲆᐃ[b] = 1;
        } else {
          q.unlock.ⲆⵠⲆⲆⵠ[b] = 0;
          q.unlock.ⵠΔΔⲆᐃ[b] = 0;
        }
      }
    }
    this.waiting = Go;
    this.ᐃᐃᐃⵠⵠⲆⵠ = 0;
    this.ΔⵠⲆⲆⲆᐃᐃ = -1;
    this.ⵠⵠΔⵠᐃΔⵠ = {
      translate: {
        y: 0,
        x: 0
      },
      angle: 0,
      ᐃΔ: Ⲇᐃ[301],
      ΔⵠⲆⲆ: function () {
        this.angle += xx * 2;
        k.save();
        k.translate(this.translate.x + this.ᐃΔ.width / 2, this.translate.y + this.ᐃΔ.height / 2);
        k.rotate(this.angle);
        jp(k, this.ᐃΔ, -this.ᐃΔ.width / 2, -this.ᐃΔ.height / 2);
        k.restore();
      }
    };
    this.ᐃᐃⵠⲆΔᐃⵠ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: 0,
        x: 0
      },
      ᐃΔΔ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ΔᐃⵠᐃⲆ = 0;
    this.ⲆᐃΔᐃⲆⲆΔ = -1;
    this.ᐃᐃΔⲆⵠⲆᐃ = undefined;
    this.ΔⲆⲆᐃⵠⵠᐃ = "";
    this.ⵠⵠⲆⵠᐃⵠᐃ = "";
    this.ⲆⵠⵠΔⵠⲆⲆ = Ho;
    this.ΔⲆᐃⵠⲆ = 0;
    this.ᐃΔⲆⵠᐃΔᐃ = -1;
    this.ⲆΔΔΔⵠⲆᐃ = Kn;
    this.ΔⲆᐃⵠⵠᐃⵠ = 0;
    this.ⲆΔⵠᐃΔⲆⲆ = 0;
    this.ᐃᐃⲆΔᐃⵠⵠ = 0;
    this.ⵠⵠⵠᐃᐃⵠΔ = 0;
    this.ⵠⲆᐃⵠⵠᐃⲆ = 0;
    this.time = 0;
    this.ᐃᐃΔⲆΔ = 0;
    this.ⵠⲆΔⵠⵠⲆⵠ = 0;
    this.ᐃΔⵠⵠᐃⲆⵠ = 0;
    this.ⵠⵠⲆᐃΔⲆⲆ = 0;
    this.ⵠᐃⵠⵠⲆΔΔ = 0;
    this.ⲆⲆⵠΔⵠⵠⵠ = [];
    this.ᐃΔⵠΔⵠ = -1;
    this.ⵠⵠⵠⲆᐃⵠΔ = -1;
    this.ⲆᐃⵠⵠⵠΔⲆ = -1;
    this.ΔΔΔⵠⲆᐃΔ = undefined;
    this.ᐃΔⵠΔΔΔᐃ = Di;
    this.ⵠᐃᐃⵠᐃⲆᐃ = -1;
    this.ⲆΔΔΔⲆΔⵠ = -1;
    this.ⵠⲆᐃᐃⲆΔⵠ = -1;
    this.ΔᐃΔⲆⵠⲆⵠ = -1;
    this.ⲆᐃⵠΔᐃΔᐃ = undefined;
    this.ᐃⲆΔΔΔΔΔ = undefined;
    this.ᐃΔᐃᐃⲆᐃᐃ = undefined;
    this.Ⲇⵠⵠⵠᐃᐃⵠ = ls;
    this.ΔᐃⲆΔⵠΔⵠ = undefined;
    this.ᐃᐃΔⵠⲆⲆⲆ = Fl;
    this.ΔⲆⲆⲆⵠΔΔ = undefined;
    this.ⵠⲆⲆⵠⲆⵠⵠ = Ak;
    this.ᐃⲆᐃⲆΔᐃⲆ = undefined;
    this.ᐃⲆⵠΔⵠΔⲆ = 3;
    this.ΔᐃΔᐃ = 0;
    this.ⲆⵠⵠᐃᐃΔⲆⲆᐃ = Ol;
    this.ᐃᐃⵠΔⵠ = ᐃᐃⲆⵠ.get("starve_quality") ? ᐃᐃⲆⵠ.get("starve_quality") : "high";
    if (this.ᐃᐃⵠΔⵠ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ᐃᐃⵠΔⵠ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ᐃᐃⵠΔⵠ = 0;
    }
    this.ⲆⵠᐃᐃⲆⵠᐃⵠⵠ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ᐃᐃⲆⵠ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      sx.ⵠΔΔᐃⲆⵠᐃ();
      mx.ᐃᐃⵠΔⵠ = 1;
    };
    this.ⲆⵠΔⵠⵠⵠΔᐃⲆ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ᐃᐃⲆⵠ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (Aq / Cq);
      sx.ⵠΔΔᐃⲆⵠᐃ();
      mx.ᐃᐃⵠΔⵠ = 0;
    };
    if (ᐃᐃⲆⵠ.get("starve_mapping") === undefined && dr === "FR") {
      ux.ΔᐃⲆΔᐃΔΔ();
      this.mapping = "azerty";
    } else {
      this.mapping = ᐃᐃⲆⵠ.get("starve_mapping") ? ᐃᐃⲆⵠ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      ux.ΔᐃⲆΔᐃΔΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ΔᐃⲆΔᐃΔΔ = function () {
      ux.ΔᐃⲆΔᐃΔΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ᐃᐃⲆⵠ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ΔⵠⲆΔⵠⵠᐃ = function () {
      ux.ΔⵠⲆΔⵠⵠᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ᐃᐃⲆⵠ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⲆⵠⵠⲆⲆⲆⲆ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ᐃΔΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ⵠᐃⵠⲆ = [];
    this.unlock.ⵠⵠᐃᐃⵠ = [];
    this.unlock.ΔⵠᐃⲆⵠ = [];
    this.unlock.ⲆⵠⲆⲆⵠ = [];
    this.unlock.ⵠΔΔⲆᐃ = [];
    this.unlock.ᐃΔⵠⲆᐃ = [];
    this.ⵠᐃⲆⵠΔⲆΔ = 0;
    this.ⵠΔⵠⲆⲆΔΔ = a;
    a();
    this.ⲆΔᐃⵠⲆ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ᐃΔΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var i;
    var o = 0;
    function r() {
      q.ᐃΔΔ();
      if (++o == 30) {
        q.ⲆⲆΔΔⲆⵠΔ();
        q.ᐃᐃᐃⵠⵠⲆⵠ = Rj;
        q.ᐃΔΔ();
        return;
      }
      za.setTimeout(r, 33);
    }
    this.ⲆⲆⲆⵠᐃ = function (a) {
      i = a;
      q.ⵠⲆⵠΔᐃᐃΔ();
      q.ᐃᐃᐃⵠⵠⲆⵠ = 0;
      l = -1;
      t();
    };
    var l = -1;
    function t() {
      q.ᐃΔΔ();
      if (++l == 30) {
        ᐃᐃⲆⵠ.set("starve_nickname", q.ⵠΔᐃΔⲆ.input.value, {
          expires: 30
        });
        q.ⵠΔᐃΔⲆ.style.display = "none";
        q.ⵠᐃⵠᐃⲆ.style.display = "none";
        q.ᐃᐃⵠⲆΔᐃⵠ.style.display = "none";
        q.ⲆⵠⵠⲆⲆⲆⲆ.style.display = "none";
        q.ⲆΔᐃⵠⲆ.style.display = "none";
        q.stop();
        i();
        return;
      }
      za.setTimeout(t, 33);
    }
    this.ΔᐃᐃᐃΔ = false;
    this.stop = function () {
      this.ΔᐃᐃᐃΔ = false;
    };
    this.ⲆᐃΔᐃⲆ = function () {
      Gx();
      document.getElementById("game_body").style.backgroundColor = Sr.ᐃᐃⲆⲆⲆ[ox.time];
      q.ⵠΔᐃΔⲆ.style.display = "inline-block";
      q.ⵠᐃⵠᐃⲆ.style.display = "inline-block";
      q.ᐃᐃⵠⲆΔᐃⵠ.style.display = "inline-block";
      q.ⲆⵠⵠⲆⲆⲆⲆ.style.display = "inline-block";
      q.ⲆΔᐃⵠⲆ.style.display = "inline-block";
      q.waiting = Go;
      q.ΔᐃᐃᐃΔ = On;
      l = -1;
      o = 0;
      r();
    };
    this.ᐃΔᐃΔᐃΔⵠ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & da) === da) {
        if ((a.position & _) === _) {
          a.translate.x = $n + a.translate.ⲆⲆᐃⲆΔ - b;
        } else if ((a.position & aa) === aa) {
          a.translate.x = $n + a.translate.ⲆⲆᐃⲆΔ + b;
        } else {
          a.translate.x = $n + a.translate.ⲆⲆᐃⲆΔ;
        }
      } else if (_ === (a.position & _)) {
        a.translate.x = a.translate.ⲆⲆᐃⲆΔ - b;
      } else if (aa === (a.position & aa)) {
        a.translate.x = Sn - a.translate.ⲆⲆᐃⲆΔ + b;
      } else {
        a.translate.x = a.translate.ⲆⲆᐃⲆΔ;
      }
      if (ea === (a.position & ea)) {
        if ((a.position & ba) === ba) {
          a.translate.y = _n + a.translate.ᐃⵠⲆⲆᐃ - b;
        } else if (ca === (a.position & ca)) {
          a.translate.y = _n + a.translate.ᐃⵠⲆⲆᐃ + b;
        } else {
          a.translate.y = _n + a.translate.ᐃⵠⲆⲆᐃ;
        }
      } else if (ba === (a.position & ba)) {
        a.translate.y = a.translate.ᐃⵠⲆⲆᐃ - b;
      } else if ((a.position & ca) === ca) {
        a.translate.y = Zn + a.translate.ᐃⵠⲆⲆᐃ + b;
      } else {
        a.translate.y = a.translate.ᐃⵠⲆⲆᐃ;
      }
      if (Ho !== a.style) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ᐃΔΔ = function () {
      var a = 0;
      if (o != 30 || l != -1) {
        if (o != 30) {
          a = 1500 / (o + 1) - 50;
        }
        if (l != -1) {
          a = -(1750 / (30 - l + 1) - 48);
        }
      }
      for (var b = 0; b < this.ⵠᐃᐃⵠ.length; b++) {
        this.ᐃΔᐃΔᐃΔⵠ(this.ⵠᐃᐃⵠ[b], a);
      }
      for (b = 0; this.buttons.length > b; b++) {
        this.ᐃΔᐃΔᐃΔⵠ(this.buttons[b].info, a);
      }
      for (b = 0; b < this.ⲆᐃⲆⲆᐃ.length; b++) {
        this.ᐃΔᐃΔᐃΔⵠ(this.ⲆᐃⲆⲆᐃ[b], a);
      }
      this.ⵠⵠΔⵠᐃΔⵠ.translate.x = (Sn - this.ⵠⵠΔⵠᐃΔⵠ.ᐃΔ.width) / 2;
      this.ⵠⵠΔⵠᐃΔⵠ.translate.y = 0;
      this.ᐃᐃⵠⲆΔᐃⵠ.translate.x = Sn - 450;
      this.ᐃᐃⵠⲆΔᐃⵠ.translate.y = Zn - 40;
      this.ⲆⵠⵠⲆⲆⲆⲆ.translate.x = Sn - 340;
      this.ⲆⵠⵠⲆⲆⲆⲆ.translate.y = Zn - 25;
      this.ⲆΔᐃⵠⲆ.translate.x = Sn - 320;
      this.ⲆΔᐃⵠⲆ.translate.y = 80;
      if (o != 30 || l != -1) {
        var c = 0;
        if (o != 30) {
          c = 1500 / (o + 1) - 50;
        }
        if (l != -1) {
          c = -(1750 / (30 - l + 1) - 48);
        }
        this.ⵠⵠΔⵠᐃΔⵠ.translate.y -= c > 0 ? c : -c;
        this.ᐃᐃⵠⲆΔᐃⵠ.translate.y -= c < 0 ? c : -c;
        this.ⲆⵠⵠⲆⲆⲆⲆ.translate.y -= c < 0 ? c : -c;
      }
      this.ᐃᐃⵠⲆΔᐃⵠ.ᐃΔΔ();
      this.ⲆⵠⵠⲆⲆⲆⲆ.ᐃΔΔ();
      this.ⲆΔᐃⵠⲆ.ᐃΔΔ();
    };
    this.ⲆΔᐃⵠⲆᐃᐃ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; f < b.length; f++) {
        var g = b[f][0];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, In);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ⲆᐃΔⲆᐃᐃⲆᐃᐃ = function () {
      this.ΔⲆⲆᐃⵠⵠᐃ = document.getElementById("account_nickname_input").value;
      if (this.ⵠⵠⲆⵠᐃⵠᐃ !== this.ΔⲆⲆᐃⵠⵠᐃ) {
        this.ⵠⵠⲆⵠᐃⵠᐃ = this.ΔⲆⲆᐃⵠⵠᐃ;
        this.ⲆⵠⵠΔⵠⲆⲆ = bf(this.ΔⲆⲆᐃⵠⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ΔⵠⲆⲆ = function () {
      Cp();
      mx.ΔⲆᐃⵠⵠᐃⵠ = ᐃⵠⲆΔ.ᐃᐃⵠⵠᐃΔΔ(mx.ΔⲆᐃⵠⵠᐃⵠ, mx.ⲆΔⵠᐃΔⲆⲆ, 0.03);
      this.ⵠᐃᐃⵠ[ᐃΔΔⲆⵠᐃΔ].translate.x = this.ⵠᐃᐃⵠ[0].translate.x + -72 + mx.ΔⲆᐃⵠⵠᐃⵠ * 165;
      this.ⵠᐃᐃⵠ[ᐃΔΔⲆⵠᐃΔ].translate.ⲆⲆᐃⲆΔ = this.ⵠᐃᐃⵠ[ᐃΔΔⲆⵠᐃΔ].translate.x;
      this.ⵠᐃᐃⵠ[ᐃΔΔⲆⵠᐃΔ].translate.y = this.ⵠᐃᐃⵠ[0].translate.y + 30;
      this.ⵠᐃᐃⵠ[ᐃΔΔⲆⵠᐃΔ].translate.ᐃⵠⲆⲆᐃ = this.ⵠᐃᐃⵠ[ᐃΔΔⲆⵠᐃΔ].translate.y;
      for (var b = 2; this.ⵠᐃᐃⵠ.length > b; b++) {
        if (ka === this.ⵠᐃᐃⵠ[b].active) {
          this.ⵠᐃᐃⵠ[b].ΔⵠⲆⲆ(k);
        }
      }
      var n = this.ᐃΔⵠΔⵠ - Date.now();
      if (n > 0) {
        var p = Math.floor(n / 60000);
        var t = Math.floor(p / 60);
        p %= 60;
        if (this.ⲆᐃⵠⵠⵠΔⲆ !== p) {
          this.ⲆᐃⵠⵠⵠΔⲆ = p;
          p = p < 10 ? "0" + p : "" + p;
          q.ΔΔΔⵠⲆᐃΔ = bf(p, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (t !== this.ⵠⵠⵠⲆᐃⵠΔ) {
          this.ⵠⵠⵠⲆᐃⵠΔ = t;
          t = t < 10 ? "0" + t : "" + t;
          q.ᐃΔⵠΔΔΔᐃ = bf(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (W = this.ⵠᐃᐃⵠ[ⲆᐃⲆΔᐃⵠⲆ]).ΔⵠⲆⲆ(k);
        var x = this.ᐃΔⵠΔΔΔᐃ;
        jp(k, x, W.translate.x - x.width / 4 + 182, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
        x = this.ΔΔΔⵠⲆᐃΔ;
        jp(k, x, W.translate.x - x.width / 4 + 251, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
      }
      if ((n = this.ⵠᐃᐃⵠᐃⲆᐃ - Date.now()) > 0) {
        p = Math.floor(n / 60000);
        t = Math.floor(p / 60);
        var W;
        var X = Math.floor(t / 24);
        p %= 60;
        t %= 24;
        if (this.ΔᐃΔⲆⵠⲆⵠ !== p) {
          this.ΔᐃΔⲆⵠⲆⵠ = p;
          p = p < 10 ? "0" + p : "" + p;
          q.ⲆᐃⵠΔᐃΔᐃ = bf(p, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⵠⲆᐃᐃⲆΔⵠ !== t) {
          this.ⵠⲆᐃᐃⲆΔⵠ = t;
          t = t < 10 ? "0" + t : "" + t;
          q.ᐃⲆΔΔΔΔΔ = bf(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (X !== this.ⲆΔΔΔⲆΔⵠ) {
          this.ⲆΔΔΔⲆΔⵠ = X;
          X = X < 10 ? "0" + X : "" + X;
          q.ᐃΔᐃᐃⲆᐃᐃ = bf(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (W = this.ⵠᐃᐃⵠ[ⵠⵠⵠΔΔᐃΔ]).ΔⵠⲆⲆ(k);
        x = this.ᐃΔᐃᐃⲆᐃᐃ;
        jp(k, x, W.translate.x - x.width / 4 + 113, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
        x = this.ᐃⲆΔΔΔΔΔ;
        jp(k, x, W.translate.x - x.width / 4 + 182, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
        x = this.ⲆᐃⵠΔᐃΔᐃ;
        jp(k, x, W.translate.x - x.width / 4 + 251, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
      }
      if ((this.ΔⵠⲆⲆᐃ & K) === K) {
        this.buttons[ⵠᐃᐃⲆᐃⲆⲆ].info.state = gf;
      } else if ((this.ΔⵠⲆⲆᐃ & w) === w) {
        this.buttons[ⲆⵠᐃᐃΔⵠⲆ].info.state = gf;
      } else if ((this.ΔⵠⲆⲆᐃ & L) === L) {
        this.buttons[ⲆΔⵠⲆⲆΔᐃ].info.state = gf;
      } else if (c === (this.ΔⵠⲆⲆᐃ & c)) {
        this.buttons[ΔᐃΔⵠΔⲆⲆ].info.state = gf;
      } else if ((this.ΔⵠⲆⲆᐃ & f) === f) {
        this.buttons[ᐃⵠᐃΔᐃΔⵠ].info.state = gf;
      } else if ((this.ΔⵠⲆⲆᐃ & m) === m) {
        this.buttons[ⵠⵠⵠᐃⵠᐃᐃ].info.state = gf;
      } else if ((this.ΔⵠⲆⲆᐃ & N) === N || A === (this.ΔⵠⲆⲆᐃ & A) || (this.ΔⵠⲆⲆᐃ & J) === J || B === (this.ΔⵠⲆⲆᐃ & B) || D === (this.ΔⵠⲆⲆᐃ & D) || (this.ΔⵠⲆⲆᐃ & E) === E || (this.ΔⵠⲆⲆᐃ & I) === I) {
        this.buttons[ΔᐃⵠⲆΔᐃΔ].info.state = gf;
      } else if (M === (this.ΔⵠⲆⲆᐃ & M) || Q === (this.ΔⵠⲆⲆᐃ & Q) || P === (this.ΔⵠⲆⲆᐃ & P) || (this.ΔⵠⲆⲆᐃ & F) === F || (this.ΔⵠⲆⲆᐃ & R) === R || (this.ΔⵠⲆⲆᐃ & j) === j) {
        this.buttons[ⲆΔⵠⲆⲆΔᐃ].info.state = gf;
      } else if ((this.ΔⵠⲆⲆᐃ & O) === O || (this.ΔⵠⲆⲆᐃ & H) === H || (this.ΔⵠⲆⲆᐃ & T) === T) {
        this.buttons[ⲆᐃΔⵠΔⵠᐃ].info.state = gf;
      } else if (U === (this.ΔⵠⲆⲆᐃ & U)) {
        this.buttons[ΔᐃΔⵠΔⲆⲆ].info.state = gf;
      }
      if ((this.ΔⵠⲆⲆᐃ & w) === w) {
        if (this.ΔⵠᐃᐃᐃⲆⲆ === this.ΔⲆⲆⲆⵠΔΔ) {
          this.ᐃᐃΔⵠⲆⲆⲆ = this.ΔΔⲆⲆⵠⲆⵠ;
          this.buttons[this.ΔΔⲆⲆⵠⲆⵠ].info.active = ja;
          this.buttons[this.ⲆΔⲆΔᐃⵠⵠ].info.active = ja;
          this.buttons[this.ΔᐃⵠⲆᐃΔⵠ].info.active = ja;
        } else {
          this.buttons[this.ΔΔⲆⲆⵠⲆⵠ].info.active = ka;
          this.buttons[this.ⲆΔⲆΔᐃⵠⵠ].info.active = ka;
          this.buttons[this.ΔᐃⵠⲆᐃΔⵠ].info.active = ka;
        }
        if (this.ᐃΔⲆⲆᐃⵠⲆ === this.ΔⲆⲆⲆⵠΔΔ) {
          this.buttons[this.ᐃΔⲆⲆᐃⵠⲆ].info.state = gf;
        } else if (this.ΔΔⵠΔⵠᐃⲆ === this.ΔⲆⲆⲆⵠΔΔ) {
          this.buttons[this.ΔΔⵠΔⵠᐃⲆ].info.state = gf;
        } else if (this.ΔⲆⲆⲆⵠΔΔ === this.ΔⵠᐃᐃᐃⲆⲆ) {
          this.buttons[this.ΔⵠᐃᐃᐃⲆⲆ].info.state = gf;
        } else if (this.ᐃᐃΔᐃⲆⵠᐃ === this.ΔⲆⲆⲆⵠΔΔ) {
          this.buttons[this.ᐃᐃΔᐃⲆⵠᐃ].info.state = gf;
        } else if (this.ΔΔⵠⲆⵠⲆΔ === this.ΔⲆⲆⲆⵠΔΔ) {
          this.buttons[this.ΔΔⵠⲆⵠⲆΔ].info.state = gf;
        }
        if (this.ᐃᐃΔⵠⲆⲆⲆ === this.ΔΔⲆⲆⵠⲆⵠ) {
          this.buttons[this.ΔΔⲆⲆⵠⲆⵠ].info.state = gf;
        } else if (this.ᐃᐃΔⵠⲆⲆⲆ === this.ⲆΔⲆΔᐃⵠⵠ) {
          this.buttons[this.ⲆΔⲆΔᐃⵠⵠ].info.state = gf;
        } else if (this.ᐃᐃΔⵠⲆⲆⲆ === this.ΔᐃⵠⲆᐃΔⵠ) {
          this.buttons[this.ΔᐃⵠⲆᐃΔⵠ].info.state = gf;
        }
        if (this.ⵠⲆⲆⵠⲆⵠⵠ === this.ⲆᐃΔⵠⵠᐃᐃ) {
          this.buttons[this.ⲆᐃΔⵠⵠᐃᐃ].info.state = gf;
        } else if (this.ⵠⲆⲆⵠⲆⵠⵠ === this.ᐃΔⵠⲆⵠⵠⲆ) {
          this.buttons[this.ᐃΔⵠⲆⵠⵠⲆ].info.state = gf;
        } else if (this.ΔⵠΔⵠⵠⲆΔ === this.ⵠⲆⲆⵠⲆⵠⵠ) {
          this.buttons[this.ΔⵠΔⵠⵠⲆΔ].info.state = gf;
        }
        if (this.ⲆᐃᐃⲆᐃⲆⲆ === this.ᐃⲆᐃⲆΔᐃⲆ) {
          this.buttons[this.ⲆᐃᐃⲆᐃⲆⲆ].info.state = gf;
        } else if (this.ⲆⵠᐃⵠⲆⵠᐃ === this.ᐃⲆᐃⲆΔᐃⲆ) {
          this.buttons[this.ⲆⵠᐃⵠⲆⵠᐃ].info.state = gf;
        } else if (this.ΔᐃΔⵠΔᐃⵠ === this.ᐃⲆᐃⲆΔᐃⲆ) {
          this.buttons[this.ΔᐃΔⵠΔᐃⵠ].info.state = gf;
        } else if (this.ⲆⲆⲆᐃⵠᐃⵠ === this.ᐃⲆᐃⲆΔᐃⲆ) {
          this.buttons[this.ⲆⲆⲆᐃⵠᐃⵠ].info.state = gf;
        } else if (this.ᐃΔᐃΔΔⵠᐃ === this.ᐃⲆᐃⲆΔᐃⲆ) {
          this.buttons[this.ᐃΔᐃΔΔⵠᐃ].info.state = gf;
        } else if (this.ⲆⲆⲆⲆΔⲆΔ === this.ᐃⲆᐃⲆΔᐃⲆ) {
          this.buttons[this.ⲆⲆⲆⲆΔⲆΔ].info.state = gf;
        }
      }
      if (c === (this.ΔⵠⲆⲆᐃ & c)) {
        if (this.ΔⵠⲆⲆⲆᐃᐃ === -1) {
          this.buttons[Da].info.state = gf;
        } else if (this.ΔⵠⲆⲆⲆᐃᐃ === 0) {
          this.buttons[Ea].info.state = gf;
        } else if (this.ΔⵠⲆⲆⲆᐃᐃ === 2) {
          this.buttons[Ga].info.state = gf;
        } else if (this.ΔⵠⲆⲆⲆᐃᐃ === 3) {
          this.buttons[Ha].info.state = gf;
        } else if (this.ΔⵠⲆⲆⲆᐃᐃ === 4) {
          this.buttons[Fa].info.state = gf;
        }
        if (this.ᐃⲆⵠΔⵠΔⲆ === 0) {
          this.buttons[va].info.state = gf;
        } else if (this.ᐃⲆⵠΔⵠΔⲆ === 1) {
          this.buttons[wa].info.state = gf;
        } else if (this.ᐃⲆⵠΔⵠΔⲆ === 2) {
          this.buttons[xa].info.state = gf;
        } else if (this.ᐃⲆⵠΔⵠΔⲆ === 3) {
          this.buttons[ya].info.state = gf;
        } else if (this.ᐃⲆⵠΔⵠΔⲆ === 4) {
          this.buttons[Ba].info.state = gf;
        } else if (this.ᐃⲆⵠΔⵠΔⲆ === 5) {
          this.buttons[Ca].info.state = gf;
        }
      }
      if ((this.ΔⵠⲆⲆᐃ & K) === K && ΔⵠⲆⵠ.ᐃⵠᐃΔⲆⲆⵠ === 0) {
        if (this.buttons[oa].ⵠᐃⵠⵠⲆⵠⲆ(vx.ⵠΔⵠΔ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + xx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - xx * 1.5);
        }
        if (this.buttons[pa].ⵠᐃⵠⵠⲆⵠⲆ(vx.ⵠΔⵠΔ)) {
          this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + xx * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - xx * 1.5);
        }
        if (this.buttons[qa].ⵠᐃⵠⵠⲆⵠⲆ(vx.ⵠΔⵠΔ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + xx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - xx * 1.5);
        }
        if (this.buttons[ta].ⵠᐃⵠⵠⲆⵠⲆ(vx.ⵠΔⵠΔ)) {
          this.buttons[ta].hint = Math.min(1, this.buttons[ta].hint + xx * 1.5);
        } else {
          this.buttons[ta].hint = Math.max(0, this.buttons[ta].hint - xx * 1.5);
        }
        if (this.buttons[ra].ⵠᐃⵠⵠⲆⵠⲆ(vx.ⵠΔⵠΔ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + xx * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - xx * 1.5);
        }
        if (this.buttons[sa].ⵠᐃⵠⵠⲆⵠⲆ(vx.ⵠΔⵠΔ)) {
          this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + xx * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - xx * 1.5);
        }
      }
      var Y = 1;
      if ((this.ΔⵠⲆⲆᐃ & (A | J | B | D | E | I)) > 1) {
        x = Δᐃ.ΔⲆⲆᐃᐃᐃⲆ;
        k.save();
        k.translate($n, na + x.height / 4);
        if (this.ⵠⵠΔⲆⵠ === 1) {
          this.ᐃᐃⲆⵠΔΔΔ += xx / 3;
          Y = this.ΔⵠⵠᐃΔᐃΔ - 100 / Math.pow(1 + this.ᐃᐃⲆⵠΔΔΔ, 1 + this.ᐃᐃⲆⵠΔΔΔ);
          k.rotate(Y);
        }
        jp(k, x, -x.width / 4, -x.height / 4, x.width / 2, x.height / 2);
        k.restore();
      }
      if (ΔⵠⲆⵠ.ᐃⵠᐃΔⲆⲆⵠ === 0) {
        if (ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ === 0) {
          this.buttons[oa].info.state = gf;
        } else if (ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ === 4) {
          this.buttons[pa].info.state = gf;
        } else if (ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ === 2) {
          this.buttons[ra].info.state = gf;
        } else if (ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ === 3) {
          this.buttons[sa].info.state = gf;
        } else if (ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ === 6) {
          this.buttons[qa].info.state = gf;
        } else if (ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ === 7) {
          this.buttons[ta].info.state = gf;
        }
      }
      for (b = 1; this.buttons.length > b; b++) {
        if (this.buttons[b].info.active === ka) {
          this.buttons[b].ΔⵠⲆⲆ(k);
        }
      }
      this.ⵠᐃᐃⵠ[0].ΔⵠⲆⲆ(k);
      if ((this.ΔⵠⲆⲆᐃ & (S | G)) > 0) {
        x = this.ⲆⵠⵠΔⵠⲆⲆ;
        jp(k, x, $n - x.width / 4, 138, x.width / 2, x.height / 2);
      }
      var Z = Math.max(1, Math.min(18, Math.floor((mx.ΔⲆᐃⵠⲆ + 3) / 2)));
      this.ⵠᐃᐃⵠ[Z].active = ka;
      this.ⵠᐃᐃⵠ[Z].ΔⵠⲆⲆ(k);
      this.ⵠᐃᐃⵠ[Z].active = ja;
      this.buttons[0].ΔⵠⲆⲆ(k);
      if ((this.ΔⵠⲆⲆᐃ & (L | Q | F | M | R)) > 1) {
        var g = (this.ΔⵠⲆⲆᐃ & (Q | F | M | R)) > 1 ? -190 : 0;
        x = Ⲇᐃ[29][this.ⵠⵠᐃᐃⵠ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 + g, 183, x.width / 2, x.height / 2);
        this.ΔᐃΔᐃ = (this.ΔᐃΔᐃ + xx * 1000) % 2000;
        var u = (this.ΔᐃΔᐃ < 1000) * 4.5 ? this.ΔᐃΔᐃ / 1000 : (2000 - this.ΔᐃΔᐃ) / 1000;
        x = Ⲇᐃ[28][this.ΔⵠᐃⲆⵠ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 - 62 + u + g, 240, x.width / 2, x.height / 2);
        x = Ⲇᐃ[7][this.ⵠᐃⵠⲆ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 - 54 + u + g, 272, x.width / 2, x.height / 2);
        jp(k, x, $n - x.width / 4 + 54 - u + g, 272, x.width / 2, x.height / 2);
        x = Ⲇᐃ[255][this.ⵠᐃⵠⲆ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 + g, 222, x.width / 2, x.height / 2);
        x = Ⲇᐃ[796][this.ᐃΔⵠⲆᐃ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 + g, 222, x.width / 2, x.height / 2);
      }
      if (L === (this.ΔⵠⲆⲆᐃ & L)) {
        x = Ⲇᐃ[250][this.ⲆⵠⲆⲆⵠ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 - 61, 406 - x.height / 4, x.width / 2, x.height / 2);
        x = Ⲇᐃ[250][this.ⵠΔΔⲆᐃ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 + 53, 406 - x.height / 4, x.width / 2, x.height / 2);
      }
      if (P === (this.ΔⵠⲆⲆᐃ & P)) {
        x = Ⲇᐃ[250][this.ⵠΔΔⲆᐃ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 - 200, 268 - x.height / 4, x.width / 2, x.height / 2);
      }
      if (j === (this.ΔⵠⲆⲆᐃ & j)) {
        x = Ⲇᐃ[250][this.ⲆⵠⲆⲆⵠ][this.ⵠᐃⲆⵠΔⲆΔ];
        jp(k, x, $n - x.width / 4 - 200, 268 - x.height / 4, x.width / 2, x.height / 2);
      }
      if ((this.ΔⵠⲆⲆᐃ & (Q | F | M | R | P | j)) > 1) {
        for (b = 1; b < this.buttons.length; b++) {
          if ((this.buttons[b].view & this.ΔⵠⲆⲆᐃ) !== 0) {
            var _ = this.buttons[b].info;
            if (_.ⵠⵠᐃΔᐃΔΔ >= 0) {
              x = _.ⵠⲆᐃⲆⲆᐃᐃᐃΔ[_.ⵠⵠᐃΔᐃΔΔ].Δᐃⵠ;
              jp(k, x, _.translate.x - x.width / 8 + 44.5, _.translate.y - x.height / 8 + 45.5, x.width / 4, x.height / 4);
              if (_.ᐃⵠΔΔⲆΔᐃ !== 1) {
                x = Δᐃ.ⲆⵠⲆⲆᐃΔⲆ;
                jp(k, x, _.translate.x - x.width / 4 + 44.5, _.translate.y - x.height / 4 + 44.5, x.width / 2, x.height / 2);
              }
            }
          }
        }
        x = this.Ⲇⵠⵠⵠᐃᐃⵠ;
        jp(k, x, $n - 312, 375, x.width / 2, x.height / 2);
        x = this.ΔᐃⲆΔⵠΔⵠ;
        jp(k, x, $n - 312, 395, x.width / 2, x.height / 2);
      }
      if (this.ΔᐃⵠᐃⲆ !== this.ⲆᐃΔᐃⲆⲆΔ) {
        this.ⲆᐃΔᐃⲆⲆΔ = this.ΔᐃⵠᐃⲆ;
        this.ᐃᐃΔⲆⵠⲆᐃ = bf("" + this.ΔᐃⵠᐃⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      jp(k, this.ᐃᐃΔⲆⵠⲆᐃ, this.ⵠᐃᐃⵠ[0].translate.x + 350, 15, this.ᐃᐃΔⲆⵠⲆᐃ.w2, this.ᐃᐃΔⲆⵠⲆᐃ.ⵠⲆⵠⵠⲆ);
      if (this.ΔⲆᐃⵠⲆ !== this.ᐃΔⲆⵠᐃΔᐃ) {
        this.ᐃΔⲆⵠᐃΔᐃ = this.ΔⲆᐃⵠⲆ;
        this.ⲆΔΔΔⵠⲆᐃ = bf("LVL " + (this.ΔⲆᐃⵠⲆ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, Di, undefined, Es, at, "#3F3019", 20);
      }
      jp(k, this.ⲆΔΔΔⵠⲆᐃ, this.ⵠᐃᐃⵠ[0].translate.x + 94, 0, this.ⲆΔΔΔⵠⲆᐃ.w2, this.ⲆΔΔΔⵠⲆᐃ.ⵠⲆⵠⵠⲆ);
      if (ΔⵠⲆⵠ.ᐃⵠᐃΔⲆⲆⵠ === 0) {
        var aa = this.buttons[oa].hint;
        if (aa > 0) {
          x = Δᐃ.ⵠⲆᐃⲆΔⵠΔ;
          jp(k, x, $n - x.width / 4, -36 - ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(1 - aa) * x.height / 2, x.width / 2, x.height / 2);
        }
        aa = this.buttons[pa].hint;
        if (aa > 0) {
          x = Δᐃ.Δᐃᐃⵠᐃᐃᐃ;
          jp(k, x, $n - x.width / 4, -36 - ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(1 - aa) * x.height / 2, x.width / 2, x.height / 2);
        }
        if ((aa = this.buttons[qa].hint) > 0) {
          x = Δᐃ.ᐃᐃⵠⵠⲆⲆΔ;
          jp(k, x, $n - x.width / 4, -36 - ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(1 - aa) * x.height / 2, x.width / 2, x.height / 2);
        }
        if ((aa = this.buttons[ta].hint) > 0) {
          x = Δᐃ.ᐃΔⵠᐃΔᐃᐃ;
          jp(k, x, $n - x.width / 4, -36 - x.height * ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(1 - aa) / 2, x.width / 2, x.height / 2);
        }
        if ((aa = this.buttons[sa].hint) > 0) {
          x = Δᐃ.ΔΔⲆⲆⲆⲆΔ;
          jp(k, x, $n - x.width / 4, -36 - x.height * ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(1 - aa) / 2, x.width / 2, x.height / 2);
        }
        aa = this.buttons[ra].hint;
        if (aa > 0) {
          x = Δᐃ.ΔΔⵠⵠⲆⲆⲆ;
          jp(k, x, $n - x.width / 4, -36 - x.height * ᐃⵠⲆΔ.ⲆⵠⲆⵠⵠ(1 - aa) / 2, x.width / 2, x.height / 2);
        }
      }
      if (this.ⵠⵠΔⲆⵠ === 1 && Math.abs(Y - this.ΔⵠⵠᐃΔᐃΔ) < 0.006) {
        k.globalAlpha = Math.min(1, this.ⵠⵠⵠΔΔΔᐃ * 3);
        x = Δᐃ.ᐃⵠΔⵠᐃⵠᐃ;
        k.save();
        k.translate($n, 260);
        this.ⵠⵠⵠΔΔΔᐃ += xx;
        k.rotate(this.ⵠⵠⵠΔΔΔᐃ);
        jp(k, x, -x.width / 2, -x.height / 2, x.width, x.height);
        k.restore();
        u = 1.05 + Math.cos(this.ⵠⵠⵠΔΔΔᐃ * 5) * 0.05;
        if (this.ⲆᐃⵠⲆᐃⵠᐃ === 0) {
          var ba = (x = ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[this.ⲆᐃⵠᐃⲆⲆΔ].Δᐃⵠ).width * u;
          var ca = u * x.height;
          jp(k, x, $n - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ⲆᐃⵠⲆᐃⵠᐃ === 1) {
          ba = u * (x = ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[0].Δᐃⵠ).width;
          ca = u * x.height;
          jp(k, x, $n - ba / 2, 260 - ca / 2, ba, ca);
          ba = (x = ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ[this.ⲆᐃⵠᐃⲆⲆΔ].Δᐃⵠ).width * u;
          ca = x.height * u;
          jp(k, x, $n - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ⲆᐃⵠⲆᐃⵠᐃ === 2) {
          ba = (x = ⵠᐃⵠⵠ.ᐃᐃⵠΔ[this.ⲆᐃⵠᐃⲆⲆΔ].Δᐃⵠ).width * u;
          ca = x.height * u;
          jp(k, x, $n - ba / 2, 180 - ca / 2, ba, ca);
          ba = (x = ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[0].Δᐃⵠ).width * u;
          ca = u * x.height;
          jp(k, x, $n - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ⲆᐃⵠⲆᐃⵠᐃ === 3) {
          ba = (x = ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ[this.ⲆᐃⵠᐃⲆⲆΔ].Δᐃⵠ).width * u;
          ca = u * x.height;
          k.save();
          k.translate($n, 260);
          k.rotate(Math.PI);
          jp(k, x, -ba / 2, -ca / 2, ba, ca);
          k.restore();
        } else if (this.ⲆᐃⵠⲆᐃⵠᐃ === 4) {
          ba = (x = ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ[this.ⲆᐃⵠᐃⲆⲆΔ].Δᐃⵠ).width * u;
          ca = x.height * u;
          jp(k, x, $n - ba / 2, 260 - ca / 2, ba, ca);
        }
        x = this.ⵠΔΔⲆⲆᐃΔ;
        jp(k, x, $n - x.width / 4, 340, x.width / 2, x.height / 2);
        x = this.ⲆᐃⵠᐃΔⲆⵠ;
        jp(k, x, $n - x.width / 4, 365, x.width / 2, x.height / 2);
        if (this.ⵠⵠⵠΔΔΔᐃ > 6) {
          this.ⵠⵠΔⲆⵠ = 0;
          V(N);
        }
        k.globalAlpha = 1;
      }
      qx.alert.ΔⵠⲆⲆ("#FFF", "#000");
      if (q.waiting) {
        this.ⵠⵠΔⵠᐃΔⵠ.ΔⵠⲆⲆ();
      }
    };
    var u = 0;
    var K = Math.pow(2, u++);
    var c = Math.pow(2, u++);
    this.ΔⵠΔΔᐃ = c;
    var m = Math.pow(2, u++);
    var L = Math.pow(2, u++);
    var N = Math.pow(2, u++);
    var f = Math.pow(2, u++);
    var w = Math.pow(2, u++);
    var v = Math.pow(2, u++);
    this.ⲆΔΔᐃᐃ = v;
    var y = Math.pow(2, u++);
    var x = Math.pow(2, u++);
    var A = Math.pow(2, u++);
    var J = Math.pow(2, u++);
    var B = Math.pow(2, u++);
    var D = Math.pow(2, u++);
    var E = Math.pow(2, u++);
    var I = Math.pow(2, u++);
    var M = Math.pow(2, u++);
    var P = Math.pow(2, u++);
    var Q = Math.pow(2, u++);
    var F = Math.pow(2, u++);
    var R = Math.pow(2, u++);
    var j = Math.pow(2, u++);
    var G = Math.pow(2, u++);
    var S = Math.pow(2, u++);
    var O = Math.pow(2, u++);
    this.ⵠᐃΔⵠⲆ = O;
    var H = Math.pow(2, u++);
    this.ᐃⵠⲆΔⵠ = H;
    var T = Math.pow(2, u++);
    this.ΔⵠΔⵠⲆ = T;
    var U = Math.pow(2, u++);
    function z(a, b, c) {
      for (var d = 0; d < q.ⵠᐃᐃⵠ.length; d++) {
        if ((q.ⵠᐃᐃⵠ[d].view & a) !== 0) {
          q.ⵠᐃᐃⵠ[d].active = b;
        }
      }
      for (d = 0; q.buttons.length > d; d++) {
        if (q.buttons[d].view & a) {
          q.buttons[d].info.active = b;
        }
      }
      for (d = 0; d < q.ⲆᐃⲆⲆᐃ.length; d++) {
        if (q.ⲆᐃⲆⲆᐃ[d].view & a) {
          q.ⲆᐃⲆⲆᐃ[d].style.display = c;
        }
      }
    }
    this.ΔⵠⲆⲆᐃ = K;
    function C() {
      var b = Number(ᐃᐃⲆⵠ.get("starve_crate"));
      var c = Number(ᐃᐃⲆⵠ.get("starve_dead"));
      var d = Number(ᐃᐃⲆⵠ.get("starve_book"));
      var e = Number(ᐃᐃⲆⵠ.get("starve_bag"));
      var f = Number(ᐃᐃⲆⵠ.get("starve_skin"));
      var g = Number(ᐃᐃⲆⵠ.get("starve_accessory"));
      if (mx.unlock.ⵠᐃⵠⲆ[mx.ⵠᐃⵠⲆ] <= 0) {
        mx.ⵠᐃⵠⲆ = mx.unlock.ⵠᐃⵠⲆ[f] > 0 ? f : 0;
      }
      if (mx.unlock.ΔⵠᐃⲆⵠ[mx.ΔⵠᐃⲆⵠ] <= 0) {
        mx.ΔⵠᐃⲆⵠ = mx.unlock.ΔⵠᐃⲆⵠ[d] > 0 ? d : 0;
      }
      if (mx.unlock.ⵠΔΔⲆᐃ[mx.ⵠΔΔⲆᐃ] <= 0) {
        mx.ⵠΔΔⲆᐃ = mx.unlock.ⵠΔΔⲆᐃ[c] > 0 ? c : 0;
      }
      if (mx.unlock.ⲆⵠⲆⲆⵠ[mx.ⲆⵠⲆⲆⵠ] <= 0) {
        mx.ⲆⵠⲆⲆⵠ = mx.unlock.ⲆⵠⲆⲆⵠ[b] > 0 ? b : 0;
      }
      if (mx.unlock.ᐃΔⵠⲆᐃ[mx.ᐃΔⵠⲆᐃ] <= 0) {
        mx.ᐃΔⵠⲆᐃ = mx.unlock.ᐃΔⵠⲆᐃ[g] > 0 ? g : 0;
      }
      if (mx.unlock.ⵠⵠᐃᐃⵠ[mx.ⵠⵠᐃᐃⵠ] <= 0) {
        mx.ⵠⵠᐃᐃⵠ = mx.unlock.ⵠⵠᐃᐃⵠ[e] > 0 ? e : 0;
      }
    }
    function V(a) {
      if (Ol !== q.ᐃᐃᐃⵠⵠⲆⵠ) {
        z(y, ja, "none");
        z(x, ja, "none");
        C();
        if (q.ΔⵠⲆⲆᐃ !== a && q.ⵠⵠΔⲆⵠ < 1) {
          q.ⲆΔᐃⵠⲆ.style.display = K === a || N === a || a === c || w === a || L === a || f === a ? "inline-block" : "none";
          z(q.ΔⵠⲆⲆᐃ, ja, "none");
          q.ΔⵠⲆⲆᐃ = a;
          z(q.ΔⵠⲆⲆᐃ, ka, "inline-block");
        }
      }
    }
    function W(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (Lq !== b) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== ls) {
          c();
        }
      };
      d.send();
    }
    function X() {
      C();
      if (Fx % 2) {
        console.log(undefined);
        ΔⵠⲆⵠ.connect();
      } else {
        console.log(Y);
        if (za.Widget.isBlocked === 1) {
          za.Widget.createAdPlayer(ΔⵠⲆⵠ.connect.bind(ΔⵠⲆⵠ), ΔⵠⲆⵠ.connect.bind(ΔⵠⲆⵠ));
        } else {
          za.Widget.preroll();
          za.Widget.play = ΔⵠⲆⵠ.connect.bind(ΔⵠⲆⵠ);
        }
      }
    }
    function Z(a) {
      if (Yh !== qx.ᐃᐃⲆΔⵠΔᐃ && qx.ᐃⲆᐃⵠᐃΔᐃ !== undefined && Y !== qx.ΔᐃΔⵠΔⲆᐃ) {
        a();
      }
    }
    this.ⲆᐃⲆⵠⲆΔᐃ = 0;
    this.ⲆᐃΔᐃ = V;
    this.ⵠⵠᐃⵠᐃΔΔ = function (b, a) {
      let c = 0;
      let d = "0";
      if (Px) {
        d = Px + "0";
      }
      if (qx.ᐃᐃⲆΔⵠΔᐃ) {
        Z(b);
      } else {
        W(`${Ix}token?id=${d}`, function (d) {
          if (c === 1) {
            return;
          }
          const e = d.split("_");
          const f = e[0] + "_";
          const g = Number(e[1]);
          const a = Math.abs(function (a) {
            return Pk(a, 8260, 46947, 8004, 37330, 5330);
          }(g));
          qx.ᐃᐃⲆΔⵠΔᐃ = f + a;
          Z(b);
        }, function () {
          if (c !== 1) {
            if (a === 1) {
              c = 1;
              b();
              return;
            } else {
              q.waiting = ph;
              return;
            }
          }
        });
      }
      W(`${Jx}get`, function (d) {
        if (c === 1) {
          return;
        }
        const e = d.split("_");
        const f = e[0] + "_";
        const g = Number(e[1]);
        const a = Math.abs(ik(g));
        qx.ᐃⲆᐃⵠᐃΔᐃ = f + a;
        qx.ΔⲆⵠᐃⲆⲆᐃ = a;
        Z(b);
      }, function () {
        if (c !== 1) {
          if (a === 1) {
            c = 1;
            b();
            return;
          } else {
            q.waiting = false;
            return;
          }
        }
      });
      W(`${Jx}set`, function (d) {
        if (c === 1) {
          return;
        }
        const e = d.split("_");
        const f = e[0] + "_";
        const g = Number(e[1]);
        const a = Math.abs(function (a) {
          return ur(a, 12502, 20815, 28449);
        }(g));
        qx.ΔᐃΔⵠΔⲆᐃ = f + a;
        qx.ⵠΔⲆⲆᐃⵠⲆΔΔ = a;
        Z(b);
      }, function () {
        if (c !== 1) {
          if (a === 1) {
            c = 1;
            b();
            return;
          } else {
            q.waiting = false;
            return;
          }
        }
      });
    };
    this.ⵠΔᐃⵠⲆΔΔ = function () {
      if (q.waiting === false) {
        qx.reconnect.enabled = false;
        q.waiting = Vq;
        q.ⵠⵠᐃⵠᐃΔΔ(X);
      }
    };
    var _ = 1;
    var aa = 2;
    var ba = 4;
    var ca = 8;
    var da = 16;
    var ea = 32;
    var fa = 1;
    var ha = 0;
    var ia = 1;
    var ja = 0;
    var ka = 1;
    if (za.innerWidth < 1300) {
      this.ⵠΔᐃΔⲆ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ka,
        position: ba | _,
        view: K,
        translate: {
          y: 0,
          ᐃⵠⲆⲆᐃ: 184,
          ⲆⲆᐃⲆΔ: 200,
          x: 0
        }
      };
    } else {
      this.ⵠΔᐃΔⲆ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ka,
        position: ba | da,
        view: K,
        translate: {
          ᐃⵠⲆⲆᐃ: 184,
          ⲆⲆᐃⲆΔ: -180,
          y: 0,
          x: 0
        }
      };
    }
    this.ⵠΔᐃΔⲆ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !q.waiting && !q.ⲆⵠⵠᐃᐃΔⲆⲆᐃ) {
        q.ⵠΔᐃⵠⲆΔΔ();
      }
    });
    this.ⵠΔᐃΔⲆ.input.value = ᐃᐃⲆⵠ.get("starve_nickname") ? ᐃᐃⲆⵠ.get("starve_nickname") : "";
    this.ⲆΔⲆⵠΔᐃΔΔⲆ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ja,
      position: ba | da,
      view: c,
      translate: {
        ⲆⲆᐃⲆΔ: -122,
        x: 0,
        y: 0,
        ᐃⵠⲆⲆᐃ: 110
      }
    };
    if (za.innerWidth < 1300) {
      this.ⵠᐃⵠᐃⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ka,
        position: ba | _,
        view: K,
        translate: {
          ⲆⲆᐃⲆΔ: 208,
          ᐃⵠⲆⲆᐃ: 225,
          x: 0,
          y: 0
        }
      };
    } else {
      this.ⵠᐃⵠᐃⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ka,
        position: ba | da,
        view: K,
        translate: {
          ᐃⵠⲆⲆᐃ: 225,
          y: 0,
          ⲆⲆᐃⲆΔ: -180,
          x: 0
        }
      };
    }
    this.ᐃᐃΔᐃ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ja,
      position: ba | da,
      view: w,
      translate: {
        x: 0,
        y: 0,
        ᐃⵠⲆⲆᐃ: 190,
        ⲆⲆᐃⲆΔ: -294.5
      }
    };
    this.ΔᐃⲆΔᐃⲆⲆⵠⵠ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ja,
      position: ba | da,
      view: c,
      translate: {
        x: 0,
        ᐃⵠⲆⲆᐃ: 187,
        ⲆⲆᐃⲆΔ: 125,
        y: 0
      }
    };
    this.ᐃⵠⲆᐃΔⵠⵠᐃⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ja,
      position: ba | da,
      view: T,
      translate: {
        ⲆⲆᐃⲆΔ: -220,
        y: 0,
        x: 0,
        ᐃⵠⲆⲆᐃ: 350
      }
    };
    u = 0;
    this.ⲆᐃⲆⲆᐃ = [];
    this.ⲆᐃⲆⲆᐃ[u++] = this.ⵠΔᐃΔⲆ;
    this.ⲆᐃⲆⲆᐃ[u++] = this.ⵠᐃⵠᐃⲆ;
    this.ⲆᐃⲆⲆᐃ[u++] = this.ᐃᐃΔᐃ;
    this.ⲆᐃⲆⲆᐃ[u++] = this.ⲆΔⲆⵠΔᐃΔΔⲆ;
    this.ⲆᐃⲆⲆᐃ[u++] = this.ΔᐃⲆΔᐃⲆⲆⵠⵠ;
    this.ⲆᐃⲆⲆᐃ[u++] = this.ᐃⵠⲆᐃΔⵠⵠᐃⲆ;
    u = 0;
    this.ⵠᐃᐃⵠ = [];
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ᐃⲆΔΔᐃᐃᐃ, ka, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ⲆΔΔᐃⲆⵠᐃ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ᐃⲆⵠᐃⲆⲆΔ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ᐃΔᐃᐃⲆᐃⵠ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ᐃⵠⵠᐃΔᐃᐃ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ΔⵠⵠⲆⲆⲆΔ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ΔΔΔⲆᐃⲆⵠ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ᐃᐃⲆⵠⲆᐃᐃ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ⵠⵠᐃⲆΔΔΔ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ΔᐃΔⵠⵠⲆΔ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ⵠᐃᐃⵠᐃΔΔ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ΔᐃΔΔⲆᐃⲆ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ΔΔᐃⵠΔⵠⲆ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ᐃⵠⲆΔⵠΔⲆ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ᐃΔΔⵠΔᐃᐃ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ⲆΔⵠᐃⵠⵠⲆ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ⲆΔΔᐃⲆΔⵠ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ⵠⵠⵠᐃᐃᐃⵠ, ja, 0, 0, _);
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ΔᐃⵠⲆᐃΔΔ, ja, 0, 0, _);
    if (za.innerWidth < 1300) {
      this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ΔⲆΔⵠⲆΔΔ, ka, 200, 100, ba | _);
    } else {
      this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ΔⲆΔⵠⲆΔΔ, ka, -753 / 4, 100, ba | da);
    }
    this.ⵠᐃᐃⵠ[u++].view = K;
    this.ⵠᐃᐃⵠ[u++] = uf(Δᐃ.ΔΔⵠⲆΔᐃⵠ, ka, 403, -10, aa);
    if (za.innerWidth > 1300) {
      this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠⵠᐃᐃⲆⲆⲆ, ka, -885 / 4, -159.5, ca | da);
      this.ⵠᐃᐃⵠ[u++].view = K;
    }
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠΔⲆΔⵠⵠᐃ, ja, -1293 / 4, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = c;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ᐃⲆⲆⵠⵠΔⵠ, ja, -1425 / 4, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = L;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ᐃⲆⲆΔⵠΔᐃ, ja, -905 / 4, 50, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = m;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠⲆᐃⵠⲆⲆᐃ, ja, -402, 130, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = N;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.Ⲇⵠⵠᐃⵠⵠᐃ, ja, -1117 / 4, 130, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = O;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⲆⵠᐃⵠᐃⵠⲆ, ja, -1222 / 4, 130, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = H;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⲆⲆᐃᐃⵠᐃⲆ, ja, -1222 / 4, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = T;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ΔΔⲆⲆⲆᐃⲆ, ja, -Δᐃ.ΔΔⲆⲆⲆᐃⲆ.width / 4 - 350, -15, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = U;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ᐃⲆⲆⵠⲆΔΔ, ja, -374.25, 110, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = f;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ΔⲆⵠᐃΔⵠᐃ, ja, -1226 / 4, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = w;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⲆᐃⵠΔⵠᐃⵠ, ja, -345.25, 80, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = v;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠⵠᐃᐃᐃᐃΔ, ja, -385.5, 150, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = A;
    var la = 360 / 100;
    var ma = this.ⲆΔᐃⵠⲆᐃᐃ([["#25c5d6", la * 3], ["#e2cf27", la * 10], ["#afac98", la * 30], ["#d88e23", la * 57]]);
    this.ⵠᐃᐃⵠ[u] = uf(ma, ja, -ma.width / 4, 178, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = A;
    this.ⵠⵠᐃⵠⲆⲆⲆΔᐃ = function (b, c, d) {
      var e;
      q.ⵠⵠΔⲆⵠ = 1;
      q.ᐃᐃⲆⵠΔΔΔ = 0;
      q.ⵠⵠⵠΔΔΔᐃ = 0;
      q.ΔⵠⵠᐃΔᐃΔ = b;
      q.ⲆᐃⵠⲆᐃⵠᐃ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ.length > f && ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[f].id !== d; f++);
        e = ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ[f];
        q.unlock.ⵠᐃⵠⲆ[f] = 1;
      } else if (c === 1) {
        for (f = 0; ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ.length > f && d !== ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ[f].id; f++);
        e = ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ[f];
        q.unlock.ᐃΔⵠⲆᐃ[f] = 1;
      } else if (c === 2) {
        for (f = 0; f < ⵠᐃⵠⵠ.ᐃᐃⵠΔ.length && ⵠᐃⵠⵠ.ᐃᐃⵠΔ[f].id !== d; f++);
        e = ⵠᐃⵠⵠ.ᐃᐃⵠΔ[f];
        q.unlock.ⵠⵠᐃᐃⵠ[f] = 1;
      } else if (c === 3) {
        for (f = 0; f < ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ.length && d !== ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ[f].id; f++);
        e = ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ[f];
        q.unlock.ΔⵠᐃⲆⵠ[f] = 1;
      } else if (c === 4) {
        for (f = 0; ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ.length > f && ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ[f].id !== d; f++);
        e = ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ[f];
        q.unlock.ⲆⵠⲆⲆⵠ[f] = 1;
        q.unlock.ⵠΔΔⲆᐃ[f] = 1;
      }
      q.ⲆᐃⵠᐃⲆⲆΔ = f;
      q.ⲆᐃⵠᐃΔⲆⵠ = bf("by " + e.ᐃⲆⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, Y, 30, 24, Aa, at, Ak, Es, "#000000", 24);
      q.ⵠΔΔⲆⲆᐃΔ = bf(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, p, Bg, undefined, "#000000", 20);
    };
    this.ⵠⵠΔⲆⵠ = 0;
    this.ᐃᐃⲆⵠΔΔΔ = 0;
    this.ΔⵠⵠᐃΔᐃΔ = 0;
    this.ⲆᐃⵠⲆᐃⵠᐃ = 0;
    this.ⵠⵠⵠΔΔΔᐃ = 0;
    this.ⲆᐃⵠᐃΔⲆⵠ = Wa;
    this.ⵠΔΔⲆⲆᐃΔ = Y;
    var na = 197;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠΔⵠΔⲆⲆΔ, ja, -1542 / 4, 150, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = E;
    ma = this.ⲆΔᐃⵠⲆᐃᐃ([["#d45ce5", la * 3], ["#25c5d6", la * 10], ["#e2cf27", la * 30], ["#afac98", la * 57]]);
    this.ⵠᐃᐃⵠ[u] = uf(ma, ja, -ma.width / 4, 178, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = E;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠⵠⲆⵠᐃᐃⵠ, ja, -1542 / 4, 150, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = B;
    ma = this.ⲆΔᐃⵠⲆᐃᐃ([["#d33a2a", la * 3], ["#d45ce5", la * 10], ["#25c5d6", la * 30], ["#e2cf27", la * 57]]);
    this.ⵠᐃᐃⵠ[u] = uf(ma, ja, -ma.width / 4, 178, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = B;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ᐃⵠΔΔΔⲆⵠ, ja, -1542 / 4, 150, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = D;
    ma = this.ⲆΔᐃⵠⲆᐃᐃ([["#25c5d6", la * 3], ["#e2cf27", la * 10], ["#afac98", la * 30], ["#d88e23", la * 57]]);
    this.ⵠᐃᐃⵠ[u] = uf(ma, ja, -ma.width / 4, 178, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = D;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⲆⵠⲆⲆᐃᐃⵠ, ja, -385.5, 150, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = J;
    ma = this.ⲆΔᐃⵠⲆᐃᐃ([["#d45ce5", la * 3], ["#25c5d6", la * 10], ["#e2cf27", la * 30], ["#afac98", la * 57]]);
    this.ⵠᐃᐃⵠ[u] = uf(ma, ja, -ma.width / 4, 178, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = J;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠᐃⵠⲆΔΔⲆ, ja, -385.5, 150, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = I;
    ma = this.ⲆΔᐃⵠⲆᐃᐃ([["#d33a2a", la * 3], ["#d45ce5", la * 10], ["#25c5d6", la * 30], ["#e2cf27", la * 57]]);
    this.ⵠᐃᐃⵠ[u] = uf(ma, ja, -ma.width / 4, 178, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = I;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ΔΔΔⲆΔᐃᐃ, ja, -341.5, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = M;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ΔⵠⵠⲆⲆⲆᐃ, ja, -341.5, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = R;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⲆⵠⲆⲆΔⵠᐃ, ja, -1366 / 4, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = Q;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠⵠⵠⵠᐃΔᐃ, ja, -1366 / 4, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = F;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ᐃΔᐃⲆⲆⲆⲆ, ja, -1366 / 4, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = P;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⲆΔⲆᐃΔΔⵠ, ja, -341.5, 100, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = j;
    ⲆᐃⲆΔᐃⵠⲆ = u++;
    this.ⵠᐃᐃⵠ[ⲆᐃⲆΔᐃⵠⲆ] = uf(Δᐃ.ⲆᐃⲆΔᐃⵠⲆ, ja, 484, 0, ba);
    ⵠⵠⵠΔΔᐃΔ = u++;
    this.ⵠᐃᐃⵠ[ⵠⵠⵠΔΔᐃΔ] = uf(Δᐃ.ⵠⵠⵠΔΔᐃΔ, ja, 812.5, 0, ba);
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠⵠⵠΔΔⲆᐃ, ja, -189.5, -5, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = x;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⲆⲆᐃᐃΔᐃᐃ, ja, -189.5, -5, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = y;
    ᐃΔΔⲆⵠᐃΔ = u++;
    this.ⵠᐃᐃⵠ[ᐃΔΔⲆⵠᐃΔ] = uf(Δᐃ.ΔΔᐃΔΔⵠⵠ, ka, 93, 30, ba);
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ⵠᐃᐃΔΔᐃⵠ, ja, -173, 110, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = G;
    this.ⵠᐃᐃⵠ[u] = uf(Δᐃ.ᐃⲆⲆᐃⵠⵠᐃ, ja, -173, 110, ba | da);
    this.ⵠᐃᐃⵠ[u++].view = S;
    u = 0;
    this.buttons = [];
    this.buttons[u] = vf(50, 57, 0, [Δᐃ.ΔⲆᐃΔⵠᐃⲆ, Δᐃ.ⵠΔᐃᐃⲆⲆⵠ, Δᐃ.ⲆⵠΔᐃⵠⲆΔ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        V(v);
      } else {
        V(m);
      }
    }, 320, 0, _, ka);
    u++;
    if (za.innerWidth < 1300) {
      this.buttons[u] = vf(202, 97, 0, [Δᐃ.ΔᐃΔⲆΔⲆⲆ, Δᐃ.ⲆⲆⲆΔⲆᐃΔ, Δᐃ.ⵠⵠⲆΔⵠⲆⵠ], fa, ha, this.ⵠΔᐃⵠⲆΔΔ, 462, 235, ba | _, ka);
    } else {
      this.buttons[u] = vf(202, 97, 0, [Δᐃ.ΔᐃΔⲆΔⲆⲆ, Δᐃ.ⲆⲆⲆΔⲆᐃΔ, Δᐃ.ⵠⵠⲆΔⵠⲆⵠ], fa, ha, this.ⵠΔᐃⵠⲆΔΔ, 74, 235, ba | da, ka);
    }
    this.buttons[u].view = K;
    u++;
    if (za.innerWidth > 1300) {
      this.buttons[u] = vf(355, 168, 0, [Δᐃ.ᐃⵠⲆΔΔⲆⵠ, Δᐃ.ᐃⵠⲆΔΔⲆⵠ, Δᐃ.ᐃⵠⲆΔΔⲆⵠ], fa, ha, function () {
        za.open("./changelog.html", "_blank");
      }, -195, -115, ca | da, ka);
      this.buttons[u++].view = K;
      this.buttons[u] = vf(355, 168, 0, [Δᐃ.ⲆⵠⲆⵠΔⵠⲆ, Δᐃ.ⲆⵠⲆⵠΔⵠⲆ, Δᐃ.ⲆⵠⲆⵠΔⵠⲆ], fa, ha, function () {
        za.open("https://taming.io", "_blank");
      }, 20, -115, ca | da, ka);
      this.buttons[u++].view = K;
    }
    this.buttons[u++] = vf(80, 80, 0, [Δᐃ.ΔΔⵠΔⵠⲆⵠ, Δᐃ.ΔΔᐃⲆⵠᐃΔ, Δᐃ.ⲆⲆᐃᐃⲆⲆⵠ], fa, ha, function () {
      za.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, aa, ka);
    this.buttons[u++] = vf(80, 80, 0, [Δᐃ.ΔⵠⵠΔΔΔΔ, Δᐃ.ΔΔⲆΔⵠⲆΔ, Δᐃ.ⵠⵠΔΔᐃΔⵠ], fa, ha, function () {
      za.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, aa, ka);
    this.buttons[u++] = vf(80, 80, 0, [Δᐃ.ᐃⵠⲆⵠΔΔⵠ, Δᐃ.ΔΔΔⲆⵠΔⵠ, Δᐃ.ΔⵠΔⲆⵠᐃⵠ], fa, ha, function () {
      za.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, aa, ka);
    this.buttons[u++] = vf(80, 80, 0, [Δᐃ.ⲆΔΔⲆΔⵠΔ, Δᐃ.ⵠⲆᐃⲆⵠᐃΔ, Δᐃ.ΔⲆⲆⵠᐃⵠⲆ], fa, ha, function () {
      za.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, aa, ka);
    this.buttons[u++] = vf(80, 80, 0, [Δᐃ.ⲆⲆᐃΔΔᐃⲆ, Δᐃ.ᐃⵠⵠⵠΔᐃⵠ, Δᐃ.ⵠⲆⲆΔⵠΔΔ], fa, ha, function () {
      za.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, aa, ka);
    this.buttons[u++] = vf(80, 80, 0, [Δᐃ.ⲆⲆΔᐃⵠⵠⵠ, Δᐃ.ⵠⵠΔᐃⲆⲆΔ, Δᐃ.ⲆⵠᐃⲆⵠΔΔ], fa, ha, function () {
      za.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, aa, ka);
    this.buttons[u++] = vf(80, 80, 0, [Δᐃ.ⲆⲆⵠᐃⵠΔΔ, Δᐃ.ᐃᐃⲆⵠⲆⵠⵠ, Δᐃ.ΔⲆΔⵠⵠᐃΔ], fa, ha, function () {
      za.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, aa, ka);
    ⲆⵠᐃᐃΔⵠⲆ = u++;
    this.buttons[ⲆⵠᐃᐃΔⵠⲆ] = vf(232, 142, 0, [Δᐃ.ᐃⵠΔᐃΔΔᐃ, Δᐃ.ⵠⲆΔⵠⲆΔΔ, Δᐃ.ᐃᐃᐃᐃⲆⵠᐃ], fa, ha, function () {
      V(w);
      by(mx.ΔΔⲆⲆⵠⲆⵠ, mx.ΔⵠᐃᐃᐃⲆⲆ, mx.ᐃΔⵠⲆⵠⵠⲆ, mx.ⲆⲆⲆⲆΔⲆΔ);
    }, -5, 573, _, ka);
    this.buttons[u++] = vf(236, 165, 0, [Δᐃ.ⲆⵠΔΔᐃⵠΔ, Δᐃ.ⲆⵠΔΔᐃⵠΔ, Δᐃ.ⲆⵠΔΔᐃⵠΔ], fa, ia, function () {
      V(w);
    }, -5, 566, _, ka);
    ᐃⵠᐃΔᐃΔⵠ = u++;
    this.buttons[ᐃⵠᐃΔᐃΔⵠ] = vf(236, 165, 0, [Δᐃ.ⵠⵠⲆⲆⵠᐃⲆ, Δᐃ.ΔⵠⲆΔΔⲆⲆ, Δᐃ.ⲆΔΔⲆⲆᐃⵠ], fa, ha, function () {
      V(f);
    }, -5, 494, _, ka);
    this.buttons[u++] = vf(236, 165, 0, [Δᐃ.ⲆⵠΔⵠⵠᐃⵠ, Δᐃ.ⲆⵠΔⵠⵠᐃⵠ, Δᐃ.ⲆⵠΔⵠⵠᐃⵠ], fa, ia, function () {
      V(f);
    }, -5, 494, _, ka);
    ⲆᐃΔⵠΔⵠᐃ = u++;
    this.buttons[ⲆᐃΔⵠΔⵠᐃ] = vf(236, 165, 0, [Δᐃ.ⵠⵠⲆⲆⵠᐃⲆ, Δᐃ.ΔⵠⲆΔΔⲆⲆ, Δᐃ.ⲆΔΔⲆⲆᐃⵠ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        if (mx.ⵠᐃᐃⵠᐃⲆᐃ - Date.now() > 0) {
          V(T);
        } else {
          V(O);
        }
      } else {
        V(m);
      }
    }, -5, 415, _, ka);
    this.buttons[u++] = vf(236, 165, 0, [Δᐃ.ΔᐃΔᐃΔⵠᐃ, Δᐃ.ΔᐃΔᐃΔⵠᐃ, Δᐃ.ΔᐃΔᐃΔⵠᐃ], fa, ia, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        if (mx.ⵠᐃᐃⵠᐃⲆᐃ - Date.now() > 0) {
          V(T);
        } else {
          V(O);
        }
      } else {
        V(m);
      }
    }, -5, 415, _, ka);
    ΔᐃⵠⲆΔᐃΔ = u++;
    this.buttons[ΔᐃⵠⲆΔᐃΔ] = vf(236, 165, 0, [Δᐃ.ⵠⵠⲆⲆⵠᐃⲆ, Δᐃ.ΔⵠⲆΔΔⲆⲆ, Δᐃ.ⲆΔΔⲆⲆᐃⵠ], fa, ha, function () {
      V(N);
    }, -5, 336, _, ka);
    this.buttons[u++] = vf(236, 165, 0, [Δᐃ.ⲆᐃΔⵠᐃⵠⵠ, Δᐃ.ⲆᐃΔⵠᐃⵠⵠ, Δᐃ.ⲆᐃΔⵠᐃⵠⵠ], fa, ia, function () {
      V(N);
    }, -5, 336, _, ka);
    ⲆΔⵠⲆⲆΔᐃ = u++;
    this.buttons[ⲆΔⵠⲆⲆΔᐃ] = vf(236, 165, 0, [Δᐃ.ⵠⵠⲆⲆⵠᐃⲆ, Δᐃ.ΔⵠⲆΔΔⲆⲆ, Δᐃ.ⲆΔΔⲆⲆᐃⵠ], fa, ha, function () {
      V(L);
    }, -5, 257, _, ka);
    this.buttons[u++] = vf(236, 165, 0, [Δᐃ.ᐃᐃΔⲆⵠΔⲆ, Δᐃ.ᐃᐃΔⲆⵠΔⲆ, Δᐃ.ᐃᐃΔⲆⵠΔⲆ], fa, ia, function () {
      V(L);
    }, -5, 257, _, ka);
    ⵠᐃᐃⲆᐃⲆⲆ = u++;
    this.buttons[ⵠᐃᐃⲆᐃⲆⲆ] = vf(236, 165, 0, [Δᐃ.ⵠⵠⲆⲆⵠᐃⲆ, Δᐃ.ΔⵠⲆΔΔⲆⲆ, Δᐃ.ⲆΔΔⲆⲆᐃⵠ], fa, ha, function () {
      V(K);
    }, -5, 178, _, ka);
    this.buttons[u++] = vf(236, 165, 0, [Δᐃ.ΔᐃⵠⲆⲆΔⲆ, Δᐃ.ΔᐃⵠⲆⲆΔⲆ, Δᐃ.ΔᐃⵠⲆⲆΔⲆ], fa, ia, function () {
      V(K);
    }, -5, 178, _, ka);
    ⵠⵠⵠᐃⵠᐃᐃ = u++;
    this.ⵠⵠⵠᐃⵠᐃᐃ = ⵠⵠⵠᐃⵠᐃᐃ;
    this.buttons[ⵠⵠⵠᐃⵠᐃᐃ] = vf(324, 222, 0, [Δᐃ.ΔⵠⵠⵠⵠⵠⲆ, Δᐃ.ⵠⵠΔΔΔΔᐃ, Δᐃ.ΔⲆⵠⵠΔΔΔ], fa, ha, function () {
      V(m);
    }, 0, 70, _, ka);
    ΔᐃΔⵠΔⲆⲆ = u++;
    ΔⵠⲆΔΔΔⵠ = u++;
    this.ΔᐃΔⵠΔⲆⲆ = ΔᐃΔⵠΔⲆⲆ;
    this.ΔⵠⲆΔΔΔⵠ = ΔⵠⲆΔΔΔⵠ;
    this.buttons[ΔᐃΔⵠΔⲆⲆ] = vf(324, 222, 0, [Δᐃ.ᐃᐃⲆⲆⲆⲆᐃ, Δᐃ.ᐃᐃᐃΔΔΔⲆ, Δᐃ.Ⲇᐃᐃᐃⵠᐃⵠ], fa, ha, function () {
      V(c);
      ua(-1);
    }, 0, 70, _, ja);
    this.buttons[ΔⵠⲆΔΔΔⵠ] = vf(324, 222, 0, [Δᐃ.ΔⵠⵠⲆᐃᐃΔ, Δᐃ.ΔⵠⵠⲆᐃᐃΔ, Δᐃ.ΔⵠⵠⲆᐃᐃΔ], fa, ia, function () {
      V(c);
      ua(-1);
    }, 0, 70, _, ja);
    if (ΔⵠⲆⵠ.ᐃⵠᐃΔⲆⲆⵠ === 0) {
      var oa = u++;
      if (za.innerWidth < 1300) {
        this.buttons[oa] = vf(266, 176, 0, [Δᐃ.ᐃⵠᐃᐃⵠⵠⵠ, Δᐃ.ΔⲆⲆⲆⵠⲆⲆ, Δᐃ.ᐃⲆΔᐃΔⵠⲆ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(0);
        }, 150, 300, _ | ba, ka);
      } else {
        this.buttons[oa] = vf(266, 176, 0, [Δᐃ.ᐃⵠᐃᐃⵠⵠⵠ, Δᐃ.ΔⲆⲆⲆⵠⲆⲆ, Δᐃ.ᐃⲆΔᐃΔⵠⲆ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(0);
        }, -340, 100, da | ba, ka);
      }
      this.buttons[oa].view = K;
      this.buttons[oa].hint = 0;
      var pa = u++;
      if (za.innerWidth < 1300) {
        this.buttons[pa] = vf(266, 176, 0, [Δᐃ.ᐃᐃⲆᐃⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃΔΔΔ, Δᐃ.ᐃᐃΔΔΔᐃᐃ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(4);
        }, 150, 400, _ | ba, ka);
      } else {
        this.buttons[pa] = vf(266, 176, 0, [Δᐃ.ᐃᐃⲆᐃⵠⵠᐃ, Δᐃ.ᐃⲆⲆᐃΔΔΔ, Δᐃ.ᐃᐃΔΔΔᐃᐃ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(4);
        }, -340, 200, da | ba, ka);
      }
      this.buttons[pa].view = K;
      this.buttons[pa].hint = 0;
      var qa = u++;
      if (za.innerWidth < 1300) {
        this.buttons[qa] = vf(266, 176, 0, [Δᐃ.ᐃⵠᐃΔᐃⲆΔ, Δᐃ.ⲆⲆᐃⲆᐃⲆᐃ, Δᐃ.ⲆΔⵠᐃⲆΔΔ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(6);
        }, 450, 300, _ | ba, ka);
      } else {
        this.buttons[qa] = vf(266, 176, 0, [Δᐃ.ᐃⵠᐃΔᐃⲆΔ, Δᐃ.ⲆⲆᐃⲆᐃⲆᐃ, Δᐃ.ⲆΔⵠᐃⲆΔΔ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(6);
        }, -340, 300, da | ba, ka);
      }
      this.buttons[qa].view = K;
      this.buttons[qa].hint = 0;
      var ra = u++;
      if (za.innerWidth < 1300) {
        this.buttons[ra] = vf(266, 176, 0, [Δᐃ.ⵠΔⲆⵠᐃⲆⵠ, Δᐃ.ᐃⵠΔⲆᐃⲆⵠ, Δᐃ.ⲆᐃᐃⵠᐃᐃΔ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(2);
        }, 300, 300, _ | ba, ka);
      } else {
        this.buttons[ra] = vf(266, 176, 0, [Δᐃ.ⵠΔⲆⵠᐃⲆⵠ, Δᐃ.ᐃⵠΔⲆᐃⲆⵠ, Δᐃ.ⲆᐃᐃⵠᐃᐃΔ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(2);
        }, 204, 100, da | ba, ka);
      }
      this.buttons[ra].view = K;
      this.buttons[ra].hint = 0;
      var sa = u++;
      if (za.innerWidth < 1300) {
        this.buttons[sa] = vf(266, 176, 0, [Δᐃ.ᐃᐃⲆⵠᐃᐃⵠ, Δᐃ.ΔⵠⵠⲆⵠⵠⵠ, Δᐃ.ⲆⲆⲆⵠⲆⲆΔ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(3);
        }, 300, 400, _ | ba, ka);
      } else {
        this.buttons[sa] = vf(266, 176, 0, [Δᐃ.ᐃᐃⲆⵠᐃᐃⵠ, Δᐃ.ΔⵠⵠⲆⵠⵠⵠ, Δᐃ.ⲆⲆⲆⵠⲆⲆΔ], fa, ha, function () {
          ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(3);
        }, 204, 200, da | ba, ka);
      }
      this.buttons[sa].view = K;
      this.buttons[sa].hint = 0;
      var ta = u++;
      this.buttons[ta] = vf(266, 176, 0, [Δᐃ.ⲆᐃⵠⵠᐃΔⲆ, Δᐃ.ΔᐃⲆⲆΔΔⲆ, Δᐃ.ⵠⲆⲆⵠᐃΔⵠ], fa, ha, function () {
        ΔⵠⲆⵠ.ⵠΔⵠⲆⲆ(7);
      }, za.innerWidth < 1300 ? 450 : 204, za.innerWidth < 1300 ? 400 : 300, (za.innerWidth < 1300 ? _ : da) | ba, ka);
      this.buttons[ta].view = K;
      this.buttons[ta].hint = 0;
    }
    function ua(b, c) {
      if (at !== c) {
        mx.ᐃⲆⵠΔⵠΔⲆ = c;
        var d = mx.ⲆⲆⵠΔⵠⵠⵠ[c];
        mx.ᐃᐃΔⲆΔ = d.score;
        mx.ⵠⵠⵠᐃᐃⵠΔ = d.kill;
        mx.ⵠⲆᐃⵠⵠᐃⲆ = d.death;
        mx.time = d.time;
        mx.ⵠᐃⵠⵠⲆΔΔ = d.bestScore;
        mx.ᐃΔⵠⵠᐃⲆⵠ = d.bestKill;
        mx.ⵠⵠⲆᐃΔⲆⲆ = d.bestTime;
        mx.ⵠⲆΔⵠⵠⲆⵠ = d.scoreTotal;
      }
      if (b === undefined) {
        b = mx.ΔⵠⲆⲆⲆᐃᐃ;
      }
      mx.ΔⵠⲆⲆⲆᐃᐃ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = mx.ⵠⵠⲆᐃΔⲆⲆ[b];
        document.getElementById("stats_box_kill").innerHTML = mx.ᐃΔⵠⵠᐃⲆⵠ[b];
        document.getElementById("stats_box_score").innerHTML = mx.ⵠᐃⵠⵠⲆΔΔ[b];
      } else {
        var f = 0;
        for (var g = 0; mx.ⵠⵠⵠᐃᐃⵠΔ.length > g; g++) {
          f += mx.ⵠⵠⵠᐃᐃⵠΔ[g];
        }
        var h = 0;
        for (g = 0; g < mx.time.length; g++) {
          h += mx.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = mx.ᐃᐃΔⲆΔ;
      }
    }
    this.buttons[u] = vf(87, 78, 0, [Δᐃ.ᐃⵠⵠⵠᐃⵠⲆ, Δᐃ.ᐃⲆⲆΔⵠΔⵠ, Δᐃ.ⵠᐃⲆⵠⵠⲆΔ], fa, ha, function () {
      mx.ⲆᐃΔⲆᐃᐃⲆᐃᐃ();
      if (mx.ᐃᐃⲆΔᐃⵠⵠ === 0) {
        V(S);
      } else {
        V(G);
      }
    }, 127, 110, da | ba, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = vf(87, 78, 0, [Δᐃ.ⵠΔⲆⲆΔᐃⵠ, Δᐃ.ⵠⵠⵠᐃⲆᐃΔ, Δᐃ.ⲆΔⲆⲆⵠᐃᐃ], fa, ha, function () {
      const a = za.document.createElement("textarea");
      a.value = Px;
      za.document.body.appendChild(a);
      a.select();
      za.document.execCommand("copy");
      za.document.body.removeChild(a);
    }, 182, 110, da | ba, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = vf(87, 78, 0, [Δᐃ.ᐃⲆⵠⵠᐃᐃⲆ, Δᐃ.ᐃΔΔⲆⲆⲆᐃ, Δᐃ.ᐃᐃΔΔⵠⲆⲆ], fa, ha, function () {
      (function () {
        if (Nx === Lx && za.FB && za.FB.getUserID()) {
          za.FB.logout();
        }
        if (Kx === Nx && Ux !== undefined) {
          za.gapi.auth2.getAuthInstance().signOut();
          Ux = undefined;
        }
        Px = Di;
        Ox = undefined;
        Nx = Bg;
        mx.ᐃΔⵠΔⵠ = 0;
        mx.ΔᐃⵠᐃⲆ = 0;
        mx.ᐃᐃΔⲆΔ = 0;
        mx.ⵠΔⵠⲆⲆΔΔ();
        ΔⲆⵠⲆⲆⵠΔⲆⲆ();
      })();
    }, 255, 110, da | ba, ja);
    this.buttons[u++].view = c;
    this.buttons[u] = vf(58, 64, 0, [Δᐃ.ᐃΔⵠⲆᐃᐃᐃ, Δᐃ.ⲆⵠᐃⵠΔᐃⲆ, Δᐃ.ᐃΔΔΔⲆⵠΔ], fa, ha, function () {
      V(K);
    }, 189, 118, da | ba, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = vf(497, 72, 0, [Δᐃ.ᐃΔᐃΔⵠᐃⲆ, Δᐃ.ΔΔⲆⲆⲆⵠᐃ, Δᐃ.ⲆⲆⲆᐃⵠΔΔ], fa, ha, function () {
      (function () {
        if (Cf) {
          Ox = ᐃⵠⲆΔ.ⵠⵠⵠⵠᐃⵠΔ(40);
          Nx = Mx;
          Px = Cf.userId;
          za.ⲆΔⵠΔⵠᐃⲆ();
          return;
        }
        za.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, da | ba, ja);
    this.buttons[u++].view = m;
    this.buttons[u] = vf(497, 72, 0, [Δᐃ.ⲆᐃΔᐃᐃΔⲆ, Δᐃ.ΔⲆⲆᐃⲆᐃᐃ, Δᐃ.ΔⲆᐃΔΔΔᐃ], fa, ha, function () {
      za.FB.login(function (a) {
        if (a.authResponse) {
          za.FB.api("/me", function (a) {
            Nx = Lx;
            Ox = za.FB.getAuthResponse().accessToken;
            ey();
            za.ⲆΔⵠΔⵠᐃⲆ();
          });
        }
      });
    }, -130, 430, da | ba, ja);
    this.buttons[u++].view = m;
    ΔⵠⲆᐃᐃⲆⲆ = 20000;
    this.ᐃΔⲆᐃᐃΔᐃ = function (a) {
      var b = mx.ΔΔΔΔⲆᐃΔ(a);
      var c = ΔⵠⲆᐃᐃⲆⲆ * (b * b);
      return (a -= c) / ((b + 1) * (b + 1) * ΔⵠⲆᐃᐃⲆⲆ - c);
    };
    this.ΔΔΔΔⲆᐃΔ = function (a) {
      return Math.floor(Math.sqrt(a / ΔⵠⲆᐃᐃⲆⲆ));
    };
    this.ⵠⲆᐃᐃⲆⲆᐃΔⵠ = function (a) {
      mx.ΔⲆᐃⵠⲆ = mx.ΔΔΔΔⲆᐃΔ(a);
      mx.ⲆΔⵠᐃΔⲆⲆ = mx.ᐃΔⲆᐃᐃΔᐃ(a);
      mx.ΔⲆᐃⵠⵠᐃⵠ = 0;
      mx.ᐃᐃΔⲆΔ = a;
    };
    this.ᐃⲆⲆΔⲆΔΔᐃᐃ = function (a) {
      mx.buttons[mx.ⵠⵠⵠᐃⵠᐃᐃ].info.active = 0;
      mx.buttons[mx.ΔᐃΔⵠΔⲆⲆ].info.active = 1;
      mx.buttons[mx.ΔⵠⲆΔΔΔⵠ].info.active = 1;
      n();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = za.decodeURIComponent(za.escape(za.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      mx.ΔᐃⵠᐃⲆ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      mx.ⲆⲆⵠΔⵠⵠⵠ = b;
      q.ⵠⲆᐃᐃⲆⲆᐃΔⵠ(c.score);
      mx.ᐃᐃΔⲆΔ = c.score;
      mx.ⵠⵠⵠᐃᐃⵠΔ = c.kill;
      mx.ⵠⲆᐃⵠⵠᐃⲆ = c.death;
      mx.time = c.time;
      mx.ⵠᐃⵠⵠⲆΔΔ = c.bestScore;
      mx.ᐃΔⵠⵠᐃⲆⵠ = c.bestKill;
      mx.ⵠⵠⲆᐃΔⲆⲆ = c.bestTime;
      mx.ⵠⲆΔⵠⵠⲆⵠ = c.scoreTotal;
      mx.ᐃᐃⲆΔᐃⵠⵠ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (mx.ᐃᐃⲆΔᐃⵠⵠ === undefined) {
        mx.ᐃᐃⲆΔᐃⵠⵠ = 0;
      }
      mx.ⵠᐃᐃⵠᐃⲆᐃ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        mx.ⵠᐃᐃⵠᐃⲆᐃ = Date.now() + Number(a.privateServerTime);
      }
      mx.ᐃΔⵠΔⵠ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        mx.ᐃΔⵠΔⵠ = Date.now() + Number(a.kit);
      }
      var d = ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ;
      for (var e = 0; a.skins.length > e; e++) {
        if (a.skins[e] > 0) {
          for (var f = 0; f < d.length; f++) {
            if (d[f].id === e) {
              q.unlock.ⵠᐃⵠⲆ[f] = 1;
            }
          }
        }
      }
      d = ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ;
      e = 0;
      for (; a.accessories.length > e; e++) {
        if (a.accessories[e] > 0) {
          for (f = 0; d.length > f; f++) {
            if (d[f].id === e) {
              q.unlock.ᐃΔⵠⲆᐃ[f] = 1;
            }
          }
        }
      }
      d = ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ;
      e = 0;
      for (; a.books.length > e; e++) {
        if (a.books[e] > 0) {
          for (f = 0; d.length > f; f++) {
            if (e === d[f].id) {
              q.unlock.ΔⵠᐃⲆⵠ[f] = 1;
            }
          }
        }
      }
      d = ⵠᐃⵠⵠ.ᐃᐃⵠΔ;
      e = 0;
      for (; a.bags.length > e; e++) {
        if (a.bags[e] > 0) {
          for (f = 0; f < d.length; f++) {
            if (e === d[f].id) {
              q.unlock.ⵠⵠᐃᐃⵠ[f] = 1;
            }
          }
        }
      }
      d = ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ;
      e = 0;
      for (; e < a.crates.length; e++) {
        if (a.crates[e] > 0) {
          for (f = 0; d.length > f; f++) {
            if (e === d[f].id) {
              q.unlock.ⲆⵠⲆⲆⵠ[f] = 1;
              q.unlock.ⵠΔΔⲆᐃ[f] = 1;
            }
          }
        }
      }
    };
    this.ⲆᐃⲆⲆⲆⲆⵠΔΔ = function () {
      za.ⲆΔⵠΔⵠᐃⲆ = function () {
        V(K);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Ix + "login?token=" + Ox + "&type=" + Nx + (Cf ? "&userId=" + Cf.userId + "&userInfo=" + Cf.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(q.ᐃⲆⲆΔⲆΔΔᐃᐃ);
      };
      if (Qx === 1) {
        za.ⲆΔⵠΔⵠᐃⲆ();
      }
    };
    za.ΔⲆⵠⲆⲆⵠΔⲆⲆ = function () {
      mx.buttons[mx.ⵠⵠⵠᐃⵠᐃᐃ].info.active = 1;
      mx.buttons[mx.ΔᐃΔⵠΔⲆⲆ].info.active = 0;
      mx.buttons[mx.ΔⵠⲆΔΔΔⵠ].info.active = 0;
      V(K);
    };
    this.ⲆⲆΔⲆΔ = function () {
      return mx.buttons[mx.ΔᐃΔⵠΔⲆⲆ].info.active;
    };
    this.buttons[u] = vf(461, 105, 0, [Δᐃ.ⲆᐃᐃΔⲆⲆⵠ, Δᐃ.ⲆⲆΔΔΔΔΔ, Δᐃ.ΔᐃⵠⵠⲆΔᐃ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        V(v);
      } else {
        V(m);
      }
    }, -100, 80, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(157, 158, 0, [Δᐃ.ΔⲆⲆⲆⵠᐃⵠ, Δᐃ.ⵠⲆᐃⲆᐃΔⵠ, Δᐃ.ⲆⵠⲆᐃⵠΔΔ], fa, ha, function () {
      za.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, da | ba, ja);
    this.buttons[u++].view = f;
    this.buttons[u] = vf(66, 73, 0, [Δᐃ.ⵠΔΔᐃⲆΔⲆ, Δᐃ.ⲆΔⵠⲆΔᐃᐃ, Δᐃ.ΔΔⵠⵠⵠᐃᐃ], fa, ha, undefined, -68, 340, da | ba, ja);
    this.buttons[u++].view = f;
    this.buttons[u] = vf(66, 73, 0, [Δᐃ.ΔᐃΔⲆⲆⲆⵠ, Δᐃ.ᐃⲆᐃΔⵠᐃⲆ, Δᐃ.ᐃⵠᐃΔⲆⵠᐃ], fa, ha, undefined, -30, 340, da | ba, ja);
    this.buttons[u++].view = f;
    this.ⵠⵠⲆΔΔᐃⲆⲆⲆ = u;
    this.buttons[u] = vf(97, 66, 0, [Δᐃ.ⵠᐃᐃⵠΔΔΔ, Δᐃ.ΔΔⵠⲆΔᐃΔ, Δᐃ.ⵠⲆⲆⲆᐃΔΔ], fa, ha, function () {
      by(Aa, at, mx.ᐃΔⵠⲆⵠⵠⲆ);
    }, -14, 151, da | ba, ja);
    this.buttons[u++].view = w;
    this.ⲆᐃΔⵠⵠᐃᐃ = u;
    this.buttons[u] = vf(135, 66, 0, [Δᐃ.ᐃⲆΔⲆⵠⵠⲆ, Δᐃ.ΔᐃᐃΔⲆⲆΔ, Δᐃ.ᐃⵠⲆΔⲆΔⵠ], fa, ha, function () {
      by(undefined, undefined, mx.ⲆᐃΔⵠⵠᐃᐃ);
    }, 37.5, 151, da | ba, ja);
    this.buttons[u++].view = w;
    this.ΔⵠΔⵠⵠⲆΔ = u;
    this.buttons[u] = vf(160, 66, 0, [Δᐃ.ᐃᐃⲆⵠⵠⵠᐃ, Δᐃ.ᐃᐃᐃⵠᐃⲆⵠ, Δᐃ.ⲆⵠⲆⲆΔⲆⵠ], fa, ha, function () {
      by(undefined, Bg, mx.ΔⵠΔⵠⵠⲆΔ);
    }, 107.5, 151, da | ba, ja);
    this.buttons[u++].view = w;
    this.ᐃΔⵠⲆⵠⵠⲆ = u;
    this.buttons[u] = vf(207, 66, 0, [Δᐃ.ⵠⲆⵠᐃΔΔⵠ, Δᐃ.ΔⲆΔⲆⲆᐃⲆ, Δᐃ.ΔΔᐃⲆᐃᐃᐃ], fa, ha, function () {
      by(undefined, undefined, mx.ᐃΔⵠⲆⵠⵠⲆ);
    }, 190.5, 151, da | ba, ja);
    this.buttons[u++].view = w;
    this.ΔᐃⵠⲆᐃΔⵠ = u;
    this.buttons[u] = vf(144, 66, 0, [Δᐃ.ⲆΔⵠⲆⵠⲆⵠ, Δᐃ.ᐃⲆⵠᐃΔΔΔ, Δᐃ.ᐃⵠⵠⲆΔⵠᐃ], fa, ha, function () {
      by(mx.ΔᐃⵠⲆᐃΔⵠ);
    }, 103.5, 110, da | ba, ja);
    this.buttons[u++].view = w;
    this.ⲆΔⲆΔᐃⵠⵠ = u;
    this.buttons[u] = vf(124, 66, 0, [Δᐃ.ᐃⲆⲆᐃⵠⲆⵠ, Δᐃ.ⵠⵠᐃⵠⵠⵠΔ, Δᐃ.ᐃⲆᐃᐃΔᐃⵠ], fa, ha, function () {
      by(mx.ⲆΔⲆΔᐃⵠⵠ);
    }, 177.5, 110, da | ba, ja);
    this.buttons[u++].view = w;
    this.ΔΔⲆⲆⵠⲆⵠ = u;
    this.buttons[u] = vf(104, 66, 0, [Δᐃ.ΔΔᐃⵠᐃⵠⲆ, Δᐃ.ΔⵠⵠΔⵠⲆⲆ, Δᐃ.ΔᐃⲆᐃᐃⲆΔ], fa, ha, function () {
      by(mx.ΔΔⲆⲆⵠⲆⵠ);
    }, 242, 110, da | ba, ja);
    this.buttons[u++].view = w;
    this.ⲆᐃᐃⲆᐃⲆⲆ = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ᐃᐃΔᐃⵠⵠᐃ, Δᐃ.ΔⵠᐃᐃⲆⵠⵠ, Δᐃ.ⵠⲆΔΔΔΔⵠ], fa, ha, function () {
      by(undefined, undefined, Kn, mx.ⲆᐃᐃⲆᐃⲆⲆ);
    }, -185, 528, da | ba, ja);
    this.buttons[u++].view = w;
    this.ⲆⵠᐃⵠⲆⵠᐃ = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ΔᐃΔⵠⲆⵠᐃ, Δᐃ.ⵠⵠⵠᐃᐃΔⵠ, Δᐃ.ᐃΔⲆⲆᐃⲆΔ], fa, ha, function () {
      by(Ms, undefined, Aa, mx.ⲆⵠᐃⵠⲆⵠᐃ);
    }, -149, 528, da | ba, ja);
    this.buttons[u++].view = w;
    this.ΔᐃΔⵠΔᐃⵠ = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ᐃΔΔΔⲆⵠᐃ, Δᐃ.ⲆⲆⵠⲆⵠΔⲆ, Δᐃ.ᐃⲆΔΔⵠΔⲆ], fa, ha, function () {
      by(undefined, undefined, Bg, mx.ΔᐃΔⵠΔᐃⵠ);
    }, -113, 528, da | ba, ja);
    this.buttons[u++].view = w;
    this.ⲆⲆⲆᐃⵠᐃⵠ = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ᐃᐃΔᐃΔΔⵠ, Δᐃ.ⲆⵠⵠⲆᐃⵠⲆ, Δᐃ.ᐃⵠΔᐃⲆⲆΔ], fa, ha, function () {
      by(fh, Ms, Es, mx.ⲆⲆⲆᐃⵠᐃⵠ);
    }, -77, 528, da | ba, ja);
    this.buttons[u++].view = w;
    this.ᐃΔᐃΔΔⵠᐃ = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ⲆΔⲆⲆᐃΔⲆ, Δᐃ.ᐃΔⵠⵠΔⵠᐃ, Δᐃ.ᐃⲆⵠᐃⵠᐃᐃ], fa, ha, function () {
      by(Kn, ls, undefined, mx.ᐃΔᐃΔΔⵠᐃ);
    }, -41, 528, da | ba, ja);
    this.buttons[u++].view = w;
    this.ⲆⲆⲆⲆΔⲆΔ = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ⲆΔΔᐃⵠⵠⲆ, Δᐃ.ⲆⲆᐃⵠΔᐃᐃ, Δᐃ.ⵠⲆⵠⲆⲆⲆⲆ], fa, ha, function () {
      by(undefined, Lq, undefined, mx.ⲆⲆⲆⲆΔⲆΔ);
    }, -5, 528, da | ba, ja);
    this.buttons[u++].view = w;
    this.buttons[u] = vf(232, 352, 0, [Δᐃ.ᐃⲆᐃⲆⵠΔⲆ, Δᐃ.ᐃᐃⲆⵠᐃᐃᐃ, Δᐃ.ⲆⲆΔΔᐃᐃΔ], fa, ha, function () {
      $x(300);
    }, -330, 135, da | ba, ja);
    this.buttons[u++].view = v;
    this.buttons[u] = vf(232, 352, 0, [Δᐃ.ᐃΔⵠᐃΔⲆᐃ, Δᐃ.ⵠⵠⵠΔⵠᐃⵠ, Δᐃ.ᐃⵠᐃΔᐃⲆⵠ], fa, ha, function () {
      $x(600);
    }, -195, 135, da | ba, ja);
    this.buttons[u++].view = v;
    this.buttons[u] = vf(243, 374, 0, [Δᐃ.ⵠᐃΔΔΔⲆᐃ, Δᐃ.ⲆⲆⲆΔΔⲆΔ, Δᐃ.ᐃⲆⵠⵠΔᐃΔ], fa, ha, function () {
      $x(2600);
    }, -60, 130, da | ba, ja);
    this.buttons[u++].view = v;
    this.buttons[u] = vf(232, 352, 0, [Δᐃ.ⲆᐃΔⲆⵠΔΔ, Δᐃ.ᐃⵠΔⵠᐃΔΔ, Δᐃ.ⲆΔΔΔᐃᐃⲆ], fa, ha, function () {
      $x(7000);
    }, 78, 135, da | ba, ja);
    this.buttons[u++].view = v;
    this.buttons[u] = vf(243, 374, 0, [Δᐃ.ᐃⲆⵠⵠᐃᐃⵠ, Δᐃ.ᐃⲆⲆⵠⲆⵠⵠ, Δᐃ.ᐃΔⵠΔⲆⲆΔ], fa, ha, function () {
      $x(20000);
    }, 213, 130, da | ba, ja);
    this.buttons[u++].view = v;
    this.buttons[u] = vf(58, 64, 0, [Δᐃ.ᐃΔⵠⲆᐃᐃᐃ, Δᐃ.ⲆⵠᐃⵠΔᐃⲆ, Δᐃ.ᐃΔΔΔⲆⵠΔ], fa, ha, function () {
      V(N);
    }, 300, 88, da | ba, ja);
    this.buttons[u++].view = v;
    this.buttons[u] = vf(323, 112, 0, [Δᐃ.ⵠⵠΔⲆΔⵠⲆ, Δᐃ.ΔⵠⵠΔⲆⲆᐃ, Δᐃ.ⲆⲆⵠΔΔⵠⲆ], fa, ha, function () {
      V(M);
      Ia.ᐃᐃΔΔᐃΔᐃ();
    }, -315, 185, da | ba, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = vf(323, 112, 0, [Δᐃ.ⵠΔⵠᐃΔᐃⵠ, Δᐃ.ΔⵠᐃⵠᐃΔΔ, Δᐃ.ΔᐃΔⵠⵠᐃΔ], fa, ha, function () {
      V(R);
      Na.ᐃᐃΔΔᐃΔᐃ();
    }, -315, 321, da | ba, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = vf(323, 112, 0, [Δᐃ.ⲆⵠⲆⲆⵠⲆᐃ, Δᐃ.ᐃⵠⲆΔⵠᐃᐃ, Δᐃ.ⵠⲆⵠΔΔⲆΔ], fa, ha, function () {
      V(Q);
      Ja.ᐃᐃΔΔᐃΔᐃ();
    }, 153, 185, da | ba, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = vf(323, 112, 0, [Δᐃ.ⲆΔⵠᐃⵠΔᐃ, Δᐃ.ⵠⲆᐃᐃᐃⵠⵠ, Δᐃ.ⵠⵠⵠΔⵠⵠⵠ], fa, ha, function () {
      V(F);
      Ka.ᐃᐃΔΔᐃΔᐃ();
    }, 153, 321, da | ba, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = vf(323, 112, 0, [Δᐃ.ΔⲆᐃΔⵠΔⵠ, Δᐃ.ΔⲆⵠⲆⵠⵠⵠ, Δᐃ.ᐃⲆΔⵠⲆⲆᐃ], fa, ha, function () {
      V(P);
      La.ᐃᐃΔΔᐃΔᐃ();
    }, 153, 463, da | ba, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = vf(323, 112, 0, [Δᐃ.ᐃⲆΔⵠⲆΔΔ, Δᐃ.ΔᐃⲆⵠΔΔⵠ, Δᐃ.ᐃΔΔΔⵠΔⲆ], fa, ha, function () {
      V(j);
      Ma.ᐃᐃΔΔᐃΔᐃ();
    }, -315, 463, da | ba, ja);
    this.buttons[u++].view = L;
    this.buttons[u] = vf(327, 117, 0, [Δᐃ.ᐃⵠⵠⲆⵠⵠⵠ, Δᐃ.ᐃⲆΔⵠΔᐃΔ, Δᐃ.ΔΔᐃⵠⵠⲆΔ], fa, ha, function () {
      V(U);
    }, 155, 70, _, ka);
    this.buttons[u++].view = K;
    this.buttons[u] = vf(130, 129, 0, [Δᐃ.ᐃⲆΔΔᐃΔⲆ, Δᐃ.ⲆᐃᐃΔΔⵠΔ, Δᐃ.ᐃᐃᐃⲆⲆⵠⲆ], fa, ha, function () {
      z(y, ja, "none");
      V(N);
    }, 10, 40, da | ba, ja);
    this.buttons[u++].view = y;
    this.buttons[u] = vf(130, 129, 0, [Δᐃ.ᐃⲆΔΔᐃΔⲆ, Δᐃ.ⲆᐃᐃΔΔⵠΔ, Δᐃ.ᐃᐃᐃⲆⲆⵠⲆ], fa, ha, function () {
      z(x, ja, "none");
      V(N);
    }, 10, 40, da | ba, ja);
    this.buttons[u++].view = x;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(N);
    }, 200, 140, da | ba, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = vf(524, 110, 0, [Δᐃ.ⵠᐃⲆΔΔⵠⵠ, Δᐃ.ⵠⲆᐃΔΔⲆⵠ, Δᐃ.ΔⵠᐃⵠΔⵠᐃ], fa, ha, function () {
      cy("Atlanta");
    }, -265, 300, da | ba, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = vf(523, 110, 0, [Δᐃ.ⵠⵠᐃⲆⲆⲆⲆ, Δᐃ.ⵠᐃⵠΔⲆⵠᐃ, Δᐃ.ΔᐃⵠⲆᐃᐃⲆ], fa, ha, function () {
      cy("LosAngeles");
    }, 5, 300, da | ba, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = vf(344, 110, 0, [Δᐃ.ΔΔᐃⲆΔΔⲆ, Δᐃ.ᐃΔⵠᐃⲆΔⵠ, Δᐃ.ⵠⲆⲆⵠⲆΔⵠ], fa, ha, function () {
      cy("Frankfurt");
    }, -265, 365, da | ba, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = vf(344, 110, 0, [Δᐃ.ᐃΔⵠⲆΔⵠᐃ, Δᐃ.ⲆⲆΔⵠᐃᐃᐃ, Δᐃ.ΔᐃⵠΔΔΔⵠ], fa, ha, function () {
      cy("Osaka");
    }, 100, 365, da | ba, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = vf(344, 110, 0, [Δᐃ.ⵠⵠⵠⲆᐃⲆΔ, Δᐃ.ΔⵠᐃΔΔΔᐃ, Δᐃ.ᐃⲆⵠⵠᐃᐃᐃ], fa, ha, function () {
      cy("Sydney");
    }, -86, 365, da | ba, ja);
    this.buttons[u++].view = O;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(O);
    }, 224, 140, da | ba, ja);
    this.buttons[u++].view = H;
    this.buttons[u] = vf(230, 352, 0, [Δᐃ.ΔⲆⵠⵠⲆΔⲆ, Δᐃ.ⵠⵠᐃΔⲆᐃⵠ, Δᐃ.ⲆΔⲆᐃᐃⵠᐃ], fa, ha, function () {
      $x(350);
    }, -280, 240, da | ba, ja);
    this.buttons[u++].view = H;
    this.buttons[u] = vf(230, 352, 0, [Δᐃ.ᐃᐃⵠᐃⲆⲆΔ, Δᐃ.ⲆΔⵠΔΔᐃⲆ, Δᐃ.ⲆⲆⲆⵠⵠⵠᐃ], fa, ha, function () {
      $x(700);
    }, -130, 240, da | ba, ja);
    this.buttons[u++].view = H;
    this.buttons[u] = vf(230, 352, 0, [Δᐃ.ΔΔⲆⲆΔᐃⲆ, Δᐃ.ⵠⲆᐃⲆⵠⵠΔ, Δᐃ.ΔᐃⲆⲆⵠΔΔ], fa, ha, function () {
      $x(1400);
    }, 20, 240, da | ba, ja);
    this.buttons[u++].view = H;
    this.buttons[u] = vf(230, 352, 0, [Δᐃ.ⲆⲆᐃΔⲆⵠⵠ, Δᐃ.ᐃⵠᐃⵠⵠΔΔ, Δᐃ.ⲆⵠᐃΔⵠΔᐃ], fa, ha, function () {
      $x(3000);
    }, 170, 240, da | ba, ja);
    this.buttons[u++].view = H;
    this.buttons[u] = vf(105, 119, 0, [Δᐃ.ⲆΔΔᐃΔⲆΔ, Δᐃ.ᐃΔⲆΔᐃᐃⲆ, Δᐃ.ΔⵠᐃⵠⲆᐃΔ], fa, ha, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = za.document.createElement("textarea");
      b.value = yf + "?server=" + a[1] + "&region=" + a[0];
      za.document.body.appendChild(b);
      b.select();
      za.document.execCommand("copy");
      za.document.body.removeChild(b);
    }, 170, 310, da | ba, ja);
    this.buttons[u++].view = T;
    this.buttons[u] = vf(105, 119, 0, [Δᐃ.ⲆⵠⵠⲆⲆⵠᐃ, Δᐃ.ᐃⵠΔⵠΔⲆΔ, Δᐃ.ᐃⲆΔΔⲆΔⲆ], fa, ha, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Ix + "rebootServer?token=" + Ox + "&userid=" + Px);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = yf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, da | ba, ja);
    this.buttons[u++].view = T;
    this.buttons[u] = vf(204, 115, 0, [Δᐃ.ⲆⲆⲆᐃⲆⵠᐃ, Δᐃ.ⵠΔΔⲆΔᐃⲆ, Δᐃ.ᐃᐃΔⵠⵠⲆΔ], fa, ha, function () {
      za.open("./commands.html", "_blank");
    }, -265, 490, da | ba, ja);
    this.buttons[u++].view = T;
    this.buttons[u] = vf(145, 69, 0, [Δᐃ.ⲆᐃΔⲆᐃΔⲆ, Δᐃ.ⵠΔⵠⲆΔᐃⲆ, Δᐃ.ΔΔⲆⵠⵠΔᐃ], fa, ha, function () {
      V(A);
    }, -210, 170, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(145, 69, 0, [Δᐃ.ᐃΔΔⵠΔⵠᐃ, Δᐃ.ΔⵠⵠᐃⲆⲆⵠ, Δᐃ.ⲆᐃΔᐃΔⵠᐃ], fa, ha, function () {
      V(D);
    }, 70, 170, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(145, 69, 0, [Δᐃ.ΔⲆᐃⲆΔⲆⲆ, Δᐃ.ΔⲆⵠΔΔⲆΔ, Δᐃ.ⲆⲆⵠⲆⵠΔΔ], fa, ha, function () {
      V(J);
    }, 70, 204, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(145, 69, 0, [Δᐃ.ⲆᐃⵠΔⵠΔᐃ, Δᐃ.ⵠⵠᐃΔⲆΔⵠ, Δᐃ.ᐃⵠΔᐃΔᐃⵠ], fa, ha, function () {
      V(E);
    }, -210, 204, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(145, 69, 0, [Δᐃ.ⲆᐃⵠΔⵠΔᐃ, Δᐃ.ⵠⵠᐃΔⲆΔⵠ, Δᐃ.ᐃⵠΔᐃΔᐃⵠ], fa, ha, function () {
      V(I);
    }, 70, 238, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(145, 69, 0, [Δᐃ.ⲆᐃⵠΔⵠΔᐃ, Δᐃ.ⵠⵠᐃΔⲆΔⵠ, Δᐃ.ᐃⵠΔᐃΔᐃⵠ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        _x(0, 300);
      } else {
        V(m);
      }
    }, 307, 205, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(145, 69, 0, [Δᐃ.ᐃᐃΔⲆⲆⵠⲆ, Δᐃ.ⵠΔⲆⲆⲆᐃΔ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ], fa, ha, function () {
      V(B);
    }, -210, 238, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(145, 69, 0, [Δᐃ.ᐃᐃΔⲆⲆⵠⲆ, Δᐃ.ⵠΔⲆⲆⲆᐃΔ, Δᐃ.ⵠᐃΔᐃⲆⲆᐃ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        _x(1, 600);
      } else {
        V(m);
      }
    }, 307, 239, da | ba, ja);
    this.buttons[u++].view = N;
    this.buttons[u] = vf(192, 101, 0, [Δᐃ.ᐃⲆⲆΔⲆᐃⲆ, Δᐃ.ᐃⲆΔᐃⵠΔⵠ, Δᐃ.ΔᐃᐃⵠΔΔᐃ], fa, ha, function () {
      Zx();
    }, -100, 250, da | ba, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = vf(192, 104, 0, [Δᐃ.ᐃᐃᐃΔᐃⲆⵠ, Δᐃ.ⵠΔⲆᐃΔᐃΔ, Δᐃ.ᐃᐃΔᐃⵠⲆᐃ], fa, ha, function () {
      Zx();
    }, -100, 239, da | ba, ja);
    this.buttons[u++].view = G;
    this.buttons[u] = vf(192, 101, 0, [Δᐃ.ⲆΔⲆΔⵠᐃᐃ, Δᐃ.ⵠⵠⵠⵠⲆΔⲆ, Δᐃ.ⵠᐃⲆᐃⲆⲆⲆ], fa, ha, function () {
      V(c);
    }, 10, 250, da | ba, ja);
    this.buttons[u++].view = S;
    this.buttons[u] = vf(192, 104, 0, [Δᐃ.ⲆⲆΔΔᐃΔΔ, Δᐃ.ⵠⲆⲆⵠᐃⵠⵠ, Δᐃ.ⵠⲆΔⵠⵠᐃⵠ], fa, ha, function () {
      V(c);
    }, 10, 239, da | ba, ja);
    this.buttons[u++].view = G;
    ⲆᐃⵠΔⵠⲆΔ = [];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.ΔΔΔᐃᐃ] = [Δᐃ.ᐃΔΔᐃΔⵠᐃ, Δᐃ.ⲆᐃΔⲆᐃⵠᐃ, Δᐃ.ΔΔⲆΔⵠⲆⵠ];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.ⲆᐃⲆⲆ] = [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.ΔΔΔΔ] = [Δᐃ.ⲆⲆΔⲆⵠⲆⲆ, Δᐃ.ΔⵠᐃΔᐃΔΔ, Δᐃ.ᐃΔⵠᐃⲆΔΔ];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.Δⵠᐃᐃ] = [Δᐃ.ΔᐃⵠⲆᐃⲆΔ, Δᐃ.ⵠᐃΔᐃΔⵠΔ, Δᐃ.ⲆᐃΔⲆΔⵠΔ];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.ΔΔⲆΔ] = [Δᐃ.ΔⵠⲆᐃⵠΔᐃ, Δᐃ.ⲆΔᐃⵠΔⲆⵠ, Δᐃ.ΔⲆⵠᐃⲆⲆΔ];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.ᐃᐃᐃⵠ] = [Δᐃ.ⵠᐃᐃⲆⵠΔⵠ, Δᐃ.ΔᐃᐃⲆΔⵠⲆ, Δᐃ.ᐃΔΔⲆⲆΔᐃ];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.ⲆⵠΔⲆ] = [Δᐃ.ⵠⵠΔᐃΔΔⲆ, Δᐃ.ⲆⲆⲆᐃᐃᐃΔ, Δᐃ.ΔⲆΔⵠⵠⲆⵠ];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.ΔΔᐃΔᐃ] = [Δᐃ.ΔⵠᐃᐃⲆⲆᐃ, Δᐃ.ⵠᐃⲆⲆᐃⲆᐃ, Δᐃ.ⲆᐃⲆΔⵠᐃⲆ];
    ⲆᐃⵠΔⵠⲆΔ[ⵠⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ] = [Δᐃ.ⵠⲆⵠⵠΔᐃΔ, Δᐃ.ΔΔⵠⲆΔΔⵠ, Δᐃ.ⵠΔⲆᐃⵠⵠⵠ];
    ᐃⲆΔⲆᐃΔᐃ = u;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 205, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Es, -29, 300, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Bg, -29, 395, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Y, 65, 205, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Fl, 65, 300, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, kg, 65, 395, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, fh, 159, 205, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Wa, 159, 300, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Aa, 159, 395, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ᐃⲆⵠΔᐃⵠⵠ, Δᐃ.ⵠΔᐃΔΔᐃⲆ, Δᐃ.ΔⲆᐃΔᐃΔΔ], fa, ha, Xg, -61, 315, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ΔᐃΔΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆΔⲆᐃᐃ, Δᐃ.ΔΔᐃΔᐃᐃⵠ], fa, ha, undefined, 260, 315, da | ba, ja);
    this.buttons[u++].view = M;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(L);
    }, -320, 470, da | ba, ja);
    this.buttons[u++].view = M;
    ⲆᐃⲆΔᐃⲆⵠⲆⲆ = u;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Y, -29, 205, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 300, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 395, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Ho, 65, 205, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 65, 300, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 65, 395, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 159, 205, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Bg, 159, 300, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Kn, 159, 395, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ᐃⲆⵠΔᐃⵠⵠ, Δᐃ.ⵠΔᐃΔΔᐃⲆ, Δᐃ.ΔⲆᐃΔᐃΔΔ], fa, ha, undefined, -61, 315, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ΔᐃΔΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆΔⲆᐃᐃ, Δᐃ.ΔΔᐃΔᐃᐃⵠ], fa, ha, undefined, 260, 315, da | ba, ja);
    this.buttons[u++].view = R;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(L);
    }, -320, 470, da | ba, ja);
    this.buttons[u++].view = R;
    ⵠⵠⲆΔΔⲆΔⲆᐃ = u;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Aa, -29, 205, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Aa, -29, 300, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Wa, -29, 395, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Aa, 65, 205, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, kg, 65, 300, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 65, 395, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 159, 205, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 159, 300, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Yh, 159, 395, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ᐃⲆⵠΔᐃⵠⵠ, Δᐃ.ⵠΔᐃΔΔᐃⲆ, Δᐃ.ΔⲆᐃΔᐃΔΔ], fa, ha, undefined, -61, 315, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ΔᐃΔΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆΔⲆᐃᐃ, Δᐃ.ΔΔᐃΔᐃᐃⵠ], fa, ha, Ak, 260, 315, da | ba, ja);
    this.buttons[u++].view = j;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(L);
    }, -320, 470, da | ba, ja);
    this.buttons[u++].view = j;
    ⵠᐃΔᐃⲆΔΔΔΔ = u;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 205, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Lq, -29, 300, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 395, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Fr, 65, 205, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Di, 65, 300, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Wa, 65, 395, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Bg, 159, 205, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 159, 300, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Ho, 159, 395, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ᐃⲆⵠΔᐃⵠⵠ, Δᐃ.ⵠΔᐃΔΔᐃⲆ, Δᐃ.ΔⲆᐃΔᐃΔΔ], fa, ha, undefined, -61, 315, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ΔᐃΔΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆΔⲆᐃᐃ, Δᐃ.ΔΔᐃΔᐃᐃⵠ], fa, ha, Y, 260, 315, da | ba, ja);
    this.buttons[u++].view = Q;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(L);
    }, -320, 470, da | ba, ja);
    this.buttons[u++].view = Q;
    ⵠⵠΔΔⲆΔᐃΔⵠ = u;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 205, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Kn, -29, 300, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 395, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Wa, 65, 205, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 65, 300, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Ho, 65, 395, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 159, 205, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Ms, 159, 300, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Kn, 159, 395, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ᐃⲆⵠΔᐃⵠⵠ, Δᐃ.ⵠΔᐃΔΔᐃⲆ, Δᐃ.ΔⲆᐃΔᐃΔΔ], fa, ha, Wa, -61, 315, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ΔᐃΔΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆΔⲆᐃᐃ, Δᐃ.ΔΔᐃΔᐃᐃⵠ], fa, ha, undefined, 260, 315, da | ba, ja);
    this.buttons[u++].view = F;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(L);
    }, -320, 470, da | ba, ja);
    this.buttons[u++].view = F;
    ᐃᐃΔⲆᐃⲆⲆᐃᐃ = u;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 205, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 300, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, -29, 395, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 65, 205, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Ak, 65, 300, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, kg, 65, 395, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Ho, 159, 205, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, undefined, 159, 300, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(178, 182, 0, [Δᐃ.ᐃΔⵠⵠ, Δᐃ.ᐃΔΔⵠ, Δᐃ.ᐃᐃⲆΔ], fa, ha, Es, 159, 395, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ᐃⲆⵠΔᐃⵠⵠ, Δᐃ.ⵠΔᐃΔΔᐃⲆ, Δᐃ.ΔⲆᐃΔᐃΔΔ], fa, ha, ls, -61, 315, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(39, 122, 0, [Δᐃ.ΔᐃΔΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆΔⲆᐃᐃ, Δᐃ.ΔΔᐃΔᐃᐃⵠ], fa, ha, Yh, 260, 315, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(L);
    }, -320, 470, da | ba, ja);
    this.buttons[u++].view = P;
    this.buttons[u] = vf(260, 260, 0, [Δᐃ.ᐃᐃⲆΔⵠΔⲆ, Δᐃ.ⲆᐃΔⵠⵠΔⲆ, Δᐃ.ᐃⵠⲆΔᐃⲆⵠ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        fy(3, 50);
      } else {
        V(m);
      }
    }, -65, 197, da | ba, ja);
    this.buttons[u++].view = D;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(N);
    }, 309, 180, da | ba, ja);
    this.buttons[u++].view = D;
    this.buttons[u] = vf(260, 260, 0, [Δᐃ.ᐃⲆΔΔⵠⲆᐃ, Δᐃ.ⵠⵠΔⲆⵠⵠΔ, Δᐃ.ΔⲆΔᐃΔⵠⵠ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        fy(0, 100);
      } else {
        V(m);
      }
    }, -65, 197, da | ba, ja);
    this.buttons[u++].view = A;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(N);
    }, 309, 180, da | ba, ja);
    this.buttons[u++].view = A;
    this.buttons[u] = vf(260, 260, 0, [Δᐃ.ⲆᐃⵠⲆΔⵠΔ, Δᐃ.ⲆᐃⲆⲆΔᐃΔ, Δᐃ.ᐃⵠⵠⵠⵠΔⵠ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        fy(4, 150);
      } else {
        V(m);
      }
    }, -65, 197, da | ba, ja);
    this.buttons[u++].view = J;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(N);
    }, 309, 180, da | ba, ja);
    this.buttons[u++].view = J;
    this.buttons[u] = vf(260, 260, 0, [Δᐃ.ⵠⵠᐃΔⵠⲆΔ, Δᐃ.ⵠᐃΔⵠⲆⵠᐃ, Δᐃ.Ⲇⵠᐃᐃᐃᐃⵠ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        fy(1, 300);
      } else {
        V(m);
      }
    }, -65, 197, da | ba, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(N);
    }, 309, 180, da | ba, ja);
    this.buttons[u++].view = E;
    this.buttons[u] = vf(260, 260, 0, [Δᐃ.ᐃᐃΔᐃΔᐃⲆ, Δᐃ.ⵠΔⲆⵠΔᐃΔ, Δᐃ.ⵠⲆᐃⵠᐃⲆⲆ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        fy(2, 600);
      } else {
        V(m);
      }
    }, -65, 197, da | ba, ja);
    this.buttons[u++].view = B;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(N);
    }, 309, 180, da | ba, ja);
    this.buttons[u++].view = B;
    this.buttons[u] = vf(260, 260, 0, [Δᐃ.ⵠⵠᐃΔⵠⲆΔ, Δᐃ.ⵠᐃΔⵠⲆⵠᐃ, Δᐃ.Ⲇⵠᐃᐃᐃᐃⵠ], fa, ha, function () {
      if (q.ⲆⲆΔⲆΔ()) {
        fy(5, 300);
      } else {
        V(m);
      }
    }, -65, 197, da | ba, ja);
    this.buttons[u++].view = I;
    this.buttons[u] = vf(115, 73, 0, [Δᐃ.ⲆⵠᐃΔⲆ, Δᐃ.ⵠᐃΔᐃΔ, Δᐃ.ΔᐃΔᐃᐃ], fa, ha, function () {
      V(N);
    }, 309, 180, da | ba, ja);
    this.buttons[u++].view = I;
    var va = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ᐃⵠᐃⲆⲆⵠⲆ, Δᐃ.ⵠᐃΔⵠᐃᐃᐃ, Δᐃ.ⵠⲆΔΔᐃᐃⵠ], fa, ha, function () {
      ua(Di, 0);
    }, -305, 132, da | ba, ja);
    this.buttons[u++].view = c;
    var wa = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ᐃⵠⵠⲆⵠᐃᐃ, Δᐃ.Ⲇᐃⵠⵠᐃᐃᐃ, Δᐃ.ᐃⵠⵠᐃⵠⲆᐃ], fa, ha, function () {
      ua(Ak, 1);
    }, -273, 132, da | ba, ja);
    this.buttons[u++].view = c;
    var xa = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ⵠᐃⵠΔⵠⲆᐃ, Δᐃ.ᐃⵠⲆΔᐃᐃⲆ, Δᐃ.ᐃⲆΔⵠⵠᐃⵠ], fa, ha, function () {
      ua(undefined, 2);
    }, -241, 132, da | ba, ja);
    this.buttons[u++].view = c;
    var ya = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ⲆᐃᐃᐃⲆⵠᐃ, Δᐃ.ΔⵠΔΔΔΔⵠ, Δᐃ.ΔᐃⲆᐃΔⲆⲆ], fa, ha, function () {
      ua(Es, 3);
    }, -305, 165, da | ba, ja);
    this.buttons[u++].view = c;
    var Ba = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ⵠᐃᐃΔⲆᐃᐃ, Δᐃ.ⵠᐃⵠᐃⲆⲆᐃ, Δᐃ.ΔⵠⲆⵠⵠⵠᐃ], fa, ha, function () {
      ua(Fr, 4);
    }, -273, 165, da | ba, ja);
    this.buttons[u++].view = c;
    var Ca = u;
    this.buttons[u] = vf(46, 51, 0, [Δᐃ.ᐃΔⲆΔⵠⲆⵠ, Δᐃ.ΔⲆΔⵠᐃⲆΔ, Δᐃ.ⲆΔⲆⲆᐃⵠΔ], fa, ha, function () {
      ua(fh, 5);
    }, -241, 165, da | ba, ja);
    this.buttons[u++].view = c;
    var Da = u;
    this.buttons[u] = vf(460, 73, 0, [Δᐃ.ⲆⲆᐃⵠⵠΔᐃ, Δᐃ.ΔⵠⵠΔⲆⵠⲆ, Δᐃ.ΔΔΔⵠⵠⲆⲆ], fa, ha, function () {
      ua(-1);
    }, -180, 170, da | ba, ja);
    this.buttons[u++].view = c;
    var Ea = u;
    this.buttons[u] = vf(222, 68, 0, [Δᐃ.ⵠⵠⲆⵠⲆⲆΔ, Δᐃ.ᐃᐃⲆⵠⲆᐃⵠ, Δᐃ.ΔᐃΔᐃⵠⲆΔ], fa, ha, function () {
      ua(0);
    }, -180, 215, da | ba, ja);
    this.buttons[u++].view = c;
    var Fa = u;
    this.buttons[u] = vf(222, 68, 0, [Δᐃ.ΔᐃΔΔⲆᐃⵠ, Δᐃ.ᐃΔᐃⵠⲆⲆⲆ, Δᐃ.ΔⵠᐃⲆⵠᐃΔ], fa, ha, function () {
      ua(4);
    }, -180, 260, da | ba, ja);
    this.buttons[u++].view = c;
    var Ga = u;
    this.buttons[u] = vf(222, 68, 0, [Δᐃ.ⲆᐃⲆΔᐃΔⲆ, Δᐃ.ᐃⵠⵠⲆⵠⵠⲆ, Δᐃ.ᐃⲆΔⲆΔᐃⲆ], fa, ha, function () {
      ua(2);
    }, -60, 215, da | ba, ja);
    this.buttons[u++].view = c;
    var Ha = u;
    this.buttons[u] = vf(222, 68, 0, [Δᐃ.ΔⵠΔⵠᐃⵠⵠ, Δᐃ.ⲆΔᐃᐃⵠⵠΔ, Δᐃ.ΔΔᐃⵠᐃⲆΔ], fa, ha, function () {
      ua(3);
    }, -60, 260, da | ba, ja);
    this.buttons[u++].view = c;
    this.ΔⵠᐃᐃᐃⲆⲆ = u;
    this.buttons[u] = vf(143, 66, 0, [Δᐃ.ᐃΔⲆⵠⲆΔΔ, Δᐃ.ΔΔⵠᐃⵠᐃΔ, Δᐃ.ⲆᐃᐃⲆⵠⲆⲆ], fa, ha, function () {
      by(Fl, mx.ΔⵠᐃᐃᐃⲆⲆ);
    }, -298, 110, da | ba, ja);
    this.buttons[u++].view = w;
    this.ᐃΔⲆⲆᐃⵠⲆ = u;
    this.buttons[u] = vf(104, 66, 0, [Δᐃ.ⲆⲆⵠᐃⲆᐃⵠ, Δᐃ.ⲆⵠⲆᐃᐃⵠΔ, Δᐃ.ᐃⵠⲆΔΔᐃΔ], fa, ha, function () {
      by(Ak, mx.ᐃΔⲆⲆᐃⵠⲆ);
    }, -223, 110, da | ba, ja);
    this.buttons[u++].view = w;
    this.ΔΔⵠⲆⵠⲆΔ = u;
    this.buttons[u] = vf(110, 66, 0, [Δᐃ.ⵠⲆᐃⵠⵠⲆⲆ, Δᐃ.ΔΔΔⲆⲆⲆⲆ, Δᐃ.ⲆᐃᐃⵠⵠΔⲆ], fa, ha, function () {
      by(ls, mx.ΔΔⵠⲆⵠⲆΔ);
    }, -168, 110, da | ba, ja);
    this.buttons[u++].view = w;
    this.ᐃᐃΔᐃⲆⵠᐃ = u;
    this.buttons[u] = vf(88, 66, 0, [Δᐃ.ᐃⵠᐃᐃΔΔᐃ, Δᐃ.ᐃⲆᐃⲆΔᐃᐃ, Δᐃ.ᐃΔΔΔΔⵠⵠ], fa, ha, function () {
      by(undefined, mx.ᐃᐃΔᐃⲆⵠᐃ);
    }, -110, 110, da | ba, ja);
    this.buttons[u++].view = w;
    this.ΔΔⵠΔⵠᐃⲆ = u;
    this.buttons[u] = vf(88, 66, 0, [Δᐃ.ΔⲆⲆΔᐃᐃᐃ, Δᐃ.ᐃᐃⵠⵠᐃⲆΔ, Δᐃ.ΔΔⵠΔⵠᐃΔ], fa, ha, function () {
      by(undefined, mx.ΔΔⵠΔⵠᐃⲆ);
    }, -63, 110, da | ba, ja);
    this.buttons[u++].view = w;
    this.buttons[u] = vf(86, 44, 0, [Δᐃ.ΔⵠᐃᐃⲆᐃΔ, Δᐃ.ᐃⲆⵠΔΔᐃⵠ, Δᐃ.ᐃⵠⵠΔⲆᐃᐃ], fa, ha, function () {
      za.open("./terms.html", "_blank");
    }, 349, 290, da | ba, ja);
    this.buttons[u++].view = N;
    var Ia = new e(ⵠᐃⵠⵠ.ΔⵠΔᐃᐃ, ᐃⲆΔⲆᐃΔᐃ, function (a) {
      mx.ⵠᐃⵠⲆ = a;
      if (mx.unlock.ⵠᐃⵠⲆ[a] === 1) {
        ᐃᐃⲆⵠ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠᐃⵠⲆ, this.unlock.ⵠᐃⵠⲆ);
    var Ja = new e(ⵠᐃⵠⵠ.ᐃᐃⵠΔ, ⵠᐃΔᐃⲆΔΔΔΔ, function (a) {
      mx.ⵠⵠᐃᐃⵠ = a;
      if (mx.unlock.ⵠⵠᐃᐃⵠ[a] === 1) {
        ᐃᐃⲆⵠ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⵠᐃᐃⵠ, this.unlock.ⵠⵠᐃᐃⵠ);
    var Ka = new e(ⵠᐃⵠⵠ.ᐃᐃΔΔᐃ, ⵠⵠΔΔⲆΔᐃΔⵠ, function (a) {
      mx.ΔⵠᐃⲆⵠ = a;
      if (mx.unlock.ΔⵠᐃⲆⵠ[a] === 1) {
        ᐃᐃⲆⵠ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠᐃⲆⵠ, this.unlock.ΔⵠᐃⲆⵠ);
    var La = new e(ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ, ᐃᐃΔⲆᐃⲆⲆᐃᐃ, function (a) {
      mx.ⵠΔΔⲆᐃ = a;
      if (mx.unlock.ⵠΔΔⲆᐃ[a] === 1) {
        ᐃᐃⲆⵠ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠΔΔⲆᐃ, this.unlock.ⵠΔΔⲆᐃ);
    var Ma = new e(ⵠᐃⵠⵠ.ᐃⵠΔⵠⵠ, ⵠⵠⲆΔΔⲆΔⲆᐃ, function (a) {
      mx.ⲆⵠⲆⲆⵠ = a;
      if (mx.unlock.ⲆⵠⲆⲆⵠ[a] === 1) {
        ᐃᐃⲆⵠ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⵠⲆⲆⵠ, this.unlock.ⲆⵠⲆⲆⵠ);
    var Na = new e(ⵠᐃⵠⵠ.ⲆΔΔⲆⲆ, ⲆᐃⲆΔᐃⲆⵠⲆⲆ, function (a) {
      mx.ᐃΔⵠⲆᐃ = a;
      if (mx.unlock.ᐃΔⵠⲆᐃ[a] === 1) {
        ᐃᐃⲆⵠ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃΔⵠⲆᐃ, this.unlock.ᐃΔⵠⲆᐃ);
    this.ⵠΔⵠΔⲆΔᐃ = function (a) {
      vx.ⵠΔⵠΔ = df(q.ⲆΔ, a);
      for (var b = 0; q.buttons.length > b; b++) {
        if (q.buttons[b].info.active === ka) {
          q.buttons[b].ⲆⲆⲆᐃ(q.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        }
      }
    };
    this.ⵠΔⵠᐃᐃⲆⵠ = function (a) {
      vx.ⵠΔⵠΔ = df(q.ⲆΔ, a);
      for (var b = 0; q.buttons.length > b; b++) {
        var c = q.buttons[b];
        if (ka === c.info.active && c.ⲆⲆⲆᐃ(q.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ΔⲆⲆᐃⵠΔᐃ = Nn;
    this.ⵠⵠⲆᐃᐃⲆΔ = function (a) {
      vx.ⵠΔⵠΔ = df(q.ⲆΔ, a);
      var c = Ur;
      for (var d = 0; d < q.buttons.length; d++) {
        if (q.buttons[d].info.active === ka) {
          c |= q.buttons[d].ⲆⲆⲆᐃ(q.ⲆΔ, vx.ⵠΔⵠΔ, af);
        }
      }
      if (c !== q.ΔⲆⲆᐃⵠΔᐃ) {
        q.ΔⲆⲆᐃⵠΔᐃ = c;
        b.style.cursor = c ? q.ⲆᐃⵠᐃⵠΔⲆ : q.ΔⵠⵠΔᐃᐃⲆ;
      }
    };
    this.ⲆⲆΔΔⲆⵠΔ = function () {
      za.addEventListener("mousedown", this.ⵠΔⵠΔⲆΔᐃ, Go);
      za.addEventListener("mouseup", this.ⵠΔⵠᐃᐃⲆⵠ, false);
      za.addEventListener("mousemove", this.ⵠⵠⲆᐃᐃⲆΔ, fk);
    };
    this.ⵠⲆⵠΔᐃᐃΔ = function () {
      za.removeEventListener("mousedown", this.ⵠΔⵠΔⲆΔᐃ, false);
      za.removeEventListener("mouseup", this.ⵠΔⵠᐃᐃⲆⵠ, Eq);
      za.removeEventListener("mousemove", this.ⵠⵠⲆᐃᐃⲆΔ, Ol);
    };
  }
  function Sw() {
    ᐃⵠⲆΔ.ᐃⵠᐃᐃⲆΔᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + qx.Δᐃⵠ + "%20days%20with%20" + qx.ⲆᐃᐃⲆⵠᐃΔ.ᐃᐃΔⲆΔ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Tw(b, c) {
    var f = this;
    this.ⲆΔ = b;
    this.Ⲇ = c;
    if (za.navigator.userAgent.indexOf("Edge") > -1) {
      this.ΔⵠⵠΔᐃᐃⲆ = "default";
      this.ⲆᐃⵠᐃⵠΔⲆ = "pointer";
    } else {
      this.ΔⵠⵠΔᐃᐃⲆ = "url('img/cursor0.png'), default";
      this.ⲆᐃⵠᐃⵠΔⲆ = "url('img/cursor1.png'), pointer";
    }
    this.ΔΔⲆΔⵠⲆᐃ = 1;
    this.ᐃⵠΔΔⲆΔⲆ = 1;
    this.ⲆⵠⲆΔⲆⲆΔ = 1;
    this.ᐃΔΔᐃᐃⲆⲆ = 1;
    this.ΔⵠΔᐃΔⲆΔⵠⵠ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ᐃΔΔ: function () {
        this.style.left = Math.floor($n - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ΔᐃΔⲆ = {
      ᐃⵠⵠⲆⵠⲆᐃ: vf(60, 60, 0, Ⲇᐃ[782]),
      ᐃΔⲆΔΔᐃᐃ: vf(60, 60, 0, Ⲇᐃ[783])
    };
    this.sign = {
      open: false,
      ⵠⲆⵠΔⲆᐃΔᐃⵠ: 0,
      ΔⵠᐃⲆΔⵠⵠ: document.getElementById("sign_object"),
      ΔⲆᐃⲆⵠⵠⲆ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: vf(60, 60, 0, Ⲇᐃ[803]),
      ᐃⲆⵠⵠΔⲆᐃ: function () {
        var a = Math.floor(Math.floor((3 + qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ.length) / 4) * (10 + Ⲇᐃ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ᐃΔΔ: function () {
        this.style.left = Math.floor($n - 150) + "px";
        this.style.top = Math.floor(_n - 115) + "px";
      },
      ⲆⲆⲆⵠᐃ: function () {
        sx.sign.style.display = "none";
        sx.sign.open = fk;
      },
      select: function () {
        sx.sign.open = !sx.sign.open;
        if (sx.sign.open) {
          sx.sign.style.display = "inline-block";
        } else {
          sx.sign.style.display = "none";
        }
      },
      ok: function () {
        ΔⵠⲆⵠ.ⲆⲆⲆΔⲆᐃᐃⲆᐃ(qx.sign.ᐃΔᐃⲆⲆ, sx.sign.ΔⲆᐃⲆⵠⵠⲆ);
        sx.sign.select();
      },
      up: function () {
        sx.sign.ΔⲆᐃⲆⵠⵠⲆ = sx.sign.ΔⲆᐃⲆⵠⵠⲆ === 0 ? 3 : sx.sign.ΔⲆᐃⲆⵠⵠⲆ - 1;
        sx.sign.ΔⵠᐃⲆΔⵠⵠ.src = "./img/sign" + sx.sign.ΔⲆᐃⲆⵠⵠⲆ + ".png";
      },
      down: function () {
        sx.sign.ΔⲆᐃⲆⵠⵠⲆ = (sx.sign.ΔⲆᐃⲆⵠⵠⲆ + 1) % 4;
        sx.sign.ΔⵠᐃⲆΔⵠⵠ.src = "./img/sign" + sx.sign.ΔⲆᐃⲆⵠⵠⲆ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, lh);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, wr);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, rl);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, Ol);
    this.ΔᐃⵠᐃΔ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ⲆⵠᐃⵠΔ: 1,
        b: 1,
        a: 3,
        ⵠⲆᐃΔⵠ: 316
      }, {
        id: 1,
        name: "stone",
        ⲆⵠᐃⵠΔ: 1,
        b: 1,
        a: 4,
        ⵠⲆᐃΔⵠ: 315
      }, {
        id: 2,
        name: "gold",
        ⲆⵠᐃⵠΔ: 1,
        b: 1,
        a: 6,
        ⵠⲆᐃΔⵠ: 297
      }, {
        id: 3,
        name: "diamond",
        ⲆⵠᐃⵠΔ: 4,
        b: 4,
        a: 1,
        ⵠⲆᐃΔⵠ: 298
      }, {
        id: 4,
        name: "amethyst",
        ⲆⵠᐃⵠΔ: 8,
        b: 8,
        a: 1,
        ⵠⲆᐃΔⵠ: 418
      }, {
        id: 5,
        name: "reidite",
        ⲆⵠᐃⵠΔ: 16,
        b: 16,
        a: 1,
        ⵠⲆᐃΔⵠ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ⲆⵠᐃⵠΔ: 10,
        b: 10,
        a: 1,
        ⵠⲆᐃΔⵠ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ⲆⵠᐃⵠΔ: 16,
        b: 16,
        a: 1,
        ⵠⲆᐃΔⵠ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ⲆⵠᐃⵠΔ: 20,
        b: 20,
        a: 1,
        ⵠⲆᐃΔⵠ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ⲆⵠᐃⵠΔ: 30,
        b: 30,
        a: 1,
        ⵠⲆᐃΔⵠ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ⲆⵠᐃⵠΔ: 40,
        b: 40,
        a: 1,
        ⵠⲆᐃΔⵠ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ⲆⵠᐃⵠΔ: 60,
        b: 60,
        a: 1,
        ⵠⲆᐃΔⵠ: 966
      }],
      button: vf(60, 60, 0, Ⲇᐃ[795]),
      ᐃΔΔ: function () {
        this.style.left = Math.floor($n - 450) + "px";
        this.style.top = Math.floor(_n - 270) + "px";
      },
      select: function () {
        sx.ΔᐃⵠᐃΔ.open = !sx.ΔᐃⵠᐃΔ.open;
        if (sx.ΔᐃⵠᐃΔ.open) {
          sx.ΔᐃⵠᐃΔ.style.display = "inline-block";
        } else {
          sx.ΔᐃⵠᐃΔ.style.display = "none";
        }
      },
      ⲆⲆⲆⵠᐃ: function () {
        sx.ΔᐃⵠᐃΔ.style.display = "none";
        sx.ΔᐃⵠᐃΔ.open = false;
      },
      ΔΔΔⵠᐃᐃΔ: function () {
        ΔⵠⲆⵠ.ⵠᐃᐃⵠⵠᐃᐃΔⲆ(this.ᐃᐃⲆᐃΔΔⲆ);
      },
      ⲆⵠᐃᐃⲆ: function () {
        this.id;
        if (this.ᐃᐃⲆᐃΔΔⲆ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ᐃᐃⲆᐃΔΔⲆ.b);
          this.ᐃᐃⲆᐃΔΔⲆ.ⲆⵠᐃⵠΔ = a;
          document.getElementById(this.ᐃᐃⲆᐃΔΔⲆ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ᐃᐃⲆᐃΔΔⲆ.a);
          this.ᐃᐃⲆᐃΔΔⲆ.ⲆⵠᐃⵠΔ = a;
          document.getElementById(this.ᐃᐃⲆᐃΔΔⲆ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ΔᐃⵠᐃΔ.ⲆⲆⲆⵠᐃ, Ol);
    var e = [["mouseup", this.ΔᐃⵠᐃΔ.ΔΔΔⵠᐃᐃΔ, "buy_"], ["click", this.ΔᐃⵠᐃΔ.ⲆⵠᐃᐃⲆ, ""], ["change", this.ΔᐃⵠᐃΔ.ⲆⵠᐃᐃⲆ, ""], ["keypress", this.ΔᐃⵠᐃΔ.keypress, ""]];
    for (var i = 0; this.ΔᐃⵠᐃΔ.items.length > i; i++) {
      var j = this.ΔᐃⵠᐃΔ.items[i];
      document.getElementById(j.name + "_market").src = Xg === Ⲇᐃ[j.ⵠⲆᐃΔⵠ][0].ⲆⵠⵠᐃⲆ ? Ⲇᐃ[j.ⵠⲆᐃΔⵠ][0].src : Ⲇᐃ[j.ⵠⲆᐃΔⵠ][0].ⲆⵠⵠᐃⲆ;
      if (j.a === 1) {
        document.getElementById(j.name + "_trad_number").innerHTML = j.b;
        document.getElementById(j.name + "_number").value = 1;
        document.getElementById(j.name + "_number").step = 1;
        document.getElementById(j.name + "_number").min = 1;
        document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
      } else {
        document.getElementById(j.name + "_trad_number").innerHTML = 1;
        document.getElementById(j.name + "_number").value = j.a;
        document.getElementById(j.name + "_number").step = j.a;
        document.getElementById(j.name + "_number").min = j.a;
      }
      document.getElementById("buy_" + j.name + "_number").ᐃᐃⲆᐃΔΔⲆ = j;
      document.getElementById(j.name + "_number").ᐃᐃⲆᐃΔΔⲆ = j;
      for (var k = 0; e.length > k; k++) {
        document.getElementById(e[k][2] + j.name + "_number").addEventListener(e[k][0], e[k][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      Δᐃⵠᐃⵠ: document.getElementById("agree_ing").style,
      ᐃΔⵠᐃΔΔⵠ: document.getElementById("cancel_agree_ing").style,
      ΔⵠⲆⲆⲆΔⵠ: document.getElementById("quest_agree_ing").style,
      ⵠᐃⲆⲆᐃΔᐃ: document.getElementById("spectator_agree_ing").style,
      ⵠⵠⵠⲆΔᐃⲆ: document.getElementById("auto_feed_agree_ing").style,
      ΔᐃᐃⵠⲆΔᐃ: document.getElementById("info_agree_ing").style,
      ⵠᐃᐃⲆΔⵠⲆ: document.getElementById("pixelated_agree_ing").style,
      button: vf(60, 60, 0, Ⲇᐃ[727]),
      ΔᐃⵠᐃⲆⵠⵠⵠⵠ: function () {
        sx.options.open = !sx.options.open;
        if (sx.options.open) {
          sx.options.style.display = "inline-block";
        } else {
          sx.options.style.display = "none";
        }
      },
      ⲆⲆⲆⲆⲆᐃⵠⵠⲆ: function () {
        mx.ΔᐃⲆΔᐃΔΔ();
      },
      ⵠⵠΔⵠᐃᐃᐃᐃⲆ: function () {
        mx.ΔⵠⲆΔⵠⵠᐃ();
      },
      high: function () {
        mx.ⲆⵠᐃᐃⲆⵠᐃⵠⵠ();
      },
      low: function () {
        mx.ⲆⵠΔⵠⵠⵠΔᐃⲆ();
      },
      ΔⲆⵠⵠΔ: function () {
        sx.ΔⵠⲆᐃ.ΔⲆⵠⵠΔ();
      },
      ᐃᐃΔⵠⵠⲆᐃⵠΔ: function () {
        sx.ᐃΔᐃΔⵠ.ΔⲆⵠⵠΔ();
      },
      ⵠⵠΔⵠⵠᐃⵠⵠΔ: function () {
        sx.ᐃⵠⵠⵠ.ΔⲆⵠⵠΔ();
      },
      ΔᐃΔⲆⲆᐃⲆⵠᐃ: function () {
        qx.ᐃΔⲆⵠⵠⵠᐃ.ᐃⲆⵠᐃΔⲆⲆ();
      },
      ᐃⵠⲆⵠⵠⵠⵠᐃΔ: function () {
        qx.ᐃⵠᐃᐃΔ.ᐃⲆⵠᐃΔⲆⲆ();
      },
      ⲆⲆⲆⵠᐃ: function () {
        sx.options.style.display = "none";
        sx.options.open = false;
      },
      ᐃΔΔ: function () {
        this.style.left = Math.floor($n - 235) + "px";
        this.style.top = Math.floor(_n - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⲆⲆⲆⲆⲆᐃⵠⵠⲆ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⵠⵠΔⵠᐃᐃᐃᐃⲆ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, nl);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆⲆⲆⵠᐃ, In);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ΔⲆⵠⵠΔ, false);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⵠⵠΔⵠⵠᐃⵠⵠΔ, Nq);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃΔⵠⵠⲆᐃⵠΔ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ΔᐃΔⲆⲆᐃⲆⵠᐃ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠⲆⵠⵠⵠⵠᐃΔ, false);
    this.ᐃΔᐃΔⵠ = {
      open: false,
      ⲆᐃⲆⵠᐃ: ᐃᐃⲆⵠ.get("starve_cancel") ? ᐃᐃⲆⵠ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      Δᐃⵠᐃⵠ: document.getElementById("cancel_agree").style,
      button: 0,
      ⵠⵠ: 0,
      ⲆⲆⲆⵠᐃ: function () {
        sx.ᐃΔᐃΔⵠ.style.display = "none";
        sx.ᐃΔᐃΔⵠ.open = false;
      },
      ⵠΔⲆⲆᐃΔᐃ: function () {
        if (qx.ᐃⲆⵠⵠ.ᐃⵠᐃΔᐃ) {
          ΔⵠⲆⵠ.ⲆᐃⵠΔᐃΔᐃᐃⵠ();
        }
        sx.ᐃΔᐃΔⵠ.ⲆⲆⲆⵠᐃ();
      },
      ΔⲆⵠⵠΔ: function () {
        if (sx.ᐃΔᐃΔⵠ.ⲆᐃⲆⵠᐃ) {
          ᐃᐃⲆⵠ.set("starve_cancel", "0");
          sx.ᐃΔᐃΔⵠ.Δᐃⵠᐃⵠ.display = "inline-block";
          sx.options.ᐃΔⵠᐃΔΔⵠ.display = "none";
        } else {
          ᐃᐃⲆⵠ.set("starve_cancel", "1");
          sx.ᐃΔᐃΔⵠ.Δᐃⵠᐃⵠ.display = "none";
          sx.options.ᐃΔⵠᐃΔΔⵠ.display = "inline-block";
        }
        sx.ᐃΔᐃΔⵠ.ⲆᐃⲆⵠᐃ = !sx.ᐃΔᐃΔⵠ.ⲆᐃⲆⵠᐃ;
      },
      ⵠᐃᐃⵠⵠΔⵠ: function () {
        if (this.ⲆᐃⲆⵠᐃ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.ⵠΔⲆⲆᐃΔᐃ();
        }
      },
      ᐃΔΔ: function () {
        this.style.left = Math.floor($n - 235) + "px";
        this.style.top = Math.floor(_n - 130) + "px";
      }
    };
    this.ᐃΔᐃΔⵠ.id.oncontextmenu = function () {
      return false;
    };
    this.ᐃΔᐃΔⵠ.Δᐃⵠᐃⵠ.display = "none";
    if (this.ᐃΔᐃΔⵠ.ⲆᐃⲆⵠᐃ) {
      this.options.ᐃΔⵠᐃΔΔⵠ.display = "inline-block";
    } else {
      this.options.ᐃΔⵠᐃΔΔⵠ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃΔᐃΔⵠ.ⵠΔⲆⲆᐃΔᐃ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃΔᐃΔⵠ.ⲆⲆⲆⵠᐃ, fk);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃΔᐃΔⵠ.ΔⲆⵠⵠΔ, Qi);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, fk);
    this.ⲆᐃⵠⲆᐃⲆΔ = {
      ⲆᐃⲆⵠᐃ: ᐃᐃⲆⵠ.get("starve_aliasing") && ᐃᐃⲆⵠ.get("starve_aliasing") === "0" ? 0 : 1,
      ⵠΔⲆΔΔⲆᐃ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ΔⲆⵠⵠΔ: function () {
        if (sx.ⲆᐃⵠⲆᐃⲆΔ.ⲆᐃⲆⵠᐃ === 0) {
          ᐃᐃⲆⵠ.set("starve_aliasing", "1");
          sx.ⲆᐃⵠⲆᐃⲆΔ.ⵠΔⲆΔΔⲆᐃ(1);
          sx.options.ⵠᐃᐃⲆΔⵠⲆ.display = "inline-block";
        } else {
          ᐃᐃⲆⵠ.set("starve_aliasing", "0");
          sx.ⲆᐃⵠⲆᐃⲆΔ.ⵠΔⲆΔΔⲆᐃ(0);
          sx.options.ⵠᐃᐃⲆΔⵠⲆ.display = "none";
        }
        sx.ⲆᐃⵠⲆᐃⲆΔ.ⲆᐃⲆⵠᐃ = (sx.ⲆᐃⵠⲆᐃⲆΔ.ⲆᐃⲆⵠᐃ + 1) % 2;
      }
    };
    if (this.ⲆᐃⵠⲆᐃⲆΔ.ⲆᐃⲆⵠᐃ === 1) {
      this.options.ⵠᐃᐃⲆΔⵠⲆ.display = "inline-block";
    } else {
      this.ⲆᐃⵠⲆᐃⲆΔ.ⵠΔⲆΔΔⲆᐃ(0);
      this.options.ⵠᐃᐃⲆΔⵠⲆ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⲆᐃⵠⲆᐃⲆΔ.ΔⲆⵠⵠΔ, false);
    this.ΔⲆⲆⲆᐃ = {
      ⲆᐃⲆⵠᐃ: ᐃᐃⲆⵠ.get("starve_info_box") ? ᐃᐃⲆⵠ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ᐃⲆⵠⵠ: 0,
      ΔⲆⵠⵠΔ: function () {
        if (sx.ΔⲆⲆⲆᐃ.ⲆᐃⲆⵠᐃ === 0) {
          ᐃᐃⲆⵠ.set("starve_info_box", "1");
          sx.options.ΔᐃᐃⵠⲆΔᐃ.display = "inline-block";
        } else {
          ᐃᐃⲆⵠ.set("starve_info_box", "0");
          sx.options.ΔᐃᐃⵠⲆΔᐃ.display = "none";
        }
        sx.ΔⲆⲆⲆᐃ.ⲆᐃⲆⵠᐃ = (sx.ΔⲆⲆⲆᐃ.ⲆᐃⲆⵠᐃ + 1) % 2;
      },
      ⲆⲆⲆᐃ: function (a, b, c) {
        if (a && this.ⲆᐃⲆⵠᐃ) {
          this.display = 1;
          this.id = c === 0 ? b.id : ot[b.id].ⵠⵠⵠᐃ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ᐃⲆⵠⵠ = c;
        }
        return a;
      }
    };
    if (this.ΔⲆⲆⲆᐃ.ⲆᐃⲆⵠᐃ === 1) {
      this.options.ΔᐃᐃⵠⲆΔᐃ.display = "inline-block";
    } else {
      this.options.ΔᐃᐃⵠⲆΔᐃ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ΔⲆⲆⲆᐃ.ΔⲆⵠⵠΔ, Eq);
    if (ᐃᐃⲆⵠ.get("starve_scale")) {
      bq = Number(ᐃᐃⲆⵠ.get("starve_scale"));
      document.getElementById("input_ratio").value = bq;
      bq *= Aq / Cq;
      Dq();
    }
    this.ⵠΔΔᐃⲆⵠᐃ = function () {
      ᐃᐃⲆⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      bq = document.getElementById("input_ratio").value * (Aq / Cq);
      Dq();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ⵠΔΔᐃⲆⵠᐃ, false);
    this.ΔⵠⲆᐃ = {
      open: false,
      ⲆᐃⲆⵠᐃ: ᐃᐃⲆⵠ.get("starve_safe") && ᐃᐃⲆⵠ.get("starve_safe") === "0" ? 0 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      Δᐃⵠᐃⵠ: document.getElementById("agree").style,
      button: 0,
      ⵠⵠ: 0,
      ⲆⲆⲆⵠᐃ: function () {
        sx.ΔⵠⲆᐃ.style.display = "none";
        sx.ΔⵠⲆᐃ.open = false;
      },
      all: function () {
        if (!qx.ΔⲆⵠᐃΔ.wait) {
          if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && qx.ᐃⲆⵠⵠ.id < 0 && !qx.ΔⲆⵠΔⵠ.enabled) {
            ΔⵠⲆⵠ.ⵠΔᐃᐃⲆᐃⲆΔⵠ(sx.ΔⵠⲆᐃ.button);
          }
          sx.ΔⵠⲆᐃ.ⲆⲆⲆⵠᐃ();
        }
      },
      ᐃΔⵠᐃ: function () {
        if (qx.ᐃⲆⵠⵠ.ᐃⵠⲆΔᐃ && !qx.ΔⲆⵠᐃΔ.wait) {
          if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && qx.ᐃⲆⵠⵠ.id < 0 && !qx.ΔⲆⵠΔⵠ.enabled) {
            ΔⵠⲆⵠ.ⵠⲆⲆⲆⵠⵠⲆⲆΔ(sx.ΔⵠⲆᐃ.button);
          }
          sx.ΔⵠⲆᐃ.ⲆⲆⲆⵠᐃ();
        }
      },
      ΔᐃⲆⵠΔⵠᐃᐃᐃ: function () {
        if (!qx.ΔⲆⵠᐃΔ.wait) {
          if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && qx.ᐃⲆⵠⵠ.id < 0 && !qx.ΔⲆⵠΔⵠ.enabled) {
            ΔⵠⲆⵠ.ⵠᐃⲆᐃⵠΔᐃⵠⵠ(sx.ΔⵠⲆᐃ.button);
          }
          sx.ΔⵠⲆᐃ.ⲆⲆⲆⵠᐃ();
        }
      },
      ΔⲆⵠⵠΔ: function () {
        if (sx.ΔⵠⲆᐃ.ⲆᐃⲆⵠᐃ) {
          ᐃᐃⲆⵠ.set("starve_safe", "0");
          sx.ΔⵠⲆᐃ.Δᐃⵠᐃⵠ.display = "inline-block";
          sx.options.Δᐃⵠᐃⵠ.display = "none";
        } else {
          ᐃᐃⲆⵠ.set("starve_safe", "1");
          sx.ΔⵠⲆᐃ.Δᐃⵠᐃⵠ.display = "none";
          sx.options.Δᐃⵠᐃⵠ.display = "inline-block";
        }
        sx.ΔⵠⲆᐃ.ⲆᐃⲆⵠᐃ = !sx.ΔⵠⲆᐃ.ⲆᐃⲆⵠᐃ;
      },
      ⵠᐃᐃⵠⵠΔⵠ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = Ⲇᐃ[Zr[a].ᐃΔ][0].ⲆⵠⵠᐃⲆ === Y ? Ⲇᐃ[Zr[a].ᐃΔ][0].src : Ⲇᐃ[Zr[a].ᐃΔ][0].ⲆⵠⵠᐃⲆ;
        if (Zr[a].ᐃΔⵠᐃ && !qx.ᐃⲆⵠΔᐃ && qx.ᐃⲆⵠⵠ.ᐃⵠⲆΔᐃ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⲆᐃⲆⵠᐃ) {
          this.style.display = "inline-block";
          this.open = _h;
        } else {
          this.all();
        }
      },
      ᐃΔΔ: function () {
        this.style.left = Math.floor($n - 235) + "px";
        this.style.top = Math.floor(_n - 175) + "px";
      }
    };
    this.ΔⵠⲆᐃ.Δᐃⵠᐃⵠ.display = "none";
    if (this.ΔⵠⲆᐃ.ⲆᐃⲆⵠᐃ) {
      this.options.Δᐃⵠᐃⵠ.display = "inline-block";
    } else {
      this.options.Δᐃⵠᐃⵠ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ΔⵠⲆᐃ.ΔᐃⲆⵠΔⵠᐃᐃᐃ, lh);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ΔⵠⲆᐃ.all, Tr);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ΔⵠⲆᐃ.ᐃΔⵠᐃ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ΔⵠⲆᐃ.ⲆⲆⲆⵠᐃ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ΔⵠⲆᐃ.ΔⲆⵠⵠΔ, false);
    this.ΔⲆΔᐃⲆ = {
      open: false,
      ᐃΔⵠΔⵠ: -1,
      button: vf(60, 60, 0, Ⲇᐃ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ᐃΔΔ: function () {
        this.style.left = Math.floor($n - 300) + "px";
        this.style.top = Math.floor(_n - 215) + "px";
      },
      ⲆⲆⲆⵠᐃ: function () {
        sx.ΔⲆΔᐃⲆ.open = false;
        sx.ΔⲆΔᐃⲆ.style.display = "none";
      },
      select: function () {
        sx.ΔⲆΔᐃⲆ.open = !sx.ΔⲆΔᐃⲆ.open;
        if (sx.ΔⲆΔᐃⲆ.open) {
          sx.ΔⲆΔᐃⲆ.style.display = "inline-block";
        } else {
          sx.ΔⲆΔᐃⲆ.style.display = "none";
        }
      },
      ΔΔΔⵠᐃᐃΔ: function () {
        if (sx.ΔⲆΔᐃⲆ.ᐃΔⵠΔⵠ >= 0) {
          ΔⵠⲆⵠ.ΔⲆⲆⵠⵠΔΔⲆⲆ(sx.ΔⲆΔᐃⲆ.ᐃΔⵠΔⵠ);
          sx.ΔⲆΔᐃⲆ.ⲆⲆⲆⵠᐃ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + sx.ΔⲆΔᐃⲆ.ᐃΔⵠΔⵠ);
          }
        }
      },
      ⵠΔⵠⵠⲆ: function () {
        var a = qx.ΔⲆΔᐃⲆ.value;
        document.getElementById("points_bank").innerHTML = ᐃⵠⲆΔ.ⵠⲆᐃⵠΔᐃⵠ(a) + " points";
        for (var b = 0; b < Pf.length; b++) {
          if (Pf[b].ⲆⲆΔⵠΔ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⲆᐃΔΔⲆⲆⵠⲆⲆ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = Pf[a - 1];
        if (qx.ΔⲆΔᐃⲆ.value >= b.ⲆⲆΔⵠΔ) {
          sx.ΔⲆΔᐃⲆ.ᐃΔⵠΔⵠ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          sx.ΔⲆΔᐃⲆ.ᐃΔⵠΔⵠ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = Ⲇᐃ[Zr[b[c - 1][1]].ᐃΔ][0].ⲆⵠⵠᐃⲆ === undefined ? Ⲇᐃ[Zr[b[c - 1][1]].ᐃΔ][0].src : Ⲇᐃ[Zr[b[c - 1][1]].ᐃΔ][0].ⲆⵠⵠᐃⲆ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ΔⲆΔᐃⲆ.ⲆⲆⲆⵠᐃ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ΔⲆΔᐃⲆ.ΔΔΔⵠᐃᐃΔ, false);
    for (k = 1; k < 11; k++) {
      document.getElementById("starter" + k).addEventListener("mouseup", this.ΔⲆΔᐃⲆ.ⲆᐃΔΔⲆⲆⵠⲆⲆ, false);
    }
    this.ᐃⵠⵠⵠ = {
      open: false,
      ⲆᐃⲆⵠᐃ: ᐃᐃⲆⵠ.get("starve_quests") && ᐃᐃⲆⵠ.get("starve_quests") === "1" ? 1 : 0,
      button: vf(60, 60, 0, Ⲇᐃ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ᐃΔΔ: function () {
        this.style.left = Math.floor($n - 420) + "px";
        this.style.top = Math.floor(_n - 270) + "px";
      },
      ⲆⲆⲆⵠᐃ: function () {
        sx.ᐃⵠⵠⵠ.style.display = "none";
        sx.ᐃⵠⵠⵠ.open = false;
      },
      select: function () {
        sx.ᐃⵠⵠⵠ.open = !sx.ᐃⵠⵠⵠ.open;
        if (sx.ᐃⵠⵠⵠ.open) {
          sx.ᐃⵠⵠⵠ.style.display = "inline-block";
        } else {
          sx.ᐃⵠⵠⵠ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < Df.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⲆⵠᐃⲆⲆⵠⲆ: 0,
      ⵠᐃⵠⲆⵠⵠᐃ: 0,
      ΔⵠⵠᐃᐃΔᐃᐃⵠ: function () {
        if (sx.ᐃⵠⵠⵠ.open) {
          var a = new Date().getTime();
          if (a - this.ⲆⵠᐃⲆⲆⵠⲆ >= 1000) {
            this.ⲆⵠᐃⲆⲆⵠⲆ = a;
            for (var b = 0; b < Df.length; b++) {
              if (sx.ᐃⵠⵠⵠ.list[b]) {
                var c = Df[b].time - (a - px.ⲆⲆΔᐃΔ.ⵠΔⵠⵠⲆ + sx.ᐃⵠⵠⵠ.ⵠᐃⵠⲆⵠⵠᐃ);
                if (c > 960000) {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 480000) + " days";
                } else if (c > 480000) {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 480000) + " day";
                } else if (c > 60000) {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 60000) + " min";
                } else {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 1000) + " sec";
                }
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            sx.ᐃⵠⵠⵠ.ᐃⲆᐃⵠᐃⵠᐃ(b, a[b]);
          }
        }
      },
      ᐃⲆᐃⵠᐃⵠᐃ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          qx.ⵠⲆΔⲆ.ᐃⲆΔⵠᐃΔᐃ(0, 1);
          sx.ⲆⲆΔᐃⲆᐃⲆ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        sx.ᐃⵠⵠⵠ.list[a] = 0;
      },
      modify: function (a, b) {
        sx.ᐃⵠⵠⵠ.ᐃⲆᐃⵠᐃⵠᐃ(a, b);
        if (sx.ᐃⵠⵠⵠ.ⲆᐃⲆⵠᐃ) {
          sx.ᐃⵠⵠⵠ.open = true;
          sx.ᐃⵠⵠⵠ.style.display = "inline-block";
        }
      },
      ΔⲆⵠⵠΔ: function () {
        if (sx.ᐃⵠⵠⵠ.ⲆᐃⲆⵠᐃ) {
          ᐃᐃⲆⵠ.set("starve_quests", "0");
          sx.options.ΔⵠⲆⲆⲆΔⵠ.display = "none";
        } else {
          ᐃᐃⲆⵠ.set("starve_quests", "1");
          sx.options.ΔⵠⲆⲆⲆΔⵠ.display = "inline-block";
        }
        sx.ᐃⵠⵠⵠ.ⲆᐃⲆⵠᐃ = !sx.ᐃⵠⵠⵠ.ⲆᐃⲆⵠᐃ;
      },
      ⲆⵠⲆⲆⵠⵠⲆⲆΔ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        ΔⵠⲆⵠ.ΔⵠⵠᐃᐃΔⵠΔΔ(a);
      }
    };
    if (this.ᐃⵠⵠⵠ.ⲆᐃⲆⵠᐃ) {
      this.options.ΔⵠⲆⲆⲆΔⵠ.display = "inline-block";
    } else {
      this.options.ΔⵠⲆⲆⲆΔⵠ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ᐃⵠⵠⵠ.ⲆⲆⲆⵠᐃ, false);
    for (k = 0; Df.length > k; k++) {
      document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ᐃⵠⵠⵠ.ⲆⵠⲆⲆⵠⵠⲆⲆΔ, Cl);
    }
    this.ΔⲆⵠⵠ = {
      open: Tr,
      button: vf(60, 60, 0, Ⲇᐃ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔΔⵠⲆⵠΔⵠ: [],
        ΔⵠᐃⵠⲆⲆΔ: 0,
        ᐃΔΔ: function () {
          this.style.left = Math.floor($n - 335) + "px";
          this.style.top = Math.floor(_n - 215) + "px";
        },
        ⲆⲆⲆⵠᐃ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          sx.ΔⲆⵠⵠ.open = Go;
        },
        ⵠⲆⲆᐃᐃᐃⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⲆᐃⲆΔ: function (a) {
          if ((b = this.ΔΔⵠⲆⵠΔⵠ[a]).ⲆᐃΔ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = Ⲇᐃ[Zr[b[a][0]].ᐃΔ][0].ⲆⵠⵠᐃⲆ === at ? Ⲇᐃ[Zr[b[a][0]].ᐃΔ][0].src : Ⲇᐃ[Zr[b[a][0]].ᐃΔ][0].ⲆⵠⵠᐃⲆ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ΔⵠᐃⵠⲆⲆΔ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < ot.length; b++) {
            var d = ot[b];
            if (a === d.ᐃᐃⵠ) {
              this.ΔΔⵠⲆⵠΔⵠ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = Ⲇᐃ[Zr[d.ⵠⵠⵠᐃ].ᐃΔ][0].ⲆⵠⵠᐃⲆ === fh ? Ⲇᐃ[Zr[d.ⵠⵠⵠᐃ].ᐃΔ][0].src : Ⲇᐃ[Zr[d.ⵠⵠⵠᐃ].ᐃΔ][0].ⲆⵠⵠᐃⲆ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ΔΔⲆⵠⲆᐃΔ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ᐃΔΔ: function () {
          this.style.left = Math.floor($n - 285) + "px";
          this.style.top = Math.floor(_n - 170) + "px";
        },
        ⲆⲆⲆⵠᐃ: function () {
          document.getElementById("home_craft").style.display = "none";
          sx.ΔⲆⵠⵠ.open = false;
        }
      },
      ⵠᐃⵠΔΔⲆΔᐃᐃ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ΔⲆⵠⵠ.ΔΔⲆⵠⲆᐃΔ.ⲆⲆⲆⵠᐃ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ΔⲆⵠⵠ.list.ⲆⲆⲆⵠᐃ, kh);
    document.getElementById("backhome").addEventListener("mouseup", this.ΔⲆⵠⵠ.list.ⵠⲆⲆᐃᐃᐃⲆ, Nn);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      sx.ΔⲆⵠⵠ.list.select(2);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      sx.ΔⲆⵠⵠ.list.select(1);
    }, Fh);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      sx.ΔⲆⵠⵠ.list.select(0);
    }, ph);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      sx.ΔⲆⵠⵠ.list.select(3);
    }, Tr);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      sx.ΔⲆⵠⵠ.list.select(4);
    }, Ol);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      sx.ΔⲆⵠⵠ.list.select(5);
    }, ph);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(0);
    }, kh);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(1);
    }, false);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(2);
    }, Nn);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(3);
    }, false);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(4);
    }, nl);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(6);
    }, nl);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(7);
    }, false);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(8);
    }, zj);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(10);
    }, Tr);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(11);
    }, false);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(13);
    }, Fh);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(14);
    }, Ur);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(15);
    }, false);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(16);
    }, Go);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(17);
    }, nl);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(18);
    }, _a);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(19);
    }, Ol);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(21);
    }, false);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(24);
    }, _a);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(25);
    }, false);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(27);
    }, false);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(29);
    }, Go);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(30);
    }, Tr);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(31);
    }, kh);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(32);
    }, false);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(33);
    }, Ol);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(34);
    }, false);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(35);
    }, Go);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(38);
    }, Eq);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(39);
    }, nl);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(40);
    }, false);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(41);
    }, Go);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(42);
    }, false);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(43);
    }, Eq);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(45);
    }, false);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(46);
    }, false);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      sx.ΔⲆⵠⵠ.list.ⲆᐃⲆΔ(47);
    }, false);
    this.ⵠⲆⵠΔⵠ = {
      translate: {
        y: 0,
        x: 0
      },
      ΔⵠΔⲆΔⲆΔ: {
        x: -1,
        y: -1
      },
      ΔΔᐃᐃ: [],
      focus: function (a) {
        var b = this.translate.y + (qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ΔⵠΔⲆΔⲆΔ.x = a.x - this.translate.x;
          this.ΔⵠΔⲆΔⲆΔ.y = a.y - b;
        }
      }
    };
    this.ᐃᐃΔᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      ᐃΔ: Ⲇᐃ[278],
      ⲆΔ: document.createElement("canvas")
    };
    this.ᐃᐃΔᐃ.ⲆΔ.width = this.ᐃᐃΔᐃ.ᐃΔ.width;
    this.ᐃᐃΔᐃ.ⲆΔ.height = this.ᐃᐃΔᐃ.ᐃΔ.height;
    this.ᐃᐃΔᐃ.Ⲇ = this.ᐃᐃΔᐃ.ⲆΔ.getContext("2d");
    this.ⵠⲆⲆⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      ᐃΔ: Ⲇᐃ[267],
      ΔⵠⲆⲆ: Xp,
      y: 0
    };
    this.ⵠⵠᐃΔΔⵠΔ = function () {
      ⲆΔⵠⵠΔ = document.getElementById("team_box");
      ⲆΔⵠⵠΔ.innerHTML = "";
      ⲆΔⵠⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + px.ΔΔᐃᐃ[qx.ⵠΔΔΔΔ[0]].ⵠΔᐃΔⲆ + "</div";
      for (var a = 1; a < qx.ⵠΔΔΔΔ.length; a++) {
        ⲆΔⵠⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + px.ΔΔᐃᐃ[qx.ⵠΔΔΔΔ[a]].ⵠΔᐃΔⲆ + "</div></div>";
      }
      ⲆΔⵠⵠΔ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ⲆΔⵠⵠΔ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", ΔⵠⲆⵠ.ⵠⵠᐃΔΔⵠΔ, false);
    };
    this.ᐃⲆⲆⲆᐃΔΔᐃᐃ = function () {
      ⲆΔⵠⵠΔ = document.getElementById("team_box");
      ⲆΔⵠⵠΔ.innerHTML = "";
      ⲆΔⵠⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + px.ΔΔᐃᐃ[qx.ⵠΔΔΔΔ[0]].ⵠΔᐃΔⲆ + "</div";
      for (var a = 1; qx.ⵠΔΔΔΔ.length > a; a++) {
        ⲆΔⵠⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + px.ΔΔᐃᐃ[qx.ⵠΔΔΔΔ[a]].ⵠΔᐃΔⲆ + "</div></div>";
      }
      ⲆΔⵠⵠΔ.innerHTML += "</div>";
      ⲆΔⵠⵠΔ.style.display = "inline-block";
    };
    this.ΔⵠᐃⵠΔⲆⵠⵠⵠ = function () {
      ⲆΔⵠⵠΔ = document.getElementById("team_box");
      ⲆΔⵠⵠΔ.innerHTML = "";
      ⲆΔⵠⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + px.ΔΔᐃᐃ[qx.ⵠΔΔΔΔ[0]].ⵠΔᐃΔⲆ + "</div";
      for (var a = 1; a < qx.ⵠΔΔΔΔ.length; a++) {
        ⲆΔⵠⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + px.ΔΔᐃᐃ[qx.ⵠΔΔΔΔ[a]].ⵠΔᐃΔⲆ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (qx.Δⵠⵠᐃᐃ.lock === 0) {
        ⲆΔⵠⵠΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ⲆΔⵠⵠΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", ΔⵠⲆⵠ.ⲆᐃΔΔⵠⵠⵠⵠⲆ, false);
      ⲆΔⵠⵠΔ.style.display = "inline-block";
      for (a = 1; a < qx.ⵠΔΔΔΔ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⵠ.ᐃΔⵠⵠⲆⲆΔ(1);
            }, wr);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⵠ.ᐃΔⵠⵠⲆⲆΔ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⵠ.ᐃΔⵠⵠⲆⲆΔ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⵠ.ᐃΔⵠⵠⲆⲆΔ(4);
            }, kh);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⵠ.ᐃΔⵠⵠⲆⲆΔ(5);
            }, rl);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⵠ.ᐃΔⵠⵠⲆⲆΔ(6);
            }, false);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⵠ.ᐃΔⵠⵠⲆⲆΔ(7);
            }, kh);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⵠ.ᐃΔⵠⵠⲆⲆΔ(8);
            }, _a);
        }
      }
    };
    this.ⵠⲆⲆⲆⵠ = [];
    this.ⵠⲆⲆⲆⵠ[2] = {
      button: vf(60, 60, 0, Ⲇᐃ[556]),
      action: this.ⵠⵠᐃΔΔⵠΔ
    };
    this.ⵠⲆⲆⲆⵠ[3] = {
      button: vf(60, 60, 0, Ⲇᐃ[556]),
      action: ΔⵠⲆⵠ.ΔΔᐃΔⲆⵠΔΔⵠ
    };
    this.ⵠⲆⲆⲆⵠ[0] = {
      button: vf(60, 60, 0, Ⲇᐃ[557]),
      action: this.ΔⵠᐃⵠΔⲆⵠⵠⵠ
    };
    this.ⵠⲆⲆⲆⵠ[1] = {
      button: vf(60, 60, 0, Ⲇᐃ[561]),
      action: this.ᐃⲆⲆⲆᐃΔΔᐃᐃ
    };
    this.ⵠⲆⲆⲆⵠ[4] = {
      button: vf(60, 60, 0, Ⲇᐃ[560]),
      action: function () { }
    };
    this.ᐃᐃᐃⵠⵠ = -1;
    this.ᐃᐃⵠⵠⵠⵠᐃ = vf(60, 60, 0, Ⲇᐃ[723]);
    this.ᐃⲆⵠᐃⵠᐃⵠ = vf(60, 60, 0, Ⲇᐃ[724]);
    this.ⲆᐃΔⵠⲆᐃΔ = vf(60, 60, 0, Ⲇᐃ[658]);
    this.ⲆᐃⲆⲆΔⵠⵠ = vf(60, 60, 0, Ⲇᐃ[657]);
    this.ᐃⲆᐃᐃΔⵠⲆ = vf(60, 60, 0, Ⲇᐃ[658]);
    this.ⵠⵠⵠᐃⵠΔΔ = vf(60, 60, 0, Ⲇᐃ[316]);
    this.ᐃΔⵠⲆΔΔⲆ = vf(60, 60, 0, Ⲇᐃ[315]);
    this.ΔⲆⲆⵠᐃⲆⲆ = vf(60, 60, 0, Ⲇᐃ[297]);
    this.ⵠⲆᐃᐃⲆᐃᐃ = vf(60, 60, 0, Ⲇᐃ[298]);
    this.ᐃΔΔⵠᐃΔⲆ = vf(60, 60, 0, Ⲇᐃ[418]);
    this.ⲆⲆΔⲆⲆⲆᐃ = vf(60, 60, 0, Ⲇᐃ[938]);
    this.ⵠⵠᐃᐃⵠⲆⵠ = vf(60, 60, 0, Ⲇᐃ[412]);
    this.ⵠΔⲆⲆⲆⵠᐃ = vf(60, 60, 0, Ⲇᐃ[536]);
    this.ⵠⵠⵠΔΔⵠⵠ = vf(60, 60, 0, Ⲇᐃ[535]);
    this.ᐃᐃΔⲆⵠⵠᐃ = vf(60, 60, 0, Ⲇᐃ[538]);
    this.ⲆᐃΔΔⲆ = vf(120, 120, 0, Ⲇᐃ[149]);
    this.ⲆᐃΔΔⲆ.info.translate.x = 10;
    this.ⲆᐃΔΔⲆ.info.translate.y = 10;
    this.ⵠΔΔ = [];
    this.ⵠΔΔ[0] = vf(68, 68, 0, Ⲇᐃ[340], 3);
    this.ⵠΔΔ[0].id = 0;
    this.ⵠΔΔ[1] = vf(68, 68, 0, Ⲇᐃ[341], 3);
    this.ⵠΔΔ[1].id = 1;
    this.ⵠΔΔ[108] = vf(68, 68, 0, Ⲇᐃ[342], 3);
    this.ⵠΔΔ[108].id = 108;
    this.ⵠΔΔ[109] = vf(68, 68, 0, Ⲇᐃ[343], 3);
    this.ⵠΔΔ[109].id = 109;
    this.ⵠΔΔ[110] = vf(68, 68, 0, Ⲇᐃ[269], 3);
    this.ⵠΔΔ[110].id = 110;
    this.ⵠΔΔ[233] = vf(68, 68, 0, Ⲇᐃ[1155], 3);
    this.ⵠΔΔ[233].id = 233;
    this.ⵠΔΔ[111] = vf(68, 68, 0, Ⲇᐃ[270], 3);
    this.ⵠΔΔ[111].id = 111;
    this.ⵠΔΔ[112] = vf(68, 68, 0, Ⲇᐃ[271], 3);
    this.ⵠΔΔ[112].id = 112;
    this.ⵠΔΔ[3] = vf(68, 68, 0, Ⲇᐃ[272], 3);
    this.ⵠΔΔ[3].id = 3;
    this.ⵠΔΔ[4] = vf(68, 68, 0, Ⲇᐃ[344], 3);
    this.ⵠΔΔ[4].id = 4;
    this.ⵠΔΔ[5] = vf(68, 68, 0, Ⲇᐃ[345], 3);
    this.ⵠΔΔ[5].id = 5;
    this.ⵠΔΔ[57] = vf(68, 68, 0, Ⲇᐃ[831], 3);
    this.ⵠΔΔ[57].id = 57;
    this.ⵠΔΔ[6] = vf(68, 68, 0, Ⲇᐃ[346], 3);
    this.ⵠΔΔ[6].id = 6;
    this.ⵠΔΔ[113] = vf(68, 68, 0, Ⲇᐃ[273], 3);
    this.ⵠΔΔ[113].id = 113;
    this.ⵠΔΔ[114] = vf(68, 68, 0, Ⲇᐃ[358], 3);
    this.ⵠΔΔ[114].id = 114;
    this.ⵠΔΔ[115] = vf(68, 68, 0, Ⲇᐃ[348], 3);
    this.ⵠΔΔ[115].id = 115;
    this.ⵠΔΔ[162] = vf(68, 68, 0, Ⲇᐃ[349], 3);
    this.ⵠΔΔ[162].id = 162;
    this.ⵠΔΔ[160] = vf(68, 68, 0, Ⲇᐃ[350], 3);
    this.ⵠΔΔ[160].id = 160;
    this.ⵠΔΔ[8] = vf(68, 68, 0, Ⲇᐃ[274], 3);
    this.ⵠΔΔ[8].id = 8;
    this.ⵠΔΔ[117] = vf(68, 68, 0, Ⲇᐃ[351], 3);
    this.ⵠΔΔ[117].id = 117;
    this.ⵠΔΔ[116] = vf(68, 68, 0, Ⲇᐃ[275], 3);
    this.ⵠΔΔ[116].id = 116;
    this.ⵠΔΔ[118] = vf(68, 68, 0, Ⲇᐃ[276], 3);
    this.ⵠΔΔ[118].id = 118;
    this.ⵠΔΔ[195] = vf(68, 68, 0, Ⲇᐃ[352], 3);
    this.ⵠΔΔ[195].id = 195;
    this.ⵠΔΔ[161] = vf(68, 68, 0, Ⲇᐃ[353], 3);
    this.ⵠΔΔ[161].id = 161;
    this.ⵠΔΔ[163] = vf(68, 68, 0, Ⲇᐃ[354], 3);
    this.ⵠΔΔ[163].id = 163;
    this.ⵠΔΔ[164] = vf(68, 68, 0, Ⲇᐃ[355], 3);
    this.ⵠΔΔ[164].id = 164;
    this.ⵠΔΔ[165] = vf(68, 68, 0, Ⲇᐃ[356], 3);
    this.ⵠΔΔ[165].id = 165;
    this.ⵠΔΔ[166] = vf(68, 68, 0, Ⲇᐃ[357], 3);
    this.ⵠΔΔ[166].id = 166;
    this.ⵠΔΔ[167] = vf(68, 68, 0, Ⲇᐃ[359], 3);
    this.ⵠΔΔ[167].id = 167;
    this.ⵠΔΔ[168] = vf(68, 68, 0, Ⲇᐃ[382], 3);
    this.ⵠΔΔ[168].id = 168;
    this.ⵠΔΔ[169] = vf(68, 68, 0, Ⲇᐃ[383], 3);
    this.ⵠΔΔ[169].id = 169;
    this.ⵠΔΔ[170] = vf(68, 68, 0, Ⲇᐃ[384], 3);
    this.ⵠΔΔ[170].id = 170;
    this.ⵠΔΔ[2] = vf(68, 68, 0, Ⲇᐃ[386], 3);
    this.ⵠΔΔ[2].id = 2;
    this.ⵠΔΔ[237] = vf(68, 68, 0, Ⲇᐃ[1163], 3);
    this.ⵠΔΔ[237].id = 237;
    this.ⵠΔΔ[174] = vf(68, 68, 0, Ⲇᐃ[394], 3);
    this.ⵠΔΔ[174].id = 174;
    this.ⵠΔΔ[222] = vf(68, 68, 0, Ⲇᐃ[1036], 3);
    this.ⵠΔΔ[222].id = 222;
    this.ⵠΔΔ[231] = vf(68, 68, 0, Ⲇᐃ[1038], 3);
    this.ⵠΔΔ[231].id = 231;
    this.ⵠΔΔ[232] = vf(68, 68, 0, Ⲇᐃ[1040], 3);
    this.ⵠΔΔ[232].id = 232;
    this.ⵠΔΔ[234] = vf(68, 68, 0, Ⲇᐃ[1157], 3);
    this.ⵠΔΔ[234].id = 234;
    this.ⵠΔΔ[10] = vf(68, 68, 0, Ⲇᐃ[387], 3);
    this.ⵠΔΔ[10].id = 10;
    this.ⵠΔΔ[171] = vf(68, 68, 0, Ⲇᐃ[388], 3);
    this.ⵠΔΔ[171].id = 171;
    this.ⵠΔΔ[172] = vf(68, 68, 0, Ⲇᐃ[389], 3);
    this.ⵠΔΔ[172].id = 172;
    this.ⵠΔΔ[173] = vf(68, 68, 0, Ⲇᐃ[390], 3);
    this.ⵠΔΔ[173].id = 173;
    this.ⵠΔΔ[11] = vf(68, 68, 0, Ⲇᐃ[391], 3);
    this.ⵠΔΔ[11].id = 11;
    this.ⵠΔΔ[12] = vf(68, 68, 0, Ⲇᐃ[403], 3);
    this.ⵠΔΔ[12].id = 12;
    this.ⵠΔΔ[13] = vf(68, 68, 0, Ⲇᐃ[397], 3);
    this.ⵠΔΔ[13].id = 13;
    this.ⵠΔΔ[14] = vf(68, 68, 0, Ⲇᐃ[400], 3);
    this.ⵠΔΔ[14].id = 14;
    this.ⵠΔΔ[15] = vf(68, 68, 0, Ⲇᐃ[406], 3);
    this.ⵠΔΔ[15].id = 15;
    this.ⵠΔΔ[16] = vf(68, 68, 0, Ⲇᐃ[875], 3);
    this.ⵠΔΔ[16].id = 16;
    this.ⵠΔΔ[119] = vf(68, 68, 0, Ⲇᐃ[410], 3);
    this.ⵠΔΔ[119].id = 119;
    this.ⵠΔΔ[23] = vf(68, 68, 0, Ⲇᐃ[422], 3);
    this.ⵠΔΔ[23].id = 23;
    this.ⵠΔΔ[24] = vf(68, 68, 0, Ⲇᐃ[425], 3);
    this.ⵠΔΔ[24].id = 24;
    this.ⵠΔΔ[87] = vf(68, 68, 0, Ⲇᐃ[1229], 3);
    this.ⵠΔΔ[87].id = 87;
    this.ⵠΔΔ[88] = vf(68, 68, 0, Ⲇᐃ[1232], 3);
    this.ⵠΔΔ[88].id = 88;
    this.ⵠΔΔ[80] = vf(68, 68, 0, Ⲇᐃ[1139], 3);
    this.ⵠΔΔ[80].id = 80;
    this.ⵠΔΔ[81] = vf(68, 68, 0, Ⲇᐃ[1142], 3);
    this.ⵠΔΔ[81].id = 81;
    this.ⵠΔΔ[101] = vf(68, 68, 0, Ⲇᐃ[1167], 3);
    this.ⵠΔΔ[101].id = 101;
    this.ⵠΔΔ[64] = vf(68, 68, 0, Ⲇᐃ[571], 3);
    this.ⵠΔΔ[64].id = 64;
    this.ⵠΔΔ[71] = vf(68, 68, 0, Ⲇᐃ[1240], 3);
    this.ⵠΔΔ[71].id = 71;
    this.ⵠΔΔ[102] = vf(68, 68, 0, Ⲇᐃ[1170], 3);
    this.ⵠΔΔ[102].id = 102;
    this.ⵠΔΔ[65] = vf(68, 68, 0, Ⲇᐃ[574], 3);
    this.ⵠΔΔ[65].id = 65;
    this.ⵠΔΔ[72] = vf(68, 68, 0, Ⲇᐃ[1243], 3);
    this.ⵠΔΔ[72].id = 72;
    this.ⵠΔΔ[103] = vf(68, 68, 0, Ⲇᐃ[1173], 3);
    this.ⵠΔΔ[103].id = 103;
    this.ⵠΔΔ[66] = vf(68, 68, 0, Ⲇᐃ[577], 3);
    this.ⵠΔΔ[66].id = 66;
    this.ⵠΔΔ[73] = vf(68, 68, 0, Ⲇᐃ[1246], 3);
    this.ⵠΔΔ[73].id = 73;
    this.ⵠΔΔ[104] = vf(68, 68, 0, Ⲇᐃ[1176], 3);
    this.ⵠΔΔ[104].id = 104;
    this.ⵠΔΔ[67] = vf(68, 68, 0, Ⲇᐃ[580], 3);
    this.ⵠΔΔ[67].id = 67;
    this.ⵠΔΔ[74] = vf(68, 68, 0, Ⲇᐃ[1249], 3);
    this.ⵠΔΔ[74].id = 74;
    this.ⵠΔΔ[105] = vf(68, 68, 0, Ⲇᐃ[1179], 3);
    this.ⵠΔΔ[105].id = 105;
    this.ⵠΔΔ[68] = vf(68, 68, 0, Ⲇᐃ[583], 3);
    this.ⵠΔΔ[68].id = 68;
    this.ⵠΔΔ[75] = vf(68, 68, 0, Ⲇᐃ[1252], 3);
    this.ⵠΔΔ[75].id = 75;
    this.ⵠΔΔ[106] = vf(68, 68, 0, Ⲇᐃ[1182], 3);
    this.ⵠΔΔ[106].id = 106;
    this.ⵠΔΔ[69] = vf(68, 68, 0, Ⲇᐃ[586], 3);
    this.ⵠΔΔ[69].id = 69;
    this.ⵠΔΔ[76] = vf(68, 68, 0, Ⲇᐃ[1255], 3);
    this.ⵠΔΔ[76].id = 76;
    this.ⵠΔΔ[107] = vf(68, 68, 0, Ⲇᐃ[1185], 3);
    this.ⵠΔΔ[107].id = 107;
    this.ⵠΔΔ[70] = vf(68, 68, 0, Ⲇᐃ[589], 3);
    this.ⵠΔΔ[70].id = 70;
    this.ⵠΔΔ[94] = vf(68, 68, 0, Ⲇᐃ[1258], 3);
    this.ⵠΔΔ[94].id = 94;
    this.ⵠΔΔ[95] = vf(68, 68, 0, Ⲇᐃ[1261], 3);
    this.ⵠΔΔ[95].id = 95;
    this.ⵠΔΔ[96] = vf(68, 68, 0, Ⲇᐃ[1264], 3);
    this.ⵠΔΔ[96].id = 96;
    this.ⵠΔΔ[97] = vf(68, 68, 0, Ⲇᐃ[1267], 3);
    this.ⵠΔΔ[97].id = 97;
    this.ⵠΔΔ[98] = vf(68, 68, 0, Ⲇᐃ[1270], 3);
    this.ⵠΔΔ[98].id = 98;
    this.ⵠΔΔ[99] = vf(68, 68, 0, Ⲇᐃ[1273], 3);
    this.ⵠΔΔ[99].id = 99;
    this.ⵠΔΔ[58] = vf(68, 68, 0, Ⲇᐃ[828], 3);
    this.ⵠΔΔ[58].id = 58;
    this.ⵠΔΔ[25] = vf(68, 68, 0, Ⲇᐃ[431], 3);
    this.ⵠΔΔ[25].id = 25;
    this.ⵠΔΔ[26] = vf(68, 68, 0, Ⲇᐃ[434], 3);
    this.ⵠΔΔ[26].id = 26;
    this.ⵠΔΔ[27] = vf(68, 68, 0, Ⲇᐃ[437], 3);
    this.ⵠΔΔ[27].id = 27;
    this.ⵠΔΔ[28] = vf(68, 68, 0, Ⲇᐃ[440], 3);
    this.ⵠΔΔ[28].id = 28;
    this.ⵠΔΔ[120] = vf(68, 68, 0, Ⲇᐃ[443], 3);
    this.ⵠΔΔ[120].id = 120;
    this.ⵠΔΔ[29] = vf(68, 68, 0, Ⲇᐃ[385], 3);
    this.ⵠΔΔ[29].id = 29;
    this.ⵠΔΔ[121] = vf(68, 68, 0, Ⲇᐃ[446], 3);
    this.ⵠΔΔ[121].id = 121;
    this.ⵠΔΔ[30] = vf(68, 68, 0, Ⲇᐃ[457], 3);
    this.ⵠΔΔ[30].id = 30;
    this.ⵠΔΔ[9] = vf(68, 68, 0, Ⲇᐃ[862], 3);
    this.ⵠΔΔ[9].id = 9;
    this.ⵠΔΔ[31] = vf(68, 68, 0, Ⲇᐃ[459], 3);
    this.ⵠΔΔ[31].id = 31;
    this.ⵠΔΔ[32] = vf(68, 68, 0, Ⲇᐃ[1018], 3);
    this.ⵠΔΔ[32].id = 32;
    this.ⵠΔΔ[33] = vf(68, 68, 0, Ⲇᐃ[474], 3);
    this.ⵠΔΔ[33].id = 33;
    this.ⵠΔΔ[35] = vf(68, 68, 0, Ⲇᐃ[479], 3);
    this.ⵠΔΔ[35].id = 35;
    this.ⵠΔΔ[36] = vf(68, 68, 0, Ⲇᐃ[482], 3);
    this.ⵠΔΔ[36].id = 36;
    this.ⵠΔΔ[37] = vf(68, 68, 0, Ⲇᐃ[485], 3);
    this.ⵠΔΔ[37].id = 37;
    this.ⵠΔΔ[38] = vf(68, 68, 0, Ⲇᐃ[488], 3);
    this.ⵠΔΔ[38].id = 38;
    this.ⵠΔΔ[39] = vf(68, 68, 0, Ⲇᐃ[491], 3);
    this.ⵠΔΔ[39].id = 39;
    this.ⵠΔΔ[122] = vf(68, 68, 0, Ⲇᐃ[494], 3);
    this.ⵠΔΔ[122].id = 122;
    this.ⵠΔΔ[123] = vf(68, 68, 0, Ⲇᐃ[497], 3);
    this.ⵠΔΔ[123].id = 123;
    this.ⵠΔΔ[124] = vf(68, 68, 0, Ⲇᐃ[501], 3);
    this.ⵠΔΔ[124].id = 124;
    this.ⵠΔΔ[40] = vf(68, 68, 0, Ⲇᐃ[504], 3);
    this.ⵠΔΔ[40].id = 40;
    this.ⵠΔΔ[146] = vf(68, 68, 0, Ⲇᐃ[506], 3);
    this.ⵠΔΔ[146].id = 146;
    this.ⵠΔΔ[240] = vf(68, 68, 0, Ⲇᐃ[1234], 3);
    this.ⵠΔΔ[240].id = 240;
    this.ⵠΔΔ[147] = vf(68, 68, 0, Ⲇᐃ[514], 3);
    this.ⵠΔΔ[147].id = 147;
    this.ⵠΔΔ[148] = vf(68, 68, 0, Ⲇᐃ[520], 3);
    this.ⵠΔΔ[148].id = 148;
    this.ⵠΔΔ[149] = vf(68, 68, 0, Ⲇᐃ[522], 3);
    this.ⵠΔΔ[149].id = 149;
    this.ⵠΔΔ[150] = vf(68, 68, 0, Ⲇᐃ[524], 3);
    this.ⵠΔΔ[150].id = 150;
    this.ⵠΔΔ[151] = vf(68, 68, 0, Ⲇᐃ[531], 3);
    this.ⵠΔΔ[151].id = 151;
    this.ⵠΔΔ[158] = vf(68, 68, 0, Ⲇᐃ[534], 3);
    this.ⵠΔΔ[158].id = 158;
    this.ⵠΔΔ[159] = vf(68, 68, 0, Ⲇᐃ[554], 3);
    this.ⵠΔΔ[159].id = 159;
    this.ⵠΔΔ[43] = vf(68, 68, 0, Ⲇᐃ[543], 3);
    this.ⵠΔΔ[43].id = 43;
    this.ⵠΔΔ[45] = vf(68, 68, 0, Ⲇᐃ[552], 3);
    this.ⵠΔΔ[45].id = 45;
    this.ⵠΔΔ[125] = vf(68, 68, 0, Ⲇᐃ[606], 3);
    this.ⵠΔΔ[125].id = 125;
    this.ⵠΔΔ[221] = vf(68, 68, 0, Ⲇᐃ[1237], 3);
    this.ⵠΔΔ[221].id = 221;
    this.ⵠΔΔ[223] = vf(68, 68, 0, Ⲇᐃ[1029], 3);
    this.ⵠΔΔ[223].id = 223;
    this.ⵠΔΔ[224] = vf(68, 68, 0, Ⲇᐃ[1032], 3);
    this.ⵠΔΔ[224].id = 224;
    this.ⵠΔΔ[230] = vf(68, 68, 0, Ⲇᐃ[1118], 3);
    this.ⵠΔΔ[230].id = 230;
    this.ⵠΔΔ[89] = vf(68, 68, 0, Ⲇᐃ[1047], 3);
    this.ⵠΔΔ[89].id = 89;
    this.ⵠΔΔ[225] = vf(68, 68, 0, Ⲇᐃ[1050], 3);
    this.ⵠΔΔ[225].id = 225;
    this.ⵠΔΔ[227] = vf(68, 68, 0, Ⲇᐃ[1081], 3);
    this.ⵠΔΔ[227].id = 227;
    this.ⵠΔΔ[239] = vf(68, 68, 0, Ⲇᐃ[1225], 3);
    this.ⵠΔΔ[239].id = 239;
    this.ⵠΔΔ[228] = vf(68, 68, 0, Ⲇᐃ[1096], 3);
    this.ⵠΔΔ[228].id = 228;
    this.ⵠΔΔ[229] = vf(68, 68, 0, Ⲇᐃ[1111], 3);
    this.ⵠΔΔ[229].id = 229;
    this.ⵠΔΔ[226] = vf(68, 68, 0, Ⲇᐃ[1190], 3);
    this.ⵠΔΔ[226].id = 226;
    this.ⵠΔΔ[126] = vf(68, 68, 0, Ⲇᐃ[610], 3);
    this.ⵠΔΔ[126].id = 126;
    this.ⵠΔΔ[127] = vf(68, 68, 0, Ⲇᐃ[615], 3);
    this.ⵠΔΔ[127].id = 127;
    this.ⵠΔΔ[128] = vf(68, 68, 0, Ⲇᐃ[614], 3);
    this.ⵠΔΔ[128].id = 128;
    this.ⵠΔΔ[46] = vf(68, 68, 0, Ⲇᐃ[617], 3);
    this.ⵠΔΔ[46].id = 46;
    this.ⵠΔΔ[50] = vf(68, 68, 0, Ⲇᐃ[701], 3);
    this.ⵠΔΔ[50].id = 50;
    this.ⵠΔΔ[51] = vf(68, 68, 0, Ⲇᐃ[703], 3);
    this.ⵠΔΔ[51].id = 51;
    this.ⵠΔΔ[52] = vf(68, 68, 0, Ⲇᐃ[707], 3);
    this.ⵠΔΔ[52].id = 52;
    this.ⵠΔΔ[55] = vf(68, 68, 0, Ⲇᐃ[710], 3);
    this.ⵠΔΔ[55].id = 55;
    this.ⵠΔΔ[129] = vf(68, 68, 0, Ⲇᐃ[625], 3);
    this.ⵠΔΔ[129].id = 129;
    this.ⵠΔΔ[130] = vf(68, 68, 0, Ⲇᐃ[628], 3);
    this.ⵠΔΔ[130].id = 130;
    this.ⵠΔΔ[131] = vf(68, 68, 0, Ⲇᐃ[630], 3);
    this.ⵠΔΔ[131].id = 131;
    this.ⵠΔΔ[132] = vf(68, 68, 0, Ⲇᐃ[633], 3);
    this.ⵠΔΔ[132].id = 132;
    this.ⵠΔΔ[133] = vf(68, 68, 0, Ⲇᐃ[636], 3);
    this.ⵠΔΔ[133].id = 133;
    this.ⵠΔΔ[134] = vf(68, 68, 0, Ⲇᐃ[640], 3);
    this.ⵠΔΔ[134].id = 134;
    this.ⵠΔΔ[135] = vf(68, 68, 0, Ⲇᐃ[645], 3);
    this.ⵠΔΔ[135].id = 135;
    this.ⵠΔΔ[47] = vf(68, 68, 0, Ⲇᐃ[648], 3);
    this.ⵠΔΔ[47].id = 47;
    this.ⵠΔΔ[48] = vf(68, 68, 0, Ⲇᐃ[651], 3);
    this.ⵠΔΔ[48].id = 48;
    this.ⵠΔΔ[49] = vf(68, 68, 0, Ⲇᐃ[653], 3);
    this.ⵠΔΔ[49].id = 49;
    this.ⵠΔΔ[136] = vf(68, 68, 0, Ⲇᐃ[661], 3);
    this.ⵠΔΔ[136].id = 136;
    this.ⵠΔΔ[143] = vf(68, 68, 0, Ⲇᐃ[689], 3);
    this.ⵠΔΔ[143].id = 143;
    this.ⵠΔΔ[137] = vf(68, 68, 0, Ⲇᐃ[663], 3);
    this.ⵠΔΔ[137].id = 137;
    this.ⵠΔΔ[138] = vf(68, 68, 0, Ⲇᐃ[665], 3);
    this.ⵠΔΔ[138].id = 138;
    this.ⵠΔΔ[139] = vf(68, 68, 0, Ⲇᐃ[675], 3);
    this.ⵠΔΔ[139].id = 139;
    this.ⵠΔΔ[140] = vf(68, 68, 0, Ⲇᐃ[682], 3);
    this.ⵠΔΔ[140].id = 140;
    this.ⵠΔΔ[141] = vf(68, 68, 0, Ⲇᐃ[683], 3);
    this.ⵠΔΔ[141].id = 141;
    this.ⵠΔΔ[142] = vf(68, 68, 0, Ⲇᐃ[686], 3);
    this.ⵠΔΔ[142].id = 142;
    this.ⵠΔΔ[144] = vf(68, 68, 0, Ⲇᐃ[719], 3);
    this.ⵠΔΔ[144].id = 144;
    this.ⵠΔΔ[145] = vf(68, 68, 0, Ⲇᐃ[731], 3);
    this.ⵠΔΔ[145].id = 145;
    this.ⵠΔΔ[59] = vf(68, 68, 0, Ⲇᐃ[733], 3);
    this.ⵠΔΔ[59].id = 59;
    this.ⵠΔΔ[62] = vf(68, 68, 0, Ⲇᐃ[565], 3);
    this.ⵠΔΔ[62].id = 62;
    this.ⵠΔΔ[185] = vf(68, 68, 0, Ⲇᐃ[590], 3);
    this.ⵠΔΔ[185].id = 185;
    this.ⵠΔΔ[184] = vf(68, 68, 0, Ⲇᐃ[752], 3);
    this.ⵠΔΔ[184].id = 184;
    this.ⵠΔΔ[187] = vf(68, 68, 0, Ⲇᐃ[591], 3);
    this.ⵠΔΔ[187].id = 187;
    this.ⵠΔΔ[186] = vf(68, 68, 0, Ⲇᐃ[754], 3);
    this.ⵠΔΔ[186].id = 186;
    this.ⵠΔΔ[77] = vf(68, 68, 0, Ⲇᐃ[757], 3);
    this.ⵠΔΔ[77].id = 77;
    this.ⵠΔΔ[175] = vf(68, 68, 0, Ⲇᐃ[759], 3);
    this.ⵠΔΔ[175].id = 175;
    this.ⵠΔΔ[176] = vf(68, 68, 0, Ⲇᐃ[763], 3);
    this.ⵠΔΔ[176].id = 176;
    this.ⵠΔΔ[78] = vf(68, 68, 0, Ⲇᐃ[761], 3);
    this.ⵠΔΔ[78].id = 78;
    this.ⵠΔΔ[177] = vf(68, 68, 0, Ⲇᐃ[766], 3);
    this.ⵠΔΔ[177].id = 177;
    this.ⵠΔΔ[79] = vf(68, 68, 0, Ⲇᐃ[765], 3);
    this.ⵠΔΔ[79].id = 79;
    this.ⵠΔΔ[83] = vf(68, 68, 0, Ⲇᐃ[769], 3);
    this.ⵠΔΔ[83].id = 83;
    this.ⵠΔΔ[84] = vf(68, 68, 0, Ⲇᐃ[773], 3);
    this.ⵠΔΔ[84].id = 84;
    this.ⵠΔΔ[178] = vf(68, 68, 0, Ⲇᐃ[774], 3);
    this.ⵠΔΔ[178].id = 178;
    this.ⵠΔΔ[179] = vf(68, 68, 0, Ⲇᐃ[775], 3);
    this.ⵠΔΔ[179].id = 179;
    this.ⵠΔΔ[86] = vf(68, 68, 0, Ⲇᐃ[778], 3);
    this.ⵠΔΔ[86].id = 86;
    this.ⵠΔΔ[85] = vf(68, 68, 0, Ⲇᐃ[781], 3);
    this.ⵠΔΔ[85].id = 85;
    this.ⵠΔΔ[180] = vf(68, 68, 0, Ⲇᐃ[786], 3);
    this.ⵠΔΔ[180].id = 180;
    this.ⵠΔΔ[181] = vf(68, 68, 0, Ⲇᐃ[787], 3);
    this.ⵠΔΔ[181].id = 181;
    this.ⵠΔΔ[182] = vf(68, 68, 0, Ⲇᐃ[790], 3);
    this.ⵠΔΔ[182].id = 182;
    this.ⵠΔΔ[183] = vf(68, 68, 0, Ⲇᐃ[801], 3);
    this.ⵠΔΔ[183].id = 183;
    this.ⵠΔΔ[188] = vf(68, 68, 0, Ⲇᐃ[810], 3);
    this.ⵠΔΔ[188].id = 188;
    this.ⵠΔΔ[189] = vf(68, 68, 0, Ⲇᐃ[815], 3);
    this.ⵠΔΔ[189].id = 189;
    this.ⵠΔΔ[190] = vf(68, 68, 0, Ⲇᐃ[844], 3);
    this.ⵠΔΔ[190].id = 190;
    this.ⵠΔΔ[191] = vf(68, 68, 0, Ⲇᐃ[836], 3);
    this.ⵠΔΔ[191].id = 191;
    this.ⵠΔΔ[192] = vf(68, 68, 0, Ⲇᐃ[841], 3);
    this.ⵠΔΔ[192].id = 192;
    this.ⵠΔΔ[193] = vf(68, 68, 0, Ⲇᐃ[847], 3);
    this.ⵠΔΔ[193].id = 193;
    this.ⵠΔΔ[194] = vf(68, 68, 0, Ⲇᐃ[851], 3);
    this.ⵠΔΔ[194].id = 194;
    this.ⵠΔΔ[206] = vf(68, 68, 0, Ⲇᐃ[961], 3);
    this.ⵠΔΔ[206].id = 206;
    this.ⵠΔΔ[207] = vf(68, 68, 0, Ⲇᐃ[974], 3);
    this.ⵠΔΔ[207].id = 207;
    this.ⵠΔΔ[204] = vf(68, 68, 0, Ⲇᐃ[951], 3);
    this.ⵠΔΔ[204].id = 204;
    this.ⵠΔΔ[205] = vf(68, 68, 0, Ⲇᐃ[956], 3);
    this.ⵠΔΔ[205].id = 205;
    this.ⵠΔΔ[208] = vf(68, 68, 0, Ⲇᐃ[968], 3);
    this.ⵠΔΔ[208].id = 208;
    this.ⵠΔΔ[209] = vf(68, 68, 0, Ⲇᐃ[973], 3);
    this.ⵠΔΔ[209].id = 209;
    this.ⵠΔΔ[210] = vf(68, 68, 0, Ⲇᐃ[983], 3);
    this.ⵠΔΔ[210].id = 210;
    this.ⵠΔΔ[211] = vf(68, 68, 0, Ⲇᐃ[988], 3);
    this.ⵠΔΔ[211].id = 211;
    this.ⵠΔΔ[41] = vf(68, 68, 0, Ⲇᐃ[881], 3);
    this.ⵠΔΔ[41].id = 41;
    this.ⵠΔΔ[42] = vf(68, 68, 0, Ⲇᐃ[883], 3);
    this.ⵠΔΔ[42].id = 42;
    this.ⵠΔΔ[12] = vf(68, 68, 0, Ⲇᐃ[403], 3);
    this.ⵠΔΔ[12].id = 12;
    this.ⵠΔΔ[16] = vf(68, 68, 0, Ⲇᐃ[875], 3);
    this.ⵠΔΔ[16].id = 16;
    this.ⵠΔΔ[196] = vf(68, 68, 0, Ⲇᐃ[898], 3);
    this.ⵠΔΔ[196].id = 196;
    this.ⵠΔΔ[18] = vf(68, 68, 0, Ⲇᐃ[899], 3);
    this.ⵠΔΔ[18].id = 18;
    this.ⵠΔΔ[197] = vf(68, 68, 0, Ⲇᐃ[906], 3);
    this.ⵠΔΔ[197].id = 197;
    this.ⵠΔΔ[198] = vf(68, 68, 0, Ⲇᐃ[908], 3);
    this.ⵠΔΔ[198].id = 198;
    this.ⵠΔΔ[61] = vf(68, 68, 0, Ⲇᐃ[911], 3);
    this.ⵠΔΔ[61].id = 61;
    this.ⵠΔΔ[201] = vf(68, 68, 0, Ⲇᐃ[871], 3);
    this.ⵠΔΔ[201].id = 201;
    this.ⵠΔΔ[199] = vf(68, 68, 0, Ⲇᐃ[863], 3);
    this.ⵠΔΔ[199].id = 199;
    this.ⵠΔΔ[200] = vf(68, 68, 0, Ⲇᐃ[868], 3);
    this.ⵠΔΔ[200].id = 200;
    this.ΔⲆⵠⲆⲆ = [];
    for (k = 0; k < 250; k++) {
      this.ΔⲆⵠⲆⲆ[k] = vf(0, 0, 0, Ⲇᐃ[366]);
    }
    this.ᐃΔᐃ = [];
    this.ᐃΔᐃ[0] = vf(60, 60, 0, Ⲇᐃ[261], 3);
    this.ᐃΔᐃ[0].id = 0;
    this.ᐃΔᐃ[1] = vf(60, 60, 0, Ⲇᐃ[312], 3);
    this.ᐃΔᐃ[1].id = 1;
    this.ᐃΔᐃ[108] = vf(60, 60, 0, Ⲇᐃ[315], 3);
    this.ᐃΔᐃ[108].id = 108;
    this.ᐃΔᐃ[108].info.ᐃΔ[2] = this.ᐃΔᐃ[108].info.ᐃΔ[0];
    this.ᐃΔᐃ[109] = vf(60, 60, 0, Ⲇᐃ[316], 3);
    this.ᐃΔᐃ[109].id = 109;
    this.ᐃΔᐃ[109].info.ᐃΔ[2] = this.ᐃΔᐃ[109].info.ᐃΔ[0];
    this.ᐃΔᐃ[110] = vf(60, 60, 0, Ⲇᐃ[277], 3);
    this.ᐃΔᐃ[110].id = 110;
    this.ᐃΔᐃ[233] = vf(60, 60, 0, Ⲇᐃ[1154], 3);
    this.ᐃΔᐃ[233].id = 233;
    this.ᐃΔᐃ[111] = vf(60, 60, 0, Ⲇᐃ[297], 3);
    this.ᐃΔᐃ[111].id = 111;
    this.ᐃΔᐃ[111].info.ᐃΔ[2] = this.ᐃΔᐃ[111].info.ᐃΔ[0];
    this.ᐃΔᐃ[112] = vf(60, 60, 0, Ⲇᐃ[298], 3);
    this.ᐃΔᐃ[112].id = 112;
    this.ᐃΔᐃ[112].info.ᐃΔ[2] = this.ᐃΔᐃ[112].info.ᐃΔ[0];
    this.ᐃΔᐃ[3] = vf(60, 60, 0, Ⲇᐃ[258], 3);
    this.ᐃΔᐃ[3].id = 3;
    this.ᐃΔᐃ[4] = vf(60, 60, 0, Ⲇᐃ[296], 3);
    this.ᐃΔᐃ[4].id = 4;
    this.ᐃΔᐃ[5] = vf(60, 60, 0, Ⲇᐃ[292], 3);
    this.ᐃΔᐃ[5].id = 5;
    this.ᐃΔᐃ[57] = vf(60, 60, 0, Ⲇᐃ[829], 3);
    this.ᐃΔᐃ[57].id = 57;
    this.ᐃΔᐃ[6] = vf(60, 60, 0, Ⲇᐃ[293], 3);
    this.ᐃΔᐃ[6].id = 6;
    this.ᐃΔᐃ[113] = vf(60, 60, 0, Ⲇᐃ[309], 3);
    this.ᐃΔᐃ[113].id = 113;
    this.ᐃΔᐃ[114] = vf(60, 60, 0, Ⲇᐃ[310], 3);
    this.ᐃΔᐃ[114].id = 114;
    this.ᐃΔᐃ[115] = vf(60, 60, 0, Ⲇᐃ[311], 3);
    this.ᐃΔᐃ[115].id = 115;
    this.ᐃΔᐃ[162] = vf(60, 60, 0, Ⲇᐃ[317], 3);
    this.ᐃΔᐃ[162].id = 162;
    this.ᐃΔᐃ[160] = vf(60, 60, 0, Ⲇᐃ[319], 3);
    this.ᐃΔᐃ[160].id = 160;
    this.ᐃΔᐃ[8] = vf(60, 60, 0, Ⲇᐃ[313], 3);
    this.ᐃΔᐃ[8].id = 8;
    this.ᐃΔᐃ[117] = vf(60, 60, 0, Ⲇᐃ[323], 3);
    this.ᐃΔᐃ[117].id = 117;
    this.ᐃΔᐃ[116] = vf(60, 60, 0, Ⲇᐃ[300], 3);
    this.ᐃΔᐃ[116].id = 116;
    this.ᐃΔᐃ[118] = vf(60, 60, 0, Ⲇᐃ[328], 3);
    this.ᐃΔᐃ[118].id = 118;
    this.ᐃΔᐃ[195] = vf(60, 60, 0, Ⲇᐃ[303], 3);
    this.ᐃΔᐃ[195].id = 195;
    this.ᐃΔᐃ[161] = vf(60, 60, 0, Ⲇᐃ[305], 3);
    this.ᐃΔᐃ[161].id = 161;
    this.ᐃΔᐃ[161].info.ᐃΔ[2] = this.ᐃΔᐃ[161].info.ᐃΔ[0];
    this.ᐃΔᐃ[163] = vf(60, 60, 0, Ⲇᐃ[329], 3);
    this.ᐃΔᐃ[163].id = 163;
    this.ᐃΔᐃ[164] = vf(60, 60, 0, Ⲇᐃ[330], 3);
    this.ᐃΔᐃ[164].id = 164;
    this.ᐃΔᐃ[165] = vf(60, 60, 0, Ⲇᐃ[331], 3);
    this.ᐃΔᐃ[165].id = 165;
    this.ᐃΔᐃ[166] = vf(60, 60, 0, Ⲇᐃ[335], 3);
    this.ᐃΔᐃ[166].id = 166;
    this.ᐃΔᐃ[167] = vf(60, 60, 0, Ⲇᐃ[337], 3);
    this.ᐃΔᐃ[167].id = 167;
    this.ᐃΔᐃ[168] = vf(60, 60, 0, Ⲇᐃ[361], 3);
    this.ᐃΔᐃ[168].id = 168;
    this.ᐃΔᐃ[169] = vf(60, 60, 0, Ⲇᐃ[362], 3);
    this.ᐃΔᐃ[169].id = 169;
    this.ᐃΔᐃ[170] = vf(60, 60, 0, Ⲇᐃ[364], 3);
    this.ᐃΔᐃ[170].id = 170;
    this.ᐃΔᐃ[29] = vf(60, 60, 0, Ⲇᐃ[392], 3);
    this.ᐃΔᐃ[29].id = 29;
    this.ᐃΔᐃ[10] = vf(60, 60, 0, Ⲇᐃ[369], 3);
    this.ᐃΔᐃ[10].id = 10;
    this.ᐃΔᐃ[171] = vf(60, 60, 0, Ⲇᐃ[372], 3);
    this.ᐃΔᐃ[171].id = 171;
    this.ᐃΔᐃ[172] = vf(60, 60, 0, Ⲇᐃ[375], 3);
    this.ᐃΔᐃ[172].id = 172;
    this.ᐃΔᐃ[173] = vf(60, 60, 0, Ⲇᐃ[378], 3);
    this.ᐃΔᐃ[173].id = 173;
    this.ᐃΔᐃ[2] = vf(60, 60, 0, Ⲇᐃ[368], 3);
    this.ᐃΔᐃ[2].id = 2;
    this.ᐃΔᐃ[2].info.ᐃΔ[2] = this.ᐃΔᐃ[2].info.ᐃΔ[0];
    this.ᐃΔᐃ[237] = vf(60, 60, 0, Ⲇᐃ[1162], 3);
    this.ᐃΔᐃ[237].id = 237;
    this.ᐃΔᐃ[237].info.ᐃΔ[2] = this.ᐃΔᐃ[237].info.ᐃΔ[0];
    this.ᐃΔᐃ[174] = vf(60, 60, 0, Ⲇᐃ[393], 3);
    this.ᐃΔᐃ[174].id = 174;
    this.ᐃΔᐃ[174].info.ᐃΔ[2] = this.ᐃΔᐃ[174].info.ᐃΔ[0];
    this.ᐃΔᐃ[222] = vf(60, 60, 0, Ⲇᐃ[1035], 3);
    this.ᐃΔᐃ[222].id = 222;
    this.ᐃΔᐃ[231] = vf(60, 60, 0, Ⲇᐃ[1037], 3);
    this.ᐃΔᐃ[231].id = 231;
    this.ᐃΔᐃ[232] = vf(60, 60, 0, Ⲇᐃ[1039], 3);
    this.ᐃΔᐃ[232].id = 232;
    this.ᐃΔᐃ[234] = vf(60, 60, 0, Ⲇᐃ[1156], 3);
    this.ᐃΔᐃ[234].id = 234;
    this.ᐃΔᐃ[10] = vf(60, 60, 0, Ⲇᐃ[369], 3);
    this.ᐃΔᐃ[10].id = 10;
    this.ᐃΔᐃ[11] = vf(60, 60, 0, Ⲇᐃ[381], 3);
    this.ᐃΔᐃ[11].id = 11;
    this.ᐃΔᐃ[12] = vf(60, 60, 0, Ⲇᐃ[401], 3);
    this.ᐃΔᐃ[12].id = 12;
    this.ᐃΔᐃ[13] = vf(60, 60, 0, Ⲇᐃ[395], 3);
    this.ᐃΔᐃ[13].id = 13;
    this.ᐃΔᐃ[14] = vf(60, 60, 0, Ⲇᐃ[398], 3);
    this.ᐃΔᐃ[14].id = 14;
    this.ᐃΔᐃ[15] = vf(60, 60, 0, Ⲇᐃ[404], 3);
    this.ᐃΔᐃ[15].id = 15;
    this.ᐃΔᐃ[16] = vf(60, 60, 0, Ⲇᐃ[874], 3);
    this.ᐃΔᐃ[16].id = 16;
    this.ᐃΔᐃ[119] = vf(60, 60, 0, Ⲇᐃ[408], 3);
    this.ᐃΔᐃ[119].id = 119;
    this.ᐃΔᐃ[23] = vf(60, 60, 0, Ⲇᐃ[420], 3);
    this.ᐃΔᐃ[23].id = 23;
    this.ᐃΔᐃ[24] = vf(60, 60, 0, Ⲇᐃ[423], 3);
    this.ᐃΔᐃ[24].id = 24;
    this.ᐃΔᐃ[87] = vf(60, 60, 0, Ⲇᐃ[1227], 3);
    this.ᐃΔᐃ[87].id = 87;
    this.ᐃΔᐃ[88] = vf(60, 60, 0, Ⲇᐃ[1230], 3);
    this.ᐃΔᐃ[88].id = 88;
    this.ᐃΔᐃ[80] = vf(60, 60, 0, Ⲇᐃ[1137], 3);
    this.ᐃΔᐃ[80].id = 80;
    this.ᐃΔᐃ[81] = vf(60, 60, 0, Ⲇᐃ[1140], 3);
    this.ᐃΔᐃ[81].id = 81;
    this.ᐃΔᐃ[64] = vf(60, 60, 0, Ⲇᐃ[569], 3);
    this.ᐃΔᐃ[64].id = 64;
    this.ᐃΔᐃ[101] = vf(60, 60, 0, Ⲇᐃ[1166], 3);
    this.ᐃΔᐃ[101].id = 101;
    this.ᐃΔᐃ[71] = vf(60, 60, 0, Ⲇᐃ[1239], 3);
    this.ᐃΔᐃ[71].id = 71;
    this.ᐃΔᐃ[65] = vf(60, 60, 0, Ⲇᐃ[572], 3);
    this.ᐃΔᐃ[65].id = 65;
    this.ᐃΔᐃ[102] = vf(60, 60, 0, Ⲇᐃ[1169], 3);
    this.ᐃΔᐃ[102].id = 102;
    this.ᐃΔᐃ[72] = vf(60, 60, 0, Ⲇᐃ[1242], 3);
    this.ᐃΔᐃ[72].id = 72;
    this.ᐃΔᐃ[66] = vf(60, 60, 0, Ⲇᐃ[575], 3);
    this.ᐃΔᐃ[66].id = 66;
    this.ᐃΔᐃ[103] = vf(60, 60, 0, Ⲇᐃ[1172], 3);
    this.ᐃΔᐃ[103].id = 103;
    this.ᐃΔᐃ[73] = vf(60, 60, 0, Ⲇᐃ[1245], 3);
    this.ᐃΔᐃ[73].id = 73;
    this.ᐃΔᐃ[67] = vf(60, 60, 0, Ⲇᐃ[578], 3);
    this.ᐃΔᐃ[67].id = 67;
    this.ᐃΔᐃ[104] = vf(60, 60, 0, Ⲇᐃ[1175], 3);
    this.ᐃΔᐃ[104].id = 104;
    this.ᐃΔᐃ[74] = vf(60, 60, 0, Ⲇᐃ[1248], 3);
    this.ᐃΔᐃ[74].id = 74;
    this.ᐃΔᐃ[68] = vf(60, 60, 0, Ⲇᐃ[581], 3);
    this.ᐃΔᐃ[68].id = 68;
    this.ᐃΔᐃ[105] = vf(60, 60, 0, Ⲇᐃ[1178], 3);
    this.ᐃΔᐃ[105].id = 105;
    this.ᐃΔᐃ[75] = vf(60, 60, 0, Ⲇᐃ[1251], 3);
    this.ᐃΔᐃ[75].id = 75;
    this.ᐃΔᐃ[69] = vf(60, 60, 0, Ⲇᐃ[584], 3);
    this.ᐃΔᐃ[69].id = 69;
    this.ᐃΔᐃ[106] = vf(60, 60, 0, Ⲇᐃ[1181], 3);
    this.ᐃΔᐃ[106].id = 106;
    this.ᐃΔᐃ[76] = vf(60, 60, 0, Ⲇᐃ[1254], 3);
    this.ᐃΔᐃ[76].id = 76;
    this.ᐃΔᐃ[70] = vf(60, 60, 0, Ⲇᐃ[587], 3);
    this.ᐃΔᐃ[70].id = 70;
    this.ᐃΔᐃ[107] = vf(60, 60, 0, Ⲇᐃ[1184], 3);
    this.ᐃΔᐃ[107].id = 107;
    this.ᐃΔᐃ[94] = vf(60, 60, 0, Ⲇᐃ[1257], 3);
    this.ᐃΔᐃ[94].id = 94;
    this.ᐃΔᐃ[95] = vf(60, 60, 0, Ⲇᐃ[1260], 3);
    this.ᐃΔᐃ[95].id = 95;
    this.ᐃΔᐃ[96] = vf(60, 60, 0, Ⲇᐃ[1263], 3);
    this.ᐃΔᐃ[96].id = 96;
    this.ᐃΔᐃ[97] = vf(60, 60, 0, Ⲇᐃ[1266], 3);
    this.ᐃΔᐃ[97].id = 97;
    this.ᐃΔᐃ[98] = vf(60, 60, 0, Ⲇᐃ[1269], 3);
    this.ᐃΔᐃ[98].id = 98;
    this.ᐃΔᐃ[99] = vf(60, 60, 0, Ⲇᐃ[1272], 3);
    this.ᐃΔᐃ[99].id = 99;
    this.ᐃΔᐃ[58] = vf(60, 60, 0, Ⲇᐃ[826], 3);
    this.ᐃΔᐃ[58].id = 58;
    this.ᐃΔᐃ[25] = vf(60, 60, 0, Ⲇᐃ[429], 3);
    this.ᐃΔᐃ[25].id = 25;
    this.ᐃΔᐃ[26] = vf(60, 60, 0, Ⲇᐃ[432], 3);
    this.ᐃΔᐃ[26].id = 26;
    this.ᐃΔᐃ[27] = vf(60, 60, 0, Ⲇᐃ[435], 3);
    this.ᐃΔᐃ[27].id = 27;
    this.ᐃΔᐃ[28] = vf(60, 60, 0, Ⲇᐃ[438], 3);
    this.ᐃΔᐃ[28].id = 28;
    this.ᐃΔᐃ[120] = vf(60, 60, 0, Ⲇᐃ[441], 3);
    this.ᐃΔᐃ[120].id = 120;
    this.ᐃΔᐃ[120].info.ᐃΔ[2] = this.ᐃΔᐃ[120].info.ᐃΔ[0];
    this.ᐃΔᐃ[29] = vf(60, 60, 0, Ⲇᐃ[392], 3);
    this.ᐃΔᐃ[29].id = 29;
    this.ᐃΔᐃ[121] = vf(60, 60, 0, Ⲇᐃ[418], 3);
    this.ᐃΔᐃ[121].id = 121;
    this.ᐃΔᐃ[121].info.ᐃΔ[2] = this.ᐃΔᐃ[121].info.ᐃΔ[0];
    this.ᐃΔᐃ[30] = vf(60, 60, 0, Ⲇᐃ[455], 3);
    this.ᐃΔᐃ[30].id = 30;
    this.ᐃΔᐃ[9] = vf(60, 60, 0, Ⲇᐃ[860], 3);
    this.ᐃΔᐃ[9].id = 9;
    this.ᐃΔᐃ[31] = vf(60, 60, 0, Ⲇᐃ[458], 3);
    this.ᐃΔᐃ[31].id = 31;
    this.ᐃΔᐃ[32] = vf(60, 60, 0, Ⲇᐃ[1017], 3);
    this.ᐃΔᐃ[32].id = 32;
    this.ᐃΔᐃ[33] = vf(60, 60, 0, Ⲇᐃ[472], 3);
    this.ᐃΔᐃ[33].id = 33;
    this.ᐃΔᐃ[35] = vf(60, 60, 0, Ⲇᐃ[477], 3);
    this.ᐃΔᐃ[35].id = 35;
    this.ᐃΔᐃ[36] = vf(60, 60, 0, Ⲇᐃ[480], 3);
    this.ᐃΔᐃ[36].id = 36;
    this.ᐃΔᐃ[37] = vf(60, 60, 0, Ⲇᐃ[483], 3);
    this.ᐃΔᐃ[37].id = 37;
    this.ᐃΔᐃ[38] = vf(60, 60, 0, Ⲇᐃ[486], 3);
    this.ᐃΔᐃ[38].id = 38;
    this.ᐃΔᐃ[39] = vf(60, 60, 0, Ⲇᐃ[489], 3);
    this.ᐃΔᐃ[39].id = 39;
    this.ᐃΔᐃ[122] = vf(60, 60, 0, Ⲇᐃ[492], 3);
    this.ᐃΔᐃ[122].id = 122;
    this.ᐃΔᐃ[123] = vf(60, 60, 0, Ⲇᐃ[495], 3);
    this.ᐃΔᐃ[123].id = 123;
    this.ᐃΔᐃ[124] = vf(60, 60, 0, Ⲇᐃ[499], 3);
    this.ᐃΔᐃ[124].id = 124;
    this.ᐃΔᐃ[40] = vf(60, 60, 0, Ⲇᐃ[502], 3);
    this.ᐃΔᐃ[40].id = 40;
    this.ᐃΔᐃ[146] = vf(60, 60, 0, Ⲇᐃ[505], 3);
    this.ᐃΔᐃ[146].id = 146;
    this.ᐃΔᐃ[146].info.ᐃΔ[2] = this.ᐃΔᐃ[146].info.ᐃΔ[0];
    this.ᐃΔᐃ[240] = vf(60, 60, 0, Ⲇᐃ[1233], 3);
    this.ᐃΔᐃ[240].id = 240;
    this.ᐃΔᐃ[240].info.ᐃΔ[2] = this.ᐃΔᐃ[240].info.ᐃΔ[0];
    this.ᐃΔᐃ[147] = vf(60, 60, 0, Ⲇᐃ[513], 3);
    this.ᐃΔᐃ[147].id = 147;
    this.ᐃΔᐃ[147].info.ᐃΔ[2] = this.ᐃΔᐃ[147].info.ᐃΔ[0];
    this.ᐃΔᐃ[148] = vf(60, 60, 0, Ⲇᐃ[518], 3);
    this.ᐃΔᐃ[148].id = 148;
    this.ᐃΔᐃ[148].info.ᐃΔ[2] = this.ᐃΔᐃ[148].info.ᐃΔ[0];
    this.ᐃΔᐃ[149] = vf(60, 60, 0, Ⲇᐃ[521], 3);
    this.ᐃΔᐃ[149].id = 149;
    this.ᐃΔᐃ[150] = vf(60, 60, 0, Ⲇᐃ[523], 3);
    this.ᐃΔᐃ[150].id = 150;
    this.ᐃΔᐃ[151] = vf(60, 60, 0, Ⲇᐃ[529], 3);
    this.ᐃΔᐃ[151].id = 151;
    this.ᐃΔᐃ[158] = vf(60, 60, 0, Ⲇᐃ[532], 3);
    this.ᐃΔᐃ[158].id = 158;
    this.ᐃΔᐃ[159] = vf(60, 60, 0, Ⲇᐃ[553], 3);
    this.ᐃΔᐃ[159].id = 159;
    this.ᐃΔᐃ[43] = vf(60, 60, 0, Ⲇᐃ[541], 3);
    this.ᐃΔᐃ[43].id = 43;
    this.ᐃΔᐃ[45] = vf(60, 60, 0, Ⲇᐃ[550], 3);
    this.ᐃΔᐃ[45].id = 45;
    this.ᐃΔᐃ[125] = vf(60, 60, 0, Ⲇᐃ[605], 3);
    this.ᐃΔᐃ[125].id = 125;
    this.ᐃΔᐃ[221] = vf(60, 60, 0, Ⲇᐃ[1236], 3);
    this.ᐃΔᐃ[221].id = 221;
    this.ᐃΔᐃ[223] = vf(60, 60, 0, Ⲇᐃ[1028], 3);
    this.ᐃΔᐃ[223].id = 223;
    this.ᐃΔᐃ[224] = vf(60, 60, 0, Ⲇᐃ[1031], 3);
    this.ᐃΔᐃ[224].id = 224;
    this.ᐃΔᐃ[230] = vf(60, 60, 0, Ⲇᐃ[1117], 3);
    this.ᐃΔᐃ[230].id = 230;
    this.ᐃΔᐃ[89] = vf(60, 60, 0, Ⲇᐃ[1046], 3);
    this.ᐃΔᐃ[89].id = 89;
    this.ᐃΔᐃ[225] = vf(60, 60, 0, Ⲇᐃ[1049], 3);
    this.ᐃΔᐃ[225].id = 225;
    this.ᐃΔᐃ[226] = vf(60, 60, 0, Ⲇᐃ[1189], 3);
    this.ᐃΔᐃ[226].id = 226;
    this.ᐃΔᐃ[227] = vf(60, 60, 0, Ⲇᐃ[1080], 3);
    this.ᐃΔᐃ[227].id = 227;
    this.ᐃΔᐃ[239] = vf(60, 60, 0, Ⲇᐃ[1224], 3);
    this.ᐃΔᐃ[239].id = 239;
    this.ᐃΔᐃ[228] = vf(60, 60, 0, Ⲇᐃ[1095], 3);
    this.ᐃΔᐃ[228].id = 228;
    this.ᐃΔᐃ[229] = vf(60, 60, 0, Ⲇᐃ[1110], 3);
    this.ᐃΔᐃ[229].id = 229;
    this.ᐃΔᐃ[126] = vf(60, 60, 0, Ⲇᐃ[609], 3);
    this.ᐃΔᐃ[126].id = 126;
    this.ᐃΔᐃ[126].info.ᐃΔ[2] = this.ᐃΔᐃ[126].info.ᐃΔ[0];
    this.ᐃΔᐃ[127] = vf(60, 60, 0, Ⲇᐃ[613], 3);
    this.ᐃΔᐃ[127].id = 127;
    this.ᐃΔᐃ[128] = vf(60, 60, 0, Ⲇᐃ[612], 3);
    this.ᐃΔᐃ[128].id = 128;
    this.ᐃΔᐃ[46] = vf(60, 60, 0, Ⲇᐃ[616], 3);
    this.ᐃΔᐃ[46].id = 46;
    this.ᐃΔᐃ[50] = vf(60, 60, 0, Ⲇᐃ[699], 3);
    this.ᐃΔᐃ[50].id = 50;
    this.ᐃΔᐃ[51] = vf(60, 60, 0, Ⲇᐃ[702], 3);
    this.ᐃΔᐃ[51].id = 51;
    this.ᐃΔᐃ[52] = vf(60, 60, 0, Ⲇᐃ[705], 3);
    this.ᐃΔᐃ[52].id = 52;
    this.ᐃΔᐃ[55] = vf(60, 60, 0, Ⲇᐃ[709], 3);
    this.ᐃΔᐃ[55].id = 55;
    this.ᐃΔᐃ[129] = vf(60, 60, 0, Ⲇᐃ[624], 3);
    this.ᐃΔᐃ[129].id = 129;
    this.ᐃΔᐃ[129].info.ᐃΔ[2] = this.ᐃΔᐃ[129].info.ᐃΔ[0];
    this.ᐃΔᐃ[130] = vf(60, 60, 0, Ⲇᐃ[626], 3);
    this.ᐃΔᐃ[130].id = 130;
    this.ᐃΔᐃ[131] = vf(60, 60, 0, Ⲇᐃ[629], 3);
    this.ᐃΔᐃ[131].id = 131;
    this.ᐃΔᐃ[131].info.ᐃΔ[2] = this.ᐃΔᐃ[131].info.ᐃΔ[0];
    this.ᐃΔᐃ[132] = vf(60, 60, 0, Ⲇᐃ[631], 3);
    this.ᐃΔᐃ[132].id = 132;
    this.ᐃΔᐃ[133] = vf(60, 60, 0, Ⲇᐃ[634], 3);
    this.ᐃΔᐃ[133].id = 133;
    this.ᐃΔᐃ[134] = vf(60, 60, 0, Ⲇᐃ[639], 3);
    this.ᐃΔᐃ[134].id = 134;
    this.ᐃΔᐃ[134].info.ᐃΔ[2] = this.ᐃΔᐃ[134].info.ᐃΔ[0];
    this.ᐃΔᐃ[135] = vf(60, 60, 0, Ⲇᐃ[644], 3);
    this.ᐃΔᐃ[135].id = 135;
    this.ᐃΔᐃ[47] = vf(60, 60, 0, Ⲇᐃ[646], 3);
    this.ᐃΔᐃ[47].id = 47;
    this.ᐃΔᐃ[48] = vf(60, 60, 0, Ⲇᐃ[649], 3);
    this.ᐃΔᐃ[48].id = 48;
    this.ᐃΔᐃ[49] = vf(60, 60, 0, Ⲇᐃ[652], 3);
    this.ᐃΔᐃ[49].id = 49;
    this.ᐃΔᐃ[136] = vf(60, 60, 0, Ⲇᐃ[659], 3);
    this.ᐃΔᐃ[136].id = 136;
    this.ᐃΔᐃ[143] = vf(60, 60, 0, Ⲇᐃ[143], 3);
    this.ᐃΔᐃ[143].id = 143;
    this.ᐃΔᐃ[137] = vf(60, 60, 0, Ⲇᐃ[662], 3);
    this.ᐃΔᐃ[137].id = 137;
    this.ᐃΔᐃ[138] = vf(60, 60, 0, Ⲇᐃ[664], 3);
    this.ᐃΔᐃ[138].id = 138;
    this.ᐃΔᐃ[139] = vf(60, 60, 0, Ⲇᐃ[674], 3);
    this.ᐃΔᐃ[139].id = 139;
    this.ᐃΔᐃ[139].info.ᐃΔ[2] = this.ᐃΔᐃ[139].info.ᐃΔ[0];
    this.ᐃΔᐃ[140] = vf(60, 60, 0, Ⲇᐃ[140], 3);
    this.ᐃΔᐃ[140].id = 140;
    this.ᐃΔᐃ[140].info.ᐃΔ[2] = this.ᐃΔᐃ[140].info.ᐃΔ[0];
    this.ᐃΔᐃ[141] = vf(60, 60, 0, Ⲇᐃ[685], 3);
    this.ᐃΔᐃ[141].id = 141;
    this.ᐃΔᐃ[142] = vf(60, 60, 0, Ⲇᐃ[142], 3);
    this.ᐃΔᐃ[142].id = 142;
    this.ᐃΔᐃ[142].info.ᐃΔ[2] = this.ᐃΔᐃ[142].info.ᐃΔ[0];
    this.ᐃΔᐃ[144] = vf(60, 60, 0, Ⲇᐃ[717], 3);
    this.ᐃΔᐃ[144].id = 144;
    this.ᐃΔᐃ[145] = vf(60, 60, 0, Ⲇᐃ[145], 3);
    this.ᐃΔᐃ[145].id = 145;
    this.ᐃΔᐃ[59] = vf(60, 60, 0, Ⲇᐃ[732], 3);
    this.ᐃΔᐃ[59].id = 59;
    this.ᐃΔᐃ[62] = vf(60, 60, 0, Ⲇᐃ[563], 3);
    this.ᐃΔᐃ[62].id = 62;
    this.ᐃΔᐃ[185] = vf(60, 60, 0, Ⲇᐃ[252], 3);
    this.ᐃΔᐃ[185].id = 185;
    this.ᐃΔᐃ[185].info.ᐃΔ[2] = this.ᐃΔᐃ[185].info.ᐃΔ[0];
    this.ᐃΔᐃ[184] = vf(60, 60, 0, Ⲇᐃ[751], 3);
    this.ᐃΔᐃ[184].id = 184;
    this.ᐃΔᐃ[184].info.ᐃΔ[2] = this.ᐃΔᐃ[184].info.ᐃΔ[0];
    this.ᐃΔᐃ[17] = vf(60, 60, 0, Ⲇᐃ[877], 3);
    this.ᐃΔᐃ[17].id = 17;
    this.ᐃΔᐃ[63] = vf(60, 60, 0, Ⲇᐃ[566], 3);
    this.ᐃΔᐃ[63].id = 63;
    this.ᐃΔᐃ[187] = vf(60, 60, 0, Ⲇᐃ[253], 3);
    this.ᐃΔᐃ[187].id = 187;
    this.ᐃΔᐃ[187].info.ᐃΔ[2] = this.ᐃΔᐃ[187].info.ᐃΔ[0];
    this.ᐃΔᐃ[186] = vf(60, 60, 0, Ⲇᐃ[753], 3);
    this.ᐃΔᐃ[186].id = 186;
    this.ᐃΔᐃ[186].info.ᐃΔ[2] = this.ᐃΔᐃ[186].info.ᐃΔ[0];
    this.ᐃΔᐃ[77] = vf(60, 60, 0, Ⲇᐃ[756], 3);
    this.ᐃΔᐃ[77].id = 77;
    this.ᐃΔᐃ[175] = vf(60, 60, 0, Ⲇᐃ[176], 3);
    this.ᐃΔᐃ[175].id = 175;
    this.ᐃΔᐃ[175].info.ᐃΔ[2] = this.ᐃΔᐃ[175].info.ᐃΔ[0];
    this.ᐃΔᐃ[176] = vf(60, 60, 0, Ⲇᐃ[177], 3);
    this.ᐃΔᐃ[176].id = 176;
    this.ᐃΔᐃ[176].info.ᐃΔ[2] = this.ᐃΔᐃ[176].info.ᐃΔ[0];
    this.ᐃΔᐃ[78] = vf(60, 60, 0, Ⲇᐃ[760], 3);
    this.ᐃΔᐃ[78].id = 78;
    this.ᐃΔᐃ[177] = vf(60, 60, 0, Ⲇᐃ[175], 3);
    this.ᐃΔᐃ[177].id = 177;
    this.ᐃΔᐃ[177].info.ᐃΔ[2] = this.ᐃΔᐃ[177].info.ᐃΔ[0];
    this.ᐃΔᐃ[79] = vf(60, 60, 0, Ⲇᐃ[764], 3);
    this.ᐃΔᐃ[79].id = 79;
    this.ᐃΔᐃ[83] = vf(60, 60, 0, Ⲇᐃ[767], 3);
    this.ᐃΔᐃ[83].id = 83;
    this.ᐃΔᐃ[84] = vf(60, 60, 0, Ⲇᐃ[771], 3);
    this.ᐃΔᐃ[84].id = 84;
    this.ᐃΔᐃ[178] = vf(60, 60, 0, Ⲇᐃ[178], 3);
    this.ᐃΔᐃ[178].id = 178;
    this.ᐃΔᐃ[179] = vf(60, 60, 0, Ⲇᐃ[179], 3);
    this.ᐃΔᐃ[179].id = 179;
    this.ᐃΔᐃ[86] = vf(60, 60, 0, Ⲇᐃ[776], 3);
    this.ᐃΔᐃ[86].id = 86;
    this.ᐃΔᐃ[85] = vf(60, 60, 0, Ⲇᐃ[779], 3);
    this.ᐃΔᐃ[85].id = 85;
    this.ᐃΔᐃ[180] = vf(60, 60, 0, Ⲇᐃ[180], 3);
    this.ᐃΔᐃ[180].id = 180;
    this.ᐃΔᐃ[181] = vf(60, 60, 0, Ⲇᐃ[181], 3);
    this.ᐃΔᐃ[181].id = 181;
    this.ᐃΔᐃ[182] = vf(60, 60, 0, Ⲇᐃ[789], 3);
    this.ᐃΔᐃ[182].id = 182;
    this.ᐃΔᐃ[183] = vf(60, 60, 0, Ⲇᐃ[800], 3);
    this.ᐃΔᐃ[183].id = 183;
    this.ᐃΔᐃ[188] = vf(60, 60, 0, Ⲇᐃ[808], 3);
    this.ᐃΔᐃ[188].id = 188;
    this.ᐃΔᐃ[189] = vf(60, 60, 0, Ⲇᐃ[814], 3);
    this.ᐃΔᐃ[189].id = 189;
    this.ᐃΔᐃ[191] = vf(60, 60, 0, Ⲇᐃ[834], 3);
    this.ᐃΔᐃ[191].id = 191;
    this.ᐃΔᐃ[192] = vf(60, 60, 0, Ⲇᐃ[840], 3);
    this.ᐃΔᐃ[192].id = 192;
    this.ᐃΔᐃ[190] = vf(60, 60, 0, Ⲇᐃ[842], 3);
    this.ᐃΔᐃ[190].id = 190;
    this.ᐃΔᐃ[193] = vf(60, 60, 0, Ⲇᐃ[845], 3);
    this.ᐃΔᐃ[193].id = 193;
    this.ᐃΔᐃ[194] = vf(60, 60, 0, Ⲇᐃ[850], 3);
    this.ᐃΔᐃ[194].id = 194;
    this.ᐃΔᐃ[204] = vf(60, 60, 0, Ⲇᐃ[949], 3);
    this.ᐃΔᐃ[204].id = 204;
    this.ᐃΔᐃ[205] = vf(60, 60, 0, Ⲇᐃ[955], 3);
    this.ᐃΔᐃ[205].id = 205;
    this.ᐃΔᐃ[206] = vf(60, 60, 0, Ⲇᐃ[959], 3);
    this.ᐃΔᐃ[206].id = 206;
    this.ᐃΔᐃ[207] = vf(60, 60, 0, Ⲇᐃ[965], 3);
    this.ᐃΔᐃ[207].id = 207;
    this.ᐃΔᐃ[208] = vf(60, 60, 0, Ⲇᐃ[966], 3);
    this.ᐃΔᐃ[208].id = 208;
    this.ᐃΔᐃ[209] = vf(60, 60, 0, Ⲇᐃ[972], 3);
    this.ᐃΔᐃ[209].id = 209;
    this.ᐃΔᐃ[210] = vf(60, 60, 0, Ⲇᐃ[981], 3);
    this.ᐃΔᐃ[210].id = 210;
    this.ᐃΔᐃ[211] = vf(60, 60, 0, Ⲇᐃ[987], 3);
    this.ᐃΔᐃ[211].id = 211;
    this.ᐃΔᐃ[41] = vf(60, 60, 0, Ⲇᐃ[880], 3);
    this.ᐃΔᐃ[41].id = 41;
    this.ᐃΔᐃ[42] = vf(60, 60, 0, Ⲇᐃ[882], 3);
    this.ᐃΔᐃ[42].id = 42;
    this.ᐃΔᐃ[12] = vf(60, 60, 0, Ⲇᐃ[401], 3);
    this.ᐃΔᐃ[12].id = 12;
    this.ᐃΔᐃ[16] = vf(60, 60, 0, Ⲇᐃ[874], 3);
    this.ᐃΔᐃ[16].id = 16;
    this.ᐃΔᐃ[196] = vf(60, 60, 0, Ⲇᐃ[196], 3);
    this.ᐃΔᐃ[196].id = 196;
    this.ᐃΔᐃ[18] = vf(60, 60, 0, Ⲇᐃ[901], 3);
    this.ᐃΔᐃ[18].id = 18;
    this.ᐃΔᐃ[197] = vf(60, 60, 0, Ⲇᐃ[197], 3);
    this.ᐃΔᐃ[197].id = 197;
    this.ᐃΔᐃ[198] = vf(60, 60, 0, Ⲇᐃ[907], 3);
    this.ᐃΔᐃ[198].id = 198;
    this.ᐃΔᐃ[61] = vf(60, 60, 0, Ⲇᐃ[910], 3);
    this.ᐃΔᐃ[61].id = 61;
    this.ᐃΔᐃ[201] = vf(60, 60, 0, Ⲇᐃ[870], 3);
    this.ᐃΔᐃ[201].id = 201;
    this.ᐃΔᐃ[200] = vf(60, 60, 0, Ⲇᐃ[200], 3);
    this.ᐃΔᐃ[200].id = 200;
    this.ᐃΔᐃ[199] = vf(60, 60, 0, Ⲇᐃ[865], 3);
    this.ᐃΔᐃ[199].id = 199;
    this.ΔⵠⲆ = [];
    this.ΔⵠⲆ[35] = vf(60, 60, 0, Ⲇᐃ[254], 3);
    this.ΔⵠⲆ[35].id = 35;
    this.ΔⵠⲆ[5] = vf(60, 60, 0, Ⲇᐃ[256], 3);
    this.ΔⵠⲆ[5].id = 5;
    this.ΔⵠⲆ[0] = vf(60, 60, 0, Ⲇᐃ[302], 3);
    this.ΔⵠⲆ[0].id = 0;
    this.ΔⵠⲆ[3] = vf(60, 60, 0, Ⲇᐃ[262], 3);
    this.ΔⵠⲆ[3].id = 3;
    this.ΔⵠⲆ[55] = vf(60, 60, 0, Ⲇᐃ[318], 3);
    this.ΔⵠⲆ[55].id = 55;
    this.ΔⵠⲆ[67] = vf(60, 60, 0, Ⲇᐃ[320], 3);
    this.ΔⵠⲆ[67].id = 67;
    this.ΔⵠⲆ[40] = vf(60, 60, 0, Ⲇᐃ[284], 3);
    this.ΔⵠⲆ[40].id = 40;
    this.ΔⵠⲆ[6] = vf(60, 60, 0, Ⲇᐃ[295], 3);
    this.ΔⵠⲆ[6].id = 6;
    this.ΔⵠⲆ[7] = vf(60, 60, 0, Ⲇᐃ[257], 3);
    this.ΔⵠⲆ[7].id = 7;
    this.ΔⵠⲆ[36] = vf(60, 60, 0, Ⲇᐃ[290], 3);
    this.ΔⵠⲆ[36].id = 36;
    this.ΔⵠⲆ[34] = vf(60, 60, 0, Ⲇᐃ[830], 3);
    this.ΔⵠⲆ[34].id = 34;
    this.ΔⵠⲆ[37] = vf(60, 60, 0, Ⲇᐃ[291], 3);
    this.ΔⵠⲆ[37].id = 37;
    this.ΔⵠⲆ[4] = vf(60, 60, 0, Ⲇᐃ[314], 3);
    this.ΔⵠⲆ[4].id = 4;
    this.ΔⵠⲆ[49] = vf(60, 60, 0, Ⲇᐃ[325], 3);
    this.ΔⵠⲆ[49].id = 49;
    this.ΔⵠⲆ[1] = vf(60, 60, 0, Ⲇᐃ[327], 3);
    this.ΔⵠⲆ[1].id = 1;
    this.ΔⵠⲆ[54] = vf(60, 60, 0, Ⲇᐃ[304], 3);
    this.ΔⵠⲆ[54].id = 54;
    this.ΔⵠⲆ[56] = vf(60, 60, 0, Ⲇᐃ[263], 3);
    this.ΔⵠⲆ[56].id = 56;
    this.ΔⵠⲆ[57] = vf(60, 60, 0, Ⲇᐃ[265], 3);
    this.ΔⵠⲆ[57].id = 57;
    this.ΔⵠⲆ[58] = vf(60, 60, 0, Ⲇᐃ[332], 3);
    this.ΔⵠⲆ[58].id = 58;
    this.ΔⵠⲆ[61] = vf(60, 60, 0, Ⲇᐃ[268], 3);
    this.ΔⵠⲆ[61].id = 61;
    this.ΔⵠⲆ[79] = vf(60, 60, 0, Ⲇᐃ[338], 3);
    this.ΔⵠⲆ[79].id = 79;
    this.ΔⵠⲆ[68] = vf(60, 60, 0, Ⲇᐃ[360], 3);
    this.ΔⵠⲆ[68].id = 68;
    this.ΔⵠⲆ[69] = vf(60, 60, 0, Ⲇᐃ[363], 3);
    this.ΔⵠⲆ[69].id = 69;
    this.ΔⵠⲆ[70] = vf(60, 60, 0, Ⲇᐃ[365], 3);
    this.ΔⵠⲆ[70].id = 70;
    this.ΔⵠⲆ[100] = vf(60, 60, 0, Ⲇᐃ[367], 3);
    this.ΔⵠⲆ[100].id = 100;
    this.ΔⵠⲆ[83] = vf(60, 60, 0, Ⲇᐃ[370], 3);
    this.ΔⵠⲆ[83].id = 83;
    this.ΔⵠⲆ[62] = vf(60, 60, 0, Ⲇᐃ[371], 3);
    this.ΔⵠⲆ[62].id = 62;
    this.ΔⵠⲆ[63] = vf(60, 60, 0, Ⲇᐃ[374], 3);
    this.ΔⵠⲆ[63].id = 63;
    this.ΔⵠⲆ[64] = vf(60, 60, 0, Ⲇᐃ[377], 3);
    this.ΔⵠⲆ[64].id = 64;
    this.ΔⵠⲆ[83] = vf(60, 60, 0, Ⲇᐃ[370], 3);
    this.ΔⵠⲆ[83].id = 83;
    this.ΔⵠⲆ[84] = vf(60, 60, 0, Ⲇᐃ[380], 3);
    this.ΔⵠⲆ[84].id = 84;
    this.ΔⵠⲆ[25] = vf(60, 60, 0, Ⲇᐃ[402], 3);
    this.ΔⵠⲆ[25].id = 25;
    this.ΔⵠⲆ[26] = vf(60, 60, 0, Ⲇᐃ[396], 3);
    this.ΔⵠⲆ[26].id = 26;
    this.ΔⵠⲆ[27] = vf(60, 60, 0, Ⲇᐃ[399], 3);
    this.ΔⵠⲆ[27].id = 27;
    this.ΔⵠⲆ[28] = vf(60, 60, 0, Ⲇᐃ[405], 3);
    this.ΔⵠⲆ[28].id = 28;
    this.ΔⵠⲆ[31] = vf(60, 60, 0, Ⲇᐃ[876], 3);
    this.ΔⵠⲆ[31].id = 31;
    this.ΔⵠⲆ[2] = vf(60, 60, 0, Ⲇᐃ[409], 3);
    this.ΔⵠⲆ[2].id = 2;
    this.ΔⵠⲆ[80] = vf(60, 60, 0, Ⲇᐃ[421], 3);
    this.ΔⵠⲆ[80].id = 80;
    this.ΔⵠⲆ[81] = vf(60, 60, 0, Ⲇᐃ[424], 3);
    this.ΔⵠⲆ[81].id = 81;
    this.ΔⵠⲆ[Wr.ᐃⵠᐃΔΔ] = vf(60, 60, 0, Ⲇᐃ[1228], 3);
    this.ΔⵠⲆ[Wr.ᐃⵠᐃΔΔ].id = Wr.ᐃⵠᐃΔΔ;
    this.ΔⵠⲆ[86] = vf(60, 60, 0, Ⲇᐃ[1231], 3);
    this.ΔⵠⲆ[86].id = 86;
    this.ΔⵠⲆ[98] = vf(60, 60, 0, Ⲇᐃ[1138], 3);
    this.ΔⵠⲆ[98].id = 98;
    this.ΔⵠⲆ[99] = vf(60, 60, 0, Ⲇᐃ[1141], 3);
    this.ΔⵠⲆ[99].id = 99;
    this.ΔⵠⲆ[131] = vf(60, 60, 0, Ⲇᐃ[570], 3);
    this.ΔⵠⲆ[131].id = 131;
    this.ΔⵠⲆ[132] = vf(60, 60, 0, Ⲇᐃ[1168], 3);
    this.ΔⵠⲆ[132].id = 132;
    this.ΔⵠⲆ[145] = vf(60, 60, 0, Ⲇᐃ[1238], 3);
    this.ΔⵠⲆ[145].id = 145;
    this.ΔⵠⲆ[133] = vf(60, 60, 0, Ⲇᐃ[573], 3);
    this.ΔⵠⲆ[133].id = 133;
    this.ΔⵠⲆ[134] = vf(60, 60, 0, Ⲇᐃ[1171], 3);
    this.ΔⵠⲆ[134].id = 134;
    this.ΔⵠⲆ[146] = vf(60, 60, 0, Ⲇᐃ[1241], 3);
    this.ΔⵠⲆ[146].id = 146;
    this.ΔⵠⲆ[135] = vf(60, 60, 0, Ⲇᐃ[576], 3);
    this.ΔⵠⲆ[135].id = 135;
    this.ΔⵠⲆ[136] = vf(60, 60, 0, Ⲇᐃ[1174], 3);
    this.ΔⵠⲆ[136].id = 136;
    this.ΔⵠⲆ[147] = vf(60, 60, 0, Ⲇᐃ[1244], 3);
    this.ΔⵠⲆ[147].id = 147;
    this.ΔⵠⲆ[137] = vf(60, 60, 0, Ⲇᐃ[579], 3);
    this.ΔⵠⲆ[137].id = 137;
    this.ΔⵠⲆ[138] = vf(60, 60, 0, Ⲇᐃ[1177], 3);
    this.ΔⵠⲆ[138].id = 138;
    this.ΔⵠⲆ[167] = vf(60, 60, 0, Ⲇᐃ[1256], 3);
    this.ΔⵠⲆ[167].id = 167;
    this.ΔⵠⲆ[168] = vf(60, 60, 0, Ⲇᐃ[1259], 3);
    this.ΔⵠⲆ[168].id = 168;
    this.ΔⵠⲆ[169] = vf(60, 60, 0, Ⲇᐃ[1262], 3);
    this.ΔⵠⲆ[169].id = 169;
    this.ΔⵠⲆ[170] = vf(60, 60, 0, Ⲇᐃ[1265], 3);
    this.ΔⵠⲆ[170].id = 170;
    this.ΔⵠⲆ[171] = vf(60, 60, 0, Ⲇᐃ[1268], 3);
    this.ΔⵠⲆ[171].id = 171;
    this.ΔⵠⲆ[172] = vf(60, 60, 0, Ⲇᐃ[1271], 3);
    this.ΔⵠⲆ[172].id = 172;
    this.ΔⵠⲆ[148] = vf(60, 60, 0, Ⲇᐃ[1247], 3);
    this.ΔⵠⲆ[148].id = 148;
    this.ΔⵠⲆ[139] = vf(60, 60, 0, Ⲇᐃ[582], 3);
    this.ΔⵠⲆ[139].id = 139;
    this.ΔⵠⲆ[140] = vf(60, 60, 0, Ⲇᐃ[1180], 3);
    this.ΔⵠⲆ[140].id = 140;
    this.ΔⵠⲆ[149] = vf(60, 60, 0, Ⲇᐃ[1250], 3);
    this.ΔⵠⲆ[149].id = 149;
    this.ΔⵠⲆ[141] = vf(60, 60, 0, Ⲇᐃ[585], 3);
    this.ΔⵠⲆ[141].id = 141;
    this.ΔⵠⲆ[142] = vf(60, 60, 0, Ⲇᐃ[1183], 3);
    this.ΔⵠⲆ[142].id = 142;
    this.ΔⵠⲆ[150] = vf(60, 60, 0, Ⲇᐃ[1253], 3);
    this.ΔⵠⲆ[150].id = 150;
    this.ΔⵠⲆ[143] = vf(60, 60, 0, Ⲇᐃ[588], 3);
    this.ΔⵠⲆ[143].id = 143;
    this.ΔⵠⲆ[144] = vf(60, 60, 0, Ⲇᐃ[1186], 3);
    this.ΔⵠⲆ[144].id = 144;
    this.ΔⵠⲆ[87] = vf(60, 60, 0, Ⲇᐃ[827], 3);
    this.ΔⵠⲆ[87].id = 87;
    this.ΔⵠⲆ[88] = vf(60, 60, 0, Ⲇᐃ[430], 3);
    this.ΔⵠⲆ[88].id = 88;
    this.ΔⵠⲆ[89] = vf(60, 60, 0, Ⲇᐃ[433], 3);
    this.ΔⵠⲆ[89].id = 89;
    this.ΔⵠⲆ[90] = vf(60, 60, 0, Ⲇᐃ[436], 3);
    this.ΔⵠⲆ[90].id = 90;
    this.ΔⵠⲆ[24] = vf(60, 60, 0, Ⲇᐃ[439], 3);
    this.ΔⵠⲆ[24].id = 24;
    this.ΔⵠⲆ[101] = vf(60, 60, 0, Ⲇᐃ[442], 3);
    this.ΔⵠⲆ[101].id = 101;
    this.ΔⵠⲆ[100] = vf(60, 60, 0, Ⲇᐃ[367], 3);
    this.ΔⵠⲆ[100].id = 100;
    this.ΔⵠⲆ[38] = vf(60, 60, 0, Ⲇᐃ[456], 3);
    this.ΔⵠⲆ[38].id = 38;
    this.ΔⵠⲆ[Wr.ᐃⲆⵠΔⲆ] = vf(60, 60, 0, Ⲇᐃ[861], 3);
    this.ΔⵠⲆ[Wr.ᐃⲆⵠΔⲆ].id = Wr.ᐃⲆⵠΔⲆ;
    this.ΔⵠⲆ[8] = vf(60, 60, 0, Ⲇᐃ[460], 3);
    this.ΔⵠⲆ[8].id = 8;
    this.ΔⵠⲆ[9] = vf(60, 60, 0, Ⲇᐃ[1019], 3);
    this.ΔⵠⲆ[9].id = 9;
    this.ΔⵠⲆ[29] = vf(60, 60, 0, Ⲇᐃ[473], 3);
    this.ΔⵠⲆ[29].id = 29;
    this.ΔⵠⲆ[10] = vf(60, 60, 0, Ⲇᐃ[478], 3);
    this.ΔⵠⲆ[10].id = 10;
    this.ΔⵠⲆ[11] = vf(60, 60, 0, Ⲇᐃ[481], 3);
    this.ΔⵠⲆ[11].id = 11;
    this.ΔⵠⲆ[12] = vf(60, 60, 0, Ⲇᐃ[484], 3);
    this.ΔⵠⲆ[12].id = 12;
    this.ΔⵠⲆ[13] = vf(60, 60, 0, Ⲇᐃ[487], 3);
    this.ΔⵠⲆ[13].id = 13;
    this.ΔⵠⲆ[14] = vf(60, 60, 0, Ⲇᐃ[490], 3);
    this.ΔⵠⲆ[14].id = 14;
    this.ΔⵠⲆ[59] = vf(60, 60, 0, Ⲇᐃ[493], 3);
    this.ΔⵠⲆ[59].id = 59;
    this.ΔⵠⲆ[71] = vf(60, 60, 0, Ⲇᐃ[496], 3);
    this.ΔⵠⲆ[71].id = 71;
    this.ΔⵠⲆ[65] = vf(60, 60, 0, Ⲇᐃ[498], 3);
    this.ΔⵠⲆ[65].id = 65;
    this.ΔⵠⲆ[85] = vf(60, 60, 0, Ⲇᐃ[503], 3);
    this.ΔⵠⲆ[85].id = 85;
    this.ΔⵠⲆ[102] = vf(60, 60, 0, Ⲇᐃ[515], 3);
    this.ΔⵠⲆ[102].id = 102;
    this.ΔⵠⲆ[103] = vf(60, 60, 0, Ⲇᐃ[519], 3);
    this.ΔⵠⲆ[103].id = 103;
    this.ΔⵠⲆ[115] = vf(60, 60, 0, Ⲇᐃ[530], 3);
    this.ΔⵠⲆ[115].id = 115;
    this.ΔⵠⲆ[104] = vf(60, 60, 0, Ⲇᐃ[533], 3);
    this.ΔⵠⲆ[104].id = 104;
    this.ΔⵠⲆ[105] = vf(60, 60, 0, Ⲇᐃ[555], 3);
    this.ΔⵠⲆ[105].id = 105;
    this.ΔⵠⲆ[91] = vf(60, 60, 0, Ⲇᐃ[542], 3);
    this.ΔⵠⲆ[91].id = 91;
    this.ΔⵠⲆ[15] = vf(60, 60, 0, Ⲇᐃ[551], 3);
    this.ΔⵠⲆ[15].id = 15;
    this.ΔⵠⲆ[106] = vf(60, 60, 0, Ⲇᐃ[604], 3);
    this.ΔⵠⲆ[106].id = 106;
    this.ΔⵠⲆ[108] = vf(60, 60, 0, Ⲇᐃ[1235], 3);
    this.ΔⵠⲆ[108].id = 108;
    this.ΔⵠⲆ[163] = vf(60, 60, 0, Ⲇᐃ[1027], 3);
    this.ΔⵠⲆ[163].id = 163;
    this.ΔⵠⲆ[164] = vf(60, 60, 0, Ⲇᐃ[1030], 3);
    this.ΔⵠⲆ[164].id = 164;
    this.ΔⵠⲆ[166] = vf(60, 60, 0, Ⲇᐃ[1116], 3);
    this.ΔⵠⲆ[166].id = 166;
    this.ΔⵠⲆ[165] = vf(60, 60, 0, Ⲇᐃ[1048], 3);
    this.ΔⵠⲆ[165].id = 165;
    this.ΔⵠⲆ[Wr.ΔⲆᐃᐃΔ] = vf(60, 60, 0, Ⲇᐃ[1051], 3);
    this.ΔⵠⲆ[Wr.ΔⲆᐃᐃΔ].id = Wr.ΔⲆᐃᐃΔ;
    this.ΔⵠⲆ[Wr.ᐃⵠⵠᐃᐃ] = vf(60, 60, 0, Ⲇᐃ[1082], 3);
    this.ΔⵠⲆ[Wr.ᐃⵠⵠᐃᐃ].id = Wr.ᐃⵠⵠᐃᐃ;
    this.ΔⵠⲆ[Wr.ⲆᐃᐃⲆᐃ] = vf(60, 60, 0, Ⲇᐃ[1226], 3);
    this.ΔⵠⲆ[Wr.ⲆᐃᐃⲆᐃ].id = Wr.ⲆᐃᐃⲆᐃ;
    this.ΔⵠⲆ[Wr.ⵠⵠⲆⲆΔ] = vf(60, 60, 0, Ⲇᐃ[1191], 3);
    this.ΔⵠⲆ[Wr.ⵠⵠⲆⲆΔ].id = Wr.ⵠⵠⲆⲆΔ;
    this.ΔⵠⲆ[110] = vf(60, 60, 0, Ⲇᐃ[611], 3);
    this.ΔⵠⲆ[110].id = 110;
    this.ΔⵠⲆ[111] = vf(60, 60, 0, Ⲇᐃ[715], 3);
    this.ΔⵠⲆ[111].id = 111;
    this.ΔⵠⲆ[112] = vf(60, 60, 0, Ⲇᐃ[715], 3);
    this.ΔⵠⲆ[112].id = 112;
    this.ΔⵠⲆ[113] = vf(60, 60, 0, Ⲇᐃ[715], 3);
    this.ΔⵠⲆ[113].id = 113;
    this.ΔⵠⲆ[16] = vf(60, 60, 0, Ⲇᐃ[618], 3);
    this.ΔⵠⲆ[16].id = 16;
    this.ΔⵠⲆ[17] = vf(60, 60, 0, Ⲇᐃ[700], 3);
    this.ΔⵠⲆ[17].id = 17;
    this.ΔⵠⲆ[18] = vf(60, 60, 0, Ⲇᐃ[704], 3);
    this.ΔⵠⲆ[18].id = 18;
    this.ΔⵠⲆ[19] = vf(60, 60, 0, Ⲇᐃ[706], 3);
    this.ΔⵠⲆ[19].id = 19;
    this.ΔⵠⲆ[122] = vf(60, 60, 0, Ⲇᐃ[711], 3);
    this.ΔⵠⲆ[122].id = 122;
    this.ΔⵠⲆ[20] = vf(60, 60, 0, Ⲇᐃ[627], 3);
    this.ΔⵠⲆ[20].id = 20;
    this.ΔⵠⲆ[41] = vf(60, 60, 0, Ⲇᐃ[632], 3);
    this.ΔⵠⲆ[41].id = 41;
    this.ΔⵠⲆ[52] = vf(60, 60, 0, Ⲇᐃ[635], 3);
    this.ΔⵠⲆ[52].id = 52;
    this.ΔⵠⲆ[114] = vf(60, 60, 0, Ⲇᐃ[643], 3);
    this.ΔⵠⲆ[114].id = 114;
    this.ΔⵠⲆ[94] = vf(60, 60, 0, Ⲇᐃ[647], 3);
    this.ΔⵠⲆ[94].id = 94;
    this.ΔⵠⲆ[93] = vf(60, 60, 0, Ⲇᐃ[650], 3);
    this.ΔⵠⲆ[93].id = 93;
    this.ΔⵠⲆ[21] = vf(60, 60, 0, Ⲇᐃ[654], 3);
    this.ΔⵠⲆ[21].id = 21;
    this.ΔⵠⲆ[53] = vf(60, 60, 0, Ⲇᐃ[660], 3);
    this.ΔⵠⲆ[53].id = 53;
    this.ΔⵠⲆ[51] = vf(60, 60, 0, Ⲇᐃ[690], 3);
    this.ΔⵠⲆ[51].id = 51;
    this.ΔⵠⲆ[50] = vf(60, 60, 0, Ⲇᐃ[666], 3);
    this.ΔⵠⲆ[50].id = 50;
    this.ΔⵠⲆ[109] = vf(60, 60, 0, Ⲇᐃ[684], 3);
    this.ΔⵠⲆ[109].id = 109;
    this.ΔⵠⲆ[124] = vf(60, 60, 0, Ⲇᐃ[718], 3);
    this.ΔⵠⲆ[124].id = 124;
    this.ΔⵠⲆ[125] = vf(60, 60, 0, Ⲇᐃ[730], 3);
    this.ΔⵠⲆ[125].id = 125;
    this.ΔⵠⲆ[126] = vf(60, 60, 0, Ⲇᐃ[734], 3);
    this.ΔⵠⲆ[126].id = 126;
    this.ΔⵠⲆ[129] = vf(60, 60, 0, Ⲇᐃ[563], 3);
    this.ΔⵠⲆ[129].id = 129;
    this.ΔⵠⲆ[151] = vf(60, 60, 0, Ⲇᐃ[758], 3);
    this.ΔⵠⲆ[151].id = 151;
    this.ΔⵠⲆ[152] = vf(60, 60, 0, Ⲇᐃ[762], 3);
    this.ΔⵠⲆ[152].id = 152;
    this.ΔⵠⲆ[153] = vf(60, 60, 0, Ⲇᐃ[770], 3);
    this.ΔⵠⲆ[153].id = 153;
    this.ΔⵠⲆ[154] = vf(60, 60, 0, Ⲇᐃ[768], 3);
    this.ΔⵠⲆ[154].id = 154;
    this.ΔⵠⲆ[155] = vf(60, 60, 0, Ⲇᐃ[772], 3);
    this.ΔⵠⲆ[155].id = 155;
    this.ΔⵠⲆ[157] = vf(60, 60, 0, Ⲇᐃ[777], 3);
    this.ΔⵠⲆ[157].id = 157;
    this.ΔⵠⲆ[156] = vf(60, 60, 0, Ⲇᐃ[780], 3);
    this.ΔⵠⲆ[156].id = 156;
    this.ΔⵠⲆ[158] = vf(60, 60, 0, Ⲇᐃ[784], 3);
    this.ΔⵠⲆ[158].id = 158;
    this.ΔⵠⲆ[159] = vf(60, 60, 0, Ⲇᐃ[785], 3);
    this.ΔⵠⲆ[159].id = 159;
    this.ΔⵠⲆ[160] = vf(60, 60, 0, Ⲇᐃ[791], 3);
    this.ΔⵠⲆ[160].id = 160;
    this.ΔⵠⲆ[161] = vf(60, 60, 0, Ⲇᐃ[799], 3);
    this.ΔⵠⲆ[161].id = 161;
    this.ΔⵠⲆ[42] = vf(60, 60, 0, Ⲇᐃ[809], 3);
    this.ΔⵠⲆ[42].id = 42;
    this.ΔⵠⲆ[43] = vf(60, 60, 0, Ⲇᐃ[835], 3);
    this.ΔⵠⲆ[43].id = 43;
    this.ΔⵠⲆ[107] = vf(60, 60, 0, Ⲇᐃ[843], 3);
    this.ΔⵠⲆ[107].id = 107;
    this.ΔⵠⲆ[44] = vf(60, 60, 0, Ⲇᐃ[846], 3);
    this.ΔⵠⲆ[44].id = 44;
    this.ΔⵠⲆ[46] = vf(60, 60, 0, Ⲇᐃ[960], 3);
    this.ΔⵠⲆ[46].id = 46;
    this.ΔⵠⲆ[45] = vf(60, 60, 0, Ⲇᐃ[950], 3);
    this.ΔⵠⲆ[45].id = 45;
    this.ΔⵠⲆ[47] = vf(60, 60, 0, Ⲇᐃ[967], 3);
    this.ΔⵠⲆ[47].id = 47;
    this.ΔⵠⲆ[48] = vf(60, 60, 0, Ⲇᐃ[982], 3);
    this.ΔⵠⲆ[48].id = 48;
    this.ΔⵠⲆ[25] = vf(60, 60, 0, Ⲇᐃ[402], 3);
    this.ΔⵠⲆ[25].id = 25;
    this.ΔⵠⲆ[31] = vf(60, 60, 0, Ⲇᐃ[876], 3);
    this.ΔⵠⲆ[31].id = 31;
    this.ΔⵠⲆ[33] = vf(60, 60, 0, Ⲇᐃ[900], 3);
    this.ΔⵠⲆ[33].id = 33;
    this.ΔⵠⲆ[162] = vf(60, 60, 0, Ⲇᐃ[909], 3);
    this.ΔⵠⲆ[162].id = 162;
    this.ΔⵠⲆ[128] = vf(60, 60, 0, Ⲇᐃ[912], 3);
    this.ΔⵠⲆ[128].id = 128;
    this.ⵠΔΔ[53] = vf(68, 68, 0, Ⲇᐃ[976], 3);
    this.ⵠΔΔ[53].id = 53;
    this.ᐃΔᐃ[53] = vf(60, 60, 0, Ⲇᐃ[975], 3);
    this.ᐃΔᐃ[53].id = 53;
    this.ΔⵠⲆ[22] = vf(60, 60, 0, Ⲇᐃ[977], 3);
    this.ΔⵠⲆ[22].id = 22;
    this.ⵠΔΔ[54] = vf(68, 68, 0, Ⲇᐃ[979], 3);
    this.ⵠΔΔ[54].id = 54;
    this.ᐃΔᐃ[54] = vf(60, 60, 0, Ⲇᐃ[978], 3);
    this.ᐃΔᐃ[54].id = 54;
    this.ΔⵠⲆ[23] = vf(60, 60, 0, Ⲇᐃ[980], 3);
    this.ΔⵠⲆ[23].id = 23;
    this.ⵠΔΔ[56] = vf(68, 68, 0, Ⲇᐃ[713], 3);
    this.ⵠΔΔ[56].id = 56;
    this.ᐃΔᐃ[56] = vf(60, 60, 0, Ⲇᐃ[712], 3);
    this.ᐃΔᐃ[56].id = 56;
    this.ΔⵠⲆ[123] = vf(60, 60, 0, Ⲇᐃ[714], 3);
    this.ΔⵠⲆ[123].id = 123;
    this.ⵠΔΔ[82] = vf(68, 68, 0, Ⲇᐃ[428], 3);
    this.ⵠΔΔ[82].id = 82;
    this.ᐃΔᐃ[82] = vf(60, 60, 0, Ⲇᐃ[426], 3);
    this.ᐃΔᐃ[82].id = 82;
    this.ΔⵠⲆ[82] = vf(60, 60, 0, Ⲇᐃ[427], 3);
    this.ΔⵠⲆ[82].id = 82;
    this.ⵠΔΔ[235] = vf(68, 68, 0, Ⲇᐃ[1159], 3);
    this.ⵠΔΔ[235].id = 235;
    this.ᐃΔᐃ[235] = vf(60, 60, 0, Ⲇᐃ[1158], 3);
    this.ᐃΔᐃ[235].id = 235;
    this.ⵠΔΔ[238] = vf(68, 68, 0, Ⲇᐃ[1188], 3);
    this.ⵠΔΔ[238].id = 238;
    this.ᐃΔᐃ[238] = vf(60, 60, 0, Ⲇᐃ[1187], 3);
    this.ᐃΔᐃ[238].id = 238;
    this.ⵠΔΔ[236] = vf(68, 68, 0, Ⲇᐃ[1161], 3);
    this.ⵠΔΔ[236].id = 236;
    this.ᐃΔᐃ[236] = vf(60, 60, 0, Ⲇᐃ[1160], 3);
    this.ᐃΔᐃ[236].id = 236;
    this.ⵠΔΔ[152] = vf(68, 68, 0, Ⲇᐃ[1197], 3);
    this.ⵠΔΔ[152].id = 152;
    this.ᐃΔᐃ[152] = vf(60, 60, 0, Ⲇᐃ[1195], 3);
    this.ᐃΔᐃ[152].id = 152;
    this.ΔⵠⲆ[116] = vf(60, 60, 0, Ⲇᐃ[1196], 3);
    this.ΔⵠⲆ[116].id = 116;
    this.ⵠΔΔ[212] = vf(68, 68, 0, Ⲇᐃ[992], 3);
    this.ⵠΔΔ[212].id = 212;
    this.ᐃΔᐃ[212] = vf(60, 60, 0, Ⲇᐃ[991], 3);
    this.ᐃΔᐃ[212].id = 212;
    this.ΔⵠⲆ[73] = vf(60, 60, 0, Ⲇᐃ[990], 3);
    this.ΔⵠⲆ[73].id = 73;
    this.ⵠΔΔ[213] = vf(68, 68, 0, Ⲇᐃ[995], 3);
    this.ⵠΔΔ[213].id = 213;
    this.ᐃΔᐃ[213] = vf(60, 60, 0, Ⲇᐃ[994], 3);
    this.ᐃΔᐃ[213].id = 213;
    this.ΔⵠⲆ[74] = vf(60, 60, 0, Ⲇᐃ[993], 3);
    this.ΔⵠⲆ[74].id = 74;
    this.ⵠΔΔ[214] = vf(68, 68, 0, Ⲇᐃ[998], 3);
    this.ⵠΔΔ[214].id = 214;
    this.ᐃΔᐃ[214] = vf(60, 60, 0, Ⲇᐃ[997], 3);
    this.ᐃΔᐃ[214].id = 214;
    this.ΔⵠⲆ[75] = vf(60, 60, 0, Ⲇᐃ[996], 3);
    this.ΔⵠⲆ[75].id = 75;
    this.ⵠΔΔ[215] = vf(68, 68, 0, Ⲇᐃ[1001], 3);
    this.ⵠΔΔ[215].id = 215;
    this.ᐃΔᐃ[215] = vf(60, 60, 0, Ⲇᐃ[1000], 3);
    this.ᐃΔᐃ[215].id = 215;
    this.ΔⵠⲆ[76] = vf(60, 60, 0, Ⲇᐃ[999], 3);
    this.ΔⵠⲆ[76].id = 76;
    this.ⵠΔΔ[216] = vf(68, 68, 0, Ⲇᐃ[1004], 3);
    this.ⵠΔΔ[216].id = 216;
    this.ᐃΔᐃ[216] = vf(60, 60, 0, Ⲇᐃ[1003], 3);
    this.ᐃΔᐃ[216].id = 216;
    this.ΔⵠⲆ[77] = vf(60, 60, 0, Ⲇᐃ[1002], 3);
    this.ΔⵠⲆ[77].id = 77;
    this.ⵠΔΔ[220] = vf(68, 68, 0, Ⲇᐃ[1007], 3);
    this.ⵠΔΔ[220].id = 220;
    this.ᐃΔᐃ[220] = vf(60, 60, 0, Ⲇᐃ[1006], 3);
    this.ᐃΔᐃ[220].id = 220;
    this.ΔⵠⲆ[78] = vf(60, 60, 0, Ⲇᐃ[1005], 3);
    this.ΔⵠⲆ[78].id = 78;
    this.ⵠΔΔ[217] = vf(68, 68, 0, Ⲇᐃ[1016], 3);
    this.ⵠΔΔ[217].id = 217;
    this.ᐃΔᐃ[217] = vf(60, 60, 0, Ⲇᐃ[1015], 3);
    this.ᐃΔᐃ[217].id = 217;
    this.ΔⵠⲆ[60] = vf(60, 60, 0, Ⲇᐃ[1014], 3);
    this.ΔⵠⲆ[60].id = 60;
    this.ⵠΔΔ[219] = vf(68, 68, 0, Ⲇᐃ[1013], 3);
    this.ⵠΔΔ[219].id = 219;
    this.ᐃΔᐃ[219] = vf(60, 60, 0, Ⲇᐃ[1012], 3);
    this.ᐃΔᐃ[219].id = 219;
    this.ΔⵠⲆ[72] = vf(60, 60, 0, Ⲇᐃ[1011], 3);
    this.ΔⵠⲆ[72].id = 72;
    this.ⵠΔΔ[218] = vf(68, 68, 0, Ⲇᐃ[1010], 3);
    this.ⵠΔΔ[218].id = 218;
    this.ᐃΔᐃ[218] = vf(60, 60, 0, Ⲇᐃ[1009], 3);
    this.ᐃΔᐃ[218].id = 218;
    this.ΔⵠⲆ[66] = vf(60, 60, 0, Ⲇᐃ[1008], 3);
    this.ΔⵠⲆ[66].id = 66;
    this.ⵠΔΔ[153] = vf(68, 68, 0, Ⲇᐃ[1201], 3);
    this.ⵠΔΔ[153].id = 153;
    this.ᐃΔᐃ[153] = vf(60, 60, 0, Ⲇᐃ[1199], 3);
    this.ᐃΔᐃ[153].id = 153;
    this.ΔⵠⲆ[117] = vf(60, 60, 0, Ⲇᐃ[1200], 3);
    this.ΔⵠⲆ[117].id = 117;
    this.ⵠΔΔ[154] = vf(68, 68, 0, Ⲇᐃ[1205], 3);
    this.ⵠΔΔ[154].id = 154;
    this.ᐃΔᐃ[154] = vf(60, 60, 0, Ⲇᐃ[1203], 3);
    this.ᐃΔᐃ[154].id = 154;
    this.ΔⵠⲆ[118] = vf(60, 60, 0, Ⲇᐃ[1204], 3);
    this.ΔⵠⲆ[118].id = 118;
    this.ⵠΔΔ[155] = vf(68, 68, 0, Ⲇᐃ[1209], 3);
    this.ⵠΔΔ[155].id = 155;
    this.ᐃΔᐃ[155] = vf(60, 60, 0, Ⲇᐃ[1207], 3);
    this.ᐃΔᐃ[155].id = 155;
    this.ΔⵠⲆ[119] = vf(60, 60, 0, Ⲇᐃ[1208], 3);
    this.ΔⵠⲆ[119].id = 119;
    this.ⵠΔΔ[156] = vf(68, 68, 0, Ⲇᐃ[1213], 3);
    this.ⵠΔΔ[156].id = 156;
    this.ᐃΔᐃ[156] = vf(60, 60, 0, Ⲇᐃ[1211], 3);
    this.ᐃΔᐃ[156].id = 156;
    this.ΔⵠⲆ[120] = vf(60, 60, 0, Ⲇᐃ[1212], 3);
    this.ΔⵠⲆ[120].id = 120;
    this.ⵠΔΔ[157] = vf(68, 68, 0, Ⲇᐃ[1217], 3);
    this.ⵠΔΔ[157].id = 157;
    this.ᐃΔᐃ[157] = vf(60, 60, 0, Ⲇᐃ[1215], 3);
    this.ᐃΔᐃ[157].id = 157;
    this.ΔⵠⲆ[121] = vf(60, 60, 0, Ⲇᐃ[1216], 3);
    this.ΔⵠⲆ[121].id = 121;
    this.ⵠΔΔ[203] = vf(68, 68, 0, Ⲇᐃ[937], 3);
    this.ⵠΔΔ[203].id = 203;
    this.ᐃΔᐃ[203] = vf(60, 60, 0, Ⲇᐃ[936], 3);
    this.ᐃΔᐃ[203].id = 203;
    this.ᐃΔᐃ[203].info.ᐃΔ[2] = this.ᐃΔᐃ[203].info.ᐃΔ[0];
    this.ⵠΔΔ[150] = vf(68, 68, 0, Ⲇᐃ[524], 3);
    this.ⵠΔΔ[150].id = 150;
    this.ᐃΔᐃ[150] = vf(60, 60, 0, Ⲇᐃ[523], 3);
    this.ᐃΔᐃ[150].id = 150;
    this.ᐃΔᐃ[150].info.ᐃΔ[2] = this.ᐃΔᐃ[150].info.ᐃΔ[0];
    this.ⵠΔΔ[202] = vf(68, 68, 0, Ⲇᐃ[939], 3);
    this.ⵠΔΔ[202].id = 202;
    this.ᐃΔᐃ[202] = vf(60, 60, 0, Ⲇᐃ[938], 3);
    this.ᐃΔᐃ[202].id = 202;
    this.ᐃΔᐃ[202].info.ᐃΔ[2] = this.ᐃΔᐃ[202].info.ᐃΔ[0];
    this.ⵠΔΔ[19] = vf(68, 68, 0, Ⲇᐃ[934], 3);
    this.ⵠΔΔ[19].id = 19;
    this.ᐃΔᐃ[19] = vf(60, 60, 0, Ⲇᐃ[932], 3);
    this.ᐃΔᐃ[19].id = 19;
    this.ΔⵠⲆ[39] = vf(60, 60, 0, Ⲇᐃ[933], 3);
    this.ΔⵠⲆ[39].id = 39;
    this.ⵠΔΔ[20] = vf(68, 68, 0, Ⲇᐃ[923], 3);
    this.ⵠΔΔ[20].id = 20;
    this.ᐃΔᐃ[20] = vf(60, 60, 0, Ⲇᐃ[921], 3);
    this.ᐃΔᐃ[20].id = 20;
    this.ΔⵠⲆ[95] = vf(60, 60, 0, Ⲇᐃ[922], 3);
    this.ΔⵠⲆ[95].id = 95;
    this.ⵠΔΔ[21] = vf(68, 68, 0, Ⲇᐃ[927], 3);
    this.ⵠΔΔ[21].id = 21;
    this.ᐃΔᐃ[21] = vf(60, 60, 0, Ⲇᐃ[925], 3);
    this.ᐃΔᐃ[21].id = 21;
    this.ΔⵠⲆ[96] = vf(60, 60, 0, Ⲇᐃ[926], 3);
    this.ΔⵠⲆ[96].id = 96;
    this.ⵠΔΔ[22] = vf(68, 68, 0, Ⲇᐃ[931], 3);
    this.ⵠΔΔ[22].id = 22;
    this.ᐃΔᐃ[22] = vf(60, 60, 0, Ⲇᐃ[929], 3);
    this.ᐃΔᐃ[22].id = 22;
    this.ΔⵠⲆ[97] = vf(60, 60, 0, Ⲇᐃ[930], 3);
    this.ΔⵠⲆ[97].id = 97;
    this.ⵠΔΔ[60] = vf(68, 68, 0, Ⲇᐃ[736], 3);
    this.ⵠΔΔ[60].id = 60;
    this.ᐃΔᐃ[60] = vf(60, 60, 0, Ⲇᐃ[735], 3);
    this.ᐃΔᐃ[60].id = 60;
    this.ΔⵠⲆ[127] = vf(60, 60, 0, Ⲇᐃ[737], 3);
    this.ΔⵠⲆ[127].id = 127;
    this.ⵠΔΔ[90] = vf(68, 68, 0, Ⲇᐃ[739], 3);
    this.ⵠΔΔ[90].id = 90;
    this.ᐃΔᐃ[90] = vf(60, 60, 0, Ⲇᐃ[738], 3);
    this.ᐃΔᐃ[90].id = 90;
    this.ΔⵠⲆ[173] = vf(60, 60, 0, Ⲇᐃ[740], 3);
    this.ΔⵠⲆ[173].id = 173;
    this.ⵠΔΔ[92] = vf(68, 68, 0, Ⲇᐃ[745], 3);
    this.ⵠΔΔ[92].id = 92;
    this.ᐃΔᐃ[92] = vf(60, 60, 0, Ⲇᐃ[744], 3);
    this.ᐃΔᐃ[92].id = 92;
    this.ΔⵠⲆ[174] = vf(60, 60, 0, Ⲇᐃ[746], 3);
    this.ΔⵠⲆ[174].id = 174;
    this.ⵠΔΔ[93] = vf(68, 68, 0, Ⲇᐃ[748], 3);
    this.ⵠΔΔ[93].id = 93;
    this.ᐃΔᐃ[93] = vf(60, 60, 0, Ⲇᐃ[747], 3);
    this.ᐃΔᐃ[93].id = 93;
    this.ΔⵠⲆ[175] = vf(60, 60, 0, Ⲇᐃ[749], 3);
    this.ΔⵠⲆ[175].id = 175;
    this.ⵠΔΔ[91] = vf(68, 68, 0, Ⲇᐃ[742], 3);
    this.ⵠΔΔ[91].id = 91;
    this.ᐃΔᐃ[91] = vf(60, 60, 0, Ⲇᐃ[741], 3);
    this.ᐃΔᐃ[91].id = 91;
    this.ΔⵠⲆ[176] = vf(60, 60, 0, Ⲇᐃ[743], 3);
    this.ΔⵠⲆ[176].id = 176;
    this.ⵠΔΔ[100] = vf(68, 68, 0, Ⲇᐃ[1165], 3);
    this.ⵠΔΔ[100].id = 100;
    this.ᐃΔᐃ[100] = vf(60, 60, 0, Ⲇᐃ[1164], 3);
    this.ᐃΔᐃ[100].id = 100;
    this.ΔⵠⲆ[Wr.ΔΔⲆⲆΔ] = vf(60, 60, 0, Ⲇᐃ[Sr.ᐃⲆΔⲆⲆᐃⵠᐃᐃ], 3);
    this.ΔⵠⲆ[Wr.ΔΔⲆⲆΔ].id = Wr.ΔΔⲆⲆΔ;
    this.ⵠΔΔ[34] = vf(68, 68, 0, Ⲇᐃ[945], 3);
    this.ⵠΔΔ[34].id = 34;
    this.ᐃΔᐃ[34] = vf(60, 60, 0, Ⲇᐃ[943], 3);
    this.ᐃΔᐃ[34].id = 34;
    this.ΔⵠⲆ[30] = vf(60, 60, 0, Ⲇᐃ[944], 3);
    this.ΔⵠⲆ[30].id = 30;
    this.ⵠΔΔ[44] = vf(68, 68, 0, Ⲇᐃ[948], 3);
    this.ⵠΔΔ[44].id = 44;
    this.ᐃΔᐃ[44] = vf(60, 60, 0, Ⲇᐃ[946], 3);
    this.ᐃΔᐃ[44].id = 44;
    this.ΔⵠⲆ[92] = vf(60, 60, 0, Ⲇᐃ[947], 3);
    this.ΔⵠⲆ[92].id = 92;
    this.ⵠΔΔ[17] = vf(68, 68, 0, Ⲇᐃ[878], 3);
    this.ⵠΔΔ[17].id = 17;
    this.ᐃΔᐃ[17] = vf(60, 60, 0, Ⲇᐃ[877], 3);
    this.ᐃΔᐃ[17].id = 17;
    this.ΔⵠⲆ[32] = vf(60, 60, 0, Ⲇᐃ[879], 3);
    this.ΔⵠⲆ[32].id = 32;
    this.ⵠΔΔ[63] = vf(68, 68, 0, Ⲇᐃ[568], 3);
    this.ⵠΔΔ[63].id = 63;
    this.ᐃΔᐃ[63] = vf(60, 60, 0, Ⲇᐃ[566], 3);
    this.ᐃΔᐃ[63].id = 63;
    this.ΔⵠⲆ[130] = vf(60, 60, 0, Ⲇᐃ[567], 3);
    this.ΔⵠⲆ[130].id = 130;
    this.ⵠΔΔ[187] = vf(68, 68, 0, Ⲇᐃ[591], 3);
    this.ⵠΔΔ[187].id = 187;
    this.ᐃΔᐃ[187] = vf(60, 60, 0, Ⲇᐃ[253], 3);
    this.ᐃΔᐃ[187].id = 187;
    this.ⵠΔΔ[Xr.ⵠⵠⲆΔⲆⲆΔ] = vf(68, 68, 0, Ⲇᐃ[Sr.ΔⵠΔⵠᐃΔΔΔΔ], 3);
    this.ⵠΔΔ[Xr.ⵠⵠⲆΔⲆⲆΔ].id = Xr.ⵠⵠⲆΔⲆⲆΔ;
    this.ᐃΔᐃ[Xr.ⵠⵠⲆΔⲆⲆΔ] = vf(60, 60, 0, Ⲇᐃ[Sr.ΔᐃⵠᐃᐃᐃᐃΔΔ], 3);
    this.ᐃΔᐃ[Xr.ⵠⵠⲆΔⲆⲆΔ].id = Xr.ⵠⵠⲆΔⲆⲆΔ;
    this.ⵠΔΔ[Xr.ⲆᐃΔⵠΔΔⵠ] = vf(68, 68, 0, Ⲇᐃ[Sr.ⵠΔᐃⲆⵠⵠΔⲆᐃ], 3);
    this.ⵠΔΔ[Xr.ⲆᐃΔⵠΔΔⵠ].id = Xr.ⲆᐃΔⵠΔΔⵠ;
    this.ᐃΔᐃ[Xr.ⲆᐃΔⵠΔΔⵠ] = vf(60, 60, 0, Ⲇᐃ[Sr.ⵠΔᐃⲆⵠⵠⵠᐃᐃ], 3);
    this.ᐃΔᐃ[Xr.ⲆᐃΔⵠΔΔⵠ].id = Xr.ⲆᐃΔⵠΔΔⵠ;
    this.ⵠΔΔ[Xr.ⵠΔᐃⲆᐃⵠⲆ] = vf(68, 68, 0, Ⲇᐃ[Sr.ⵠⵠᐃⲆᐃΔΔᐃΔ], 3);
    this.ⵠΔΔ[Xr.ⵠΔᐃⲆᐃⵠⲆ].id = Xr.ⵠΔᐃⲆᐃⵠⲆ;
    this.ᐃΔᐃ[Xr.ⵠΔᐃⲆᐃⵠⲆ] = vf(60, 60, 0, Ⲇᐃ[Sr.ⵠⲆᐃⵠᐃᐃⲆⵠᐃ], 3);
    this.ᐃΔᐃ[Xr.ⵠΔᐃⲆᐃⵠⲆ].id = Xr.ⵠΔᐃⲆᐃⵠⲆ;
    this.ⵠΔΔ[Xr.ᐃΔⲆᐃΔΔΔ] = vf(68, 68, 0, Ⲇᐃ[Sr.ⲆᐃⲆΔΔᐃᐃⵠΔ], 3);
    this.ⵠΔΔ[Xr.ᐃΔⲆᐃΔΔΔ].id = Xr.ᐃΔⲆᐃΔΔΔ;
    this.ᐃΔᐃ[Xr.ᐃΔⲆᐃΔΔΔ] = vf(60, 60, 0, Ⲇᐃ[Sr.ⵠⲆⵠⵠΔⵠΔⵠᐃ], 3);
    this.ᐃΔᐃ[Xr.ᐃΔⲆᐃΔΔΔ].id = Xr.ᐃΔⲆᐃΔΔΔ;
    this.ⵠΔΔ[Xr.ⵠΔⲆⲆΔⲆⵠ] = vf(68, 68, 0, Ⲇᐃ[Sr.ⵠᐃΔΔⵠⵠᐃⲆΔ], 3);
    this.ⵠΔΔ[Xr.ⵠΔⲆⲆΔⲆⵠ].id = Xr.ⵠΔⲆⲆΔⲆⵠ;
    this.ᐃΔᐃ[Xr.ⵠΔⲆⲆΔⲆⵠ] = vf(60, 60, 0, Ⲇᐃ[Sr.ⵠⵠⵠⲆᐃⲆᐃⲆⵠ], 3);
    this.ᐃΔᐃ[Xr.ⵠΔⲆⲆΔⲆⵠ].id = Xr.ⵠΔⲆⲆΔⲆⵠ;
    this.ΔⵠᐃⵠⵠⵠΔ = function () {
      for (var a = qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ, b = 10, c = 10, d = 0; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ᐃⲆⵠΔⲆΔⲆ = function () {
      var a = Math.floor((10 + this.ⵠΔΔ[0].info.ᐃΔ[0].width) * Math.floor((3 + qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ.length) / 4) + 35);
      for (var b = 0; this.ⵠΔΔ.length > b; b++) {
        if (this.ⵠΔΔ[b]) {
          this.ⵠΔΔ[b].info.translate.x = a;
          this.ⵠΔΔ[b].info.translate.y = 22;
        }
      }
      this.ⵠⵠⵠΔΔⵠⵠ.info.translate.x = a + 17;
      this.ⵠⵠⵠΔΔⵠⵠ.info.translate.y = 22 + Ⲇᐃ[339].height;
      this.ᐃᐃΔⲆⵠⵠᐃ.info.translate.x = a + 17;
      this.ᐃᐃΔⲆⵠⵠᐃ.info.translate.y = 30;
      this.ⵠΔⲆⲆⲆⵠᐃ.info.translate.x = a + 17;
      this.ⵠΔⲆⲆⲆⵠᐃ.info.translate.y = 22 + Ⲇᐃ[339].height;
    };
    this.ⲆᐃⲆΔⲆΔΔᐃⵠ = function () {
      var a = Math.floor((Sn - Ⲇᐃ[556][0].width) / 2);
      for (var b = 0; this.ⵠⲆⲆⲆⵠ.length > b; b++) {
        this.ⵠⲆⲆⲆⵠ[b].button.info.translate.x = a;
        this.ⵠⲆⲆⲆⵠ[b].button.info.translate.y = -13;
      }
    };
    this.ΔΔΔᐃΔⵠⵠ = function () {
      var a = 12 + Math.floor((10 + this.ᐃᐃⵠⵠⵠⵠᐃ.info.ᐃΔ[0].width) * Math.floor((3 + qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ.length) / 4) + 35);
      this.ᐃᐃⵠⵠⵠⵠᐃ.info.translate.x = a;
      this.ᐃᐃⵠⵠⵠⵠᐃ.info.translate.y = 33;
      this.ⲆᐃΔⵠⲆᐃΔ.info.translate.x = this.ᐃᐃⵠⵠⵠⵠᐃ.info.translate.x;
      this.ⲆᐃΔⵠⲆᐃΔ.info.translate.y = 137;
      this.ᐃⲆⵠᐃⵠᐃⵠ.info.translate.x = this.ᐃᐃⵠⵠⵠⵠᐃ.info.translate.x;
      this.ᐃⲆⵠᐃⵠᐃⵠ.info.translate.y = 240;
    };
    this.ⵠⲆⲆⲆⵠⵠᐃ = function () {
      var a = 12 + Math.floor((10 + this.ⵠⵠⵠᐃⵠΔΔ.info.ᐃΔ[0].width) * Math.floor((3 + qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ.length) / 4) + 35);
      this.ⵠⵠⵠᐃⵠΔΔ.info.translate.x = a;
      this.ⵠⵠⵠᐃⵠΔΔ.info.translate.y = 36;
      a += 83;
      this.ᐃΔⵠⲆΔΔⲆ.info.translate.x = a;
      this.ᐃΔⵠⲆΔΔⲆ.info.translate.y = 36;
      this.ΔⲆⲆⵠᐃⲆⲆ.info.translate.x = a;
      this.ΔⲆⲆⵠᐃⲆⲆ.info.translate.y = 36;
      this.ⵠⲆᐃᐃⲆᐃᐃ.info.translate.x = a;
      this.ⵠⲆᐃᐃⲆᐃᐃ.info.translate.y = 36;
      this.ᐃΔΔⵠᐃΔⲆ.info.translate.x = a;
      this.ᐃΔΔⵠᐃΔⲆ.info.translate.y = 36;
      this.ⲆⲆΔⲆⲆⲆᐃ.info.translate.x = a;
      this.ⲆⲆΔⲆⲆⲆᐃ.info.translate.y = 36;
    };
    this.ΔⲆⵠⵠⲆⵠΔ = function () {
      var a = 12 + Math.floor(Math.floor((3 + qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ.length) / 4) * (10 + this.ⲆᐃⲆⲆΔⵠⵠ.info.ᐃΔ[0].width) + 35);
      this.ⲆᐃⲆⲆΔⵠⵠ.info.translate.x = a;
      this.ⲆᐃⲆⲆΔⵠⵠ.info.translate.y = 36;
      a += 83;
      this.ᐃⲆᐃᐃΔⵠⲆ.info.translate.x = a;
      this.ᐃⲆᐃᐃΔⵠⲆ.info.translate.y = 36;
    };
    this.ⲆⵠᐃⲆⲆᐃᐃ = function () {
      var a = Math.floor(Math.floor((3 + qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ.length) / 4) * (10 + this.ⵠⵠᐃᐃⵠⲆⵠ.info.ᐃΔ[0].width) + 35);
      this.ⵠⵠᐃᐃⵠⲆⵠ.info.translate.x = a;
      this.ⵠⵠᐃᐃⵠⲆⵠ.info.translate.y = 22;
    };
    this.ⲆⲆΔᐃⲆᐃⲆ = function () {
      var a = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ;
      if (a.length > 0) {
        var b = Math.floor((Sn - qx.ⵠⲆΔⲆ.max * (a[0].info.width + 5)) / 2);
      }
      for (var c = 0; c < a.length; c++) {
        a[c].info.translate.x = b + c * (a[c].info.width + 5);
        a[c].info.translate.y = Zn - a[c].info.width - 10;
        this.ΔⲆⵠⲆⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ΔⲆⵠⲆⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔⲆⵠⲆⲆ[a[c].id].info.ᐃΔ[0].height - 6;
      }
    };
    var m;
    var n = 0;
    function o() {
      f.ᐃΔΔ();
      if (++n == 30) {
        f.ⲆⲆΔΔⲆⵠΔ();
        f.ᐃΔΔ();
        return;
      }
      za.setTimeout(o, 33);
    }
    this.ⲆⲆⲆⵠᐃ = function (a) {
      if (qx.ΔⲆᐃⵠΔ.open) {
        qx.ΔⲆᐃⵠΔ.ⲆⲆⲆⵠᐃ();
      }
      if (qx.ⵠᐃⵠᐃᐃ.open) {
        qx.ⵠᐃⵠᐃᐃ.ⲆⲆⲆⵠᐃ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ΔᐃⵠᐃΔ.style.display = "none";
      f.ΔᐃⵠᐃΔ.open = false;
      f.sign.style.display = "none";
      f.sign.open = lh;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.ΔⲆⵠⵠ.open = In;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      f.ΔⵠⲆᐃ.open = nl;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ᐃΔᐃΔⵠ.open = false;
      document.getElementById("chronoquest").style.display = "none";
      f.ᐃⵠⵠⵠ.open = zj;
      m = a;
      f.ⵠⲆⵠΔᐃᐃΔ();
      f.ⲆΔ.style.cursor = f.ΔⵠⵠΔᐃᐃⲆ;
      tx.ⲆⲆⲆⵠᐃ();
      g = -1;
      p();
      Ex();
    };
    var g = -1;
    function p() {
      f.ᐃΔΔ();
      if (++g == 30) {
        f.stop();
        m();
        return;
      }
      za.setTimeout(p, 33);
    }
    this.ΔᐃᐃᐃΔ = ph;
    this.stop = function () {
      this.ΔᐃᐃᐃΔ = Nq;
    };
    this.ⲆᐃΔᐃⲆ = function () {
      ΔⵠⲆⵠ.ΔᐃΔⲆᐃΔⲆᐃᐃ();
      f.ΔᐃᐃᐃΔ = true;
      g = -1;
      n = 0;
      o();
    };
    this.ᐃΔΔ = function () {
      this.ᐃᐃΔᐃ.translate.x = Sn - this.ᐃᐃΔᐃ.ᐃΔ.width - 10;
      this.ᐃᐃΔᐃ.translate.y = 5;
      px.ⲆⲆΔᐃΔ.translate.x = this.ᐃᐃΔᐃ.translate.x - Ⲇᐃ[725][0].width - 85;
      px.ⲆⲆΔᐃΔ.translate.y = 10;
      this.ΔⲆⵠⵠ.button.info.translate.x = this.ᐃᐃΔᐃ.translate.x - Ⲇᐃ[708][0].width - 10;
      this.ΔⲆⵠⵠ.button.info.translate.y = 10;
      this.ᐃⵠⵠⵠ.button.info.translate.x = this.ᐃᐃΔᐃ.translate.x - Ⲇᐃ[755][0].width - 20;
      this.ᐃⵠⵠⵠ.button.info.translate.y = this.ΔⲆⵠⵠ.button.info.translate.y + Ⲇᐃ[708][0].height + 5;
      this.options.button.info.translate.x = this.ᐃᐃΔᐃ.translate.x - Ⲇᐃ[727][0].width - 20;
      this.options.button.info.translate.y = this.ᐃⵠⵠⵠ.button.info.translate.y + Ⲇᐃ[727][0].height + 18;
      this.ΔᐃΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ.info.translate.x = this.ᐃᐃΔᐃ.translate.x - Ⲇᐃ[727][0].width - 20;
      this.ΔᐃΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ.info.translate.y = this.options.button.info.translate.y + Ⲇᐃ[783][0].height;
      this.ΔᐃΔⲆ.ᐃΔⲆΔΔᐃᐃ.info.translate.x = this.ᐃᐃΔᐃ.translate.x - Ⲇᐃ[727][0].width - 20;
      this.ΔᐃΔⲆ.ᐃΔⲆΔΔᐃᐃ.info.translate.y = this.options.button.info.translate.y + Ⲇᐃ[783][0].height;
      this.ΔᐃⵠᐃΔ.button.info.translate.x = this.ᐃᐃΔᐃ.translate.x - Ⲇᐃ[795][0].width - 20;
      this.ΔᐃⵠᐃΔ.button.info.translate.y = this.ΔᐃΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ.info.translate.y + Ⲇᐃ[795][0].height;
      qx.ᐃⵠᐃᐃΔ.translate.x = this.ᐃᐃΔᐃ.translate.x - 63 - 85;
      qx.ᐃⵠᐃᐃΔ.translate.y = 100;
      qx.ᐃΔⲆⵠⵠⵠᐃ.translate.x = this.ᐃᐃΔᐃ.translate.x - Ⲇᐃ[517].width - 85;
      qx.ᐃΔⲆⵠⵠⵠᐃ.translate.y = qx.ᐃⵠᐃᐃΔ.translate.y + 10 + Ⲇᐃ[546].height;
      this.ⵠⲆⵠΔⵠ.translate.y = Zn - 3 - 193;
      this.ⵠⲆⵠΔⵠ.translate.x = Sn - 3 - 193;
      this.ⵠⲆⲆⵠ.translate.x = 5;
      this.ⵠⲆⲆⵠ.translate.y = Zn - this.ⵠⲆⲆⵠ.ᐃΔ.height - 5;
      this.ΔⲆΔᐃⲆ.button.info.translate.x = $n - 45.5;
      this.ΔⲆΔᐃⲆ.button.info.translate.y = 50;
      this.ΔⵠᐃⵠⵠⵠΔ();
      this.ⲆⲆΔᐃⲆᐃⲆ();
      this.ᐃⲆⵠΔⲆΔⲆ();
      this.ⲆⵠᐃⲆⲆᐃᐃ();
      this.ΔⲆⵠⵠⲆⵠΔ();
      this.ⵠⲆⲆⲆⵠⵠᐃ();
      this.ΔΔΔᐃΔⵠⵠ();
      this.ⲆᐃⲆΔⲆΔΔᐃⵠ();
      this.sign.ᐃⲆⵠⵠΔⲆᐃ();
      Rp();
      qx.ΔⲆᐃⵠΔ.ᐃΔΔ();
      qx.ⵠᐃⵠᐃᐃ.ᐃΔΔ();
      this.ΔⵠΔᐃΔⲆΔⵠⵠ.ᐃΔΔ();
      this.ΔⲆⵠⵠ.ΔΔⲆⵠⲆᐃΔ.ᐃΔΔ();
      this.ΔⲆⵠⵠ.list.ᐃΔΔ();
      this.ΔⵠⲆᐃ.ᐃΔΔ();
      this.ᐃΔᐃΔⵠ.ᐃΔΔ();
      this.ᐃⵠⵠⵠ.ᐃΔΔ();
      this.ΔⲆΔᐃⲆ.ᐃΔΔ();
      this.options.ᐃΔΔ();
      this.ΔᐃⵠᐃΔ.ᐃΔΔ();
      this.sign.ᐃΔΔ();
      var a = 0;
      if (n != 30) {
        a = 1500 / (n + 1) - 50;
      }
      if (g != -1) {
        a = -(1500 / (30 - g + 1) - 48);
      }
      this.ΔⲆΔᐃⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃᐃΔᐃ.translate.y -= a > 0 ? a : -a;
      qx.ᐃⵠᐃᐃΔ.translate.y -= a > 0 ? a : -a;
      qx.ᐃΔⲆⵠⵠⵠᐃ.translate.y -= a > 0 ? a : -a;
      this.ΔⲆⵠⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⵠⵠⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔᐃⵠᐃΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔᐃΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ.info.translate.y -= a > 0 ? a : -a;
      this.ΔᐃΔⲆ.ᐃΔⲆΔΔᐃᐃ.info.translate.y -= a > 0 ? a : -a;
      px.ⲆⲆΔᐃΔ.translate.y -= a > 0 ? a : -a;
      this.ⵠⲆⲆⵠ.translate.y -= a < 0 ? a : -a;
      this.ⵠⲆⵠΔⵠ.translate.y -= a < 0 ? a : -a;
    };
    this.ᐃΔᐃΔΔⲆᐃⲆᐃ = function () {
      if (!qx.ΔⲆⵠΔⵠ.enabled && this.ΔΔⲆΔⵠⲆᐃ && !qx.ᐃⲆⵠΔᐃ) {
        Qu();
      }
      Tu();
      (function () {
        var a = px.ᐃᐃΔ[0];
        if (px.mode === 0 || px.mode === 7 || px.mode === 2 || px.mode === 4 || px.mode === 5 || px.mode === 6 || px.mode === 3) {
          for (var b = 0; a.length > b; b++) {
            a[b].ⵠΔⵠΔᐃⵠΔ();
          }
        } else if (px.mode === 1) {
          for (b = 0; b < a.length; b++) {
            if (qx.ⲆΔᐃΔⲆⵠΔ || qx.ᐃΔⲆⵠⵠⵠᐃ.enabled || a[b].ΔⲆⵠΔ.ⵠΔᐃΔⲆ !== "spectator") {
              a[b].ⵠΔⵠΔᐃⵠΔ();
            }
          }
        }
      })();
      if (this.ΔΔⲆΔⵠⲆᐃ) {
        qp();
        if (this.ⲆⵠⲆΔⲆⲆΔ === 1) {
          this.ΔⲆⵠⵠ.button.ΔⵠⲆⲆ(c);
        }
        if (px.mode !== 2 && px.mode !== 4 && px.mode !== 5 && this.ᐃΔΔᐃᐃⲆⲆ === 1) {
          this.ᐃⵠⵠⵠ.button.ΔⵠⲆⲆ(c);
        }
        this.options.button.ΔⵠⲆⲆ(c);
        if (this.ⵠⲆᐃⲆᐃⵠⵠ === 1) {
          this.ΔᐃⵠᐃΔ.button.ΔⵠⲆⲆ(c);
        }
        if (tx.ⲆᐃΔᐃⲆ) {
          this.ΔᐃΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ.ΔⵠⲆⲆ(c);
        } else {
          this.ΔᐃΔⲆ.ᐃΔⲆΔΔᐃᐃ.ΔⵠⲆⲆ(c);
        }
        Pu();
        Mu();
        this.ⵠⲆⲆⵠ.ΔⵠⲆⲆ();
        Yp();
        Up();
        Ku();
        Hu();
        Ju();
        Dp();
        Fp();
        (function () {
          if (!qx.ⵠⲆⵠΔ.open && !qx.ΔΔⵠⲆⲆ.open && !qx.ΔΔⲆᐃ.open && !qx.ⲆⲆᐃΔ.open && !qx.ΔΔΔⵠ.open) {
            qx.ΔⲆⲆⵠΔ.open = false;
            var a = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
            var b = 100;
            if (a) {
              for (var c = 0; px.ᐃᐃΔ[35].length > c; c++) {
                var d = px.ᐃᐃΔ[35][c];
                var e = ᐃⵠⲆΔ.ⲆⵠᐃⲆ(d, a);
                if (e < b) {
                  b = e;
                  qx.ΔⲆⲆⵠΔ.open = true;
                  qx.ΔⲆⲆⵠΔ.ΔⵠΔΔ = d.ΔⵠΔΔ;
                  qx.ΔⲆⲆⵠΔ.ᐃΔᐃⲆⲆ = d.id;
                }
              }
            }
          }
        })();
        Mp();
        Wp();
        Lp();
        _p();
        Rp();
        Ip();
      }
      if (qx.ΔⲆⵠΔⵠ.enabled) {
        Qp();
      }
      Sp();
      if (this.ΔΔⲆΔⵠⲆᐃ && this.ᐃⵠΔΔⲆΔⲆ === 1) {
        Su();
      }
      qx.ΔⵠᐃⵠⵠⲆⲆ.ΔⵠⲆⲆ();
      qx.alert.ΔⵠⲆⲆ("#FFF", "#000");
      if (this.ΔΔⲆΔⵠⲆᐃ) {
        qx.ΔⲆⵠΔⵠ.ΔⵠⲆⲆ();
        qx.ΔⲆΔᐃⲆ.ΔⵠⲆⲆ();
        qx.ⵠⲆΔⲆ.ᐃΔΔΔᐃⲆⲆ.ΔⵠⲆⲆ(vx.ⵠΔⵠΔ.x, vx.ⵠΔⵠΔ.y);
      }
      Op();
    };
    this.ⵠⵠᐃⵠᐃⲆⲆⲆⲆ = function () {
      qx.ⲆⲆᐃ.ᐃΔΔ();
      qx.ⵠⲆⲆⵠ.ᐃΔΔ();
      if (!qx.reconnect.enabled && qx.ΔⵠⲆΔᐃ) {
        qx.control.ᐃΔΔ();
        qx.ᐃⵠᐃᐃΔ.ᐃΔΔ();
      }
      px.ᐃΔΔ();
      this.ᐃⵠⵠⵠ.ΔⵠⵠᐃᐃΔᐃᐃⵠ();
    };
    this.ⲆΔΔⵠᐃᐃⲆⲆᐃ = function () {
      yw();
    };
    this.ⵠⲆⲆⵠⵠⵠΔⵠᐃ = function () {
      ΔⵠⲆⵠ.ΔⲆᐃⵠᐃⵠⲆᐃⵠ();
      ΔⵠⲆⵠ.ⲆᐃⲆⲆⲆⵠⲆΔⲆ();
      ΔⵠⲆⵠ.ⲆⲆⵠⵠⲆⵠⲆⵠⲆ();
      ΔⵠⲆⵠ.ΔΔⲆⵠⲆⲆΔᐃⵠ();
    };
    this.ΔⵠⲆⲆ = function () {
      if (!qx.reconnect.enabled && qx.ΔⵠⲆΔᐃ) {
        this.ⵠⲆⲆⵠⵠⵠΔⵠᐃ();
      }
      tx.ⲆⵠⵠᐃⲆΔᐃⲆᐃ();
      this.ⵠⵠᐃⵠᐃⲆⲆⲆⲆ();
      if (mx.ⲆᐃⲆⵠⲆΔᐃ !== 1) {
        this.ⲆΔΔⵠᐃᐃⲆⲆᐃ();
        this.ᐃΔᐃΔΔⲆᐃⲆᐃ();
      } else {
        var a = Δᐃ.ᐃⵠΔⲆⵠᐃΔ;
        jp(c, a, $n - a.width / 4, _n - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ⵠᐃⲆΔⲆⲆΔ = function (a) {
      if (!qx.ΔⲆᐃⵠΔ.open && !qx.ⵠᐃⵠᐃᐃ.open) {
        if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
      }
      if (qx.ΔⲆᐃⵠΔ.open && a.keyCode === 27) {
        qx.ΔⲆᐃⵠΔ.ⲆⲆⲆⵠᐃ();
      } else if (qx.ⵠᐃⵠᐃᐃ.open && a.keyCode === 27) {
        qx.ⵠᐃⵠᐃᐃ.ⲆⲆⲆⵠᐃ();
      } else if (qx.ΔⲆᐃⵠΔ.open || qx.ⵠᐃⵠᐃᐃ.open || a.keyCode != 79 || g != -1) {
        if (a.keyCode == 13 && g == -1) {
          if (qx.ⵠᐃⵠᐃᐃ.open) {
            qx.ⵠᐃⵠᐃᐃ.ΔΔᐃⵠⵠΔΔ();
          } else {
            qx.ΔⲆᐃⵠΔ.ⲆᐃΔᐃⲆ();
          }
        } else if (!qx.ΔⲆᐃⵠΔ.open && !qx.ⵠᐃⵠᐃᐃ.open) {
          if (a.keyCode === 82) {
            qx.ᐃⵠᐃᐃΔ.ᐃⲆⵠᐃΔⲆⲆ();
          } else if (a.keyCode !== 80 || px.mode !== 1 || qx.ⲆΔᐃΔⲆⵠΔ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (qx.ᐃⲆⵠⵠ.id < 0) {
                var b = a.keyCode - 49;
                var c = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ[b];
                if (c) {
                  ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              qx.ᐃⵠΔⲆⵠⲆΔ = !qx.ᐃⵠΔⲆⵠⲆΔ;
            } else if (a.keyCode == 71) {
              qx.ᐃⲆⵠⵠ.ⲆΔⵠⵠⲆᐃᐃⲆᐃ();
            }
          } else {
            qx.ᐃΔⲆⵠⵠⵠᐃ.ᐃⲆⵠᐃΔⲆⲆ();
          }
        }
      } else {
        qx.ⵠᐃⵠᐃᐃ.ⵠⵠⲆⵠᐃⵠⵠⵠᐃ();
      }
      ux.up(a);
    };
    this.Ⲇⵠⵠᐃⵠᐃⵠ = function (a) {
      ux.down(a);
      if (!qx.ΔⲆᐃⵠΔ.open && !qx.ⵠᐃⵠᐃᐃ.open) {
        if (8 == a.keyCode) a.preventDefault();
        if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
      }
    };
    this.ⵠΔⵠΔⲆΔᐃ = function (b) {
      vx.ⵠΔⵠΔ = df(f.ⲆΔ, b);
      var c = Go;
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0) {
        f.ⵠⲆⵠΔⵠ.focus(vx.ⵠΔⵠΔ);
      }
      var d = qx.ⵠⲆⵠΔ;
      if (qx.ᐃⲆⵠⵠ.id < 0 && d.id >= 0) {
        if (!qx.ⵠⲆⵠΔ.lock || qx.id === qx.ⵠⲆⵠΔ.ΔⵠΔΔ) {
          c |= f.ⵠΔΔ[qx.ⵠⲆⵠΔ.id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        }
      }
      var e = qx.ΔΔⲆᐃ;
      if (e.open && e.ⲆⵠⲆᐃΔ > 0) {
        c |= f.ᐃⲆᐃᐃΔⵠⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      var j = qx.ΔΔΔⵠ;
      if (j.open && j.ᐃᐃᐃⵠᐃⵠΔ > 0) {
        c |= f.ᐃΔⵠⲆΔΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        c |= f.ΔⲆⲆⵠᐃⲆⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        c |= f.ⵠⲆᐃᐃⲆᐃᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        c |= f.ᐃΔΔⵠᐃΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        c |= f.ⲆⲆΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      var a = qx.ⲆⲆᐃΔ;
      if (a.open && a.ⲆΔΔΔΔΔⲆ > 0) {
        c |= f.ᐃⲆⵠᐃⵠᐃⵠ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (qx.sign.open) {
        c |= f.sign.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (!qx.ⵠⲆⵠΔ.lock) {
        if (qx.ⵠⲆⵠΔ.ᐃΔᐃⲆⵠⲆᐃ) {
          c |= f.ⵠΔⲆⲆⲆⵠᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        }
      }
      if (qx.ⵠⲆⵠΔ.ⵠᐃⵠⵠΔΔⲆ) {
        c |= f.ⵠⵠⵠΔΔⵠⵠ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (qx.ᐃⲆⵠⵠ.id < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.options.open && !f.ΔᐃⵠᐃΔ.open) {
        for (var k = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ, m = 0; m < k.length; m++) {
          var n = k[m].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
          c |= n;
          if (n) {
            qx.ⵠⲆΔⲆ.ᐃΔΔΔᐃⲆⲆ.start(m, vx.ⵠΔⵠΔ);
          }
          if (d.open && (d.id < 0 || d.id == k[m].id) || qx.ΔΔⵠⲆⲆ.open && k[m].id === 109 || qx.ΔⲆⲆⵠΔ.open && k[m].id === 180 || qx.ⲆⲆᐃΔ.open && (k[m].id === 109 || k[m].id === 131) || qx.ΔΔⲆᐃ.open && k[m].id === 134 || qx.ΔΔΔⵠ.open && k[m].id === 109) {
            c |= f.ΔⲆⵠⲆⲆ[k[m].id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
          }
        }
      }
      if (qx.ⲆᐃΔΔⲆ.open) {
        c |= f.ⲆᐃΔΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (f.ᐃᐃᐃⵠⵠ != -1) {
        if (c |= f.ⵠⲆⲆⲆⵠ[f.ᐃᐃᐃⵠⵠ].button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf)) {
          var o = Rj;
        }
      } else {
        o = false;
      }
      if (qx.ᐃⲆⵠⵠ.id < 0 && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !o && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ΔᐃⵠᐃΔ.open && !qx.ᐃⲆⵠΔᐃ) {
        k = qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ;
        m = 0;
        for (; m < k.length; m++) {
          c |= k[m].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        }
      }
      if (qx.ᐃⲆⵠⵠ.id < 0 && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !!qx.ΔⲆΔᐃⲆ.open && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open) {
        c |= f.ΔⲆΔᐃⲆ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open) {
        c |= f.ΔⲆⵠⵠ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open) {
        c |= f.options.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.options.open) {
        c |= f.ΔᐃⵠᐃΔ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.options.open && !f.ΔᐃⵠᐃΔ.open) {
        if (tx.ⲆᐃΔᐃⲆ) {
          c |= f.ΔᐃΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        } else {
          c |= f.ΔᐃΔⲆ.ᐃΔⲆΔΔᐃᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
        }
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && px.mode !== 2 && px.mode !== 4 && px.mode !== 5) {
        c |= f.ᐃⵠⵠⵠ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, rf);
      }
      if (!c && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open && !f.sign.open) {
        if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ >= 0) {
          ΔⵠⲆⵠ.ᐃΔᐃⲆⲆΔΔⵠⵠ();
        } else if (!o) {
          vx.down();
        }
      }
    };
    this.ⵠΔⵠᐃᐃⲆⵠ = function (b) {
      vx.ⵠΔⵠΔ = df(f.ⲆΔ, b);
      vx.up();
      if (!qx.ⵠⲆΔⲆ.ᐃΔΔΔᐃⲆⲆ.release()) {
        var c = qx.ⵠⲆⵠΔ;
        var d = qx.ΔΔⵠⲆⲆ;
        var e = qx.ΔⲆⲆⵠΔ;
        var i = qx.ΔΔⲆᐃ;
        var j = qx.ΔΔΔⵠ;
        var k = qx.ⲆⲆᐃΔ;
        if (qx.control.attack) {
          qx.control.attack = 0;
          ΔⵠⲆⵠ.ΔⵠⲆΔᐃⵠⲆΔΔ();
        }
        if (f.ᐃᐃᐃⵠⵠ != -1) {
          var m = f.ⵠⲆⲆⲆⵠ[f.ᐃᐃᐃⵠⵠ].button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            f.ⵠⲆⲆⲆⵠ[f.ᐃᐃᐃⵠⵠ].action();
          }
        }
        if (qx.ᐃⲆⵠⵠ.id < 0 && c.id >= 0 && !f.ΔⵠⲆᐃ.open) {
          if (!qx.ⵠⲆⵠΔ.lock || qx.id === qx.ⵠⲆⵠΔ.ΔⵠΔΔ) {
            if (m = f.ⵠΔΔ[qx.ⵠⲆⵠΔ.id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
              ΔⵠⲆⵠ.ⵠⲆᐃΔΔⵠⲆᐃᐃ(c);
            }
          }
        }
        if ((i = qx.ΔΔⲆᐃ).open && i.ⲆⵠⲆᐃΔ > 0 && !f.ΔⵠⲆᐃ.open) {
          if (m = f.ᐃⲆᐃᐃΔⵠⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            ΔⵠⲆⵠ.ⲆⲆⵠⲆⵠⲆΔᐃᐃ(i);
          }
        }
        if ((j = qx.ΔΔΔⵠ).open && j.ᐃᐃᐃⵠᐃⵠΔ > 0 && !f.ΔⵠⲆᐃ.open) {
          switch (j.type) {
            case 24:
              if (m = f.ᐃΔⵠⲆΔΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
                ΔⵠⲆⵠ.ᐃⵠΔⲆⲆⲆᐃ(j);
              }
              break;
            case 25:
              if (m = f.ΔⲆⲆⵠᐃⲆⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
                ΔⵠⲆⵠ.ᐃⵠΔⲆⲆⲆᐃ(j);
              }
              break;
            case 26:
              if (m = f.ⵠⲆᐃᐃⲆᐃᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
                ΔⵠⲆⵠ.ᐃⵠΔⲆⲆⲆᐃ(j);
              }
              break;
            case 27:
              if (m = f.ᐃΔΔⵠᐃΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
                ΔⵠⲆⵠ.ᐃⵠΔⲆⲆⲆᐃ(j);
              }
              break;
            case 28:
              if (m = f.ⲆⲆΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
                ΔⵠⲆⵠ.ᐃⵠΔⲆⲆⲆᐃ(j);
              }
          }
        }
        if ((k = qx.ⲆⲆᐃΔ).open && k.ⲆΔΔΔΔΔⲆ > 0 && !f.ΔⵠⲆᐃ.open) {
          if (m = f.ᐃⲆⵠᐃⵠᐃⵠ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            ΔⵠⲆⵠ.ⲆᐃⵠⵠᐃΔⲆΔᐃ(k);
          }
        }
        if (qx.sign.open && !f.ΔⵠⲆᐃ.open) {
          if (m = f.sign.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            f.sign.select();
          }
        }
        if (!qx.ⵠⲆⵠΔ.lock && !f.ΔⵠⲆᐃ.open) {
          if (qx.ⵠⲆⵠΔ.ᐃΔᐃⲆⵠⲆᐃ && (m = f.ⵠΔⲆⲆⲆⵠᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf))) {
            ΔⵠⲆⵠ.ⵠΔᐃᐃᐃΔΔΔⲆ(c);
          }
        }
        if (qx.ⵠⲆⵠΔ.ⵠᐃⵠⵠΔΔⲆ && !f.ΔⵠⲆᐃ.open && (m = f.ⵠⵠⵠΔΔⵠⵠ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf))) {
          ΔⵠⲆⵠ.ᐃᐃΔⵠⵠⵠΔⵠⵠ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (qx.ⲆᐃΔΔⲆ.open) {
          if (m = f.ⲆᐃΔΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            ΔⵠⲆⵠ.ⲆᐃΔΔⲆ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (qx.ᐃⲆⵠⵠ.id < 0 && !qx.ΔⲆⵠΔⵠ.enabled && !f.ΔⵠⲆᐃ.open) {
          for (var l = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ, o = 0; o < l.length; o++) {
            if (m = l[o].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0) {
                  f.ΔⵠⲆᐃ.ⵠᐃᐃⵠⵠΔⵠ(l[o].id);
                }
              } else {
                ΔⵠⲆⵠ.ⵠⵠⵠⵠᐃ(l[o].id, o);
              }
            } else if (c.open && (c.id < 0 || c.id === l[o].id)) {
              if ((m = f.ΔⲆⵠⲆⲆ[l[o].id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0) {
                ΔⵠⲆⵠ.ΔΔΔΔⲆᐃⵠᐃᐃ(c, l[o].id, b.shiftKey ? 10 : 1);
              }
            } else if (e.open && l[o].id === 180) {
              if ((m = f.ΔⲆⵠⲆⲆ[l[o].id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0) {
                ΔⵠⲆⵠ.ⵠᐃᐃᐃⵠⲆΔⲆᐃ(e);
              }
            } else if (d.open && l[o].id === 109) {
              if ((m = f.ΔⲆⵠⲆⲆ[l[o].id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0) {
                ΔⵠⲆⵠ.ᐃΔᐃⵠᐃⵠᐃⲆⲆ(d, b.shiftKey ? 10 : 1);
              }
            } else if (i.open && l[o].id === 134) {
              if ((m = f.ΔⲆⵠⲆⲆ[l[o].id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0) {
                ΔⵠⲆⵠ.ⵠᐃⲆᐃΔⲆᐃᐃⲆ(i, b.shiftKey ? 10 : 1);
              }
            } else if (j.open && l[o].id === 109) {
              if ((m = f.ΔⲆⵠⲆⲆ[l[o].id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0) {
                ΔⵠⲆⵠ.ⲆΔᐃⵠⵠⵠⲆⵠᐃ(j, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
              if ((m = f.ΔⲆⵠⲆⲆ[l[o].id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0) {
                if (l[o].id === 109) {
                  ΔⵠⲆⵠ.ΔⲆⲆⲆⲆᐃᐃ(k, b.shiftKey ? 10 : 1, 0);
                } else {
                  ΔⵠⲆⵠ.ΔⲆⲆⲆⲆᐃᐃ(k, 0, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (qx.ᐃⲆⵠⵠ.id < 0 && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !qx.ΔⲆⵠΔⵠ.enabled && !f.ΔⵠⲆᐃ.open && !qx.ᐃⲆⵠΔᐃ) {
          l = qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ;
          o = 0;
          for (; o < l.length; o++) {
            if (m = l[o].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
              ᐃᐃⵠⲆΔ = ΔⵠⲆⵠ.ⲆⵠᐃΔΔᐃᐃⲆᐃ(l[o].id);
              if (ᐃᐃⵠⲆΔ && ga) {
                ga("send", "event", "Game", "craft", Zr[ot[l[o].id].ⵠⵠⵠᐃ].name);
              }
            }
          }
        }
        if (qx.ᐃⲆⵠⵠ.id < 0 && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && qx.ΔⲆΔᐃⲆ.open && !f.ΔᐃⵠᐃΔ.open && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open) {
          if (m = f.ΔⲆΔᐃⲆ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af)) {
            sx.ΔⲆΔᐃⲆ.select();
          }
        }
        if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ΔᐃⵠᐃΔ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.options.open) {
          if (tx.ⲆᐃΔᐃⲆ) {
            if (m = f.ΔᐃΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
              tx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = f.ΔᐃΔⲆ.ᐃΔⲆΔΔᐃᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            tx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open) {
          if (m = f.options.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            f.options.ΔᐃⵠᐃⲆⵠⵠⵠⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.options.open && f.ⵠⲆᐃⲆᐃⵠⵠ === 1) {
          if (m = f.ΔᐃⵠᐃΔ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            f.ΔᐃⵠᐃΔ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⵠⲆᐃ.open && !f.ΔᐃⵠᐃΔ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && f.ⲆⵠⲆΔⲆⲆΔ === 1) {
          if (m = f.ΔⲆⵠⵠ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            f.ΔⲆⵠⵠ.ⵠᐃⵠΔΔⲆΔᐃᐃ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ΔᐃⵠᐃΔ.open && px.mode !== 2 && px.mode !== 4 && px.mode !== 5 && f.ᐃΔΔᐃᐃⲆⲆ === 1) {
          if (m = f.ᐃⵠⵠⵠ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, sf)) {
            f.ᐃⵠⵠⵠ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (qx.ᐃⲆⵠⵠ.ᐃⵠᐃΔᐃ && b.which == 3) {
          f.ᐃΔᐃΔⵠ.ⵠᐃᐃⵠⵠΔⵠ();
        }
      }
    };
    this.ΔⲆⲆᐃⵠΔᐃ = false;
    this.ⵠⵠⲆᐃᐃⲆΔ = function (c) {
      vx.ⵠΔⵠΔ = df(f.ⲆΔ, c);
      var d = false;
      sx.ΔⲆⲆⲆᐃ.display = 0;
      qx.ⵠⲆΔⲆ.ᐃΔΔΔᐃⲆⲆ.ⲆⲆⲆΔᐃ(vx.ⵠΔⵠΔ);
      if (f.ᐃᐃᐃⵠⵠ != -1) {
        d |= f.ⵠⲆⲆⲆⵠ[f.ᐃᐃᐃⵠⵠ].button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      var e = qx.ΔΔⲆᐃ;
      if (e.open && e.ⲆⵠⲆᐃΔ > 0) {
        d |= f.ᐃⲆᐃᐃΔⵠⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      var i = qx.ΔΔΔⵠ;
      if (i.open && i.ᐃᐃᐃⵠᐃⵠΔ > 0) {
        d |= f.ᐃΔⵠⲆΔΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
        d |= f.ΔⲆⲆⵠᐃⲆⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
        d |= f.ⵠⲆᐃᐃⲆᐃᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
        d |= f.ᐃΔΔⵠᐃΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
        d |= f.ⲆⲆΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      var a = qx.ⲆⲆᐃΔ;
      if (a.open && a.ⲆΔΔΔΔΔⲆ > 0) {
        d |= f.ᐃⲆⵠᐃⵠᐃⵠ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (qx.sign.open) {
        d |= f.sign.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      var j = qx.ⵠⲆⵠΔ;
      if (qx.ᐃⲆⵠⵠ.id < 0 && j.id >= 0 && !qx.ΔⲆⵠΔⵠ.enabled && (!qx.ⵠⲆⵠΔ.lock || qx.ⵠⲆⵠΔ.ΔⵠΔΔ === qx.id)) {
        d |= f.ⵠΔΔ[j.id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (qx.ⲆᐃΔΔⲆ.open) {
        d |= f.ⲆᐃΔΔⲆ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (!qx.ⵠⲆⵠΔ.lock && !qx.ΔⲆⵠΔⵠ.enabled) {
        if (qx.ⵠⲆⵠΔ.ᐃΔᐃⲆⵠⲆᐃ) {
          d |= f.ⵠΔⲆⲆⲆⵠᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
        }
      }
      if (qx.ⵠⲆⵠΔ.ⵠᐃⵠⵠΔΔⲆ && !qx.ΔⲆⵠΔⵠ.enabled) {
        d |= f.ⵠⵠⵠΔΔⵠⵠ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (qx.ᐃⲆⵠⵠ.id < 0 && !qx.ΔⲆⵠΔⵠ.enabled) {
        for (var k = qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ, m = 0; m < k.length; m++) {
          var n = k[m].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
          d |= sx.ΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ(n, k[m], 0);
          if (j.open && (j.id < 0 || k[m].id == j.id) || qx.ΔΔⵠⲆⲆ.open && k[m].id == 109 || qx.ΔⲆⲆⵠΔ.open && k[m].id === 180 || qx.ⲆⲆᐃΔ.open && (k[m].id == 109 || k[m].id == 131) || qx.ΔΔⲆᐃ.open && k[m].id == 134 || qx.ΔΔΔⵠ.open && k[m].id == 109) {
            d |= f.ΔⲆⵠⲆⲆ[k[m].id].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
          }
        }
      }
      if (qx.ᐃⲆⵠⵠ.id < 0 && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !qx.ΔⲆⵠΔⵠ.enabled && !qx.ᐃⲆⵠΔᐃ) {
        k = qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ;
        m = 0;
        for (; k.length > m; m++) {
          n = false;
          n = k[m].ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
          d |= sx.ΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ(n, k[m], 1);
        }
      }
      if (qx.ᐃⲆⵠⵠ.id < 0 && qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && qx.ΔⲆΔᐃⲆ.open && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open) {
        d |= f.ΔⲆΔᐃⲆ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open && f.ⲆⵠⲆΔⲆⲆΔ === 1) {
        d |= f.ΔⲆⵠⵠ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.ΔᐃⵠᐃΔ.open) {
        d |= f.options.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.options.open && f.ⵠⲆᐃⲆᐃⵠⵠ === 1) {
        d |= f.ΔᐃⵠᐃΔ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.ᐃΔᐃΔⵠ.open && !f.ᐃⵠⵠⵠ.open && !f.options.open && !f.ΔᐃⵠᐃΔ.open) {
        if (tx.ⲆᐃΔᐃⲆ) {
          d |= f.ΔᐃΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
        } else {
          d |= f.ΔᐃΔⲆ.ᐃΔⲆΔΔᐃᐃ.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
        }
      }
      if (qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ < 0 && !f.ΔⲆⵠⵠ.open && !f.ΔⵠⲆᐃ.open && !f.options.open && !f.ᐃΔᐃΔⵠ.open && !f.ΔᐃⵠᐃΔ.open && px.mode !== 2 && px.mode !== 4 && Jf.ⲆΔⲆᐃΔΔⲆΔⵠ !== px.mode && f.ᐃΔΔᐃᐃⲆⲆ === 1) {
        d |= f.ᐃⵠⵠⵠ.button.ⲆⲆⲆᐃ(f.ⲆΔ, vx.ⵠΔⵠΔ, af);
      }
      if (f.ΔⲆⲆᐃⵠΔᐃ !== d) {
        f.ΔⲆⲆᐃⵠΔᐃ = d;
        b.style.cursor = d ? f.ⲆᐃⵠᐃⵠΔⲆ : f.ΔⵠⵠΔᐃᐃⲆ;
      }
    };
    this.ⲆⲆΔΔⲆⵠΔ = function () {
      za.addEventListener("mousedown", this.ⵠΔⵠΔⲆΔᐃ, false);
      za.addEventListener("mouseup", this.ⵠΔⵠᐃᐃⲆⵠ, false);
      za.addEventListener("mousemove", this.ⵠⵠⲆᐃᐃⲆΔ, false);
      za.addEventListener("keyup", this.ⵠᐃⲆΔⲆⲆΔ, false);
      za.addEventListener("keydown", this.Ⲇⵠⵠᐃⵠᐃⵠ, In);
    };
    this.ⵠⲆⵠΔᐃᐃΔ = function () {
      za.removeEventListener("mousedown", this.ⵠΔⵠΔⲆΔᐃ, Fh);
      za.removeEventListener("mouseup", this.ⵠΔⵠᐃᐃⲆⵠ, Eq);
      za.removeEventListener("mousemove", this.ⵠⵠⲆᐃᐃⲆΔ, lh);
      za.removeEventListener("keyup", this.ⵠᐃⲆΔⲆⲆΔ, Nn);
      za.removeEventListener("keydown", this.Ⲇⵠⵠᐃⵠᐃⵠ, false);
    };
  }
  function Uw(b, c) {
    this.ⲆΔ = b;
    this.Ⲇ = c;
    var d = this;
    this.ΔΔⵠΔⵠΔᐃ = fk;
    this.ⲆᐃⵠΔΔΔⵠ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        x: 0,
        y: 0
      },
      ᐃΔΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ⵠΔⵠⵠⲆ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + qx.ⲆᐃᐃⲆⵠᐃΔ.ⲆⵠΔΔⵠⲆᐃ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + kb[335] + " : " + qx.Δᐃⵠ + "</div><div class=\"stats\"> " + kb[334] + " : " + qx.ⲆᐃᐃⲆⵠᐃΔ.ⵠⵠⵠᐃᐃⵠΔ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + kb[333] + " : " + qx.ⲆᐃᐃⲆⵠᐃΔ.ᐃᐃΔⲆΔ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + qx.ⲆᐃᐃⲆⵠᐃΔ.ⲆᐃⵠΔᐃᐃⲆ + " " + kb[332] + "</div></div><div id=\"shop_points\">" + kb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + kb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + kb[330] + "</div></div><div id=\"bbback\">" + kb[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Sw, kh);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          rx.ⲆⲆⲆⵠᐃ(mx.ⲆᐃΔᐃⲆ);
        }, Cl);
        document.getElementById("fffacebook").addEventListener("mouseup", Qw, false);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Ix + "getBreadAndScore?userid=" + Px);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - mx.ΔᐃⵠᐃⲆ;
              mx.ΔᐃⵠᐃⲆ = b.b;
              mx.ᐃᐃΔⲆΔ = b.s;
              mx.ΔⲆᐃⵠⲆ = mx.ΔΔΔΔⲆᐃΔ(mx.ᐃᐃΔⲆΔ);
              mx.ⲆΔⵠᐃΔⲆⲆ = mx.ᐃΔⲆᐃᐃΔᐃ(mx.ᐃᐃΔⲆΔ);
              mx.ΔⲆᐃⵠⵠᐃⵠ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ᐃΔΔ();
      if (++g != 30) {
        za.setTimeout(e, 33);
      } else {
        d.ᐃΔΔ();
      }
    }
    this.ⲆⲆⲆⵠᐃ = function (a) {
      if (d.ΔΔⵠΔⵠΔᐃ === true) {
        d.ΔΔⵠΔⵠΔᐃ = false;
        f = a;
        i = -1;
        j();
        Ex();
      }
    };
    var i = -1;
    function j() {
      d.ᐃΔΔ();
      if (++i == 30) {
        d.stop();
        d.ⲆᐃⵠΔΔΔⵠ.style.display = "none";
        f();
        return;
      }
      za.setTimeout(j, 33);
    }
    this.ΔᐃᐃᐃΔ = Nq;
    this.stop = function () {
      this.ΔᐃᐃᐃΔ = Eq;
    };
    this.ⲆᐃΔᐃⲆ = function () {
      Gx();
      document.getElementById("game_body").style.backgroundColor = Sr.ᐃᐃⲆⲆⲆ[ox.time];
      d.ⲆᐃⵠΔΔΔⵠ.ⵠΔⵠⵠⲆ();
      mx.ⲆΔᐃⵠⲆ.style.display = "inline-block";
      d.ΔᐃᐃᐃΔ = fr;
      d.ΔΔⵠΔⵠΔᐃ = Vq;
      i = -1;
      g = 0;
      e();
    };
    this.ᐃΔΔ = function () {
      this.ⲆᐃⵠΔΔΔⵠ.translate.x = Math.floor($n - 275);
      this.ⲆᐃⵠΔΔΔⵠ.translate.y = Math.floor(_n - this.ⲆᐃⵠΔΔΔⵠ.height - 28);
      mx.ⲆΔᐃⵠⲆ.translate.x = this.ⲆᐃⵠΔΔΔⵠ.translate.x - 350;
      mx.ⲆΔᐃⵠⲆ.translate.y = this.ⲆᐃⵠΔΔΔⵠ.translate.y + 0;
      mx.ⲆΔᐃⵠⲆ.ᐃΔΔ();
      if (g != 30 || i != -1) {
        var a = 0;
        if (g != 30) {
          a = 1500 / (g + 1) - 50;
        }
        if (i != -1) {
          a = -(1750 / (30 - i + 1) - 48);
        }
        this.ⲆᐃⵠΔΔΔⵠ.translate.y -= a;
      }
      this.ⲆᐃⵠΔΔΔⵠ.ᐃΔΔ();
    };
    this.ΔⵠⲆⲆ = function () {
      Cp();
      qx.alert.ΔⵠⲆⲆ("#FFF", "#000");
    };
  }
  function Vw(b, c, d) {
    const e = ~(b & 36680) & b | ~(b & 36680) & 36680;
    const f = (2531011 + (48862 + c) * 214013) % 4294967296;
    const g = ~(d & 41110) & d | ~(d & 41110) & 41110;
    const a = ef(e, f, g, e, f);
    ef(e, f, g, e, f);
    return ~(a & 37197) & (a | 37197);
  }
  function Ww(b, c, d, e, f) {
    const g = (2531011 + (55343 + b) * 214013) % 4294967296;
    const a = ~(c & 23642) & (c | 23642);
    const i = (15382 + d) % 65283;
    const j = (24 << (f >> 24 & 255)) + (16 << (f >> 16 & 255)) + (0 << (f & 255)) + (8 << (f >> 8 & 255));
    const h = ut(g, a);
    br(i, 0, j, 0, a, i);
    return ~(h & 45508) & h | ~(h & 45508) & 45508;
  }
  (function () {
    function b() {
      this.ⵠΔⵠⵠⲆ();
    }
    b.prototype = {
      ⵠΔⵠⵠⲆ: function () {
        var a = this || j;
        a.ΔⵠⵠⲆΔᐃⲆ = 1000;
        a.ΔΔᐃⲆΔΔΔ = {};
        a.ⵠᐃᐃᐃᐃ = [];
        a.ⲆⵠΔΔᐃ = false;
        a.ᐃⲆⲆⵠᐃ = 1;
        a.ⵠΔⵠⲆΔⵠⵠ = "canplaythrough";
        a.ᐃⲆᐃᐃⲆ = typeof za != "undefined" && za.navigator ? za.navigator : null;
        a.ᐃᐃⵠᐃΔⲆΔ = null;
        a.ⲆΔᐃΔᐃΔᐃ = false;
        a.ΔⲆΔⵠⵠ = true;
        a.ΔΔΔⲆⲆⵠⵠ = true;
        a.Ⲇ = null;
        a.ΔᐃᐃΔᐃⲆⵠ = true;
        a.ⲆⵠⵠᐃⵠΔᐃ();
        return a;
      },
      volume: function (b) {
        var c = this || j;
        b = parseFloat(b);
        if (!c.Ⲇ) {
          i();
        }
        if (b !== undefined && b >= 0 && b <= 1) {
          c.ᐃⲆⲆⵠᐃ = b;
          if (c.ⲆⵠΔΔᐃ) {
            return c;
          }
          if (c.ΔⲆΔⵠⵠ) {
            c.ᐃᐃⵠᐃΔⲆΔ.gain.value = b;
          }
          for (var d = 0; d < c.ⵠᐃᐃᐃᐃ.length; d++) {
            if (!c.ⵠᐃᐃᐃᐃ[d].ⲆⵠⵠᐃΔ) {
              for (var f = c.ⵠᐃᐃᐃᐃ[d].ᐃΔⵠᐃΔ(), g = 0; g < f.length; g++) {
                var h = c.ⵠᐃᐃᐃᐃ[d].ⲆΔΔⵠⲆ(f[g]);
                if (h && h.ᐃΔᐃⲆ) {
                  h.ᐃΔᐃⲆ.volume = h.ᐃⲆⲆⵠᐃ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ᐃⲆⲆⵠᐃ;
      },
      ⵠⵠΔᐃΔⵠⵠ: function (b) {
        var c = this || j;
        if (!c.Ⲇ) {
          i();
        }
        c.ⲆⵠΔΔᐃ = b;
        if (c.ΔⲆΔⵠⵠ) {
          c.ᐃᐃⵠᐃΔⲆΔ.gain.value = b ? 0 : c.ᐃⲆⲆⵠᐃ;
        }
        for (var d = 0; d < c.ⵠᐃᐃᐃᐃ.length; d++) {
          if (!c.ⵠᐃᐃᐃᐃ[d].ⲆⵠⵠᐃΔ) {
            for (var e = c.ⵠᐃᐃᐃᐃ[d].ᐃΔⵠᐃΔ(), f = 0; f < e.length; f++) {
              var g = c.ⵠᐃᐃᐃᐃ[d].ⲆΔΔⵠⲆ(e[f]);
              if (g && g.ᐃΔᐃⲆ) {
                g.ᐃΔᐃⲆ.muted = !!b || g.ⲆⵠΔΔᐃ;
              }
            }
          }
        }
        return c;
      },
      ⵠᐃᐃᐃⲆᐃⲆ: function () {
        var a = this || j;
        for (var b = a.ⵠᐃᐃᐃᐃ.length - 1; b >= 0; b--) {
          a.ⵠᐃᐃᐃᐃ[b].ⵠᐃᐃᐃⲆᐃⲆ();
        }
        if (a.ΔⲆΔⵠⵠ && a.Ⲇ && a.Ⲇ.close !== undefined) {
          a.Ⲇ.close();
          a.Ⲇ = null;
          i();
        }
        return a;
      },
      ⲆⲆᐃⵠⵠΔΔⲆⲆ: function (a) {
        return (this || j).ΔΔᐃⲆΔΔΔ[a.replace(/^x-/, "")];
      },
      ⲆⵠⵠᐃⵠΔᐃ: function () {
        var a = this || j;
        a.state = a.Ⲇ && a.Ⲇ.state || "running";
        a.ⵠⵠΔⲆΔΔⲆ();
        if (!a.ΔⲆΔⵠⵠ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ⵠΔⵠⲆΔⵠⵠ = "canplay";
              }
            } catch (b) {
              a.ⲆΔᐃΔᐃΔᐃ = true;
            }
          } else {
            a.ⲆΔᐃΔᐃΔᐃ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ⲆΔᐃΔᐃΔᐃ = true;
          }
        } catch (a) { }
        if (!a.ⲆΔᐃΔᐃΔᐃ) {
          a.ⲆᐃⵠΔΔⲆⲆᐃᐃ();
        }
        return a;
      },
      ⲆᐃⵠΔΔⲆⲆᐃᐃ: function () {
        var b = this || j;
        var c = null;
        try {
          c = typeof Audio != "undefined" ? new Audio() : null;
        } catch (a) {
          return b;
        }
        if (!c || typeof c.canPlayType != "function") {
          return b;
        }
        var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var e = b.ᐃⲆᐃᐃⲆ && b.ᐃⲆᐃᐃⲆ.userAgent.match(/OPR\/([0-6].)/g);
        var f = e && parseInt(e[0].split("/")[1], 10) < 33;
        b.ΔΔᐃⲆΔΔΔ = {
          ΔᐃⲆᐃⵠⵠⵠⵠᐃ: !f && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ⲆⲆΔΔⵠⵠⲆΔᐃ: !!d,
          ⵠⵠΔᐃⵠΔᐃⲆΔ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ⲆᐃΔⵠⵠᐃⲆⲆⵠ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆᐃⵠⵠⵠⲆⵠⲆⵠ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ΔΔⲆΔᐃᐃᐃⲆⵠ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ⵠⵠⲆᐃⵠⵠⲆΔⵠ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
          ΔΔᐃⲆⵠΔΔΔΔ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ᐃΔᐃⲆΔΔΔⵠⲆ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ΔⲆᐃⲆΔΔᐃⵠⵠ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ΔⲆⲆⲆⵠⲆⲆⲆΔ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆΔⵠⵠⵠΔⵠⲆⵠ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃⵠΔΔⲆΔΔΔΔ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ΔᐃᐃᐃᐃⵠⲆⵠᐃ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return b;
      },
      ⲆⵠᐃⲆⲆⵠᐃⲆΔ: function () {
        var b = this || j;
        var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ᐃⲆᐃᐃⲆ && b.ᐃⲆᐃᐃⲆ.userAgent);
        var c = !!("ontouchend" in za) || !!b.ᐃⲆᐃᐃⲆ && b.ᐃⲆᐃᐃⲆ.maxTouchPoints > 0 || !!b.ᐃⲆᐃᐃⲆ && b.ᐃⲆᐃᐃⲆ.ᐃⵠᐃⲆΔᐃⲆᐃⵠ > 0;
        if (!b.ⲆΔΔⵠΔⲆᐃ && b.Ⲇ && (a || c)) {
          b.ⲆΔΔⵠΔⲆᐃ = false;
          if (!b.ᐃⲆⲆⲆⲆᐃΔᐃᐃ && b.Ⲇ.sampleRate !== 44100) {
            b.ᐃⲆⲆⲆⲆᐃΔᐃᐃ = true;
            b.ⵠᐃᐃᐃⲆᐃⲆ();
          }
          b.ᐃΔΔᐃᐃⵠΔ = b.Ⲇ.createBuffer(1, 1, 22050);
          function c() {
            j.ΔΔΔᐃⲆⵠⵠ();
            var a = b.Ⲇ.createBufferSource();
            a.buffer = b.ᐃΔΔᐃᐃⵠΔ;
            a.connect(b.Ⲇ.destination);
            if (a.start === undefined) {
              a.ΔⲆⲆΔᐃΔᐃⲆⵠ(0);
            } else {
              a.start(0);
            }
            if (typeof b.Ⲇ.resume == "function") {
              b.Ⲇ.resume();
            }
            a.onended = function () {
              a.disconnect(0);
              b.ⲆΔΔⵠΔⲆᐃ = true;
              b.ΔᐃᐃΔᐃⲆⵠ = false;
              document.removeEventListener("touchend", c, true);
            };
          }
          document.addEventListener("touchend", c, true);
          return b;
        }
      },
      ⵠⵠΔⲆΔΔⲆ: function () {
        var a = this;
        if (a.ΔΔΔⲆⲆⵠⵠ && a.Ⲇ && a.Ⲇ.suspend !== undefined && j.ΔⲆΔⵠⵠ) {
          for (var b = 0; b < a.ⵠᐃᐃᐃᐃ.length; b++) {
            if (a.ⵠᐃᐃᐃᐃ[b].ⲆⵠⵠᐃΔ) {
              for (var c = 0; c < a.ⵠᐃᐃᐃᐃ[b].ⵠᐃΔΔⲆ.length; c++) {
                if (!a.ⵠᐃᐃᐃᐃ[b].ⵠᐃΔΔⲆ[c].ᐃⲆⵠᐃᐃ) {
                  return a;
                }
              }
            }
          }
          if (a.ΔⵠⵠⵠΔⵠΔ) {
            clearTimeout(a.ΔⵠⵠⵠΔⵠΔ);
          }
          a.ΔⵠⵠⵠΔⵠΔ = setTimeout(function () {
            if (a.ΔΔΔⲆⲆⵠⵠ) {
              a.ΔⵠⵠⵠΔⵠΔ = null;
              a.state = "suspending";
              a.Ⲇ.suspend().then(function () {
                a.state = "suspended";
                if (a.ⲆᐃⲆΔᐃⲆᐃ) {
                  delete a.ⲆᐃⲆΔᐃⲆᐃ;
                  a.ΔΔΔᐃⲆⵠⵠ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ΔΔΔᐃⲆⵠⵠ: function () {
        var a = this;
        if (a.Ⲇ && a.Ⲇ.resume !== undefined && j.ΔⲆΔⵠⵠ) {
          if (a.state === "running" && a.ΔⵠⵠⵠΔⵠΔ) {
            clearTimeout(a.ΔⵠⵠⵠΔⵠΔ);
            a.ΔⵠⵠⵠΔⵠΔ = null;
          } else if (a.state === "suspended") {
            a.Ⲇ.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.ⵠᐃᐃᐃᐃ.length; b++) {
                a.ⵠᐃᐃᐃᐃ[b].ΔⵠΔᐃⵠ("resume");
              }
            });
            if (a.ΔⵠⵠⵠΔⵠΔ) {
              clearTimeout(a.ΔⵠⵠⵠΔⵠΔ);
              a.ΔⵠⵠⵠΔⵠΔ = null;
            }
          } else if (a.state === "suspending") {
            a.ⲆᐃⲆΔᐃⲆᐃ = true;
          }
          return a;
        }
      }
    };
    var j = new b();
    function c(a) {
      if (a.src && a.src.length !== 0) {
        this.ⵠΔⵠⵠⲆ(a);
      } else {
        console.error(undefined);
      }
    }
    c.prototype = {
      ⵠΔⵠⵠⲆ: function (a) {
        var b = this;
        if (!j.Ⲇ) {
          i();
        }
        b.ⲆⲆΔΔⲆⵠⲆⵠⵠ = a.autoplay || false;
        b.ΔⲆⵠΔΔⲆⵠ = typeof a.ᐃΔΔⲆΔΔⵠ != "string" ? a.ᐃΔΔⲆΔΔⵠ : [a.ᐃΔΔⲆΔΔⵠ];
        b.ΔΔΔⵠᐃΔᐃ = a.ⵠᐃⵠΔᐃⵠⵠⵠⵠ || false;
        b.ⲆⵠΔΔᐃ = a.ⵠⵠΔᐃΔⵠⵠ || false;
        b.ⲆᐃΔⲆⲆ = a.loop || false;
        b.ⲆᐃΔⲆᐃᐃᐃΔⵠ = a.ᐃᐃᐃᐃᐃⵠΔⲆᐃ || 5;
        b.ᐃⵠⲆⵠⲆⲆⵠΔⵠ = typeof a.preload != "boolean" || a.preload;
        b.ⵠΔᐃⲆⵠ = a.rate || 1;
        b.ΔᐃⵠΔᐃ = a.Ⲇᐃ || {};
        b.ⲆⵠⵠᐃⲆ = typeof a.src != "string" ? a.src : [a.src];
        b.ᐃⲆⲆⵠᐃ = a.volume !== undefined ? a.volume : 1;
        b.ᐃᐃᐃᐃⲆⲆⵠ = 0;
        b.ⲆⲆⵠⲆΔ = "unloaded";
        b.ⵠᐃΔΔⲆ = [];
        b.ⲆⲆᐃⲆΔΔΔ = {};
        b.ⵠᐃᐃⲆΔ = [];
        b.ⵠⲆᐃᐃⵠᐃᐃᐃᐃ = a.onend ? [{
          ⲆΔⵠⲆᐃ: a.onend
        }] : [];
        b.ⵠⵠᐃᐃⲆΔⵠᐃᐃ = a.onfade ? [{
          ⲆΔⵠⲆᐃ: a.onfade
        }] : [];
        b.ᐃᐃⵠΔⲆΔΔΔΔ = a.onload ? [{
          ⲆΔⵠⲆᐃ: a.onload
        }] : [];
        b.ΔᐃⵠⲆᐃⵠⲆΔΔ = a.ΔⲆᐃⵠⲆⲆⵠᐃⵠ ? [{
          ⲆΔⵠⲆᐃ: a.ΔⲆᐃⵠⲆⲆⵠᐃⵠ
        }] : [];
        b.ᐃⵠⲆᐃᐃΔⲆΔⵠ = a.onpause ? [{
          ⲆΔⵠⲆᐃ: a.onpause
        }] : [];
        b.ⵠᐃᐃⲆᐃⵠⲆⲆⵠ = a.onplay ? [{
          ⲆΔⵠⲆᐃ: a.onplay
        }] : [];
        b.ⲆᐃᐃⲆΔΔⵠΔⲆ = a.onstop ? [{
          ⲆΔⵠⲆᐃ: a.onstop
        }] : [];
        b.ᐃᐃᐃⵠⲆΔⵠⵠΔ = a.onmute ? [{
          ⲆΔⵠⲆᐃ: a.onmute
        }] : [];
        b.ⵠⲆᐃᐃⵠΔⵠⲆⵠ = a.ⲆⵠᐃⲆΔΔΔΔᐃ ? [{
          ⲆΔⵠⲆᐃ: a.ⲆⵠᐃⲆΔΔΔΔᐃ
        }] : [];
        b.ΔⲆᐃⵠᐃΔᐃᐃᐃ = a.ⵠⲆΔᐃΔⲆᐃⲆΔ ? [{
          ⲆΔⵠⲆᐃ: a.ⵠⲆΔᐃΔⲆᐃⲆΔ
        }] : [];
        b.ⵠⵠΔᐃⵠᐃᐃΔⵠ = a.ⵠᐃΔΔⲆⵠᐃⲆΔ ? [{
          ⲆΔⵠⲆᐃ: a.ⵠᐃΔΔⲆⵠᐃⲆΔ
        }] : [];
        b.ΔΔⵠΔᐃᐃΔⲆΔ = [];
        b.ⲆⵠⵠᐃΔ = j.ΔⲆΔⵠⵠ && !b.ΔΔΔⵠᐃΔᐃ;
        if (j.Ⲇ !== undefined && j.Ⲇ && j.ΔᐃᐃΔᐃⲆⵠ) {
          j.ⲆⵠᐃⲆⲆⵠᐃⲆΔ();
        }
        j.ⵠᐃᐃᐃᐃ.push(b);
        if (b.ⲆⲆΔΔⲆⵠⲆⵠⵠ) {
          b.ⵠᐃᐃⲆΔ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ᐃⵠⲆⵠⲆⲆⵠΔⵠ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var b = this;
        var c = null;
        if (!j.ⲆΔᐃΔᐃΔᐃ) {
          if (typeof b.ⲆⵠⵠᐃⲆ == "string") {
            b.ⲆⵠⵠᐃⲆ = [b.ⲆⵠⵠᐃⲆ];
          }
          for (var e = 0; e < b.ⲆⵠⵠᐃⲆ.length; e++) {
            var f;
            var g;
            if (b.ΔⲆⵠΔΔⲆⵠ && b.ΔⲆⵠΔΔⲆⵠ[e]) {
              f = b.ΔⲆⵠΔΔⲆⵠ[e];
            } else {
              if (typeof (g = b.ⲆⵠⵠᐃⲆ[e]) != "string") {
                b.ΔⵠΔᐃⵠ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(f = /^data:audio\/([^;,]+);/i.exec(g))) {
                f = /\.([^.]+)$/.exec(g.split("?", 1)[0]);
              }
              f &&= f[1].toLowerCase();
            }
            if (!f) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (f && j.ⲆⲆᐃⵠⵠΔΔⲆⲆ(f)) {
              c = b.ⲆⵠⵠᐃⲆ[e];
              break;
            }
          }
          if (c) {
            b.ⲆⵠⵠᐃⲆ = c;
            b.ⲆⲆⵠⲆΔ = "loading";
            if (za.location.protocol === "https:" && c.slice(0, 5) === "http:") {
              b.ΔΔΔⵠᐃΔᐃ = true;
              b.ⲆⵠⵠᐃΔ = false;
            }
            new d(b);
            if (b.ⲆⵠⵠᐃΔ) {
              a(b);
            }
            return b;
          } else {
            b.ΔⵠΔᐃⵠ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        b.ΔⵠΔᐃⵠ("loaderror", null, "No audio support.");
      },
      play: function (b, c) {
        var k = this;
        var e = null;
        if (typeof b == "number") {
          e = b;
          b = null;
        } else {
          if (typeof b == "string" && k.ⲆⲆⵠⲆΔ === "loaded" && !k.ΔᐃⵠΔᐃ[b]) {
            return null;
          }
          if (b === undefined) {
            b = "__default";
            var f = 0;
            for (var n = 0; n < k.ⵠᐃΔΔⲆ.length; n++) {
              if (k.ⵠᐃΔΔⲆ[n].ᐃⲆⵠᐃᐃ && !k.ⵠᐃΔΔⲆ[n].ΔΔᐃⲆΔ) {
                f++;
                e = k.ⵠᐃΔΔⲆ[n].ᐃⲆⵠⲆ;
              }
            }
            if (f === 1) {
              b = null;
            } else {
              e = null;
            }
          }
        }
        var o = e ? k.ⲆΔΔⵠⲆ(e) : k.ⵠⵠΔⲆⵠⵠᐃⲆᐃ();
        if (!o) {
          return null;
        }
        if (e && !b) {
          b = o.ΔᐃⵠΔᐃ || "__default";
        }
        if (k.ⲆⲆⵠⲆΔ !== "loaded") {
          o.ΔᐃⵠΔᐃ = b;
          o.ΔΔᐃⲆΔ = false;
          var h = o.ᐃⲆⵠⲆ;
          k.ⵠᐃᐃⲆΔ.push({
            event: "play",
            action: function () {
              k.play(h);
            }
          });
          return h;
        }
        if (e && !o.ᐃⲆⵠᐃᐃ) {
          if (!c) {
            setTimeout(function () {
              k.ΔⵠΔᐃⵠ("play", o.ᐃⲆⵠⲆ);
            }, 0);
          }
          return o.ᐃⲆⵠⲆ;
        }
        if (k.ⲆⵠⵠᐃΔ) {
          j.ΔΔΔᐃⲆⵠⵠ();
        }
        var l = Math.max(0, o.ΔⲆⲆΔⵠ > 0 ? o.ΔⲆⲆΔⵠ : k.ΔᐃⵠΔᐃ[b][0] / 1000);
        var g = Math.max(0, (k.ΔᐃⵠΔᐃ[b][0] + k.ΔᐃⵠΔᐃ[b][1]) / 1000 - l);
        var q = g * 1000 / Math.abs(o.ⵠΔᐃⲆⵠ);
        o.ᐃⲆⵠᐃᐃ = false;
        o.ΔΔᐃⲆΔ = false;
        o.ΔᐃⵠΔᐃ = b;
        o.ΔⲆⲆΔⵠ = l;
        o.ⲆⲆᐃⵠΔ = k.ΔᐃⵠΔᐃ[b][0] / 1000;
        o.ⲆⲆⵠᐃⵠᐃᐃ = (k.ΔᐃⵠΔᐃ[b][0] + k.ΔᐃⵠΔᐃ[b][1]) / 1000;
        o.ⲆᐃΔⲆⲆ = !!o.ⲆᐃΔⲆⲆ || !!k.ΔᐃⵠΔᐃ[b][2];
        var d = o.ᐃΔᐃⲆ;
        if (k.ⲆⵠⵠᐃΔ) {
          function a() {
            k.ⲆⲆᐃᐃⲆⲆⲆⲆΔ(o);
            var a = o.ⲆⵠΔΔᐃ || k.ⲆⵠΔΔᐃ ? 0 : o.ᐃⲆⲆⵠᐃ;
            d.gain.setValueAtTime(a, j.Ⲇ.currentTime);
            o.ΔᐃⵠⵠⵠΔⵠ = j.Ⲇ.currentTime;
            if (d.ᐃⲆⲆᐃΔ.start === undefined) {
              if (o.ⲆᐃΔⲆⲆ) {
                d.ᐃⲆⲆᐃΔ.ⵠΔᐃⵠΔⲆⵠᐃⲆ(0, l, 86400);
              } else {
                d.ᐃⲆⲆᐃΔ.ⵠΔᐃⵠΔⲆⵠᐃⲆ(0, l, g);
              }
            } else if (o.ⲆᐃΔⲆⲆ) {
              d.ᐃⲆⲆᐃΔ.start(0, l, 86400);
            } else {
              d.ᐃⲆⲆᐃΔ.start(0, l, g);
            }
            if (q !== Infinity) {
              k.ⲆⲆᐃⲆΔΔΔ[o.ᐃⲆⵠⲆ] = setTimeout(k.ΔΔᐃⲆΔ.bind(k, o), q);
            }
            if (!c) {
              setTimeout(function () {
                k.ΔⵠΔᐃⵠ("play", o.ᐃⲆⵠⲆ);
              }, 0);
            }
          }
          var t = j.state === "running";
          if (k.ⲆⲆⵠⲆΔ === "loaded" && t) {
            a();
          } else {
            var m = t || k.ⲆⲆⵠⲆΔ !== "loaded" ? "load" : "resume";
            k.once(m, a, t ? o.ᐃⲆⵠⲆ : null);
            k.ΔᐃᐃΔΔⵠΔ(o.ᐃⲆⵠⲆ);
          }
        } else {
          function a() {
            d.currentTime = l;
            d.muted = o.ⲆⵠΔΔᐃ || k.ⲆⵠΔΔᐃ || j.ⲆⵠΔΔᐃ || d.muted;
            d.volume = o.ᐃⲆⲆⵠᐃ * j.volume();
            d.playbackRate = o.ⵠΔᐃⲆⵠ;
            d.play();
            if (q !== Infinity) {
              k.ⲆⲆᐃⲆΔΔΔ[o.ᐃⲆⵠⲆ] = setTimeout(k.ΔΔᐃⲆΔ.bind(k, o), q);
            }
            if (!c) {
              k.ΔⵠΔᐃⵠ("play", o.ᐃⲆⵠⲆ);
            }
          }
          var p = k.ⲆⲆⵠⲆΔ === "loaded" && (za && za.ⵠⵠⲆᐃᐃⵠΔΔΔ || !d.readyState && j.ᐃⲆᐃᐃⲆ.ᐃᐃⵠΔⵠΔᐃΔⲆ);
          if (d.readyState === 4 || p) {
            a();
          } else {
            function b() {
              a();
              d.removeEventListener(j.ⵠΔⵠⲆΔⵠⵠ, b, false);
            }
            d.addEventListener(j.ⵠΔⵠⲆΔⵠⵠ, b, false);
            k.ΔᐃᐃΔΔⵠΔ(o.ᐃⲆⵠⲆ);
          }
        }
        return o.ᐃⲆⵠⲆ;
      },
      pause: function (a) {
        var b = this;
        if (b.ⲆⲆⵠⲆΔ !== "loaded") {
          b.ⵠᐃᐃⲆΔ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ᐃΔⵠᐃΔ(a), d = 0; d < c.length; d++) {
          b.ΔᐃᐃΔΔⵠΔ(c[d]);
          var e = b.ⲆΔΔⵠⲆ(c[d]);
          if (e && !e.ᐃⲆⵠᐃᐃ && (e.ΔⲆⲆΔⵠ = b.ΔⲆᐃⵠᐃᐃⲆ(c[d]), e.ⲆⲆᐃᐃⲆⲆⲆ = 0, e.ᐃⲆⵠᐃᐃ = true, b.ⲆΔᐃᐃⲆⵠΔ(c[d]), e.ᐃΔᐃⲆ)) {
            if (b.ⲆⵠⵠᐃΔ) {
              if (!e.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ) {
                continue;
              }
              if (e.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.stop === undefined) {
                e.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.ⲆᐃΔⲆⲆΔⲆⲆⲆ(0);
              } else {
                e.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.stop(0);
              }
              b.ΔᐃΔⲆΔΔᐃ(e.ᐃΔᐃⲆ);
            } else if (!isNaN(e.ᐃΔᐃⲆ.duration) || e.ᐃΔᐃⲆ.duration === Infinity) {
              e.ᐃΔᐃⲆ.pause();
            }
          }
          if (!arguments[1]) {
            b.ΔⵠΔᐃⵠ("pause", e ? e.ᐃⲆⵠⲆ : null);
          }
        }
        return b;
      },
      stop: function (b, c) {
        var d = this;
        if (d.ⲆⲆⵠⲆΔ !== "loaded") {
          d.ⵠᐃᐃⲆΔ.push({
            event: "stop",
            action: function () {
              d.stop(b);
            }
          });
          return d;
        }
        for (var e = d.ᐃΔⵠᐃΔ(b), f = 0; f < e.length; f++) {
          d.ΔᐃᐃΔΔⵠΔ(e[f]);
          var g = d.ⲆΔΔⵠⲆ(e[f]);
          if (g) {
            g.ΔⲆⲆΔⵠ = g.ⲆⲆᐃⵠΔ || 0;
            g.ⲆⲆᐃᐃⲆⲆⲆ = 0;
            g.ᐃⲆⵠᐃᐃ = true;
            g.ΔΔᐃⲆΔ = true;
            d.ⲆΔᐃᐃⲆⵠΔ(e[f]);
            if (g.ᐃΔᐃⲆ) {
              if (d.ⲆⵠⵠᐃΔ) {
                if (g.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ) {
                  if (g.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.stop === undefined) {
                    g.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.ⲆᐃΔⲆⲆΔⲆⲆⲆ(0);
                  } else {
                    g.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.stop(0);
                  }
                  d.ΔᐃΔⲆΔΔᐃ(g.ᐃΔᐃⲆ);
                }
              } else if (!isNaN(g.ᐃΔᐃⲆ.duration) || g.ᐃΔᐃⲆ.duration === Infinity) {
                g.ᐃΔᐃⲆ.currentTime = g.ⲆⲆᐃⵠΔ || 0;
                g.ᐃΔᐃⲆ.pause();
              }
            }
            if (!c) {
              d.ΔⵠΔᐃⵠ("stop", g.ᐃⲆⵠⲆ);
            }
          }
        }
        return d;
      },
      ⵠⵠΔᐃΔⵠⵠ: function (b, c) {
        var d = this;
        if (d.ⲆⲆⵠⲆΔ !== "loaded") {
          d.ⵠᐃᐃⲆΔ.push({
            event: "mute",
            action: function () {
              d.ⵠⵠΔᐃΔⵠⵠ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ⲆⵠΔΔᐃ;
          }
          d.ⲆⵠΔΔᐃ = b;
        }
        for (var e = d.ᐃΔⵠᐃΔ(c), f = 0; f < e.length; f++) {
          var g = d.ⲆΔΔⵠⲆ(e[f]);
          if (g) {
            g.ⲆⵠΔΔᐃ = b;
            if (d.ⲆⵠⵠᐃΔ && g.ᐃΔᐃⲆ) {
              g.ᐃΔᐃⲆ.gain.setValueAtTime(b ? 0 : g.ᐃⲆⲆⵠᐃ, j.Ⲇ.currentTime);
            } else if (g.ᐃΔᐃⲆ) {
              g.ᐃΔᐃⲆ.muted = !!j.ⲆⵠΔΔᐃ || b;
            }
            d.ΔⵠΔᐃⵠ("mute", g.ᐃⲆⵠⲆ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ᐃⲆⲆⵠᐃ;
        }
        if (g.length === 1 || g.length === 2 && g[1] === undefined) {
          if (f.ᐃΔⵠᐃΔ().indexOf(g[0]) >= 0) {
            c = parseInt(g[0], 10);
          } else {
            b = parseFloat(g[0]);
          }
        } else if (g.length >= 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[1], 10);
        }
        if (b === undefined || b < 0 || b > 1) {
          if (d = c ? f.ⲆΔΔⵠⲆ(c) : f.ⵠᐃΔΔⲆ[0]) {
            return d.ᐃⲆⲆⵠᐃ;
          } else {
            return 0;
          }
        }
        if (f.ⲆⲆⵠⲆΔ !== "loaded") {
          f.ⵠᐃᐃⲆΔ.push({
            event: "volume",
            action: function () {
              f.volume.apply(f, g);
            }
          });
          return f;
        }
        if (c === undefined) {
          f.ᐃⲆⲆⵠᐃ = b;
        }
        c = f.ᐃΔⵠᐃΔ(c);
        for (var a = 0; a < c.length; a++) {
          if (d = f.ⲆΔΔⵠⲆ(c[a])) {
            d.ᐃⲆⲆⵠᐃ = b;
            if (!g[2]) {
              f.ⲆΔᐃᐃⲆⵠΔ(c[a]);
            }
            if (f.ⲆⵠⵠᐃΔ && d.ᐃΔᐃⲆ && !d.ⲆⵠΔΔᐃ) {
              d.ᐃΔᐃⲆ.gain.setValueAtTime(b, j.Ⲇ.currentTime);
            } else if (d.ᐃΔᐃⲆ && !d.ⲆⵠΔΔᐃ) {
              d.ᐃΔᐃⲆ.volume = b * j.volume();
            }
            f.ΔⵠΔᐃⵠ("volume", d.ᐃⲆⵠⲆ);
          }
        }
        return f;
      },
      fade: function (b, e, f, i) {
        var k = this;
        var a = Math.abs(b - e);
        var n = b > e ? "out" : "in";
        var o = a / 0.01;
        var p = o > 0 ? f / o : f;
        if (p < 4) {
          o = Math.ceil(o / (4 / p));
          p = 4;
        }
        if (k.ⲆⲆⵠⲆΔ !== "loaded") {
          k.ⵠᐃᐃⲆΔ.push({
            event: "fade",
            action: function () {
              k.fade(b, e, f, i);
            }
          });
          return k;
        }
        k.volume(b, i);
        for (var q = k.ᐃΔⵠᐃΔ(i), g = 0; g < q.length; g++) {
          var r = k.ⲆΔΔⵠⲆ(q[g]);
          if (r) {
            if (!i) {
              k.ⲆΔᐃᐃⲆⵠΔ(q[g]);
            }
            if (k.ⲆⵠⵠᐃΔ && !r.ⲆⵠΔΔᐃ) {
              var s = j.Ⲇ.currentTime;
              var t = s + f / 1000;
              r.ᐃⲆⲆⵠᐃ = b;
              r.ᐃΔᐃⲆ.gain.setValueAtTime(b, s);
              r.ᐃΔᐃⲆ.gain.linearRampToValueAtTime(e, t);
            }
            var w = b;
            r.Δⵠᐃⵠⵠᐃⵠ = setInterval(function (a, c) {
              if (o > 0) {
                w += n === "in" ? 0.01 : -0.01;
              }
              w = Math.max(0, w);
              w = Math.min(1, w);
              w = Math.round(w * 100) / 100;
              if (k.ⲆⵠⵠᐃΔ) {
                if (i === undefined) {
                  k.ᐃⲆⲆⵠᐃ = w;
                }
                c.ᐃⲆⲆⵠᐃ = w;
              } else {
                k.volume(w, a, true);
              }
              if (e < b && w <= e || e > b && w >= e) {
                clearInterval(c.Δⵠᐃⵠⵠᐃⵠ);
                c.Δⵠᐃⵠⵠᐃⵠ = null;
                k.volume(e, a);
                k.ΔⵠΔᐃⵠ("fade", a);
              }
            }.bind(k, q[g], r), p);
          }
        }
        return k;
      },
      ⲆΔᐃᐃⲆⵠΔ: function (a) {
        var b = this;
        var c = b.ⲆΔΔⵠⲆ(a);
        if (c && c.Δⵠᐃⵠⵠᐃⵠ) {
          if (b.ⲆⵠⵠᐃΔ) {
            c.ᐃΔᐃⲆ.gain.cancelScheduledValues(j.Ⲇ.currentTime);
          }
          clearInterval(c.Δⵠᐃⵠⵠᐃⵠ);
          c.Δⵠᐃⵠⵠᐃⵠ = null;
          b.ΔⵠΔᐃⵠ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ⲆᐃΔⲆⲆ;
        }
        if (g.length === 1) {
          if (typeof g[0] != "boolean") {
            return !!(d = f.ⲆΔΔⵠⲆ(parseInt(g[0], 10))) && d.ⲆᐃΔⲆⲆ;
          }
          b = g[0];
          f.ⲆᐃΔⲆⲆ = b;
        } else if (g.length === 2) {
          b = g[0];
          c = parseInt(g[1], 10);
        }
        for (var h = f.ᐃΔⵠᐃΔ(c), a = 0; a < h.length; a++) {
          if (d = f.ⲆΔΔⵠⲆ(h[a])) {
            d.ⲆᐃΔⲆⲆ = b;
            if (f.ⲆⵠⵠᐃΔ && d.ᐃΔᐃⲆ && d.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ) {
              d.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.loop = b;
              if (b) {
                d.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.loopStart = d.ⲆⲆᐃⵠΔ || 0;
                d.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.loopEnd = d.ⲆⲆⵠᐃⵠᐃᐃ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          c = f.ⵠᐃΔΔⲆ[0].ᐃⲆⵠⲆ;
        } else if (g.length === 1) {
          if (f.ᐃΔⵠᐃΔ().indexOf(g[0]) >= 0) {
            c = parseInt(g[0], 10);
          } else {
            b = parseFloat(g[0]);
          }
        } else if (g.length === 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[1], 10);
        }
        if (typeof b != "number") {
          if (d = f.ⲆΔΔⵠⲆ(c)) {
            return d.ⵠΔᐃⲆⵠ;
          } else {
            return f.ⵠΔᐃⲆⵠ;
          }
        }
        if (f.ⲆⲆⵠⲆΔ !== "loaded") {
          f.ⵠᐃᐃⲆΔ.push({
            event: "rate",
            action: function () {
              f.rate.apply(f, g);
            }
          });
          return f;
        }
        if (c === undefined) {
          f.ⵠΔᐃⲆⵠ = b;
        }
        c = f.ᐃΔⵠᐃΔ(c);
        for (var a = 0; a < c.length; a++) {
          if (d = f.ⲆΔΔⵠⲆ(c[a])) {
            d.ⲆⲆᐃᐃⲆⲆⲆ = f.ΔⲆᐃⵠᐃᐃⲆ(c[a]);
            d.ΔᐃⵠⵠⵠΔⵠ = f.ⲆⵠⵠᐃΔ ? j.Ⲇ.currentTime : d.ΔᐃⵠⵠⵠΔⵠ;
            d.ⵠΔᐃⲆⵠ = b;
            if (f.ⲆⵠⵠᐃΔ && d.ᐃΔᐃⲆ && d.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ) {
              d.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.playbackRate.value = b;
            } else if (d.ᐃΔᐃⲆ) {
              d.ᐃΔᐃⲆ.playbackRate = b;
            }
            var k = f.ΔⲆᐃⵠᐃᐃⲆ(c[a]);
            var l = ((f.ΔᐃⵠΔᐃ[d.ΔᐃⵠΔᐃ][0] + f.ΔᐃⵠΔᐃ[d.ΔᐃⵠΔᐃ][1]) / 1000 - k) * 1000 / Math.abs(d.ⵠΔᐃⲆⵠ);
            if (!!f.ⲆⲆᐃⲆΔΔΔ[c[a]] || !d.ᐃⲆⵠᐃᐃ) {
              f.ΔᐃᐃΔΔⵠΔ(c[a]);
              f.ⲆⲆᐃⲆΔΔΔ[c[a]] = setTimeout(f.ΔΔᐃⲆΔ.bind(f, d), l);
            }
            f.ΔⵠΔᐃⵠ("rate", d.ᐃⲆⵠⲆ);
          }
        }
        return f;
      },
      ΔⲆᐃⵠᐃᐃⲆ: function () {
        var b;
        var c;
        var d = this;
        var f = arguments;
        if (f.length === 0) {
          c = d.ⵠᐃΔΔⲆ[0].ᐃⲆⵠⲆ;
        } else if (f.length === 1) {
          if (d.ᐃΔⵠᐃΔ().indexOf(f[0]) >= 0) {
            c = parseInt(f[0], 10);
          } else {
            c = d.ⵠᐃΔΔⲆ[0].ᐃⲆⵠⲆ;
            b = parseFloat(f[0]);
          }
        } else if (f.length === 2) {
          b = parseFloat(f[0]);
          c = parseInt(f[1], 10);
        }
        if (c === undefined) {
          return d;
        }
        if (d.ⲆⲆⵠⲆΔ !== "loaded") {
          d.ⵠᐃᐃⲆΔ.push({
            event: "seek",
            action: function () {
              d.ΔⲆᐃⵠᐃᐃⲆ.apply(d, f);
            }
          });
          return d;
        }
        var g = d.ⲆΔΔⵠⲆ(c);
        if (g) {
          if (typeof b != "number" || b < 0) {
            if (d.ⲆⵠⵠᐃΔ) {
              var a = d.ⵠΔᐃᐃᐃⵠᐃ(c) ? j.Ⲇ.currentTime - g.ΔᐃⵠⵠⵠΔⵠ : 0;
              var k = g.ⲆⲆᐃᐃⲆⲆⲆ ? g.ⲆⲆᐃᐃⲆⲆⲆ - g.ΔⲆⲆΔⵠ : 0;
              return g.ΔⲆⲆΔⵠ + (k + a * Math.abs(g.ⵠΔᐃⲆⵠ));
            }
            return g.ᐃΔᐃⲆ.currentTime;
          }
          var l = d.ⵠΔᐃᐃᐃⵠᐃ(c);
          if (l) {
            d.pause(c, true);
          }
          g.ΔⲆⲆΔⵠ = b;
          g.ΔΔᐃⲆΔ = false;
          d.ΔᐃᐃΔΔⵠΔ(c);
          if (l) {
            d.play(c, true);
          }
          if (!d.ⲆⵠⵠᐃΔ && g.ᐃΔᐃⲆ) {
            g.ᐃΔᐃⲆ.currentTime = b;
          }
          d.ΔⵠΔᐃⵠ("seek", c);
        }
        return d;
      },
      ⵠΔᐃᐃᐃⵠᐃ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ⲆΔΔⵠⲆ(a);
          return !!c && !c.ᐃⲆⵠᐃᐃ;
        }
        for (var d = 0; d < b.ⵠᐃΔΔⲆ.length; d++) {
          if (!b.ⵠᐃΔΔⲆ[d].ᐃⲆⵠᐃᐃ) {
            return true;
          }
        }
        return false;
      },
      duration: function (a) {
        var b = this;
        var c = b.ᐃᐃᐃᐃⲆⲆⵠ;
        var d = b.ⲆΔΔⵠⲆ(a);
        if (d) {
          c = b.ΔᐃⵠΔᐃ[d.ΔᐃⵠΔᐃ][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.ⲆⲆⵠⲆΔ;
      },
      ⵠᐃᐃᐃⲆᐃⲆ: function () {
        var a = this;
        for (var b = a.ⵠᐃΔΔⲆ, c = 0; c < b.length; c++) {
          if (!b[c].ᐃⲆⵠᐃᐃ) {
            a.stop(b[c].ᐃⲆⵠⲆ);
          }
          if (!a.ⲆⵠⵠᐃΔ) {
            if (!/MSIE |Trident\//.test(j.ᐃⲆᐃᐃⲆ && j.ᐃⲆᐃᐃⲆ.userAgent)) {
              b[c].ᐃΔᐃⲆ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            b[c].ᐃΔᐃⲆ.removeEventListener("error", b[c].ⵠⵠⵠᐃΔΔⲆ, false);
            b[c].ᐃΔᐃⲆ.removeEventListener(j.ⵠΔⵠⲆΔⵠⵠ, b[c].ⲆⵠΔΔᐃⲆΔ, false);
          }
          delete b[c].ᐃΔᐃⲆ;
          a.ΔᐃᐃΔΔⵠΔ(b[c].ᐃⲆⵠⲆ);
          var d = j.ⵠᐃᐃᐃᐃ.indexOf(a);
          if (d >= 0) {
            j.ⵠᐃᐃᐃᐃ.splice(d, 1);
          }
        }
        var g = true;
        for (c = 0; c < j.ⵠᐃᐃᐃᐃ.length; c++) {
          if (j.ⵠᐃᐃᐃᐃ[c].ⲆⵠⵠᐃⲆ === a.ⲆⵠⵠᐃⲆ) {
            g = false;
            break;
          }
        }
        if (f && g) {
          delete f[a.ⲆⵠⵠᐃⲆ];
        }
        j.ⲆΔᐃΔᐃΔᐃ = false;
        a.ⲆⲆⵠⲆΔ = "unloaded";
        a.ⵠᐃΔΔⲆ = [];
        a = null;
        return null;
      },
      on: function (a, b, c, d) {
        var e = this["_on" + a];
        if (typeof b == "function") {
          e.push(d ? {
            id: c,
            ⲆΔⵠⲆᐃ: b,
            once: d
          } : {
            id: c,
            ⲆΔⵠⲆᐃ: b
          });
        }
        return this;
      },
      ⵠᐃⲆΔᐃᐃΔᐃⵠ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        var g = 0;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (g = 0; g < f.length; g++) {
            var h = d === f[g].id;
            if (c === f[g].ⲆΔⵠⲆᐃ && h || !c && h) {
              f.splice(g, 1);
              break;
            }
          }
        } else if (b) {
          e["_on" + b] = [];
        } else {
          var j = Object.keys(e);
          for (g = 0; g < j.length; g++) {
            if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
              e[j[g]] = [];
            }
          }
        }
        return e;
      },
      once: function (a, b, c) {
        this.on(a, b, c, 1);
        return this;
      },
      ΔⵠΔᐃⵠ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        for (var g = f.length - 1; g >= 0; g--) {
          if (!f[g].id || f[g].id === c || b === "load") {
            setTimeout(function (a) {
              a.call(this, c, d);
            }.bind(e, f[g].ⲆΔⵠⲆᐃ), 0);
            if (f[g].once) {
              e.ⵠᐃⲆΔᐃᐃΔᐃⵠ(b, f[g].ⲆΔⵠⲆᐃ, f[g].id);
            }
          }
        }
        return e;
      },
      ᐃⵠΔᐃᐃᐃⵠ: function () {
        var a = this;
        if (a.ⵠᐃᐃⲆΔ.length > 0) {
          var b = a.ⵠᐃᐃⲆΔ[0];
          a.once(b.event, function () {
            a.ⵠᐃᐃⲆΔ.shift();
            a.ᐃⵠΔᐃᐃᐃⵠ();
          });
          b.action();
        }
        return a;
      },
      ΔΔᐃⲆΔ: function (b) {
        var c = this;
        var d = b.ΔᐃⵠΔᐃ;
        if (!c.ⲆⵠⵠᐃΔ && c.ᐃΔᐃⲆ && !c.ᐃΔᐃⲆ.ended) {
          setTimeout(c.ΔΔᐃⲆΔ.bind(c, b), 100);
          return c;
        }
        var e = !!b.ⲆᐃΔⲆⲆ || !!c.ΔᐃⵠΔᐃ[d][2];
        c.ΔⵠΔᐃⵠ("end", b.ᐃⲆⵠⲆ);
        if (!c.ⲆⵠⵠᐃΔ && e) {
          c.stop(b.ᐃⲆⵠⲆ, true).play(b.ᐃⲆⵠⲆ);
        }
        if (c.ⲆⵠⵠᐃΔ && e) {
          c.ΔⵠΔᐃⵠ("play", b.ᐃⲆⵠⲆ);
          b.ΔⲆⲆΔⵠ = b.ⲆⲆᐃⵠΔ || 0;
          b.ⲆⲆᐃᐃⲆⲆⲆ = 0;
          b.ΔᐃⵠⵠⵠΔⵠ = j.Ⲇ.currentTime;
          var f = (b.ⲆⲆⵠᐃⵠᐃᐃ - b.ⲆⲆᐃⵠΔ) * 1000 / Math.abs(b.ⵠΔᐃⲆⵠ);
          c.ⲆⲆᐃⲆΔΔΔ[b.ᐃⲆⵠⲆ] = setTimeout(c.ΔΔᐃⲆΔ.bind(c, b), f);
        }
        if (c.ⲆⵠⵠᐃΔ && !e) {
          b.ᐃⲆⵠᐃᐃ = true;
          b.ΔΔᐃⲆΔ = true;
          b.ΔⲆⲆΔⵠ = b.ⲆⲆᐃⵠΔ || 0;
          b.ⲆⲆᐃᐃⲆⲆⲆ = 0;
          c.ΔᐃᐃΔΔⵠΔ(b.ᐃⲆⵠⲆ);
          c.ΔᐃΔⲆΔΔᐃ(b.ᐃΔᐃⲆ);
          j.ⵠⵠΔⲆΔΔⲆ();
        }
        if (!c.ⲆⵠⵠᐃΔ && !e) {
          c.stop(b.ᐃⲆⵠⲆ);
        }
        return c;
      },
      ΔᐃᐃΔΔⵠΔ: function (a) {
        var b = this;
        if (b.ⲆⲆᐃⲆΔΔΔ[a]) {
          clearTimeout(b.ⲆⲆᐃⲆΔΔΔ[a]);
          delete b.ⲆⲆᐃⲆΔΔΔ[a];
        }
        return b;
      },
      ⲆΔΔⵠⲆ: function (a) {
        for (var b = this, c = 0; c < b.ⵠᐃΔΔⲆ.length; c++) {
          if (a === b.ⵠᐃΔΔⲆ[c].ᐃⲆⵠⲆ) {
            return b.ⵠᐃΔΔⲆ[c];
          }
        }
        return null;
      },
      ⵠⵠΔⲆⵠⵠᐃⲆᐃ: function () {
        var a = this;
        a.ᐃⲆΔⲆΔⵠⵠⲆΔ();
        for (var b = 0; b < a.ⵠᐃΔΔⲆ.length; b++) {
          if (a.ⵠᐃΔΔⲆ[b].ΔΔᐃⲆΔ) {
            return a.ⵠᐃΔΔⲆ[b].reset();
          }
        }
        return new d(a);
      },
      ᐃⲆΔⲆΔⵠⵠⲆΔ: function () {
        var a = this;
        var b = a.ⲆᐃΔⲆᐃᐃᐃΔⵠ;
        var c = 0;
        var d = 0;
        if (a.ⵠᐃΔΔⲆ.length >= b) {
          for (d = 0; d < a.ⵠᐃΔΔⲆ.length; d++) {
            if (a.ⵠᐃΔΔⲆ[d].ΔΔᐃⲆΔ) {
              c++;
            }
          }
          for (d = a.ⵠᐃΔΔⲆ.length - 1; d >= 0; d--) {
            if (c <= b) {
              return;
            }
            if (a.ⵠᐃΔΔⲆ[d].ΔΔᐃⲆΔ) {
              if (a.ⲆⵠⵠᐃΔ && a.ⵠᐃΔΔⲆ[d].ᐃΔᐃⲆ) {
                a.ⵠᐃΔΔⲆ[d].ᐃΔᐃⲆ.disconnect(0);
              }
              a.ⵠᐃΔΔⲆ.splice(d, 1);
              c--;
            }
          }
        }
      },
      ᐃΔⵠᐃΔ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = 0; c < this.ⵠᐃΔΔⲆ.length; c++) {
            b.push(this.ⵠᐃΔΔⲆ[c].ᐃⲆⵠⲆ);
          }
          return b;
        }
        return [a];
      },
      ⲆⲆᐃᐃⲆⲆⲆⲆΔ: function (a) {
        a.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ = j.Ⲇ.createBufferSource();
        a.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.buffer = f[this.ⲆⵠⵠᐃⲆ];
        if (a.ⲆΔⲆᐃⲆ) {
          a.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.connect(a.ⲆΔⲆᐃⲆ);
        } else {
          a.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.connect(a.ᐃΔᐃⲆ);
        }
        a.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.loop = a.ⲆᐃΔⲆⲆ;
        if (a.ⲆᐃΔⲆⲆ) {
          a.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.loopStart = a.ⲆⲆᐃⵠΔ || 0;
          a.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.loopEnd = a.ⲆⲆⵠᐃⵠᐃᐃ;
        }
        a.ᐃΔᐃⲆ.ᐃⲆⲆᐃΔ.playbackRate.value = a.ⵠΔᐃⲆⵠ;
        return this;
      },
      ΔᐃΔⲆΔΔᐃ: function (a) {
        var b = this;
        if (b.ᐃΔΔᐃᐃⵠΔ) {
          a.ᐃⲆⲆᐃΔ.onended = null;
          a.ᐃⲆⲆᐃΔ.disconnect(0);
          try {
            a.ᐃⲆⲆᐃΔ.buffer = b.ᐃΔΔᐃᐃⵠΔ;
          } catch (a) { }
        }
        a.ᐃⲆⲆᐃΔ = null;
        return b;
      }
    };
    function d(a) {
      this.ΔΔⲆⲆⵠⲆⲆ = a;
      this.ⵠΔⵠⵠⲆ();
    }
    d.prototype = {
      ⵠΔⵠⵠⲆ: function () {
        var a = this;
        var b = a.ΔΔⲆⲆⵠⲆⲆ;
        a.ⲆⵠΔΔᐃ = b.ⲆⵠΔΔᐃ;
        a.ⲆᐃΔⲆⲆ = b.ⲆᐃΔⲆⲆ;
        a.ᐃⲆⲆⵠᐃ = b.ᐃⲆⲆⵠᐃ;
        a.ⵠΔᐃⲆⵠ = b.ⵠΔᐃⲆⵠ;
        a.ΔⲆⲆΔⵠ = 0;
        a.ᐃⲆⵠᐃᐃ = true;
        a.ΔΔᐃⲆΔ = true;
        a.ΔᐃⵠΔᐃ = "__default";
        a.ᐃⲆⵠⲆ = ++j.ΔⵠⵠⲆΔᐃⲆ;
        b.ⵠᐃΔΔⲆ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ΔΔⲆⲆⵠⲆⲆ;
        var c = j.ⲆⵠΔΔᐃ || a.ⲆⵠΔΔᐃ || a.ΔΔⲆⲆⵠⲆⲆ.ⲆⵠΔΔᐃ ? 0 : a.ᐃⲆⲆⵠᐃ;
        if (b.ⲆⵠⵠᐃΔ) {
          a.ᐃΔᐃⲆ = j.Ⲇ.createGain === undefined ? j.Ⲇ.ⲆⵠᐃⲆⲆⵠⲆⵠⵠ() : j.Ⲇ.createGain();
          a.ᐃΔᐃⲆ.gain.setValueAtTime(c, j.Ⲇ.currentTime);
          a.ᐃΔᐃⲆ.paused = true;
          a.ᐃΔᐃⲆ.connect(j.ᐃᐃⵠᐃΔⲆΔ);
        } else {
          a.ᐃΔᐃⲆ = new Audio();
          a.ⵠⵠⵠᐃΔΔⲆ = a.ⲆΔⵠΔⲆⲆᐃⲆᐃ.bind(a);
          a.ᐃΔᐃⲆ.addEventListener("error", a.ⵠⵠⵠᐃΔΔⲆ, false);
          a.ⲆⵠΔΔᐃⲆΔ = a.ΔᐃΔΔᐃⲆⲆΔΔ.bind(a);
          a.ᐃΔᐃⲆ.addEventListener(j.ⵠΔⵠⲆΔⵠⵠ, a.ⲆⵠΔΔᐃⲆΔ, false);
          a.ᐃΔᐃⲆ.src = b.ⲆⵠⵠᐃⲆ;
          a.ᐃΔᐃⲆ.preload = "auto";
          a.ᐃΔᐃⲆ.volume = c * j.volume();
          a.ᐃΔᐃⲆ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ΔΔⲆⲆⵠⲆⲆ;
        a.ⲆⵠΔΔᐃ = b.ⲆⵠΔΔᐃ;
        a.ⲆᐃΔⲆⲆ = b.ⲆᐃΔⲆⲆ;
        a.ᐃⲆⲆⵠᐃ = b.ᐃⲆⲆⵠᐃ;
        a.ⵠΔᐃⲆⵠ = b.ⵠΔᐃⲆⵠ;
        a.ΔⲆⲆΔⵠ = 0;
        a.ⲆⲆᐃᐃⲆⲆⲆ = 0;
        a.ᐃⲆⵠᐃᐃ = true;
        a.ΔΔᐃⲆΔ = true;
        a.ΔᐃⵠΔᐃ = "__default";
        a.ᐃⲆⵠⲆ = ++j.ΔⵠⵠⲆΔᐃⲆ;
        return a;
      },
      ⲆΔⵠΔⲆⲆᐃⲆᐃ: function () {
        var a = this;
        a.ΔΔⲆⲆⵠⲆⲆ.ΔⵠΔᐃⵠ("loaderror", a.ᐃⲆⵠⲆ, a.ᐃΔᐃⲆ.error ? a.ᐃΔᐃⲆ.error.code : 0);
        a.ᐃΔᐃⲆ.removeEventListener("error", a.ⵠⵠⵠᐃΔΔⲆ, false);
      },
      ΔᐃΔΔᐃⲆⲆΔΔ: function () {
        var a = this;
        var b = a.ΔΔⲆⲆⵠⲆⲆ;
        b.ᐃᐃᐃᐃⲆⲆⵠ = Math.ceil(a.ᐃΔᐃⲆ.duration * 10) / 10;
        if (Object.keys(b.ΔᐃⵠΔᐃ).length === 0) {
          b.ΔᐃⵠΔᐃ = {
            ⲆᐃⲆᐃΔⲆⵠⵠΔ: [0, b.ᐃᐃᐃᐃⲆⲆⵠ * 1000]
          };
        }
        if (b.ⲆⲆⵠⲆΔ !== "loaded") {
          b.ⲆⲆⵠⲆΔ = "loaded";
          b.ΔⵠΔᐃⵠ("load");
          b.ᐃⵠΔᐃᐃᐃⵠ();
        }
        a.ᐃΔᐃⲆ.removeEventListener(j.ⵠΔⵠⲆΔⵠⵠ, a.ⲆⵠΔΔᐃⲆΔ, false);
      }
    };
    var f = {};
    function a(a) {
      var b = a.ⲆⵠⵠᐃⲆ;
      if (f[b]) {
        a.ᐃᐃᐃᐃⲆⲆⵠ = f[b].duration;
        h(a);
        return;
      }
      if (/^data:[^;]+;base64,/.test(b)) {
        for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
          d[e] = c.charCodeAt(e);
        }
        m(d.buffer, a);
      } else {
        var g = new XMLHttpRequest();
        g.open("GET", b, true);
        g.responseType = "arraybuffer";
        g.onload = function () {
          var b = (g.status + "")[0];
          if (b === "0" || b === "2" || b === "3") {
            m(g.response, a);
          } else {
            a.ΔⵠΔᐃⵠ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
          }
        };
        g.onerror = function () {
          if (a.ⲆⵠⵠᐃΔ) {
            a.ΔΔΔⵠᐃΔᐃ = true;
            a.ⲆⵠⵠᐃΔ = false;
            a.ⵠᐃΔΔⲆ = [];
            delete f[b];
            a.load();
          }
        };
        k(g);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function m(a, b) {
      j.Ⲇ.decodeAudioData(a, function (a) {
        if (a && b.ⵠᐃΔΔⲆ.length > 0) {
          f[b.ⲆⵠⵠᐃⲆ] = a;
          h(b, a);
        }
      }, function () {
        b.ΔⵠΔᐃⵠ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function h(a, b) {
      if (b && !a.ᐃᐃᐃᐃⲆⲆⵠ) {
        a.ᐃᐃᐃᐃⲆⲆⵠ = b.duration;
      }
      if (Object.keys(a.ΔᐃⵠΔᐃ).length === 0) {
        a.ΔᐃⵠΔᐃ = {
          ⲆᐃⲆᐃΔⲆⵠⵠΔ: [0, a.ᐃᐃᐃᐃⲆⲆⵠ * 1000]
        };
      }
      if (a.ⲆⲆⵠⲆΔ !== "loaded") {
        a.ⲆⲆⵠⲆΔ = "loaded";
        a.ΔⵠΔᐃⵠ("load");
        a.ᐃⵠΔᐃᐃᐃⵠ();
      }
    }
    function i() {
      try {
        if (typeof AudioContext != "undefined") {
          j.Ⲇ = new AudioContext();
        } else if (typeof ΔⵠⵠⲆᐃΔⲆᐃΔ != "undefined") {
          j.Ⲇ = new ΔⵠⵠⲆᐃΔⲆᐃΔ();
        } else {
          j.ΔⲆΔⵠⵠ = false;
        }
      } catch (a) {
        j.ΔⲆΔⵠⵠ = false;
      }
      var a = /iP(hone|od|ad)/.test(j.ᐃⲆᐃᐃⲆ && j.ᐃⲆᐃᐃⲆ.platform);
      var b = j.ᐃⲆᐃᐃⲆ && j.ᐃⲆᐃᐃⲆ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[1], 10) : null;
      if (a && c && c < 9) {
        var d = /safari/.test(j.ᐃⲆᐃᐃⲆ && j.ᐃⲆᐃᐃⲆ.userAgent.toLowerCase());
        if (j.ᐃⲆᐃᐃⲆ && j.ᐃⲆᐃᐃⲆ.ⵠᐃΔΔᐃⵠⵠᐃⵠ && !d || j.ᐃⲆᐃᐃⲆ && !j.ᐃⲆᐃᐃⲆ.ⵠᐃΔΔᐃⵠⵠᐃⵠ && !d) {
          j.ΔⲆΔⵠⵠ = false;
        }
      }
      if (j.ΔⲆΔⵠⵠ) {
        j.ᐃᐃⵠᐃΔⲆΔ = j.Ⲇ.createGain === undefined ? j.Ⲇ.ⲆⵠᐃⲆⲆⵠⲆⵠⵠ() : j.Ⲇ.createGain();
        j.ᐃᐃⵠᐃΔⲆΔ.gain.value = j.ⲆⵠΔΔᐃ ? 0 : 1;
        j.ᐃᐃⵠᐃΔⲆΔ.connect(j.Ⲇ.destination);
      }
      j.ⲆⵠⵠᐃⵠΔᐃ();
    }
    if (typeof ᐃᐃᐃⵠᐃᐃⵠ == "function" && ᐃᐃᐃⵠᐃᐃⵠ.ⵠⵠⵠΔⵠⲆⵠ) {
      ᐃᐃᐃⵠᐃᐃⵠ([], function () {
        return {
          Howler: j,
          Howl: c
        };
      });
    }
    if (typeof ⲆⲆⵠⲆⲆΔⵠ != "undefined") {
      ⲆⲆⵠⲆⲆΔⵠ.Howler = j;
      ⲆⲆⵠⲆⲆΔⵠ.Howl = c;
    }
    if (typeof za != "undefined") {
      za.ⲆᐃⲆΔⵠᐃⵠ = b;
      za.Howler = j;
      za.Howl = c;
      za.ᐃⲆΔⵠⵠΔⵠ = d;
    } else if (typeof ⵠΔⲆⵠᐃⲆΔ != "undefined") {
      ⵠΔⲆⵠᐃⲆΔ.ⲆᐃⲆΔⵠᐃⵠ = b;
      ⵠΔⲆⵠᐃⲆΔ.Howler = j;
      ⵠΔⲆⵠᐃⲆΔ.Howl = c;
      ⵠΔⲆⵠᐃⲆΔ.ᐃⲆΔⵠⵠΔⵠ = d;
    }
  })();
  (function () {
    ⲆᐃⲆΔⵠᐃⵠ.prototype.ΔΔⲆᐃⵠ = [0, 0, 0];
    ⲆᐃⲆΔⵠᐃⵠ.prototype.ΔΔᐃΔⲆ = [0, 0, -1, 0, 1, 0];
    ⲆᐃⲆΔⵠᐃⵠ.prototype.ᐃⵠⲆⵠᐃⵠΔ = function (a) {
      var b = this;
      if (!b.Ⲇ || !b.Ⲇ.listener) {
        return b;
      }
      for (var c = b.ⵠᐃᐃᐃᐃ.length - 1; c >= 0; c--) {
        b.ⵠᐃᐃᐃᐃ[c].ᐃⵠⲆⵠᐃⵠΔ(a);
      }
      return b;
    };
    ⲆᐃⲆΔⵠᐃⵠ.prototype.ⵠΔⵠΔ = function (a, b, c) {
      var d = this;
      if (d.Ⲇ && d.Ⲇ.listener) {
        b = typeof b != "number" ? d.ΔΔⲆᐃⵠ[1] : b;
        c = typeof c != "number" ? d.ΔΔⲆᐃⵠ[2] : c;
        if (typeof a != "number") {
          return d.ΔΔⲆᐃⵠ;
        } else {
          d.ΔΔⲆᐃⵠ = [a, b, c];
          d.Ⲇ.listener.setPosition(d.ΔΔⲆᐃⵠ[0], d.ΔΔⲆᐃⵠ[1], d.ΔΔⲆᐃⵠ[2]);
          return d;
        }
      } else {
        return d;
      }
    };
    ⲆᐃⲆΔⵠᐃⵠ.prototype.orientation = function (b, c, d, e, f, g) {
      var h = this;
      if (!h.Ⲇ || !h.Ⲇ.listener) {
        return h;
      }
      var j = h.ΔΔᐃΔⲆ;
      c = typeof c != "number" ? j[1] : c;
      d = typeof d != "number" ? j[2] : d;
      e = typeof e != "number" ? j[3] : e;
      f = typeof f != "number" ? j[4] : f;
      g = typeof g != "number" ? j[5] : g;
      if (typeof b != "number") {
        return j;
      } else {
        h.ΔΔᐃΔⲆ = [b, c, d, e, f, g];
        h.Ⲇ.listener.setOrientation(b, c, d, e, f, g);
        return h;
      }
    };
    Howl.prototype.ⵠΔⵠⵠⲆ = function (a) {
      return function (b) {
        var c = this;
        c.ΔΔᐃΔⲆ = b.orientation || [1, 0, 0];
        c.ⲆⲆⵠᐃⲆⵠⲆ = b.ᐃⵠⲆⵠᐃⵠΔ || null;
        c.ΔΔⲆᐃⵠ = b.ⵠΔⵠΔ || null;
        c.ⵠⲆⲆⲆΔ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : 1,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
        };
        c.ⲆⲆⵠⵠᐃᐃᐃΔᐃ = b.ΔΔᐃΔⲆᐃⲆⵠⵠ ? [{
          ⲆΔⵠⲆᐃ: b.ΔΔᐃΔⲆᐃⲆⵠⵠ
        }] : [];
        c.ᐃΔⵠᐃⲆΔⵠⲆⲆ = b.ⵠᐃΔᐃΔⲆⵠⵠⵠ ? [{
          ⲆΔⵠⲆᐃ: b.ⵠᐃΔᐃΔⲆⵠⵠⵠ
        }] : [];
        c.ⵠⵠⵠᐃΔⲆᐃⵠᐃ = b.ⵠⵠⵠⲆⵠⵠⵠⲆⲆ ? [{
          ⲆΔⵠⲆᐃ: b.ⵠⵠⵠⲆⵠⵠⵠⲆⲆ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ⵠΔⵠⵠⲆ);
    Howl.prototype.ᐃⵠⲆⵠᐃⵠΔ = function (c, d) {
      var e = this;
      if (!e.ⲆⵠⵠᐃΔ) {
        return e;
      }
      if (e.ⲆⲆⵠⲆΔ !== "loaded") {
        e.ⵠᐃᐃⲆΔ.push({
          event: "stereo",
          action: function () {
            e.ᐃⵠⲆⵠᐃⵠΔ(c, d);
          }
        });
        return e;
      }
      var f = Howler.Ⲇ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (d === undefined) {
        if (typeof c != "number") {
          return e.ⲆⲆⵠᐃⲆⵠⲆ;
        }
        e.ⲆⲆⵠᐃⲆⵠⲆ = c;
        e.ΔΔⲆᐃⵠ = [c, 0, 0];
      }
      for (var g = e.ᐃΔⵠᐃΔ(d), a = 0; a < g.length; a++) {
        var h = e.ⲆΔΔⵠⲆ(g[a]);
        if (h) {
          if (typeof c != "number") {
            return h.ⲆⲆⵠᐃⲆⵠⲆ;
          }
          h.ⲆⲆⵠᐃⲆⵠⲆ = c;
          h.ΔΔⲆᐃⵠ = [c, 0, 0];
          if (h.ᐃΔᐃⲆ) {
            h.ⵠⲆⲆⲆΔ.panningModel = "equalpower";
            if (!h.ⲆΔⲆᐃⲆ || !h.ⲆΔⲆᐃⲆ.pan) {
              b(h, f);
            }
            if (f === "spatial") {
              h.ⲆΔⲆᐃⲆ.setPosition(c, 0, 0);
            } else {
              h.ⲆΔⲆᐃⲆ.pan.value = c;
            }
          }
          e.ΔⵠΔᐃⵠ("stereo", h.ᐃⲆⵠⲆ);
        }
      }
      return e;
    };
    Howl.prototype.ⵠΔⵠΔ = function (c, d, e, f) {
      var g = this;
      if (!g.ⲆⵠⵠᐃΔ) {
        return g;
      }
      if (g.ⲆⲆⵠⲆΔ !== "loaded") {
        g.ⵠᐃᐃⲆΔ.push({
          event: "pos",
          action: function () {
            g.ⵠΔⵠΔ(c, d, e, f);
          }
        });
        return g;
      }
      d = typeof d != "number" ? 0 : d;
      e = typeof e != "number" ? -0.5 : e;
      if (f === undefined) {
        if (typeof c != "number") {
          return g.ΔΔⲆᐃⵠ;
        }
        g.ΔΔⲆᐃⵠ = [c, d, e];
      }
      for (var a = g.ᐃΔⵠᐃΔ(f), i = 0; i < a.length; i++) {
        var j = g.ⲆΔΔⵠⲆ(a[i]);
        if (j) {
          if (typeof c != "number") {
            return j.ΔΔⲆᐃⵠ;
          }
          j.ΔΔⲆᐃⵠ = [c, d, e];
          if (j.ᐃΔᐃⲆ) {
            if (!j.ⲆΔⲆᐃⲆ || !!j.ⲆΔⲆᐃⲆ.pan) {
              b(j, "spatial");
            }
            j.ⲆΔⲆᐃⲆ.setPosition(c, d, e);
          }
          g.ΔⵠΔᐃⵠ("pos", j.ᐃⲆⵠⲆ);
        }
      }
      return g;
    };
    Howl.prototype.orientation = function (c, d, e, f) {
      var g = this;
      if (!g.ⲆⵠⵠᐃΔ) {
        return g;
      }
      if (g.ⲆⲆⵠⲆΔ !== "loaded") {
        g.ⵠᐃᐃⲆΔ.push({
          event: "orientation",
          action: function () {
            g.orientation(c, d, e, f);
          }
        });
        return g;
      }
      d = typeof d != "number" ? g.ΔΔᐃΔⲆ[1] : d;
      e = typeof e != "number" ? g.ΔΔᐃΔⲆ[2] : e;
      if (f === undefined) {
        if (typeof c != "number") {
          return g.ΔΔᐃΔⲆ;
        }
        g.ΔΔᐃΔⲆ = [c, d, e];
      }
      for (var a = g.ᐃΔⵠᐃΔ(f), i = 0; i < a.length; i++) {
        var j = g.ⲆΔΔⵠⲆ(a[i]);
        if (j) {
          if (typeof c != "number") {
            return j.ΔΔᐃΔⲆ;
          }
          j.ΔΔᐃΔⲆ = [c, d, e];
          if (j.ᐃΔᐃⲆ) {
            if (!j.ⲆΔⲆᐃⲆ) {
              j.ΔΔⲆᐃⵠ ||= g.ΔΔⲆᐃⵠ || [0, 0, -0.5];
              b(j, "spatial");
            }
            j.ⲆΔⲆᐃⲆ.setOrientation(c, d, e);
          }
          g.ΔⵠΔᐃⵠ("orientation", j.ᐃⲆⵠⲆ);
        }
      }
      return g;
    };
    Howl.prototype.ⲆΔΔⲆⲆⵠⵠⵠⵠ = function () {
      var c;
      var d;
      var e;
      var f = this;
      var g = arguments;
      if (!f.ⲆⵠⵠᐃΔ) {
        return f;
      }
      if (g.length === 0) {
        return f.ⵠⲆⲆⲆΔ;
      }
      if (g.length === 1) {
        if (typeof g[0] != "object") {
          if (e = f.ⲆΔΔⵠⲆ(parseInt(g[0], 10))) {
            return e.ⵠⲆⲆⲆΔ;
          } else {
            return f.ⵠⲆⲆⲆΔ;
          }
        }
        c = g[0];
        if (d === undefined) {
          f.ⵠⲆⲆⲆΔ = {
            coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ΔⵠᐃⵠΔΔΔΔΔ,
            coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ⲆᐃᐃⲆⲆⲆΔᐃᐃ,
            coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ΔΔᐃⵠΔΔΔᐃⲆ,
            distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ⵠΔΔⲆᐃᐃΔΔⲆ,
            maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ⵠⵠΔΔΔΔⲆΔⲆ,
            panningModel: c.panningModel !== undefined ? c.panningModel : f.ᐃⵠⲆⲆⵠΔⵠⲆΔ,
            refDistance: c.refDistance !== undefined ? c.refDistance : f.ⲆⵠΔⲆᐃⵠⲆΔᐃ,
            rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ᐃⵠⲆΔΔⲆⲆⵠᐃ
          };
        }
      } else if (g.length === 2) {
        c = g[0];
        d = parseInt(g[1], 10);
      }
      for (var a = f.ᐃΔⵠᐃΔ(d), j = 0; j < a.length; j++) {
        if (e = f.ⲆΔΔⵠⲆ(a[j])) {
          var k = e.ⵠⲆⲆⲆΔ;
          k = {
            coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
            coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
            coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
            distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
            maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
            panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
            refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
            rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
          };
          var m = e.ⲆΔⲆᐃⲆ;
          if (m) {
            m.coneInnerAngle = k.coneInnerAngle;
            m.coneOuterAngle = k.coneOuterAngle;
            m.coneOuterGain = k.coneOuterGain;
            m.distanceModel = k.distanceModel;
            m.maxDistance = k.maxDistance;
            m.panningModel = k.panningModel;
            m.refDistance = k.refDistance;
            m.rolloffFactor = k.rolloffFactor;
          } else {
            e.ΔΔⲆᐃⵠ ||= f.ΔΔⲆᐃⵠ || [0, 0, -0.5];
            b(e, "spatial");
          }
        }
      }
      return f;
    };
    ᐃⲆΔⵠⵠΔⵠ.prototype.ⵠΔⵠⵠⲆ = function (a) {
      return function () {
        var b = this;
        var c = b.ΔΔⲆⲆⵠⲆⲆ;
        b.ΔΔᐃΔⲆ = c.ΔΔᐃΔⲆ;
        b.ⲆⲆⵠᐃⲆⵠⲆ = c.ⲆⲆⵠᐃⲆⵠⲆ;
        b.ΔΔⲆᐃⵠ = c.ΔΔⲆᐃⵠ;
        b.ⵠⲆⲆⲆΔ = c.ⵠⲆⲆⲆΔ;
        a.call(this);
        if (b.ⲆⲆⵠᐃⲆⵠⲆ) {
          c.ᐃⵠⲆⵠᐃⵠΔ(b.ⲆⲆⵠᐃⲆⵠⲆ);
        } else if (b.ΔΔⲆᐃⵠ) {
          c.ⵠΔⵠΔ(b.ΔΔⲆᐃⵠ[0], b.ΔΔⲆᐃⵠ[1], b.ΔΔⲆᐃⵠ[2], b.ᐃⲆⵠⲆ);
        }
      };
    }(ᐃⲆΔⵠⵠΔⵠ.prototype.ⵠΔⵠⵠⲆ);
    ᐃⲆΔⵠⵠΔⵠ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ΔΔⲆⲆⵠⲆⲆ;
        b.ΔΔᐃΔⲆ = c.ΔΔᐃΔⲆ;
        b.ΔΔⲆᐃⵠ = c.ΔΔⲆᐃⵠ;
        b.ⵠⲆⲆⲆΔ = c.ⵠⲆⲆⲆΔ;
        return a.call(this);
      };
    }(ᐃⲆΔⵠⵠΔⵠ.prototype.reset);
    function b(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ⲆΔⲆᐃⲆ = Howler.Ⲇ.createPanner();
        a.ⲆΔⲆᐃⲆ.coneInnerAngle = a.ⵠⲆⲆⲆΔ.coneInnerAngle;
        a.ⲆΔⲆᐃⲆ.coneOuterAngle = a.ⵠⲆⲆⲆΔ.coneOuterAngle;
        a.ⲆΔⲆᐃⲆ.coneOuterGain = a.ⵠⲆⲆⲆΔ.coneOuterGain;
        a.ⲆΔⲆᐃⲆ.distanceModel = a.ⵠⲆⲆⲆΔ.distanceModel;
        a.ⲆΔⲆᐃⲆ.maxDistance = a.ⵠⲆⲆⲆΔ.maxDistance;
        a.ⲆΔⲆᐃⲆ.panningModel = a.ⵠⲆⲆⲆΔ.panningModel;
        a.ⲆΔⲆᐃⲆ.refDistance = a.ⵠⲆⲆⲆΔ.refDistance;
        a.ⲆΔⲆᐃⲆ.rolloffFactor = a.ⵠⲆⲆⲆΔ.rolloffFactor;
        a.ⲆΔⲆᐃⲆ.setPosition(a.ΔΔⲆᐃⵠ[0], a.ΔΔⲆᐃⵠ[1], a.ΔΔⲆᐃⵠ[2]);
        a.ⲆΔⲆᐃⲆ.setOrientation(a.ΔΔᐃΔⲆ[0], a.ΔΔᐃΔⲆ[1], a.ΔΔᐃΔⲆ[2]);
      } else {
        a.ⲆΔⲆᐃⲆ = Howler.Ⲇ.createStereoPanner();
        a.ⲆΔⲆᐃⲆ.pan.value = a.ⲆⲆⵠᐃⲆⵠⲆ;
      }
      a.ⲆΔⲆᐃⲆ.connect(a.ᐃΔᐃⲆ);
      if (!a.ᐃⲆⵠᐃᐃ) {
        a.ΔΔⲆⲆⵠⲆⲆ.pause(a.ᐃⲆⵠⲆ, true).play(a.ᐃⲆⵠⲆ);
      }
    }
  })();
  var Xw = 1;
  var Yw = 1;
  var Zw = {
    ⲆΔᐃᐃⵠΔΔ: 12,
    ⵠⵠΔ: 6,
    ΔᐃⵠΔⲆ: 3,
    ⲆΔⲆⵠⵠ: 2,
    ΔⵠΔΔΔᐃⲆⲆΔ: 5000,
    ΔⵠⲆⲆⵠⵠΔⲆΔ: 12,
    ⲆⵠⲆᐃᐃ: 1,
    ⲆᐃΔⲆᐃⵠΔ: 3000,
    ᐃᐃΔΔⵠⵠⵠΔΔ: 12,
    ᐃΔⲆⲆᐃ: 8,
    ᐃⵠΔᐃΔΔΔⲆⵠ: 5000,
    ᐃⲆΔⵠⵠᐃⲆ: 460000,
    ᐃⲆΔᐃΔᐃⲆⲆⵠ: 5000
  };
  var $w = [];
  $w[-1] = 1;
  $w[28] = 1;
  $w[49] = 1;
  $w[Xr.ⲆⲆⲆᐃᐃⵠΔⲆᐃ] = 2;
  $w[8] = 2;
  $w[1] = 2;
  const _w = 7937697;
  const ax = 7937697 .ⲆⲆᐃⲆⵠⲆΔⲆᐃ;
  const bx = `const ᐃⵠᐃᐃⲆⵠⵠⲆⵠ = (typeof ⵠΔⵠᐃᐃΔΔ === "${ax}") ? 1 : 0; return ᐃⵠᐃᐃⲆⵠⵠⲆⵠ;`;
  $w[3] = 2;
  $w[4] = 2;
  $w[31] = 2;
  $w[32] = 2;
  $w[9] = 2;
  $w[57] = 2;
  $w[0] = 2;
  $w[63] = 2;
  $w[17] = 2;
  $w[5] = 2;
  $w[6] = 2;
  $w[30] = 2;
  $w[Xr.ᐃⲆΔⲆⵠᐃⲆᐃᐃ] = 2;
  $w[18] = 2;
  $w[12] = 2;
  $w[13] = 2;
  $w[14] = 2;
  $w[15] = 2;
  $w[16] = 2;
  $w[33] = 2;
  $w[Xr.ⵠΔⵠⲆⵠⲆⲆᐃᐃ] = 2;
  $w[35] = 2;
  $w[36] = 2;
  const cx = 1696025;
  const dx = 1696025 .ΔⵠΔⲆⲆᐃⲆᐃΔ;
  const ex = `const ⵠΔΔⲆⲆᐃⵠ = (typeof ᐃᐃⲆΔΔⲆⲆ === "${dx}") ? 1 : 0; return ⵠΔΔⲆⲆᐃⵠ;`;
  $w[37] = 2;
  $w[38] = 2;
  $w[39] = 2;
  $w[45] = 2;
  $w[62] = 2;
  $w[54] = 2;
  $w[53] = 2;
  $w[46] = 3;
  $w[50] = 3;
  $w[51] = 3;
  $w[52] = 3;
  ᐃΔΔΔ = [];
  ᐃΔΔΔ[0] = 0;
  ᐃΔΔΔ[1] = 1;
  ᐃΔΔΔ[2] = 1;
  ᐃΔΔΔ[3] = 1;
  ᐃΔΔΔ[4] = 0;
  ᐃΔΔΔ[5] = 0;
  ᐃΔΔΔ[6] = 0;
  ᐃΔΔΔ[7] = 0;
  ᐃΔΔΔ[8] = 0;
  ᐃΔΔΔ[9] = 0;
  ᐃΔΔΔ[10] = 1;
  ᐃΔΔΔ[11] = 1;
  ᐃΔΔΔ[12] = 1;
  ᐃΔΔΔ[13] = 1;
  ᐃΔΔΔ[14] = 1;
  ᐃΔΔΔ[15] = 1;
  ᐃΔΔΔ[16] = 0;
  ᐃΔΔΔ[17] = 0;
  ᐃΔΔΔ[18] = 0;
  ᐃΔΔΔ[19] = 0;
  function fx(a) {
    return za.String.fromCharCode(a);
  }
  ᐃΔΔΔ[20] = 0;
  ᐃΔΔΔ[21] = 0;
  ᐃΔΔΔ[22] = 0;
  ᐃΔΔΔ[23] = 1;
  ᐃΔΔΔ[24] = 1;
  ᐃΔΔΔ[25] = 1;
  ᐃΔΔΔ[26] = 1;
  ᐃΔΔΔ[27] = 1;
  ᐃΔΔΔ[28] = 1;
  ᐃΔΔΔ[29] = 1;
  ᐃΔΔΔ[30] = 1;
  ᐃΔΔΔ[31] = 1;
  ᐃΔΔΔ[32] = 1;
  ᐃΔΔΔ[33] = 1;
  ᐃΔΔΔ[34] = 1;
  ᐃΔΔΔ[35] = 1;
  ᐃΔΔΔ[36] = 1;
  ᐃΔΔΔ[37] = 1;
  ᐃΔΔΔ[38] = 1;
  ᐃΔΔΔ[40] = 0;
  ᐃΔΔΔ[41] = 0;
  ᐃΔΔΔ[42] = 0;
  ᐃΔΔΔ[50] = 1;
  function gx(a) {
    return za.String.fromCharCode(a);
  }
  ᐃΔΔΔ[51] = 1;
  ᐃΔΔΔ[52] = 1;
  ᐃΔΔΔ[55] = 0;
  ᐃΔΔΔ[56] = 0;
  ᐃΔΔΔ[57] = 0;
  ᐃΔΔΔ[58] = 0;
  ⲆΔᐃᐃᐃ = [];
  ⲆΔᐃᐃᐃ[If.ⵠⵠⲆΔΔ] = 0;
  ⲆΔᐃᐃᐃ[1] = 0;
  ⲆΔᐃᐃᐃ[29] = 0;
  ⲆΔᐃᐃᐃ[6] = 0;
  ⲆΔᐃᐃᐃ[3] = -1;
  ⲆΔᐃᐃᐃ[31] = -1;
  ⲆΔᐃᐃᐃ[2] = 0;
  ⲆΔᐃᐃᐃ[4] = 0;
  ⲆΔᐃᐃᐃ[30] = 0;
  ⲆΔᐃᐃᐃ[33] = 0;
  ⲆΔᐃᐃᐃ[32] = 1;
  ⲆΔᐃᐃᐃ[35] = 1;
  ⲆΔᐃᐃᐃ[7] = 1;
  ⲆΔᐃᐃᐃ[8] = 1;
  ⲆΔᐃᐃᐃ[9] = 1;
  ⲆΔᐃᐃᐃ[19] = 1;
  ⲆΔᐃᐃᐃ[50] = 1;
  ⲆΔᐃᐃᐃ[5] = 0;
  ⲆΔᐃᐃᐃ[12] = 1;
  ⲆΔᐃᐃᐃ[13] = 1;
  ⲆΔᐃᐃᐃ[14] = 1;
  ⲆΔᐃᐃᐃ[20] = 1;
  ⲆΔᐃᐃᐃ[52] = 1;
  ⲆΔᐃᐃᐃ[10] = 0;
  ⲆΔᐃᐃᐃ[15] = 1;
  ⲆΔᐃᐃᐃ[16] = 1;
  ⲆΔᐃᐃᐃ[17] = 1;
  ⲆΔᐃᐃᐃ[21] = 1;
  ⲆΔᐃᐃᐃ[51] = 1;
  ⲆΔᐃᐃᐃ[45] = 0;
  ⲆΔᐃᐃᐃ[46] = 1;
  ⲆΔᐃᐃᐃ[47] = 1;
  ⲆΔᐃᐃᐃ[48] = 1;
  ⲆΔᐃᐃᐃ[49] = 1;
  ⲆΔᐃᐃᐃ[53] = 1;
  ⲆΔᐃᐃᐃ[18] = 1;
  ⲆΔᐃᐃᐃ[22] = 1;
  ⲆΔᐃᐃᐃ[23] = 1;
  ⲆΔᐃᐃᐃ[11] = 0;
  ⲆΔᐃᐃᐃ[34] = 1;
  var hx = {
    ΔⵠⵠⵠᐃᐃⲆ: {
      ⵠⵠⵠⲆΔ: null,
      path: ["audio/ambience.mp3"],
      Ⲇᐃ: {
        d2: [90684, 300, Cl],
        d1: [90391, 300, false],
        d0: [90086, 300, false]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ᐃΔⲆⲆΔⲆᐃ: {
      ⵠⵠⵠⲆΔ: null,
      path: ["audio/ambience.mp3"],
      Ⲇᐃ: {
        p0: [89303, 300, kh],
        p2: [89815, 300, false],
        p1: [89549, 300, false]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ᐃᐃⲆⲆΔⵠΔ: {
      ⵠⵠⵠⲆΔ: null,
      path: ["audio/ambience.mp3"],
      Ⲇᐃ: {
        w0: [88195, 300, Cl],
        w3: [89025, 300, Qi],
        w2: [88751, 300, _a],
        w1: [88473, 300, false]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ⲆⲆΔⵠΔΔⲆ: {
      ⵠⵠⵠⲆΔ: null,
      path: ["audio/ambience.mp3"],
      Ⲇᐃ: {
        ⲆⲆⵠΔⲆᐃΔ: [66961, 21223, lj],
        ⲆΔⲆΔⵠᐃⲆ: [54524, 11393, true],
        ⵠⵠΔᐃⲆⵠⲆ: [91022, 400, fk],
        ⵠⵠΔⵠⵠᐃⵠ: [31658, 813, uq],
        ᐃΔΔⵠΔ: [91431, 400, false],
        ᐃⲆⵠᐃⲆᐃΔ: [92249, 500, kh],
        ⵠᐃΔⵠⲆⵠⵠ: [19882, 8301, Co],
        ΔⲆΔⲆᐃᐃⲆ: [30562, 655, true],
        ⲆⲆΔⲆⵠ: [12356, 6965, true],
        ⵠᐃⵠᐃᐃⲆΔ: [66014, 925, lj],
        ⵠⵠⲆᐃΔⵠⵠ: [32604, 21890, true],
        ⵠⲆᐃⲆⵠᐃⵠᐃΔ: [100, 2800, Qe],
        ΔᐃⵠᐃᐃΔⵠ: [3100, 8800, Vq],
        ΔⵠⵠⲆΔ: [28380, 1797, il],
        ⲆΔⲆⵠⵠⵠᐃ: [66961, 21223, true]
      },
      sample: {
        ⵠⲆᐃⲆⵠᐃⵠᐃΔ: 1,
        ΔᐃⵠᐃᐃΔⵠ: 1,
        ⵠᐃΔⵠⲆⵠⵠ: 1,
        ⵠⵠⲆᐃΔⵠⵠ: 1,
        ⲆΔⲆΔⵠᐃⲆ: 1,
        ⲆⲆⵠΔⲆᐃΔ: 1,
        ⲆΔⲆⵠⵠⵠᐃ: 1,
        ⲆⲆΔⲆⵠ: 8,
        ΔⵠⵠⲆΔ: 8,
        ΔⲆΔⲆᐃᐃⲆ: 8,
        ⵠⵠΔⵠⵠᐃⵠ: 8,
        ⵠᐃⵠᐃᐃⲆΔ: 8,
        ⵠⵠΔᐃⲆⵠⲆ: 6,
        ᐃΔΔⵠΔ: 6,
        ᐃⲆⵠᐃⲆᐃΔ: 6
      }
    }
  };
  function ix(b, c, d, e, f, i, a, j, k, h, l) {
    this.r = 1;
    this.ΔⲆⲆΔΔ = b;
    this.ᐃⲆⵠⲆⵠⵠⲆ = b;
    this.ΔᐃⲆ = c;
    this.Δᐃⵠ = d;
    this.fade = e;
    this.ⲆⲆⵠᐃΔΔⵠ = f;
    this.ᐃⲆΔᐃⲆⵠΔ = i;
    this.ΔⲆⵠΔ = a;
    this.ᐃⲆᐃᐃΔⵠᐃ = j;
    this.source = k;
    this.source.ⲆⵠᐃᐃᐃᐃⲆ = k.x + k.w;
    this.source.ⵠΔᐃΔᐃ = k.y + k.ᐃⲆᐃ;
    this.ᐃⲆⵠᐃᐃⵠᐃΔΔ = h;
    this.ⲆⵠⵠⲆⵠᐃᐃ = l;
    this.ⲆⵠⵠⲆⲆᐃⲆ = 0;
    this.ΔⲆⲆⵠⲆⵠⲆ = {
      ⵠᐃᐃᐃ: 5,
      d: 5
    };
    this.ⵠⵠᐃⵠⲆ = function () {
      this.ΔⲆⲆΔΔ -= xx;
      if (this.ΔⲆⲆΔΔ < 0) {
        this.ΔⲆⲆΔΔ = this.ᐃⲆⵠⲆⵠⵠⲆ;
        var a = hx.ⲆⲆΔⵠΔΔⲆ.ⵠⵠⵠⲆΔ.playing(this.ΔᐃⲆ);
        var b = hx.ⲆⲆΔⵠΔΔⲆ.ⵠⵠⵠⲆΔ.playing(this.Δᐃⵠ);
        if (a && !b) {
          var c = this.ΔⲆⵠΔ.volume(this.ΔᐃⲆ) * Yw;
          var d = Yw * (Math.random() * this.ᐃⲆΔᐃⲆⵠΔ + this.ⲆⲆⵠᐃΔΔⵠ);
          this.ΔⲆⵠΔ.fade(c, d, this.fade, this.ΔᐃⲆ);
        } else if (!a && b) {
          c = Yw * this.ΔⲆⵠΔ.volume(this.Δᐃⵠ);
          d = (Math.random() * this.ᐃⲆΔᐃⲆⵠΔ + this.ⲆⲆⵠᐃΔΔⵠ) * Yw;
          this.ΔⲆⵠΔ.fade(c, d, this.fade, this.Δᐃⵠ);
        }
      }
    };
    this.transition = function () {
      this.ΔⲆⲆΔΔ = this.ᐃⲆⵠⲆⵠⵠⲆ;
      this.ΔⲆⲆⵠⲆⵠⲆ.d = this.ΔⲆⲆⵠⲆⵠⲆ.ⵠᐃᐃᐃ;
      if (px.time) {
        this.ΔⲆⵠΔ.fade(0, Yw * this.ⲆⲆⵠᐃΔΔⵠ, this.ᐃⲆᐃᐃΔⵠᐃ, this.ΔᐃⲆ);
        this.ΔⲆⵠΔ.play(this.ΔᐃⲆ);
        if (this.ΔⲆⵠΔ.playing(this.Δᐃⵠ)) {
          var a = this.ΔⲆⵠΔ.volume(this.Δᐃⵠ) * Yw;
          this.ΔⲆⵠΔ.fade(a, 0, this.ᐃⲆᐃᐃΔⵠᐃ, this.Δᐃⵠ);
        }
      } else {
        this.ΔⲆⵠΔ.fade(0, Yw * this.ⲆⲆⵠᐃΔΔⵠ, this.ᐃⲆᐃᐃΔⵠᐃ, this.Δᐃⵠ);
        this.ΔⲆⵠΔ.play(this.Δᐃⵠ);
        if (this.ΔⲆⵠΔ.playing(this.ΔᐃⲆ)) {
          a = Yw * this.ΔⲆⵠΔ.volume(this.ΔᐃⲆ);
          this.ΔⲆⵠΔ.fade(a, 0, this.ᐃⲆᐃᐃΔⵠᐃ, this.ΔᐃⲆ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⲆⵠⵠⲆⲆᐃⲆ) {
        if (ᐃⵠⲆΔ.ⲆⵠⵠⲆⵠᐃᐃ(a, this.ᐃⲆⵠᐃᐃⵠᐃΔΔ)) {
          if (!tx.transition && px.ⲆⲆΔᐃΔ.now < 460000) {
            if (px.time) {
              if (!this.ΔⲆⵠΔ.playing(this.ΔᐃⲆ)) {
                this.ΔⲆⲆⵠⲆⵠⲆ.d -= xx;
                if (this.ΔⲆⲆⵠⲆⵠⲆ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ΔⲆⵠΔ.playing(this.Δᐃⵠ)) {
              this.ΔⲆⲆⵠⲆⵠⲆ.d -= xx;
              if (this.ΔⲆⲆⵠⲆⵠⲆ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⲆⵠⵠⲆⲆᐃⲆ = 0;
          if (this.ΔⲆⵠΔ.playing(this.ΔᐃⲆ)) {
            var b = Yw * this.ΔⲆⵠΔ.volume(this.ΔᐃⲆ);
            this.ΔⲆⵠΔ.fade(b, 0, this.ᐃⲆᐃᐃΔⵠᐃ, this.ΔᐃⲆ);
          }
          if (this.ΔⲆⵠΔ.playing(this.Δᐃⵠ)) {
            b = Yw * this.ΔⲆⵠΔ.volume(this.Δᐃⵠ);
            this.ΔⲆⵠΔ.fade(b, 0, this.ᐃⲆᐃᐃΔⵠᐃ, this.Δᐃⵠ);
          }
        }
      } else if (ᐃⵠⲆΔ.ⲆⵠⵠⲆⵠᐃᐃ(a, this.ⲆⵠⵠⲆⵠᐃᐃ)) {
        this.ⲆⵠⵠⲆⲆᐃⲆ = 1;
        if (!tx.transition && px.ⲆⲆΔᐃΔ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ᐃΔΔ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? tx.ᐃⲆᐃⲆⵠⲆⲆ(this.source.x) : a.x > this.source.ⲆⵠᐃᐃᐃᐃⲆ ? tx.ᐃⲆᐃⲆⵠⲆⲆ(this.source.ⲆⵠᐃᐃᐃᐃⲆ) : b.x;
      d = a.y < this.source.y ? tx.ⵠⵠΔᐃⲆᐃΔ(this.source.y) : a.y > this.source.ⵠΔᐃΔᐃ ? tx.ⵠⵠΔᐃⲆᐃΔ(this.source.ⵠΔᐃΔᐃ) : b.y;
      this.ΔⲆⵠΔ.pos(c, d, -0.5, this.ΔᐃⲆ);
      this.ΔⲆⵠΔ.pos(c, d, -0.5, this.Δᐃⵠ);
    };
  }
  ⲆⲆⲆⲆⵠ = {
    ⵠⲆⲆⲆᐃⲆᐃ: 0,
    ΔΔᐃΔⵠᐃΔ: 100,
    ᐃⲆΔᐃᐃⲆⵠ: 100,
    ⲆΔΔΔᐃⲆⲆ: 1,
    ⵠΔΔΔⲆᐃᐃⲆΔ: 0.4,
    ᐃΔⵠⵠᐃⲆΔ: 3,
    ⵠΔⵠᐃᐃᐃΔ: 2,
    ⲆᐃΔⲆΔ: 2,
    ⲆΔΔⵠⵠᐃᐃⲆΔ: 0.2,
    ΔⵠᐃᐃⵠᐃᐃΔⵠ: 0.2,
    ᐃᐃⲆⲆΔⵠᐃ: 100,
    ⵠᐃΔΔᐃⵠΔⵠⲆ: 0.2,
    ⲆⵠⵠΔⲆΔⲆ: 300,
    ⲆΔⵠᐃΔⲆΔ: 4
  };
  function jx(a, b, c) {
    this.ⲆⲆⲆᐃⲆΔⵠ = a;
    this.c = 0;
    this.ΔⲆⵠΔ = b;
    this.ⲆᐃΔΔΔ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ⲆᐃΔΔΔ[this.c];
      this.ⲆⲆⲆᐃⲆΔⵠ.ⲆⵠᐃⲆⵠΔⵠ(this.ΔⲆⵠΔ, a);
      this.ΔⲆⵠΔ.play(a);
    };
  }
  function kx(a) {
    this.ⵠᐃⵠⲆⲆⵠⲆ = 1;
    this.ᐃΔⲆⵠ = 0;
    this.mode = -1;
    this.ΔⵠⵠⲆΔ = tx.sample.ΔⵠⵠⲆΔ[a];
    this.ΔⲆΔⲆᐃᐃⲆ = tx.sample.ΔⲆΔⲆᐃᐃⲆ[a];
    this.ⵠⵠΔⵠⵠᐃⵠ = tx.sample.ⵠⵠΔⵠⵠᐃⵠ[a];
    this.ⵠᐃⵠᐃᐃⲆΔ = tx.sample.ⵠᐃⵠᐃᐃⲆΔ[a];
    this.ᐃⲆⵠⲆᐃⲆⵠ = new jx(this, hx.ᐃΔⲆⲆΔⲆᐃ.ⵠⵠⵠⲆΔ, tx.ⲆᐃΔⵠΔ.ᐃⲆⵠⲆᐃⲆⵠ[a]);
    this.ΔⵠⲆⲆΔ = new jx(this, hx.ᐃᐃⲆⲆΔⵠΔ.ⵠⵠⵠⲆΔ, tx.ⲆᐃΔⵠΔ.ΔⵠⲆⲆΔ[a]);
    this.ᐃΔᐃⵠΔ = new jx(this, hx.ΔⵠⵠⵠᐃᐃⲆ.ⵠⵠⵠⲆΔ, tx.ⲆᐃΔⵠΔ.ᐃΔᐃⵠΔ[a]);
    this.ΔⲆᐃⲆΔ = a;
    this.x = 0;
    this.y = 0;
    this.ⲆⲆⲆΔᐃ = 0;
    this.ΔⲆⲆΔΔ = ⲆⲆⲆⲆⵠ.ᐃᐃΔᐃΔᐃΔᐃᐃ;
    this.ⵠΔⵠΔ = {
      y: 0,
      x: 0
    };
    this.ⵠⵠⲆⵠᐃ = hx.ⲆⲆΔⵠΔΔⲆ.ⵠⵠⵠⲆΔ;
    this.ⲆΔⲆΔᐃⲆⲆⵠⵠ = function (a) {
      if (a === 1) {
        this.ᐃⲆⵠⲆᐃⲆⵠ.play();
      } else if (a === 2) {
        this.ΔⵠⲆⲆΔ.play();
      } else if (a === 3) {
        this.ᐃΔᐃⵠΔ.play();
      }
    };
    this.ᐃⵠΔⲆᐃⵠⵠ = function (a) {
      if (a.ΔⵠᐃⲆⵠᐃⲆ > 0) {
        return ⲆⲆⲆⲆⵠ.ⲆᐃΔⲆΔ;
      } else if (a.ΔⵠΔⲆΔᐃⲆ > 0) {
        return ⲆⲆⲆⲆⵠ.ⲆΔΔΔᐃⲆⲆ;
      } else if (a.ⲆᐃⲆΔΔ > 0 || a.ΔᐃⵠΔⵠ > 0) {
        return ⲆⲆⲆⲆⵠ.ᐃΔⵠⵠᐃⲆΔ;
      } else {
        return ⲆⲆⲆⲆⵠ.ⵠⲆⲆⲆᐃⲆᐃ;
      }
    };
    this.ⵠΔⵠⵠⲆ = function (a) {
      this.ⵠᐃⵠⲆⲆⵠⲆ = 0;
      this.ᐃΔⲆⵠ = a;
      var b = px.ⲆⲆᐃΔⵠ[a];
      b.ΔⲆᐃⲆΔ = this.ΔⲆᐃⲆΔ;
      this.mode = this.ᐃⵠΔⲆᐃⵠⵠ(b);
      this.ⵠΔⵠΔ.x = b.x;
      this.ⵠΔⵠΔ.y = b.y;
    };
    this.ⲆⲆᐃΔΔⵠᐃ = function () {
      this.ⵠᐃⵠⲆⲆⵠⲆ = 1;
      this.mode = -1;
      this.ⵠⵠⲆⵠᐃ.stop(this.ΔⵠⵠⲆΔ);
      this.ⵠⵠⲆⵠᐃ.stop(this.ΔⲆΔⲆᐃᐃⲆ);
      this.ⵠⵠⲆⵠᐃ.stop(this.ⵠⵠΔⵠⵠᐃⵠ);
      this.ⵠⵠⲆⵠᐃ.stop(this.ⵠᐃⵠᐃᐃⲆΔ);
    };
    this.fade = function (a, b) {
      var c = this.ⵠⵠⲆⵠᐃ.volume(a) * Xw;
      this.ⵠⵠⲆⵠᐃ.fade(c, 0, b, a);
    };
    this.ⲆⵠᐃⲆⵠΔⵠ = function (a, b) {
      if (this.ⲆⲆⲆΔᐃ && this.ΔⲆᐃⲆΔ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⵠⵠᐃⵠⲆ = function (b, c, d, e, f, g, a) {
      this.ΔⲆⲆΔΔ = g;
      if (e && f === this.mode) {
        var i = this.ⵠⵠⲆⵠᐃ.volume(b) * Xw;
        if (this.ⲆⲆⲆΔᐃ) {
          var j = Xw * (Math.random() * d + c);
          this.ⵠⵠⲆⵠᐃ.fade(i, j, a, b);
        } else {
          this.ⵠⵠⲆⵠᐃ.fade(i, 0, a, b);
        }
      } else if (f != this.mode && this.ⲆⲆⲆΔᐃ) {
        this.ⵠⵠⲆⵠᐃ.fade(0, Xw * (c + d), a, b);
      } else if (this.ⲆⲆⲆΔᐃ) {
        i = Xw * this.ⵠⵠⲆⵠᐃ.volume(b);
        j = (d * Math.random() + c) * Xw;
        this.ⵠⵠⲆⵠᐃ.fade(i, j, a, b);
      }
      this.ⲆⵠᐃⲆⵠΔⵠ(this.ⵠⵠⲆⵠᐃ, b);
      this.ⵠⵠⲆⵠᐃ.play(b);
    };
    this.ᐃΔΔ = function () {
      var a = px.ⲆⲆᐃΔⵠ[this.ᐃΔⲆⵠ];
      this.ΔⲆⲆΔΔ -= xx;
      if (this.ΔⲆⲆΔΔ <= 0) {
        var b = 0;
        if (this.ⵠΔⵠΔ.x != a.x || this.ⵠΔⵠΔ.y != a.y) {
          if (!this.ⲆⲆⲆΔᐃ) {
            b = 1;
            this.ⲆⲆⲆΔᐃ = 1;
          }
          this.x = tx.ΔⲆΔᐃⵠΔᐃ(a.x, ⲆⲆⲆⲆⵠ.ⵠΔⵠᐃᐃᐃΔ);
          this.y = tx.ⵠᐃΔΔᐃΔΔ(a.y, ⲆⲆⲆⲆⵠ.ⵠΔⵠᐃᐃᐃΔ);
        } else if (this.ⲆⲆⲆΔᐃ) {
          b = 1;
          this.ⲆⲆⲆΔᐃ = 0;
        }
        this.ⵠΔⵠΔ.x = a.x;
        this.ⵠΔⵠΔ.y = a.y;
        ⲆⵠΔⵠ = this.ᐃⵠΔⲆᐃⵠⵠ(a);
        if (this.mode != ⲆⵠΔⵠ) {
          if (ⲆⲆⲆⲆⵠ.ⲆΔΔΔᐃⲆⲆ === this.mode) {
            this.fade(this.ΔⵠⵠⲆΔ, ⲆⲆⲆⲆⵠ.ⲆⵠⵠΔⲆΔⲆ);
          } else if (ⲆⲆⲆⲆⵠ.ⲆᐃΔⲆΔ === this.mode) {
            this.fade(this.ΔⲆΔⲆᐃᐃⲆ, ⲆⲆⲆⲆⵠ.ΔΔᐃΔⵠᐃΔ);
          } else if (this.mode === ⲆⲆⲆⲆⵠ.ⵠⲆⲆⲆᐃⲆᐃ) {
            this.fade(this.ⵠⵠΔⵠⵠᐃⵠ, ⲆⲆⲆⲆⵠ.ᐃⲆΔᐃᐃⲆⵠ);
          } else if (this.mode === ⲆⲆⲆⲆⵠ.ᐃΔⵠⵠᐃⲆΔ) {
            this.fade(this.ⵠᐃⵠᐃᐃⲆΔ, ⲆⲆⲆⲆⵠ.ᐃᐃⲆⲆΔⵠᐃ);
          }
        }
        if (ⲆⵠΔⵠ === ⲆⲆⲆⲆⵠ.ⲆΔΔΔᐃⲆⲆ) {
          this.ⵠⵠᐃⵠⲆ(this.ΔⵠⵠⲆΔ, 0.08, 0.3, b, ⲆⵠΔⵠ, ⲆⲆⲆⲆⵠ.ⵠΔΔΔⲆᐃᐃⲆΔ, ⲆⲆⲆⲆⵠ.ⲆⵠⵠΔⲆΔⲆ);
        } else if (ⲆⲆⲆⲆⵠ.ⲆᐃΔⲆΔ === ⲆⵠΔⵠ) {
          this.ⵠⵠᐃⵠⲆ(this.ΔⲆΔⲆᐃᐃⲆ, 0.2, 0.3, b, ⲆⵠΔⵠ, ⲆⲆⲆⲆⵠ.ⵠᐃΔΔᐃⵠΔⵠⲆ, ⲆⲆⲆⲆⵠ.ΔΔᐃΔⵠᐃΔ);
        } else if (ⲆⵠΔⵠ === ⲆⲆⲆⲆⵠ.ⵠⲆⲆⲆᐃⲆᐃ) {
          this.ⵠⵠᐃⵠⲆ(this.ⵠⵠΔⵠⵠᐃⵠ, 0.3, 0.6, b, ⲆⵠΔⵠ, ⲆⲆⲆⲆⵠ.ΔⵠᐃᐃⵠᐃᐃΔⵠ, ⲆⲆⲆⲆⵠ.ᐃⲆΔᐃᐃⲆⵠ);
        } else if (ⲆⵠΔⵠ === ⲆⲆⲆⲆⵠ.ᐃΔⵠⵠᐃⲆΔ) {
          this.ⵠⵠᐃⵠⲆ(this.ⵠᐃⵠᐃᐃⲆΔ, 0.1, 0.25, b, ⲆⵠΔⵠ, ⲆⲆⲆⲆⵠ.ⲆΔΔⵠⵠᐃᐃⲆΔ, ⲆⲆⲆⲆⵠ.ᐃᐃⲆⲆΔⵠᐃ);
        }
        this.mode = ⲆⵠΔⵠ;
      }
    };
    this.check = function () {
      var a = px.ⲆⲆᐃΔⵠ[this.ᐃΔⲆⵠ];
      if (a) {
        return th;
      } else {
        this.ⲆⲆᐃΔΔⵠᐃ(a);
        return false;
      }
    };
  }
  function lx(b, c) {
    const d = ~(b & 49245) & 49245 | ~(b & 49245) & b;
    const e = ((60995 + c) * 22695477 + 1) % 4294967296;
    const f = Mn(d, e);
    const g = jf(d, e);
    return (8 << ((f ^ g) >> 8 & 255)) + (0 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (16 << ((f ^ g) & 255));
  }
  ⲆⲆⵠᐃᐃⵠⲆ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var mx;
  var nx = [];
  var ox = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Sr.ᐃᐃⲆⲆⲆ[ox.time];
  ox.items.push(new Qf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  ox.items.push(new Qf(100, 0, 0, 0, 0, 0, 0, 5));
  ox.items.push(new Qf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  ox.items.push(new Qf(100, 0, 0, 0, 0, 0, 0, 5));
  ΔⵠⲆⵠ = new function () {
    var b = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + kb[324] + "]";
      }
    }
    this.ᐃᐃⵠⵠ = null;
    this.ΔⲆᐃᐃⵠ = 0;
    this.ⵠᐃⵠᐃⲆ = [];
    this.ᐃⲆᐃΔΔⵠᐃ = {};
    this.ⵠᐃΔⲆΔⲆⲆ = {};
    this.ⲆⲆⲆⲆⲆ = [[], [], [], [], [], [], [], [], []];
    this.ⵠᐃΔⵠΔΔᐃ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ᐃᐃⲆⵠⲆ = 0;
    this.ᐃⵠᐃΔⲆⲆⵠ = 0;
    this.ⲆᐃⵠᐃᐃᐃΔ = function (c) {
      if (Cf !== undefined) {
        b.ⵠᐃⵠᐃⲆ.push({
          a: Cf.name,
          gm: Cf.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        c();
        return;
      }
      fetch(yf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            b.ⵠᐃⵠᐃⲆ = [];
            b.ⵠᐃΔⲆΔⲆⲆ = {};
            for (let a in Jf.ᐃⵠⲆᐃⲆΔΔ) {
              const c = Jf.ᐃⵠⲆᐃⲆΔΔ[a];
              b.ⵠᐃⵠᐃⲆ.push({
                a: "Auto Select",
                gm: c,
                m: 100,
                nu: 0,
                auto: true
              });
            }
            var f = 0;
            var g = 1;
            var i = 4;
            for (let a = 0; d.length > a; a++) {
              const c = d[a];
              const j = c.n;
              const k = c.l;
              const h = c.p;
              const l = [];
              b.ᐃⲆᐃΔΔⵠᐃ[j] = l;
              const m = [];
              for (let a = 0; h.length > a; a++) {
                const b = j + h[a][f];
                m.push(b);
                l.push(b);
              }
              for (let a = 0; a < k.length; a++) {
                const c = k[a];
                let d;
                let e = Jf.ᐃⵠⲆᐃⲆΔΔ[c[2]];
                let h = e + c[g];
                d = e in b.ⵠᐃΔⲆΔⲆⲆ ? ++b.ⵠᐃΔⲆΔⲆⲆ[e] : b.ⵠᐃΔⲆΔⲆⲆ[e] = 1;
                if (h in b.ⵠᐃΔⲆΔⲆⲆ) {
                  ᐃΔᐃᐃᐃⵠⲆ = ++b.ⵠᐃΔⲆΔⲆⲆ[h];
                } else {
                  ᐃΔᐃᐃᐃⵠⲆ = b.ⵠᐃΔⲆΔⲆⲆ[h] = 1;
                }
                b.ⵠᐃⵠᐃⲆ.push({
                  name: c[i],
                  a: Jf.ΔⲆᐃⵠⲆⲆᐃⲆᐃ[c[g]] + " " + ᐃΔᐃᐃᐃⵠⲆ,
                  r: c[g],
                  gm: Jf.ᐃⵠⲆᐃⲆΔΔ[c[2]],
                  idx: d,
                  m: 100,
                  nu: c[3],
                  id: c[g] + c[f],
                  p: m
                });
              }
            }
            const a = [];
            const e = [];
            const j = [];
            for (let c = 0; c < b.ⵠᐃⵠᐃⲆ.length; c++) {
              const d = b.ⵠᐃⵠᐃⲆ[c];
              if (!d.auto) {
                if (Jf.ᐃⵠⲆᐃⲆΔΔ[6] === d.gm) {
                  if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                    j.push(d);
                  } else {
                    e.push(d);
                  }
                  a.push(c);
                }
              }
            }
            const h = [];
            h.push(...e.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            h.push(...j.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let c = 0; c < a.length; c++) {
              const d = a[c];
              const e = h[c];
              e.idx = c + 1;
              b.ⵠᐃⵠᐃⲆ[d] = e;
            }
            c();
          });
        } else {
          za.setTimeout(function () {
            b.ⲆᐃⵠᐃᐃᐃΔ(c);
          }, 3000);
        }
      });
    };
    this.ᐃⲆⲆⲆΔⵠΔⲆΔ = function (a) {
      var b = [];
      for (var c = 0; a.length > c; c++) {
        if (a[c].a.indexOf(pr) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ᐃⵠⲆᐃᐃⵠΔ = function (b) {
      var c = 0;
      for (var d = 0; d < b.length; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (ΔⵠⲆⵠ.ⵠᐃΔⵠΔΔᐃ[ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ] === -1) {
        ΔⵠⲆⵠ.ⵠᐃΔⵠΔΔᐃ[ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ] = e.selectedIndex = ΔⵠⲆⵠ.ᐃⲆⲆⲆΔⵠΔⲆΔ(b);
      } else {
        e.selectedIndex = ΔⵠⲆⵠ.ⵠᐃΔⵠΔΔᐃ[ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + kb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + kb[323] + " (" + this.ᐃΔΔᐃⲆΔⲆ + ") " + kb[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + kb[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = ΔⵠⲆⵠ.ⲆⲆⲆⲆⲆ[ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ], e = 0; e < d.length; e++) {
          if (a(d[e]) === b) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          ΔⵠⲆⵠ.ⵠᐃΔⵠΔΔᐃ[ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ᐃΔΔᐃⲆΔⲆ = 0;
    this.ᐃᐃᐃᐃΔⲆⲆⲆᐃ = function () {
      this.ᐃΔΔᐃⲆΔⲆ = 0;
      for (var a = 0; a < ΔⵠⲆⵠ.ⵠᐃⵠᐃⲆ.length; a++) {
        if (this.ⵠᐃⵠᐃⲆ[a].gm == "experimental") {
          this.ⲆⲆⲆⲆⲆ[7].push(this.ⵠᐃⵠᐃⲆ[a]);
        } else if (this.ⵠᐃⵠᐃⲆ[a].gm == "zombies") {
          this.ⲆⲆⲆⲆⲆ[2].push(this.ⵠᐃⵠᐃⲆ[a]);
        } else if (this.ⵠᐃⵠᐃⲆ[a].gm == "community") {
          this.ⲆⲆⲆⲆⲆ[6].push(this.ⵠᐃⵠᐃⲆ[a]);
        } else if (this.ⵠᐃⵠᐃⲆ[a].gm == "forest") {
          this.ⲆⲆⲆⲆⲆ[4].push(this.ⵠᐃⵠᐃⲆ[a]);
        } else if (this.ⵠᐃⵠᐃⲆ[a].gm == "battle-royale") {
          this.ⲆⲆⲆⲆⲆ[5].push(this.ⵠᐃⵠᐃⲆ[a]);
        } else if (this.ⵠᐃⵠᐃⲆ[a].gm == "vampires") {
          this.ⲆⲆⲆⲆⲆ[3].push(this.ⵠᐃⵠᐃⲆ[a]);
        } else {
          this.ⲆⲆⲆⲆⲆ[0].push(this.ⵠᐃⵠᐃⲆ[a]);
        }
        this.ᐃΔΔᐃⲆΔⲆ += this.ⵠᐃⵠᐃⲆ[a].nu;
      }
      for (a = 0; this.ⲆⲆⲆⲆⲆ.length > a; a++) {
        if (this.ⲆⲆⲆⲆⲆ[a].length === 0) {
          this.ⲆⲆⲆⲆⲆ[a].push({
            a: kb[327],
            ΔΔⲆⵠᐃᐃⲆΔⵠ: 0,
            ⵠⵠ: "127.0.0.1",
            ᐃⵠᐃ: 80
          });
        }
      }
      this.ᐃⵠⲆᐃᐃⵠΔ(this.ⲆⲆⲆⲆⲆ[0]);
      this.ⵠΔⵠⲆⲆ = function (a) {
        ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ = a;
        ΔⵠⲆⵠ.ᐃⵠⲆᐃᐃⵠΔ(ΔⵠⲆⵠ.ⲆⲆⲆⲆⲆ[ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ]);
        ΔⵠⲆⵠ.ᐃⵠⲆᐃᐃⵠΔ(ΔⵠⲆⵠ.ⲆⲆⲆⲆⲆ[ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ]);
        document.getElementById("servselect").selectedIndex = ΔⵠⲆⵠ.ᐃᐃⲆⵠⲆ;
      };
    };
    this.ᐃⵠⵠΔⲆⵠⲆ = 0;
    this.ΔΔⲆΔᐃⵠΔ = 0;
    this.ΔⲆⵠᐃⲆ = null;
    this.timeout = function () {
      b.ΔΔⲆΔᐃⵠΔ++;
      b.ᐃᐃⵠⵠ.close();
      if (b.ΔΔⲆΔᐃⵠΔ > 3) {
        Fx = 1;
        mx.ᐃΔᐃⵠΔᐃⵠⵠⲆ = xf.ΔΔⵠᐃⵠⵠᐃⵠⵠ;
        b.ΔΔΔⵠⵠ(kb[300]);
        mx.waiting = Tr;
        if (qx.reconnect.enabled) {
          sx.ⲆⲆⲆⵠᐃ(mx.ⲆᐃΔᐃⲆ);
        }
      } else if (qx.ᐃᐃⲆΔⵠΔᐃ === undefined || qx.ᐃⲆᐃⵠᐃΔᐃ === undefined || Es === qx.ΔᐃΔⵠΔⲆᐃ) {
        mx.ⵠⵠᐃⵠᐃΔΔ(function () {
          b.ΔᐃᐃⵠᐃⲆⲆ();
        }, 1);
      } else {
        b.ΔᐃᐃⵠᐃⲆⲆ();
      }
    };
    this.ᐃⵠⵠⵠⵠᐃᐃ = function (a) {
      if (this.ΔⲆᐃᐃⵠ == this.ᐃᐃⵠⵠ.ΔⲆᐃᐃⵠ) {
        this.ΔⲆᐃᐃⵠ++;
        this.ΔΔΔⵠⵠ(kb[301] + a);
        sx.ⲆⲆⲆⵠᐃ(mx.ⲆᐃΔᐃⲆ);
      }
    };
    this.ⵠⵠΔᐃΔⵠⵠ = function () {
      this.ΔΔΔⵠⵠ("You speak too much");
    };
    this.ᐃⵠⵠΔⲆᐃⲆⵠⲆ = function () {
      clearTimeout(this.ΔⲆⵠᐃⲆ);
      this.ΔΔΔⵠⵠ(kb[302]);
      mx.waiting = false;
    };
    this.ΔᐃⲆᐃᐃⲆⲆΔᐃ = function () {
      qx.ΔⲆΔᐃⲆ.open = Go;
    };
    this.ⲆᐃΔᐃⲆⲆⲆⲆⲆ = function () {
      sx.ⲆⵠⲆΔⲆⲆΔ = 0;
    };
    this.ⵠⵠᐃΔⵠᐃⵠⲆΔ = function () {
      sx.ᐃⵠΔΔⲆΔⲆ = 0;
    };
    this.ⲆΔⲆᐃΔΔⵠΔⵠ = function (a) {
      qx.ΔΔΔᐃΔ.ᐃᐃⵠΔΔ = a;
      if (px.ΔⲆⲆΔᐃ > -300) {
        if (a === 0) {
          this.ΔΔΔⵠⵠ(kb[340]);
        } else {
          this.ΔΔΔⵠⵠ(kb[341]);
        }
      }
    };
    this.ᐃᐃⲆⵠΔ = function (a) {
      qx.ᐃᐃⲆⵠΔ = a;
    };
    this.ΔᐃⲆΔⵠΔⵠⵠⲆ = function (a) {
      qx.ᐃᐃⵠⵠᐃⲆⵠ = a;
    };
    this.ᐃᐃⵠⵠᐃⲆⵠ = function (a) {
      qx.ᐃᐃᐃΔⵠ.ᐃᐃⵠΔΔ = a;
      if (px.ⲆᐃⲆΔΔ > -300) {
        if (a === 0) {
          this.ΔΔΔⵠⵠ(kb[342]);
        } else {
          this.ΔΔΔⵠⵠ(kb[343]);
        }
      }
    };
    this.ᐃΔᐃⲆⵠᐃⲆᐃⲆ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ᐃᐃⵠⲆⲆⵠⵠΔⵠ = function () {
      sx.ⵠⲆᐃⲆᐃⵠⵠ = 0;
    };
    this.ⵠᐃⵠᐃΔⲆⵠΔΔ = function () {
      sx.ᐃΔΔᐃᐃⲆⲆ = 0;
    };
    this.ΔΔⵠⲆΔᐃᐃⵠⲆ = function () {
      qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ = [];
      qx.ⵠⲆΔⲆ.ⵠᐃⵠ = [];
      qx.ⵠⲆΔⲆ.id = -1;
      qx.ⵠⲆΔⲆ.ᐃΔΔΔᐃⲆⲆ.stop();
      qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ = [];
      qx.ᐃⲆⵠⵠ.ᐃⵠᐃΔᐃ = Nn;
      qx.ᐃⲆⵠⵠ.ᐃⵠΔⲆⲆⲆⵠⵠᐃ = false;
      qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
      qx.ᐃⲆⵠⵠ.id = -1;
      qx.ᐃⲆⵠⵠ.ᐃⵠⲆΔᐃ = false;
      qx.ᐃⲆⵠⵠ.ΔⲆⲆⵠΔ = kh;
      qx.ᐃⲆⵠⵠ.ⲆⲆΔⲆⵠ = false;
      qx.ᐃⲆⵠⵠ.ΔⲆΔΔΔⵠⵠ = false;
      qx.ᐃⲆⵠⵠ.timeout = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 1, 0, 1, 1);
    };
    this.ΔΔⲆΔⲆⵠᐃⵠⲆ = function () {
      clearTimeout(this.ΔⲆⵠᐃⲆ);
      this.ΔΔΔⵠⵠ();
      mx.waiting = false;
    };
    this.ⵠΔⲆⲆᐃᐃΔ = function (a) {
      for (var b = 0; a.length > b; b++) {
        if (typeof a[b] === "string") {
          a[b] = ᐃⵠⲆΔ.ⵠᐃⵠᐃⵠⲆΔ(a[b]);
        }
      }
      qx.ⵠᐃⵠᐃᐃ.ⲆⲆᐃΔᐃ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ΔΔΔⵠⵠ(a);
    };
    this.ⲆⵠⲆⲆᐃⵠᐃΔⵠ = function () {
      clearTimeout(this.ΔⲆⵠᐃⲆ);
      this.ΔΔΔⵠⵠ(kb[339]);
      mx.waiting = false;
    };
    this.ᐃⵠⲆⵠᐃᐃᐃⲆᐃ = function () {
      clearTimeout(this.ΔⲆⵠᐃⲆ);
      this.ΔΔΔⵠⵠ(kb[338]);
      mx.waiting = Fh;
    };
    this.ⵠⵠΔⵠᐃⲆᐃΔⵠ = function () {
      clearTimeout(this.ΔⲆⵠᐃⲆ);
      this.ΔΔΔⵠⵠ(kb[304]);
      mx.waiting = Ol;
    };
    this.ᐃⵠᐃᐃᐃᐃᐃΔᐃ = function () {
      qx.ⵠⲆΔⲆ.ᐃⲆΔⵠᐃΔᐃ(1, 0);
      sx.ⲆⲆΔᐃⲆᐃⲆ();
    };
    this.ΔΔᐃᐃΔΔⲆᐃⵠ = function (a) {
      var b = a[1];
      var c = px.ΔΔᐃᐃ[b];
      c.ⵠᐃⵠⲆ = a[2];
      c.ᐃΔⵠⲆᐃ = a[3];
      c.ⵠΔⲆᐃⲆᐃⲆ = a[4];
      c.ΔⵠᐃⲆⵠ = a[5];
      c.ⲆⵠⲆⲆⵠ = a[6];
      c.ⵠΔΔⲆᐃ = a[7];
      c.level = a[8];
      var d = px.ⲆⲆᐃΔⵠ[b * px.ᐃⲆᐃⵠΔᐃᐃ];
      if (d) {
        d.ⵠᐃⵠⲆ = a[2];
        d.ᐃΔⵠⲆᐃ = a[3];
        d.ⵠΔⲆᐃⲆᐃⲆ = a[4];
        d.ΔⵠᐃⲆⵠ = a[5];
      }
    };
    this.ⵠΔΔΔⵠΔΔᐃⵠ = function (a) {
      if (a === 29) {
        qx.ⵠⲆΔⲆ.ᐃⲆΔⵠᐃΔᐃ(1, 0);
        sx.ⲆⲆΔᐃⲆᐃⲆ();
      } else {
        this.ΔⲆᐃⲆⲆΔⲆ([0, a, 1]);
      }
      qx.ᐃⲆⵠⵠ.ᐃⵠⲆⵠΔᐃⵠ();
    };
    this.ᐃᐃⲆⵠᐃᐃⲆᐃΔ = function (a) {
      qx.ᐃⵠᐃᐃΔ.ΔⲆⲆΔΔ = 0;
      qx.ᐃⲆⵠⵠ.ᐃⵠᐃⵠᐃᐃⲆΔᐃ(a);
    };
    this.ΔⵠΔⲆⵠᐃⲆⵠΔ = function (a) {
      for (var b = ot[a].r, c = 0; c < b.length; c++) {
        if (qx.ⵠⲆΔⲆ.max > qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ.length || qx.ⵠⲆΔⲆ.ⵠᐃⵠ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ΔⲆᐃⲆⲆΔⲆ([0, b[c][0], d]);
        }
      }
      qx.ᐃⲆⵠⵠ.ᐃⵠⲆⵠΔᐃⵠ();
    };
    this.ΔΔⲆⲆⲆⵠᐃᐃⵠ = function (a) {
      qx.ᐃⵠᐃᐃΔ.ΔⲆⲆΔΔ = 0;
      qx.ᐃⲆⵠⵠ.ⵠᐃⲆΔⲆⲆᐃⲆⵠ(a);
    };
    this.ΔΔΔⵠⵠ = function (a) {
      if (qx.alert.text) {
        if (a !== qx.alert.text && a !== qx.alert.list[qx.alert.list.length - 1]) {
          qx.alert.list.push(a);
        }
      } else {
        qx.alert.text = a;
      }
    };
    this.ⵠⵠΔΔⲆⲆᐃΔⵠ = function () {
      this.ΔΔΔⵠⵠ(kb[305]);
    };
    this.ᐃΔᐃᐃⵠᐃⵠⵠⲆ = function () {
      var a;
      a = qx.Δᐃⵠ == 0 ? kb[306] : kb[307] + (qx.Δᐃⵠ + 1) + kb[308];
      this.ΔΔΔⵠⵠ(a);
      qx.Δᐃⵠ++;
    };
    this.ᐃⵠᐃⵠⵠⵠⲆᐃᐃ = function () {
      clearTimeout(b.ΔⲆⵠᐃⲆ);
      qx.reconnect.enabled = false;
      qx.ΔⵠⲆΔᐃ = false;
      this.ΔΔΔⵠⵠ(kb[309]);
      sx.ⲆⲆⲆⵠᐃ(mx.ⲆᐃΔᐃⲆ);
      this.ᐃᐃⵠⵠ.close();
    };
    this.ᐃΔᐃΔΔᐃᐃⵠᐃ = function () {
      Fx = 1;
      clearTimeout(this.ΔⲆⵠᐃⲆ);
      this.ΔΔΔⵠⵠ(kb[310]);
      mx.waiting = fk;
    };
    this.ᐃᐃⵠⵠᐃΔⲆᐃΔ = function () {
      Fx = 1;
      clearTimeout(this.ΔⲆⵠᐃⲆ);
      this.ΔΔΔⵠⵠ(kb[311]);
      mx.waiting = ph;
    };
    this.ⲆᐃⵠΔⵠⵠⲆⵠᐃ = function (a) {
      var b = a[1];
      var c = px.ΔΔᐃᐃ;
      c[b].ⵠΔᐃΔⲆ = a[2];
      c[b].ⵠᐃⵠⲆ = a[3];
      c[b].ᐃΔⵠⲆᐃ = a[4];
      c[b].ⵠΔⲆᐃⲆᐃⲆ = a[5];
      c[b].ΔⵠᐃⲆⵠ = a[6];
      c[b].ⲆⵠⲆⲆⵠ = a[7];
      c[b].ⵠΔΔⲆᐃ = a[8];
      c[b].level = a[9];
      c[b].ᐃᐃΔⲆΔ = 0;
      c[b].ᐃΔⲆⵠⵠᐃΔ = null;
      c[b].label = null;
      c[b].ⲆᐃⵠⲆᐃⵠΔ = null;
      c[b].ΔⵠⲆΔᐃ = true;
      if (mf === 1) {
        c[b].ⵠΔᐃΔⲆ += "|" + b;
      }
    };
    this.ⵠᐃⲆⲆΔⲆⵠᐃⵠ = function () {
      this.ᐃᐃⵠⵠ[cf](fq[fo].stringify([29]));
    };
    this.ᐃⲆΔⵠⵠⲆΔΔᐃ = function () {
      this.ΔΔΔⵠⵠ(kb[312]);
    };
    this.ⲆΔⲆⵠΔᐃⲆ = function () {
      this.ΔΔΔⵠⵠ(kb[313]);
    };
    this.ΔⲆⲆⵠⵠΔΔⲆⲆ = function (a) {
      this.ᐃᐃⵠⵠ[cf](lq[ta].stringify([32, a]));
      qx.ΔⲆΔᐃⲆ.open = false;
    };
    this.ⵠⵠⵠΔᐃΔⵠⲆⵠ = function (a) {
      for (var b = Pf[a - 1].items, c = 0; c < b.length && qx.ⵠⲆΔⲆ.max > qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ.length; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          qx.ⵠⲆΔⲆ.ᐃⲆΔⵠᐃΔᐃ(1, 0);
        } else {
          this.ΔⲆᐃⲆⲆΔⲆ([0, d, e]);
        }
      }
    };
    this.ΔⲆᐃⲆⲆΔⲆ = function (b) {
      for (var c = b.length, d = qx.ⵠⲆΔⲆ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; d.ⲆΔΔⵠᐃ.length > h; h++) {
          if (d.ⲆΔΔⵠᐃ[h].id == f) {
            d.ⵠᐃⵠ[f] += g;
            break;
          }
        }
        if (h == d.ⲆΔΔⵠᐃ.length) {
          d.ⵠᐃⵠ[f] = g;
          d.ⲆΔΔⵠᐃ.push(sx.ᐃΔᐃ[f]);
          sx.ⲆⲆΔᐃⲆᐃⲆ();
        }
      }
      qx.ᐃⲆⵠⵠ.ᐃΔΔ();
    };
    this.ⵠⲆⲆⵠ = function (b, c, d, e, f, g, a) {
      qx.ⵠⲆⲆⵠ.ⵠⲆⵠᐃ = b / 100;
      qx.ⵠⲆⲆⵠ.ᐃⲆᐃ = c / 100;
      qx.ⵠⲆⲆⵠ.c = d / 100;
      qx.ⵠⲆⲆⵠ.ᐃᐃⵠ = e / 100;
      qx.ⵠⲆⲆⵠ.ⲆᐃΔ = f / 100;
      qx.ⵠⲆⲆⵠ.ΔⲆᐃΔᐃᐃᐃ = g / 100;
      qx.ᐃᐃⲆⵠΔ = a;
    };
    this.ⲆⵠⵠⵠⲆᐃᐃᐃⵠ = function (a) {
      sx.ᐃⵠⵠⵠ.modify(a, 2);
    };
    this.ⲆⵠⵠⵠᐃΔᐃᐃⲆ = function (a) {
      sx.ᐃⵠⵠⵠ.modify(a, 0);
    };
    this.claimed = function (a) {
      sx.ᐃⵠⵠⵠ.modify(a, 3);
    };
    this.ⲆⲆΔⵠᐃⲆΔᐃⵠ = function (a, b) {
      qx.ⵠⲆⲆⵠ.ⵠⲆⵠᐃ = a / 100;
      qx.ᐃᐃⲆⵠΔ = b;
    };
    this.ⵠΔᐃΔⵠᐃⲆⵠᐃ = function (a) {
      qx.ⵠⲆⲆⵠ.ᐃᐃⵠ = a / 100;
    };
    this.ⵠⲆⵠΔΔⲆᐃΔΔ = function (a) {
      qx.ⵠⲆⲆⵠ.ᐃⲆᐃ = a / 100;
    };
    this.ΔΔⲆΔⲆᐃᐃⲆᐃ = function (a) {
      qx.ⵠⲆⲆⵠ.ΔⲆᐃΔᐃᐃᐃ = a / 100;
    };
    this.ⵠⲆⵠᐃⵠⲆⲆⵠⲆ = function (a) {
      qx.ⵠⲆⲆⵠ.c = a / 100;
    };
    this.ⲆⵠⵠⵠⲆΔΔΔΔ = function (a) {
      px.time = a;
      px.transition = Rj;
      tx.transition = 1;
    };
    this.ΔᐃΔⲆᐃΔⲆᐃᐃ = function () {
      document.getElementById("game_body").style.backgroundColor = Sr.ᐃᐃⲆⲆⲆ[px.time];
    };
    this.ⲆᐃᐃⲆΔⲆⵠᐃⲆ = function (a) {
      if (px.mode == 1 && px.ΔΔᐃᐃ[a].ⵠΔᐃΔⲆ !== "spectator") {
        this.ΔΔΔⵠⵠ(px.ΔΔᐃᐃ[a].ⵠΔᐃΔⲆ + kb[314]);
      }
      px.ΔΔᐃᐃ[a].ΔⵠⲆΔᐃ = false;
    };
    this.ⵠΔⲆΔᐃⲆΔᐃΔ = function (a) {
      var b = new Uint16Array(a);
      ΔⲆⵠΔ.ⲆⲆᐃ.ⲆⵠᐃᐃⲆ(b[1], b[2]);
    };
    this.ᐃᐃⵠᐃᐃᐃᐃᐃΔ = function (a) {
      var b = new Uint16Array(a);
      qx.ⲆⲆᐃ.ⲆⵠᐃᐃⲆ(b[1], b[2]);
    };
    this.ΔᐃⵠᐃΔΔᐃᐃⵠ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
        var k = px.ⲆⲆᐃΔⵠ[i * px.ᐃⲆᐃⵠΔᐃᐃ + g];
        if (k && k.ⲆⲆⲆ) {
          if (tx.loaded && tx.ⲆᐃΔᐃⲆ) {
            tx.ⲆⲆⲆ(b[5 + f * 4] & 1, ⲆΔᐃᐃᐃ[k.type], k.x, k.y);
          }
          k.ⲆⲆⲆ.angle = j;
          k.ⲆⲆⲆ.ᐃΔΔ = j;
        }
      }
    };
    this.ⵠΔᐃⲆⲆΔᐃᐃΔ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; d > e; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = Math.PI * ((c[3 + i] >> 1) / 127) * 2;
        var p = c[4 + i];
        var q = nx.ΔΔΔⲆ[k][j];
        switch (p) {
          case 0:
            (f = q.p[0][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 2:
            (f = q.s[1][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 3:
            (f = q.s[2][0]).angle = m;
            f.ᐃΔΔ = wq;
            break;
          case 4:
            (f = q.t[0][0]).angle = m;
            f.ᐃΔΔ = uq;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 7:
            (f = q.t[3][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 10:
            (f = q.g[0][0]).angle = m;
            f.ᐃΔΔ = Ok;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 12:
            (f = q.g[2][0]).angle = m;
            f.ᐃΔΔ = wh;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ᐃΔΔ = il;
            break;
          case 14:
            (f = q.d[1][0]).angle = m;
            f.ᐃΔΔ = u;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 16:
            (f = q.b[0][0]).angle = m;
            f.ᐃΔΔ = Co;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ᐃΔΔ = fr;
            break;
          case 18:
            (f = q.b[2][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 20:
            (f = q.f[0][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 22:
            (f = q.f[2][0]).angle = m;
            f.ᐃΔΔ = th;
            break;
          case 23:
            (f = q.sw[0][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ᐃΔΔ = Qe;
            break;
          case 25:
            (f = q.sw[2][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 26:
            (f = q.gw[0][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 27:
            (f = q.gw[1][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 28:
            (f = q.gw[2][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 29:
            (f = q.dw[0][0]).angle = m;
            f.ᐃΔΔ = Co;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ᐃΔΔ = kn;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ᐃΔΔ = Rj;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 33:
            (f = q.a[1][0]).angle = m;
            f.ᐃΔΔ = wh;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ᐃΔΔ = Qe;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ᐃΔΔ = Eh;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ᐃΔΔ = Lr;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ᐃΔΔ = th;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 40:
            (f = q.plm[0][0]).angle = m;
            f.ᐃΔΔ = Co;
            break;
          case 41:
            (f = q.plm[1][0]).angle = m;
            f.ᐃΔΔ = Co;
            break;
          case 42:
            (f = q.plm[2][0]).angle = m;
            f.ᐃΔΔ = kn;
            break;
          case 50:
            (f = q.re[0][0]).angle = m;
            f.ᐃΔΔ = On;
            break;
          case 51:
            (f = q.re[1][0]).angle = m;
            f.ᐃΔΔ = wq;
            break;
          case 52:
            (f = q.re[2][0]).angle = m;
            f.ᐃΔΔ = On;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 57:
            (f = q.m[1][0]).angle = m;
            f.ᐃΔΔ = true;
            break;
          case 58:
            (f = q.m[2][0]).angle = m;
            f.ᐃΔΔ = true;
        }
        if (tx.loaded && tx.ⲆᐃΔᐃⲆ && f) {
          tx.ⲆⲆⲆ(c[3 + i] & 1, ᐃΔΔΔ[p], f.x, f.y);
        }
      }
    };
    this.ⲆᐃΔΔⲆ = function () {
      this.ᐃᐃⵠⵠ[cf](wo[vo].stringify([33, qx.ⲆᐃΔΔⲆ.ΔⵠΔΔ, qx.ⲆᐃΔΔⲆ.ᐃΔᐃⲆⲆ]));
    };
    this.ⵠᐃⲆᐃΔⲆᐃᐃⲆ = function (a, b) {
      this.ᐃᐃⵠⵠ[cf](wo[jo].stringify([14, b, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
    };
    this.ΔⲆⲆⲆⲆᐃᐃ = function (a, b, c) {
      if (b) {
        this.ᐃᐃⵠⵠ[cf](wo[jo].stringify([17, b, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
      } else {
        this.ᐃᐃⵠⵠ[cf](wo[Bo].stringify([0, c, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
      }
    };
    this.ⲆᐃⵠⵠᐃΔⲆΔᐃ = function (a) {
      this.ᐃᐃⵠⵠ[cf](qo[Oo].stringify([12, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
    };
    this.ΔⵠⵠᐃᐃΔⵠΔΔ = function (a) {
      this.ᐃᐃⵠⵠ[cf](qo[ua].stringify([30, a]));
    };
    this.ⵠᐃᐃᐃⵠⲆΔⲆᐃ = function (a) {
      this.ᐃᐃⵠⵠ[cf](mq[vo].stringify([21, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
    };
    this.ⲆΔᐃⵠⵠⵠⲆⵠᐃ = function (a, b) {
      this.ᐃᐃⵠⵠ[cf](lq[Oo].stringify([9, b, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ, a.type]));
    };
    this.ᐃΔᐃⵠᐃⵠᐃⲆⲆ = function (a, b) {
      this.ᐃᐃⵠⵠ[cf](lq[Oo].stringify([34, b, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
    };
    this.ΔΔΔΔⲆᐃⵠᐃᐃ = function (a, b, c) {
      this.ᐃᐃⵠⵠ[cf](mq[jo].stringify([13, b, c, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
    };
    this.ᐃⵠΔⲆⲆⲆᐃ = function (a) {
      this.ᐃᐃⵠⵠ[cf](qo[Oo].stringify([1, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ, a.type]));
    };
    this.ⲆⲆⵠⲆⵠⲆΔᐃᐃ = function (a) {
      this.ᐃᐃⵠⵠ[cf](qo[Oo].stringify([26, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
    };
    this.ⵠⲆᐃΔΔⵠⲆᐃᐃ = function (a) {
      this.ᐃᐃⵠⵠ[cf](qo[Oo].stringify([27, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
    };
    this.ᐃᐃΔⵠⵠⵠΔⵠⵠ = function (a) {
      this.ᐃᐃⵠⵠ[cf](ea[Yo].stringify([23, a.ΔⵠΔΔ, a.ᐃΔᐃⲆⲆ]));
    };
    this.ⵠΔᐃᐃᐃΔΔΔⲆ = function (a) {
      this.ᐃᐃⵠⵠ[cf](pq[ta].stringify([5, a.ᐃΔᐃⲆⲆ]));
    };
    this.ᐃΔⵠⵠⲆⲆΔ = function (a) {
      b.ᐃᐃⵠⵠ[cf](ca[ua].stringify([22, qx.Δⵠⵠᐃᐃ.id, qx.ⵠΔΔΔΔ[a]]));
    };
    this.ΔΔᐃΔⲆⵠΔΔⵠ = function () {
      b.ᐃᐃⵠⵠ[cf](fa[Ca].stringify([38, qx.Δⵠⵠᐃᐃ.ΔⵠΔΔ, qx.Δⵠⵠᐃᐃ.id]));
    };
    this.ⵠⵠᐃΔΔⵠΔ = function () {
      b.ᐃᐃⵠⵠ[cf](tq[Pa].stringify([18]));
    };
    this.ⲆᐃΔΔⵠⵠⵠⵠⲆ = function () {
      b.ᐃᐃⵠⵠ[cf](tq[ua].stringify([4, qx.Δⵠⵠᐃᐃ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        qx.Δⵠⵠᐃᐃ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        qx.Δⵠⵠᐃᐃ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ᐃᐃΔ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        px.ⲆΔⲆΔⵠⲆⵠⵠΔ();
      }
      for (var n = (e.length - 2) / 18, o = 0; n > o; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = w * px.ᐃⲆᐃⵠΔᐃᐃ + y;
        if (x & 1) {
          px.ⵠⲆᐃΔⲆΔΔᐃᐃ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = Math.PI * (e[q + 1] / 255) * 2;
          if (px.ⲆⲆᐃΔⵠ[z]) {
            var I = px.ⲆⲆᐃΔⵠ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ᐃⵠⲆΔ.ⲆⵠᐃⲆ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (qx.id !== I.id || w === 0) {
              I.ΔⲆⲆⲆᐃⵠⲆ = H;
            }
            I.action |= x;
            I.info = E;
            I.ΔΔΔΔᐃ = F;
            I.ΔΔΔΔⲆ = G;
            if (I.ᐃΔΔ) {
              I.ᐃΔΔ(x);
            }
          } else {
            var J = new Qf(A, w, y, B, D, H, x, E, F, G);
            px.ⲆⲆᐃΔⵠ[z] = J;
            px.ᐃᐃΔ[A].push(J);
          }
        }
      }
    };
    this.ᐃᐃΔᐃ = function (a) {
      this.ᐃⵠⵠΔⲆⵠⲆ = wx;
      var b = new Uint16Array(a);
      qx.ΔᐃⲆⲆⵠ.ⵠΔⵠⵠⲆ(b);
    };
    this.ⲆⵠⲆΔᐃΔⵠⵠᐃ = function (a) {
      if (nt !== undefined) {
        ot = nt;
      }
      if (a.length > 0) {
        nt = JSON.parse(JSON.stringify(ot));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = ot[c.item];
          if (d !== Fr) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⲆᐃΔ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ΔⵠᐃⵠⵠⲆⲆ = function (a) {
      if (a && a.length !== 0) {
        qx.ΔⵠᐃⵠⵠⲆⲆ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ⵠᐃ = [];
          var f = 14;
          var g = b.length * (f + 4) + 10;
          var h = 0;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; b.length > i; i++) {
            if (b[i].charAt(0) === "#") {
              ⵠᐃ[i] = b[i].substring(0, 7);
              b[i] = b[i].substring(8);
            } else {
              ⵠᐃ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + 16, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; i < b.length; i++) {
            var j = cu(1, b[i], f, ⵠᐃ[i], null, null, null, null, null, "#000", 6);
            d.drawImage(j, 8, (f + 4) * i + 5);
          }
          return c;
        }(a);
      } else {
        qx.ΔⵠᐃⵠⵠⲆⲆ.message = undefined;
      }
    };
    this.ΔⲆᐃⵠΔ = function (a) {
      var b = px.ⲆⲆᐃΔⵠ[a[1] * px.ᐃⲆᐃⵠΔᐃᐃ];
      if (b) {
        if (px.mode === 2 && b.ⵠᐃⵠⲆ === 0) {
          if (qx.ᐃⲆⵠΔᐃ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ⲆΔᐃΔᐃ);
            } else {
              b.text.push(ⲆΔᐃΔᐃ + "... " + a[2]);
            }
          } else {
            b.text.push(ΔᐃᐃⲆⵠΔⵠ[Math.floor(Math.random() * ΔᐃᐃⲆⵠΔⵠ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ⲆⵠᐃΔΔᐃᐃⲆᐃ = function (a) {
      if (qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ.length !== qx.ⵠⲆΔⲆ.max || ot[a].ⵠⵠⵠᐃ === 29 || qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(ot[a].ⵠⵠⵠᐃ) != -1 || qx.ⵠⲆΔⲆ.ΔΔᐃΔᐃᐃᐃΔⵠ(ot[a].r)) {
        this.ᐃᐃⵠⵠ[cf](fq[fo].stringify([2, a]));
        return 1;
      } else {
        this.ⲆΔⲆⵠΔᐃⲆ();
        return 0;
      }
    };
    this.ᐃⵠⲆΔᐃ = function (a) {
      qx.ᐃⲆⵠⵠ.ΔΔᐃᐃⵠΔΔᐃⵠ(a);
    };
    this.ΔⲆⲆⵠΔ = function (a) {
      qx.ᐃⲆⵠⵠ.ΔⲆⲆⵠΔ = a;
      qx.ᐃⲆⵠⵠ.ᐃΔΔ();
    };
    this.ⲆⲆΔⲆⵠ = function (a) {
      qx.ᐃⲆⵠⵠ.ⲆⲆΔⲆⵠ = a;
      qx.ᐃⲆⵠⵠ.ᐃΔΔ();
    };
    this.ΔⲆΔΔΔⵠⵠ = function (a) {
      qx.ᐃⲆⵠⵠ.ΔⲆΔΔΔⵠⵠ = a;
      qx.ᐃⲆⵠⵠ.ᐃΔΔ();
    };
    this.ⵠᐃΔᐃᐃⵠΔΔΔ = function (a) {
      this.ΔΔΔⵠⵠ(kb[315]);
    };
    this.ⵠⵠⵠᐃⵠᐃⵠⵠⲆ = function () {
      qx.ᐃⲆⵠⵠ.ᐃⵠⲆⵠΔᐃⵠ();
    };
    this.ⵠⲆⵠΔⵠ = function (a) {
      sx.ⵠⲆⵠΔⵠ.ΔΔᐃᐃ = [];
      var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      var c = 0;
      for (var d = 1; a.length > d; d += 2) {
        var e = {
          x: Math.floor(a[d] * px.w / 250),
          y: Math.floor(a[d + 1] * px.ᐃⲆᐃ / 250)
        };
        if (b && !c && !qx.ⲆΔᐃΔⲆⵠΔ && ᐃⵠⲆΔ.ⲆⵠᐃⲆ(e, b) < 250) {
          c += 1;
        } else {
          sx.ⵠⲆⵠΔⵠ.ΔΔᐃᐃ.push(e);
        }
      }
    };
    this.ΔΔⵠΔᐃⲆⲆⲆⵠ = function () {
      qx.ⲆᐃΔΔⲆ.open = false;
      qx.ΔⲆⵠΔⵠ.enabled = false;
      qx.ΔⲆⵠΔⵠ.ΔⲆⲆΔΔ = -1;
      qx.ΔⲆⵠΔⵠ.label = null;
      qx.ΔⲆⵠΔⵠ.ᐃⲆᐃⲆᐃΔᐃ = null;
      qx.ΔⲆⵠΔⵠ.now = -1;
    };
    this.ΔⲆⵠΔⵠ = function (a) {
      Jf.ⵠΔᐃΔᐃⲆΔ = a;
      qx.ΔⲆⵠΔⵠ.enabled = _h;
      qx.ΔⲆⵠΔⵠ.ΔⲆⲆΔΔ = new Date().getTime();
      qx.ΔⲆⵠΔⵠ.label = null;
      qx.ΔⲆⵠΔⵠ.now = -1;
      for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; b.length > c; c++) {
        var d = qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(b[c]);
        if (d != -1) {
          qx.ⵠⲆΔⲆ.ΔᐃⵠᐃΔⵠᐃ(b.length[c], d);
        }
      }
      qx.ᐃⲆⵠⵠ.ᐃⵠⲆⵠΔᐃⵠ();
    };
    this.ⵠⲆⲆΔᐃⲆΔᐃΔ = function (a, b, c) {
      this.ΔⵠⵠΔᐃΔΔ(a, b * 256 + c);
    };
    this.ΔⵠⵠΔᐃΔΔ = function (a, b) {
      qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
      qx.ⵠⲆΔⲆ.ⲆⲆⲆᐃⵠⵠᐃ(a, b, qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(a));
      qx.ᐃⲆⵠⵠ.ᐃΔΔ();
    };
    this.ⲆΔΔᐃᐃⲆΔⲆⲆ = function (a) {
      qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
      qx.ΔⲆⵠᐃΔ.wait = true;
      var b = qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(a);
      qx.ⵠⲆΔⲆ.ⲆⲆⲆᐃⵠⵠᐃ(a, 1, b);
      if (b >= 0 && !qx.ⵠⲆΔⲆ.ⵠᐃⵠ[a]) {
        qx.ᐃⲆⵠⵠ.ᐃΔΔ();
      }
      if (a == 159) {
        qx.ⵠΔΔΔΔ = [qx.id];
      }
    };
    this.ⲆᐃⵠΔᐃΔᐃᐃⵠ = function () {
      this.ᐃᐃⵠⵠ[cf](wo[vo].stringify([37]));
    };
    this.ⵠᐃᐃⵠⵠᐃᐃΔⲆ = function (a) {
      this.ᐃᐃⵠⵠ[cf](lq[Bo].stringify([28, a.ⲆⵠᐃⵠΔ, a.id]));
    };
    this.ⲆⲆⲆΔⲆᐃᐃⲆᐃ = function (a, b) {
      this.ᐃᐃⵠⵠ[cf](lq[Oo].stringify([7, a, b]));
    };
    this.ᐃΔᐃⲆⲆΔΔⵠⵠ = function () {
      var a = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      if (a) {
        var b = Math.PI * 2;
        this.ᐃᐃⵠⵠ[cf](lq[Bo].stringify([15, qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ, Math.floor((a.angle + b) % b * 255 / b), qx.ᐃⲆⵠⵠ.mode]));
      }
    };
    this.ⵠⵠⵠⵠᐃ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
          this.ᐃᐃⵠⵠ[cf](mq[jo].stringify([16, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!qx.ᐃⲆⵠΔᐃ) {
            if (a === qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ) {
              qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
            } else {
              qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case Xr.ⵠΔⵠⲆⵠⲆⲆᐃᐃ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!qx.ᐃⲆⵠΔᐃ) {
            qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
            if ((c = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ]) && c.right === a) {
              this.ᐃᐃⵠⵠ[cf](qo[Oo].stringify([16, 7]));
            } else {
              qx.ΔⵠⲆⲆΔ.wait = Co;
              this.ᐃᐃⵠⵠ[cf](ea[Yo].stringify([16, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!qx.ᐃⲆⵠΔᐃ) {
            qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
            if ((c = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ]) && c.right === a) {
              this.ᐃᐃⵠⵠ[cf](pq[ta].stringify([16, 7]));
            } else {
              this.ᐃᐃⵠⵠ[cf](ca[ua].stringify([16, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!qx.ᐃⲆⵠΔᐃ) {
            qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
            var c = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
            this.ᐃᐃⵠⵠ[cf](ca[ua].stringify([16, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ]) && c.ᐃΔⲆⵠᐃ !== a) {
            qx.ⵠⵠⲆΔⲆ.wait = Ok;
          }
          this.ᐃᐃⵠⵠ[cf](mq[Oo].stringify([16, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ᐃᐃⵠⵠ[cf](fa[Ca].stringify([16, a]));
      }
    };
    this.ⵠΔᐃᐃⲆᐃⲆΔⵠ = function (a) {
      this.ᐃᐃⵠⵠ[cf](lq[fo].stringify([11, a]));
    };
    this.ⵠⵠⵠΔⲆⵠⵠᐃΔ = function (a) {
      qx.ΔⲆⵠᐃΔ.wait = true;
      var b = qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(a);
      qx.ⵠⲆΔⲆ.ΔᐃⵠᐃΔⵠᐃ(a, b);
      qx.ᐃⲆⵠⵠ.ᐃΔΔ();
    };
    this.ⵠⲆⲆⲆⵠⵠⲆⲆΔ = function (a, b) {
      this.ᐃᐃⵠⵠ[cf](fq[ta].stringify([20, a]));
    };
    this.ⵠᐃⲆᐃⵠΔᐃⵠⵠ = function (a, b) {
      this.ᐃᐃⵠⵠ[cf](wo[vo].stringify([35, a]));
    };
    this.ⲆᐃⲆΔΔⵠᐃΔᐃ = function (a) {
      qx.ΔⲆⵠᐃΔ.wait = uq;
      var b = qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(a);
      qx.ⵠⲆΔⲆ.ⲆⲆⲆᐃⵠⵠᐃ(a, 1, b);
      qx.ᐃⲆⵠⵠ.ᐃΔΔ();
    };
    this.ⲆⵠΔⵠᐃΔⵠⲆΔ = function (a) {
      var b = a[1];
      var c = a[2];
      qx.ΔⲆⵠᐃΔ.wait = Rj;
      var d = qx.ⵠⲆΔⲆ.ⵠⲆⲆᐃⲆ(b);
      qx.ⵠⲆΔⲆ.ⲆⲆⲆᐃⵠⵠᐃ(b, c, d);
      qx.ᐃⲆⵠⵠ.ᐃΔΔ();
    };
    this.ΔⵠⲆΔᐃⵠⲆΔΔ = function () {
      this.ᐃᐃⵠⵠ[cf](wo[vo].stringify([36]));
    };
    this.ᐃᐃⵠᐃⵠᐃⲆΔⲆ = function (a) {
      var b = Math.PI * 2;
      this.ᐃᐃⵠⵠ[cf](lq[Bo].stringify([24, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ΔᐃⲆᐃⵠⵠᐃⵠΔ = function (a) {
      var b = Math.PI * 2;
      this.ᐃᐃⵠⵠ[cf](lq[Bo].stringify([19, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆᐃⲆⵠᐃⵠᐃⲆⲆ = function (a) {
      this.ᐃᐃⵠⵠ[cf](ⵠⵠΔⲆΔⲆΔ[0].stringify([3, a]));
    };
    this.ΔⵠΔΔⵠΔᐃⲆᐃ = function (a) {
      this.ᐃᐃⵠⵠ[cf](qo[Oo].stringify([31, a]));
    };
    this.ᐃⲆΔⲆΔᐃᐃⵠⵠ = function (a) {
      var b = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
      if (qx.ᐃⲆⵠΔᐃ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ⲆΔᐃΔᐃ);
        } else {
          b.text.push(ⲆΔᐃΔᐃ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ᐃᐃⵠⵠ[cf](qo[Oo].stringify([8, a]));
    };
    this.ⵠΔΔⵠⲆ = function (a) {
      var b = ΔⲆⵠΔ.select.ᐃᐃΔ;
      if (b.length != 0) {
        var c = [3];
        var d = [];
        ᐃⵠⲆΔ.ΔⵠⵠᐃᐃΔⲆ(a, {
          x: ΔⲆⵠΔ.ⲆⲆᐃ.rx,
          y: ΔⲆⵠΔ.ⲆⲆᐃ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; b.length > e; e++) {
          d.push(b[e].ᐃΔᐃⵠⲆⲆⲆⵠⵠ);
        }
        c.push(d);
        this.ᐃᐃⵠⵠ[cf](ea[Yo].stringify(c));
      }
    };
    this.ᐃΔⵠΔᐃΔⲆ = 0;
    this.ⵠᐃᐃⵠⲆⲆᐃ = {
      ᐃⵠᐃⲆ: 0,
      ⵠⵠ: 0
    };
    this.ΔΔⲆⵠⲆⲆΔᐃⵠ = function () {
      if (wx - this.ᐃΔⵠΔᐃΔⲆ > 50) {
        this.ᐃΔⵠΔᐃΔⲆ = wx;
        var a = qx.ⲆⲆᐃ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (this.ⵠᐃᐃⵠⲆⲆᐃ.ⵠⵠ != b || this.ⵠᐃᐃⵠⲆⲆᐃ.ᐃⵠᐃⲆ != c) {
          this.ᐃᐃⵠⵠ[cf](ca[ta].stringify([10, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ⵠᐃᐃⵠⲆⲆᐃ.ⵠⵠ = b;
          this.ⵠᐃᐃⵠⲆⲆᐃ.ᐃⵠᐃⲆ = c;
        }
      }
    };
    this.ⵠᐃⵠⲆΔⵠⵠ = 0;
    this.ⲆⲆⵠⵠⲆⵠⲆⵠⲆ = function () {
      if (wx - this.ⵠᐃⵠⲆΔⵠⵠ > 60000) {
        this.ⵠᐃⵠⲆΔⵠⵠ = wx;
        this.ping();
      }
    };
    this.ᐃⵠⵠᐃᐃᐃⵠΔΔ = function () {
      qx.reconnect.enabled = true;
      if (this.ΔⲆᐃᐃⵠ == this.ᐃᐃⵠⵠ.ΔⲆᐃᐃⵠ) {
        this.ΔⲆᐃᐃⵠ++;
        this.ᐃᐃⵠⵠ.close();
        ΔⵠⲆⵠ.connect();
      }
    };
    this.ⵠΔⲆΔᐃⲆΔⵠⵠ = function (a) {
      this.ΔΔΔⵠⵠ(kb[316]);
      for (var b = 1; a.length > b; b++) {
        qx.ⵠΔΔΔΔ.push(a[b]);
      }
    };
    this.ΔⲆΔⵠΔᐃΔⵠⲆ = function (a) {
      this.ΔΔΔⵠⵠ(px.ΔΔᐃᐃ[a].ⵠΔᐃΔⲆ + kb[318]);
      qx.ⵠΔΔΔΔ.push(a);
      var b = document.getElementById("team_box");
      if (sx.ᐃᐃᐃⵠⵠ != -1 && b.style.display == "inline-block") {
        sx.ⵠⲆⲆⲆⵠ[sx.ᐃᐃᐃⵠⵠ].action();
      }
    };
    this.ΔΔⵠⲆΔⵠᐃⵠⲆ = function () {
      this.ΔΔΔⵠⵠ(kb[319]);
      qx.Δⵠⵠᐃᐃ.wait = kn;
      qx.ⵠΔΔΔΔ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⲆⵠⲆᐃⵠΔᐃΔΔ = function (a) {
      if (a == qx.id) {
        this.ΔΔΔⵠⵠ(kb[320]);
        qx.Δⵠⵠᐃᐃ.wait = true;
        qx.ⵠΔΔΔΔ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ΔΔΔⵠⵠ(px.ΔΔᐃᐃ[a].ⵠΔᐃΔⲆ + kb[321]);
        for (var b = 0; b < qx.ⵠΔΔΔΔ.length; b++) {
          if (a == qx.ⵠΔΔΔΔ[b]) {
            qx.ⵠΔΔΔΔ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (sx.ᐃᐃᐃⵠⵠ != -1 && c.style.display == "inline-block") {
          sx.ⵠⲆⲆⲆⵠ[sx.ᐃᐃᐃⵠⵠ].action();
        }
      }
    };
    this.ΔᐃⲆΔⲆΔⵠⵠᐃ = function (a) {
      qx.ΔⵠⲆΔᐃ = false;
      this.ΔΔΔⵠⵠ(kb[322]);
      if (this.ᐃᐃⵠⵠ.ΔⲆᐃᐃⵠ == this.ΔⲆᐃᐃⵠ) {
        this.ΔⲆᐃᐃⵠ++;
        sx.ⲆⲆⲆⵠᐃ(mx.ⲆᐃΔᐃⲆ);
        this.ᐃᐃⵠⵠ.close();
      }
    };
    this.ΔᐃᐃΔⲆⲆⲆⲆⲆ = function (a, b) {
      qx.ΔⵠⲆΔᐃ = false;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      qx.ⲆᐃᐃⲆⵠᐃΔ.ⲆⵠΔΔⵠⲆᐃ = Bt[a][Math.floor(Math.random() * Bt[a].length)];
      qx.ⲆᐃᐃⲆⵠᐃΔ.ᐃᐃΔⲆΔ = ᐃⵠⲆΔ.ⵠⲆᐃⵠΔᐃⵠ(px.ΔΔᐃᐃ[qx.id].ᐃᐃΔⲆΔ);
      qx.ⲆᐃᐃⲆⵠᐃΔ.ⲆᐃⵠΔᐃᐃⲆ = ᐃⵠⲆΔ.ⵠⲆᐃⵠΔᐃⵠ(d[1]);
      qx.ⲆᐃᐃⲆⵠᐃΔ.ⵠⵠⵠᐃᐃⵠΔ = c[1];
      this.ΔΔΔⵠⵠ(kb[317]);
      if (this.ΔⲆᐃᐃⵠ == this.ᐃᐃⵠⵠ.ΔⲆᐃᐃⵠ) {
        this.ΔⲆᐃᐃⵠ++;
        sx.ⲆⲆⲆⵠᐃ(rx.ⲆᐃΔᐃⲆ);
        this.ᐃᐃⵠⵠ.close();
        try {
          za.Widget.adsRefresh();
        } catch (a) { }
      }
      Settings.AutoSpike.e = false;
    };
    this.ping = function () {
      this.ᐃᐃⵠⵠ[cf]("[6]");
    };
    this.ΔⲆᐃⵠᐃⵠⲆᐃⵠ = function () {
      if (this.ᐃᐃⵠⵠ.readyState == 3) {
        this.ᐃⵠⵠΔⲆⵠⲆ -= 600000;
      }
    };
    this.ⲆᐃⲆⲆⲆⵠⲆΔⲆ = function () {
      if (xx > 5) {
        this.ᐃⵠⵠΔⲆⵠⲆ = wx;
      }
      if (wx - this.ᐃⵠⵠΔⲆⵠⲆ > 600000) {
        this.ᐃⵠⵠΔⲆⵠⲆ = wx;
        this.ᐃⵠⵠᐃᐃᐃⵠΔΔ();
      }
    };
    this.ⲆᐃΔᐃᐃᐃΔᐃⵠ = function (c) {
      Fx++;
      clearTimeout(this.ΔⲆⵠᐃⲆ);
      document.getElementById("commandMainBoxName").innerHTML = this.ⲆⲆⲆⲆⲆ[this.ᐃᐃⲆⵠⲆ][this.ⵠᐃΔⵠΔΔᐃ[this.ᐃᐃⲆⵠⲆ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ᐃⵠⵠΔⲆⵠⲆ = wx;
      qx.ⵠⲆⲆⵠ.ⵠᐃⲆΔᐃ.ⵠⵠⵠⵠΔ = qx.ⵠⲆⲆⵠ.ⵠᐃⲆΔᐃ.ⵠⲆⲆⵠΔ;
      qx.ⵠⲆⲆⵠ.ᐃⵠⵠⲆΔᐃⲆ.ⵠⵠⵠⵠΔ = qx.ⵠⲆⲆⵠ.ᐃⵠⵠⲆΔᐃⲆ.ⵠⲆⲆⵠΔ;
      qx.ⵠⲆⲆⵠ.ⲆⲆΔⵠᐃⵠΔ.ⵠⵠⵠⵠΔ = qx.ⵠⲆⲆⵠ.ⲆⲆΔⵠᐃⵠΔ.ⵠⲆⲆⵠΔ;
      qx.ⵠⲆⲆⵠ.ΔᐃᐃⲆᐃΔⲆ.ⵠⵠⵠⵠΔ = qx.ⵠⲆⲆⵠ.ΔᐃᐃⲆᐃΔⲆ.ⵠⲆⲆⵠΔ;
      qx.ⵠⲆⲆⵠ.ΔⲆΔᐃⵠⵠΔ.ⵠⵠⵠⵠΔ = qx.ⵠⲆⲆⵠ.ΔⲆΔᐃⵠⵠΔ.ⵠⲆⲆⵠΔ;
      qx.ⵠⲆⲆⵠ.ⵠⲆⵠᐃ = 1;
      qx.ⵠⲆⲆⵠ.c = 1;
      qx.ⵠⲆⲆⵠ.ᐃⲆᐃ = 1;
      qx.ⵠⲆⲆⵠ.ᐃᐃⵠ = 1;
      qx.ⵠⲆⲆⵠ.ⲆᐃΔ = 1;
      qx.ⵠⲆⲆⵠ.ΔⲆᐃΔᐃᐃᐃ = 1;
      qx.ᐃⵠΔⲆⵠⲆΔ = false;
      sx.ΔⲆⲆⲆᐃ.display = 0;
      qx.ⵠⲆΔⲆ.ⲆΔΔⵠᐃ = [];
      qx.ⵠⲆΔⲆ.ⵠᐃⵠ = [];
      qx.ⵠⲆΔⲆ.max = 10;
      qx.ⵠⲆΔⲆ.ΔⵠΔⵠΔᐃⲆ = 0;
      qx.ⵠⲆΔⲆ.ⵠⵠᐃᐃⵠ = 0;
      qx.ⵠⲆΔⲆ.id = -1;
      sx.ⲆⵠⲆΔⲆⲆΔ = 1;
      sx.ᐃⵠΔΔⲆΔⲆ = 1;
      sx.ᐃΔΔᐃᐃⲆⲆ = 1;
      sx.ⵠⲆᐃⲆᐃⵠⵠ = 1;
      qx.ΔⵠⲆΔᐃ = u;
      qx.ⵠⲆΔⲆ.ᐃΔΔΔᐃⲆⲆ.stop();
      qx.ᐃⲆⵠⵠ.ᐃⲆⵠᐃΔ = [];
      qx.ᐃⲆⵠⵠ.ᐃⵠᐃΔᐃ = Cl;
      qx.ᐃⲆⵠⵠ.ᐃⵠΔⲆⲆⲆⵠⵠᐃ = false;
      qx.ᐃⲆⵠⵠ.ⲆΔᐃΔ = -1;
      qx.ᐃⲆⵠⵠ.id = -1;
      qx.ᐃⲆⵠⵠ.ᐃⵠⲆΔᐃ = wr;
      qx.ᐃⲆⵠⵠ.ΔⲆⲆⵠΔ = Go;
      qx.ᐃⲆⵠⵠ.ⲆⲆΔⲆⵠ = false;
      qx.ᐃⲆⵠⵠ.ΔⲆΔΔΔⵠⵠ = Nq;
      qx.ᐃⲆⵠⵠ.timeout = new ᐃⵠⲆΔ.ⲆΔⲆΔ(nl, 0, 1, 0, 1, 1);
      qx.ΔⵠⲆⲆΔ.timeout = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 1, 0, 1 / 10, 1);
      qx.ΔⵠⲆⲆΔ.wait = false;
      qx.ⵠⵠⲆΔⲆ.timeout = new ᐃⵠⲆΔ.ⲆΔⲆΔ(false, 0, 1, 0, 1 / 5, 1);
      qx.ⵠⵠⲆΔⲆ.wait = false;
      qx.ΔⲆⵠᐃΔ.timeout = new ᐃⵠⲆΔ.ⲆΔⲆΔ(zj, 0, 1, 0, 1, 1);
      qx.ΔⲆⵠᐃΔ.wait = lh;
      qx.Δⵠⵠᐃᐃ.id = -1;
      qx.Δⵠⵠᐃᐃ.ΔⵠΔΔ = -1;
      qx.Δⵠⵠᐃᐃ.wait = kh;
      qx.Δⵠⵠᐃᐃ.timeout = new ᐃⵠⲆΔ.ⲆΔⲆΔ(fk, 0, 1, 0, 1 / 30, 1);
      sx.ⵠⲆⵠΔⵠ.ΔⵠΔⲆΔⲆΔ.x = -1;
      sx.ⵠⲆⵠΔⵠ.ΔⵠΔⲆΔⲆΔ.y = -1;
      sx.ΔⲆⵠⵠ.open = Nn;
      sx.ⵠⲆⵠΔⵠ.ΔΔᐃᐃ = [];
      qx.ᐃΔⲆⵠⵠⵠᐃ.enabled = Nq;
      px.mode = c[1];
      if (c[20] !== undefined && c[21] !== Aa) {
        px.ᐃⲆⲆᐃⲆ = c[20];
        px.ⲆⲆⲆᐃᐃ = c[21];
        px.w = px.ⵠΔⲆᐃⲆᐃᐃ * px.ᐃⲆⲆᐃⲆ;
        px.ᐃⲆᐃ = px.ⲆⲆⲆᐃᐃ * px.ⵠΔⵠⵠⵠⵠΔ;
      }
      px.ᐃⲆⵠⵠΔᐃᐃ = c[22];
      px.ᐃΔⵠⵠⵠ = c[23];
      b.ΔⵠᐃⵠⵠⲆⲆ(c[24]);
      b.ⲆⵠⲆΔᐃΔⵠⵠᐃ(c[25]);
      qx.ΔΔΔᐃΔ.ᐃᐃⵠΔΔ = c[26];
      qx.ᐃᐃⵠⵠᐃⲆⵠ = 0;
      qx.ᐃᐃᐃΔⵠ.ᐃᐃⵠΔΔ = c[27];
      px.ⵠⵠⲆᐃᐃΔⵠᐃⲆ(c[19]);
      px.time = c[5];
      px.ⲆⲆΔᐃΔ.ⵠⵠⲆⵠⵠ = c[15];
      px.ⲆⲆΔᐃΔ.ⵠΔⵠⵠⲆ = new Date().getTime();
      sx.ᐃⵠⵠⵠ.ⵠᐃⵠⲆⵠⵠᐃ = c[16];
      px.transition = kh;
      qx.Δᐃⵠ = c[2];
      sx.ᐃⵠⵠⵠ.reset();
      qx.ⵠΔΔΔΔ = c[8];
      px.ᐃᐃΔ[0] = [];
      px.ᐃᐃΔ[100] = [];
      px.ᐃᐃΔ[2] = [];
      px.ᐃᐃΔ[1] = [];
      px.ᐃᐃΔ[6] = [];
      px.ᐃᐃΔ[3] = [];
      px.ᐃᐃΔ[31] = [];
      px.ᐃᐃΔ[37] = [];
      px.ᐃᐃΔ[43] = [];
      px.ᐃᐃΔ[44] = [];
      px.ᐃᐃΔ[39] = [];
      px.ᐃᐃΔ[40] = [];
      px.ᐃᐃΔ[54] = [];
      px.ᐃᐃΔ[55] = [];
      px.ᐃᐃΔ[4] = [];
      px.ᐃᐃΔ[7] = [];
      px.ᐃᐃΔ[8] = [];
      px.ᐃᐃΔ[9] = [];
      px.ᐃᐃΔ[10] = [];
      px.ᐃᐃΔ[15] = [];
      px.ᐃᐃΔ[16] = [];
      px.ᐃᐃΔ[17] = [];
      px.ᐃᐃΔ[45] = [];
      px.ᐃᐃΔ[46] = [];
      px.ᐃᐃΔ[47] = [];
      px.ᐃᐃΔ[48] = [];
      px.ᐃᐃΔ[49] = [];
      px.ᐃᐃΔ[53] = [];
      px.ᐃᐃΔ[11] = [];
      px.ᐃᐃΔ[22] = [];
      px.ᐃᐃΔ[23] = [];
      px.ᐃᐃΔ[5] = [];
      px.ᐃᐃΔ[12] = [];
      px.ᐃᐃΔ[13] = [];
      px.ᐃᐃΔ[14] = [];
      px.ᐃᐃΔ[60] = [];
      px.ᐃᐃΔ[70] = [];
      px.ᐃᐃΔ[71] = [];
      px.ᐃᐃΔ[72] = [];
      px.ᐃᐃΔ[73] = [];
      px.ᐃᐃΔ[74] = [];
      px.ᐃᐃΔ[81] = [];
      px.ᐃᐃΔ[82] = [];
      px.ᐃᐃΔ[87] = [];
      px.ᐃᐃΔ[86] = [];
      px.ᐃᐃΔ[34] = [];
      px.ᐃᐃΔ[65] = [];
      px.ᐃᐃΔ[66] = [];
      px.ᐃᐃΔ[67] = [];
      px.ᐃᐃΔ[62] = [];
      px.ᐃᐃΔ[63] = [];
      px.ᐃᐃΔ[78] = [];
      px.ᐃᐃΔ[77] = [];
      px.ᐃᐃΔ[75] = [];
      px.ᐃᐃΔ[76] = [];
      px.ᐃᐃΔ[64] = [];
      px.ᐃᐃΔ[69] = [];
      px.ᐃᐃΔ[68] = [];
      px.ᐃᐃΔ[79] = [];
      px.ᐃᐃΔ[89] = [];
      px.ᐃᐃΔ[83] = [];
      px.ᐃᐃΔ[84] = [];
      px.ᐃᐃΔ[85] = [];
      px.ᐃᐃΔ[80] = [];
      px.ᐃᐃΔ[88] = [];
      px.ᐃᐃΔ[91] = [];
      px.ᐃᐃΔ[90] = [];
      px.ᐃᐃΔ[61] = [];
      px.ᐃᐃΔ[18] = [];
      px.ᐃᐃΔ[19] = [];
      px.ᐃᐃΔ[20] = [];
      px.ᐃᐃΔ[21] = [];
      px.ᐃᐃΔ[50] = [];
      px.ᐃᐃΔ[52] = [];
      px.ᐃᐃΔ[51] = [];
      px.ᐃᐃΔ[29] = [];
      px.ᐃᐃΔ[56] = [];
      px.ᐃᐃΔ[30] = [];
      px.ᐃᐃΔ[38] = [];
      px.ᐃᐃΔ[33] = [];
      px.ᐃᐃΔ[32] = [];
      px.ᐃᐃΔ[24] = [];
      px.ᐃᐃΔ[25] = [];
      px.ᐃᐃΔ[26] = [];
      px.ᐃᐃΔ[27] = [];
      px.ᐃᐃΔ[28] = [];
      px.ᐃᐃΔ[42] = [];
      px.ᐃᐃΔ[41] = [];
      px.ᐃᐃΔ[35] = [];
      px.ᐃᐃΔ[36] = [];
      px.ⲆⲆᐃΔⵠ = [];
      px.ᐃⲆᐃⵠΔᐃᐃ = c[7];
      qx.id = c[9];
      qx.ᐃΔⲆⵠ = px.ᐃⲆᐃⵠΔᐃᐃ * qx.id;
      if (tx.loaded) {
        tx.ΔΔᐃᐃ[0].ᐃΔⲆⵠ = qx.ᐃΔⲆⵠ;
        tx.ΔΔᐃᐃ[0].ⵠᐃⵠⲆⲆⵠⲆ = 0;
      }
      ux.ⵠⲆΔᐃΔⵠⲆ();
      qx.ⲆⲆᐃ.ⲆⵠᐃᐃⲆ(c[3], c[10]);
      px.ΔΔᐃᐃ = [];
      var d = px.ΔΔᐃᐃ;
      for (var e = 0; c[11] > e; e++) {
        d.push(new Ff());
      }
      e = 0;
      for (var f = c[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ⵠΔᐃΔⲆ = f[e].n;
        g.ⵠᐃⵠⲆ = f[e].s;
        g.ᐃΔⵠⲆᐃ = f[e].a;
        g.ⲆⵠⲆⲆⵠ = f[e].c;
        g.ΔⵠᐃⲆⵠ = f[e].b;
        g.ⵠΔΔⲆᐃ = f[e].d;
        g.ⵠΔⲆᐃⲆᐃⲆ = f[e].g;
        g.level = f[e].l;
        g.ᐃᐃΔⲆΔ = ᐃⵠⲆΔ.ΔΔⲆⵠᐃᐃⵠ(f[e].p);
        g.ΔⵠⲆΔᐃ = true;
        if (mf === 1) {
          g.ⵠΔᐃΔⲆ += "|" + f[e].i;
        }
      }
      qx.ΔᐃⲆⲆⵠ.sort();
      if (px.mode === 1 && px.ΔΔᐃᐃ[qx.id].ⵠΔᐃΔⲆ === "spectator") {
        qx.ⲆΔᐃΔⲆⵠΔ = il;
      } else {
        qx.ⲆΔᐃΔⲆⵠΔ = false;
      }
      if (px.mode === 2 && px.ΔΔᐃᐃ[qx.id].ⵠᐃⵠⲆ === 0) {
        qx.ᐃⲆⵠΔᐃ = true;
      } else {
        qx.ᐃⲆⵠΔᐃ = false;
      }
      if (px.mode === 3 && px.ΔΔᐃᐃ[qx.id].ⵠᐃⵠⲆ === 0) {
        qx.ᐃᐃⲆΔⵠⵠⵠ = true;
      } else {
        qx.ᐃᐃⲆΔⵠⵠⵠ = false;
      }
      ᐃᐃⲆⵠ.set("starve_token", qx.ⵠⵠⲆⵠⲆ);
      if (c[12] === 0) {
        qx.ΔⲆΔᐃⲆ.ΔⲆⲆΔΔ = 0;
        sx.ᐃⵠⵠⵠ.restore(c[17]);
        var h = c[14];
        if (h[29]) {
          qx.ⵠⲆΔⲆ.ᐃⲆΔⵠᐃΔᐃ(1, 0);
        }
        for (e = 0; h.length > e; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ΔⲆᐃⲆⲆΔⲆ([0, e, h[e]]);
          }
        }
        qx.ΔⲆΔᐃⲆ.open = wr;
      } else {
        if (px.mode === 4) {
          this.ΔⲆᐃⲆⲆΔⲆ([0, 238, 1]);
        } else if (px.mode === 3) {
          if (qx.ᐃᐃⲆΔⵠⵠⵠ) {
            this.ΔⲆᐃⲆⲆΔⲆ([0, 190, 4]);
          } else {
            this.ΔⲆᐃⲆⲆΔⲆ([0, 191, 3]);
          }
        }
        if (px.mode === 0 || px.mode === 3 || px.mode === 7 || px.mode === 4) {
          qx.ΔⲆΔᐃⲆ.ΔⲆⲆΔΔ = new Date().getTime();
          qx.ΔⲆΔᐃⲆ.open = Qn;
          qx.ΔⲆΔᐃⲆ.value = c[13];
          sx.ΔⲆΔᐃⲆ.ⵠΔⵠⵠⲆ();
        } else {
          qx.ΔⲆΔᐃⲆ.ΔⲆⲆΔΔ = 0;
          qx.ΔⲆΔᐃⲆ.open = Tr;
          qx.ΔⲆΔᐃⲆ.value = 0;
        }
        qx.ⵠΔⵠᐃΔⲆⲆ = c[12].toString();
      }
      qx.ΔⲆⵠΔⵠ.enabled = c[6];
      qx.ΔⲆⵠΔⵠ.ΔⲆⲆΔΔ = -1;
      qx.ΔⲆⵠΔⵠ.label = null;
      qx.ΔⲆⵠΔⵠ.now = -1;
      ᐃᐃⲆⵠ.set("starve_token_id", qx.ⵠΔⵠᐃΔⲆⲆ);
      if (qx.reconnect.enabled) {
        qx.reconnect.rotate = 0;
        qx.reconnect.enabled = false;
      } else {
        mx.ⲆⲆⲆⵠᐃ(sx.ⲆᐃΔᐃⲆ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + mx.ⵠᐃⵠⲆ + "A" + mx.ᐃΔⵠⲆᐃ);
        }
      }
    };
    this.connect = function () {
      b.ΔΔⲆΔᐃⵠΔ = 0;
      b.ΔᐃᐃⵠᐃⲆⲆ();
    };
    this.ᐃⲆⵠⵠΔⵠᐃ = [];
    this.ⵠⵠⵠΔⲆⵠⵠΔⲆ = function (c) {
      const d = b.ⵠᐃⵠᐃⲆ.filter(a => a.gm === c);
      const f = {};
      for (let a = 0; a < d.length; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== Xg) {
          if (Bg === f[c]) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function e(d) {
        b.ᐃⲆⵠⵠΔⵠᐃ[c] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        b.ⲆᐃⵠΔⵠΔⲆ({
          domain: zf,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (b.ᐃⲆⵠⵠΔⵠᐃ[c] !== undefined) {
        e(b.ᐃⲆⵠⵠΔⵠᐃ[c]);
        return;
      }
      let a = 1;
      function g(b) {
        const c = new za.XMLHttpRequest();
        const d = b[0];
        const f = d.p;
        const g = d.r;
        const i = f[Math.floor(Math.random() * f.length)];
        c.open("GET", "https://" + i + "." + zf + "/", true);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            e(g);
          }
        };
        c.send();
      }
      for (let a in f) {
        g(f[a]);
      }
      za.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = za.Object.keys(f);
        e(b[Math.floor(b.length * Math.random())]);
      }, 5000);
    };
    this.ᐃⵠᐃᐃᐃΔⲆⲆΔ = function () {
      let a = Jf.ᐃⵠⲆᐃⲆΔΔ[b.ᐃᐃⲆⵠⲆ];
      console.log(undefined, undefined, undefined);
      let c = b.ⵠᐃΔⵠΔΔᐃ[b.ᐃᐃⲆⵠⲆ];
      let d = b.ⵠᐃⵠᐃⲆ.find(b => b.gm == a && b.idx == c);
      if (d === undefined) {
        b.ⵠⵠⵠΔⲆⵠⵠΔⲆ(a);
      } else {
        b.ⲆᐃⵠΔⵠΔⲆ({
          domain: zf,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ΔᐃᐃⵠᐃⲆⲆ = function () {
      console.log(Y);
      if (Gw !== undefined && ff !== kg) {
        console.log(undefined, p, undefined);
        b.ⲆᐃⵠΔⵠΔⲆ({
          domain: zf,
          is_tls: 1,
          id: ff + Gw,
          p: b.ᐃⲆᐃΔΔⵠᐃ[ff]
        });
        return;
      }
      if (Cf === Aa) {
        b.ᐃⵠᐃᐃᐃΔⲆⲆΔ();
      } else {
        b.ⲆᐃⵠΔⵠΔⲆ({
          domain: Cf.domain,
          is_tls: Cf.ssl,
          id: Cf.id,
          p: [Cf.p]
        });
      }
    };
    this.ⲆᐃⵠΔⵠΔⲆ = function (c) {
      let d = c.domain;
      let e = c.is_tls;
      let f = c.id;
      let a = c.p;
      let g = a[Math.floor(Math.random() * a.length)];
      let i = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
      console.log(Di, Ak);
      b.ᐃᐃⵠⵠ = new za.WebSocket(i);
      b.ᐃᐃⵠⵠ.binaryType = "arraybuffer";
      b.ᐃᐃⵠⵠ.ΔⲆᐃᐃⵠ = b.ΔⲆᐃᐃⵠ;
      b.ᐃᐃⵠⵠ.onmessage = function (a) {
        if (b.ΔⲆᐃᐃⵠ == b.ΔⲆᐃᐃⵠ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case 0:
                b.ΔⲆᐃⵠΔ(c);
                break;
              case 1:
                b.ᐃⵠⵠⵠⵠᐃᐃ(c[1]);
                break;
              case 2:
                b.ⲆᐃⵠΔⵠⵠⲆⵠᐃ(c);
                break;
              case 3:
                b.ⲆᐃΔᐃᐃᐃΔᐃⵠ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case 5:
                b.ⵠΔⲆⲆᐃᐃΔ(c);
                break;
              case 6:
                b.ΔⵠᐃⵠⵠⲆⲆ(c[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g = Hw[e];
              let a = fh;
              let h = Yh;
              if (Es === g) {
                kf += e * 2;
                if (kf < 65535) {
                  a = ae(zi(e));
                } else {
                  kf = e;
                  for (let a = 0; a < Hw.length; a++) {
                    if (Hw[a] !== undefined) {
                      const b = Hw[a][0];
                      Hw[a] = undefined;
                      ej(b);
                    }
                  }
                  a = ae(zi(e));
                  le();
                }
                h = Zi(a);
                Hw[e] = [a, h];
              } else {
                a = g[0];
                h = g[1];
              }
              for (let a = 0; f.length > a; a++) {
                h[a] = f[a];
              }
              Ci(a, c, d);
              for (let a = 0; a < f.length; a++) {
                f[a] = h[a];
              }
              return f;
            }(a.data, qx.ΔⲆⵠᐃⲆⲆᐃ, qx.ⵠΔⲆⲆᐃⵠⲆΔΔ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                b.ᐃᐃΔ(e, d, false);
                break;
              case 1:
                b.ᐃᐃΔ(e, d, true);
                break;
              case 2:
                b.ⵠⵠⵠᐃⵠᐃⵠⵠⲆ();
                break;
              case 3:
                b.ΔⲆᐃⲆⲆΔⲆ(new Uint16Array(e));
                break;
              case 4:
                b.ⵠⵠΔⵠᐃⲆᐃΔⵠ();
                break;
              case 5:
                b.ᐃᐃⵠⵠᐃΔⲆᐃΔ();
                break;
              case 6:
                b.ⵠᐃΔᐃᐃⵠΔΔΔ();
                break;
              case 7:
                b.ⵠΔᐃⲆⲆΔᐃᐃΔ(e);
                break;
              case 8:
                b.ⵠΔΔΔⵠΔΔᐃⵠ(d[1]);
                break;
              case 9:
                b.ΔΔⲆⲆⲆⵠᐃᐃⵠ(d[1]);
                break;
              case 10:
                b.ⲆΔⲆⵠΔᐃⲆ();
                break;
              case 11:
                b.ΔⵠⵠΔᐃΔΔ(d[1], d[2]);
                break;
              case 12:
                b.ᐃⵠⲆΔᐃ(d[1]);
                break;
              case 13:
                b.ΔᐃⵠᐃΔΔᐃᐃⵠ(d, e);
                break;
              case 14:
                b.ⵠⵠΔᐃΔⵠⵠ();
                break;
              case 15:
                b.ⲆᐃᐃⲆΔⲆⵠᐃⲆ(d[1]);
                break;
              case 16:
                b.ⵠⲆⲆⵠ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                b.ᐃᐃⵠᐃᐃᐃᐃᐃΔ(e);
                break;
              case 18:
                b.ᐃⲆΔⵠⵠⲆΔΔᐃ();
                break;
              case 19:
                b.ⲆⲆΔⲆⵠ(d[1]);
                break;
              case 20:
                b.ᐃΔᐃᐃⵠᐃⵠⵠⲆ();
                break;
              case 21:
                b.ᐃᐃΔᐃ(e);
                break;
              case 22:
                b.ⲆⵠⵠⵠⲆΔΔΔΔ(d[1]);
                break;
              case 23:
                b.ⵠΔⲆΔᐃⲆΔᐃΔ(e);
                break;
              case 24:
                b.ⲆΔΔᐃᐃⲆΔⲆⲆ(d[1]);
                break;
              case 25:
                b.ΔᐃᐃΔⲆⲆⲆⲆⲆ(d[1], e);
                break;
              case 26:
                b.ⵠⲆⵠΔⵠ(d);
                break;
              case 27:
                b.ᐃⵠᐃⵠⵠⵠⲆᐃᐃ();
                break;
              case 28:
                b.ΔⲆⵠΔⵠ(d[1]);
                break;
              case 29:
                b.ΔΔⵠΔᐃⲆⲆⲆⵠ();
                break;
              case 30:
                b.ΔᐃⲆΔⲆΔⵠⵠᐃ();
                break;
              case 31:
                b.ⵠΔⲆΔᐃⲆΔⵠⵠ(d);
                break;
              case 32:
                b.ⲆⵠⲆᐃⵠΔᐃΔΔ(d[1]);
                break;
              case 33:
                b.ΔⲆΔⵠΔᐃΔⵠⲆ(d[1]);
                break;
              case 34:
                b.ΔΔⵠⲆΔⵠᐃⵠⲆ();
                break;
              case 35:
                b.ⵠⵠⵠΔᐃΔⵠⲆⵠ(d[1]);
                break;
              case 36:
                b.ΔⲆΔΔΔⵠⵠ(d[1]);
                break;
              case 37:
                b.ⲆⲆΔⵠᐃⲆΔᐃⵠ(d[1], d[2]);
                break;
              case 38:
                b.ⵠⲆⵠΔΔⲆᐃΔΔ(d[1]);
                break;
              case 39:
                b.ⵠΔᐃΔⵠᐃⲆⵠᐃ(d[1]);
                break;
              case 40:
                b.ᐃⵠᐃᐃᐃᐃᐃΔᐃ();
                break;
              case 41:
                b.ΔΔᐃᐃΔΔⲆᐃⵠ(d);
                break;
              case 42:
                b.ⲆⵠⵠⵠⲆᐃᐃᐃⵠ(d[1]);
                break;
              case 43:
                b.ⲆⵠⵠⵠᐃΔᐃᐃⲆ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ᐃᐃⲆⵠᐃᐃⲆᐃΔ(d[1]);
                break;
              case 46:
                b.ΔⵠΔⲆⵠᐃⲆⵠΔ(d[1]);
                break;
              case 47:
                b.ΔⲆⲆⵠΔ(d[1]);
                break;
              case 48:
                b.ⵠⵠΔΔⲆⲆᐃΔⵠ();
                break;
              case 50:
                b.ⵠⲆⲆΔᐃⲆΔᐃΔ(d[1], d[2], d[3]);
                break;
              case 51:
                b.ᐃΔᐃΔΔᐃᐃⵠᐃ();
                break;
              case 52:
                b.ⵠⵠⵠΔⲆⵠⵠᐃΔ(d[1]);
                break;
              case 53:
                b.ⲆᐃⲆΔΔⵠᐃΔᐃ(d[1]);
                break;
              case 54:
                b.ⲆᐃⲆΔⲆᐃⵠᐃᐃ();
                break;
              case 55:
                b.ΔΔⲆΔⲆᐃᐃⲆᐃ(d[1]);
                break;
              case 56:
                b.ⵠⲆⵠᐃⵠⲆⲆⵠⲆ(d[1]);
                break;
              case 57:
                b.ᐃⵠⲆⵠᐃᐃᐃⲆᐃ();
                break;
              case 58:
                b.ⲆⵠⲆⲆᐃⵠᐃΔⵠ();
                break;
              case 59:
                b.ΔΔⵠⲆΔᐃᐃⵠⲆ();
                break;
              case 60:
                b.ΔᐃⲆᐃᐃⲆⲆΔᐃ();
                break;
              case 61:
                qx.ⲆⲆᐃ.ᐃⵠⲆᐃⲆⲆⲆ = 0.2;
                qx.ⲆⲆᐃ.ΔⲆⲆΔΔ = 3;
                break;
              case 62:
                b.ⲆⵠΔⵠᐃΔⵠⲆΔ(new Uint16Array(e));
                break;
              case 63:
                b.ⵠⵠᐃΔⵠᐃⵠⲆΔ();
                break;
              case 64:
                b.ⲆᐃΔᐃⲆⲆⲆⲆⲆ();
                break;
              case 65:
                b.ⵠᐃⵠᐃΔⲆⵠΔΔ();
                break;
              case 66:
                b.ᐃᐃⵠⲆⲆⵠⵠΔⵠ();
                break;
              case 67:
                b.ᐃΔᐃⲆⵠᐃⲆᐃⲆ(d[1]);
                break;
              case 68:
                b.ⲆΔⲆᐃΔΔⵠΔⵠ(d[1]);
                break;
              case 69:
                b.ᐃᐃⵠⵠᐃⲆⵠ(d[1]);
                break;
              case 70:
                b.ΔᐃⲆΔⵠΔⵠⵠⲆ(d[1]);
                break;
              case 71:
                b.ᐃᐃⲆⵠΔ(d[1]);
            }
          }
        }
      };
      b.ᐃᐃⵠⵠ.onerror = function () {
        if (qx.reconnect.enabled) {
          za.setTimeout(b.timeout, 2500);
        }
      };
      this.ᐃᐃⵠⵠ.onopen = function () {
        clearTimeout(b.ΔⲆⵠᐃⲆ);
        qx.ᐃᐃⲆΔⵠΔᐃ = qx.ᐃᐃⲆΔⵠΔᐃ || ᐃⵠⲆΔ.ⵠⵠⲆΔΔⵠⵠ("token");
        ᐃⵠⲆΔ.ᐃⵠᐃⵠⲆⵠΔ().then(a => {
          b.ᐃᐃⵠⵠ[cf](tq[Ca].stringify([mx.ⵠΔᐃΔⲆ.input.value, screen.width + 200, screen.height + 200, 52, qx.ⵠⵠⲆⵠⲆ, qx.ⵠΔⵠᐃΔⲆⲆ, qx.reconnect.enabled ? 1 : 0, mx.ⵠᐃⵠⲆ, mx.ᐃΔⵠⲆᐃ, mx.ⵠⵠᐃᐃⵠ, mx.ΔⵠᐃⲆⵠ, mx.ⲆⵠⲆⲆⵠ, mx.ⵠΔΔⲆᐃ, Px === undefined ? 0 : Px, Ox === Y ? 0 : Ox.substring(Ox.length - 50), pf, qx.ᐃᐃⲆΔⵠΔᐃ, a, qx.ᐃⲆᐃⵠᐃΔᐃ, qx.ΔᐃΔⵠΔⲆᐃ]));
          qx.ᐃᐃⲆΔⵠΔᐃ = undefined;
          qx.ᐃⲆᐃⵠᐃΔᐃ = at;
          qx.ΔᐃΔⵠΔⲆᐃ = Bg;
          b.ΔⲆⵠᐃⲆ = setTimeout(b.timeout, 2000);
        });
      };
    };
  }();
  var px;
  var qx;
  var rx;
  var sx = {
    ΔᐃᐃᐃΔ: false
  };
  var tx = new function () {
    this.ⲆᐃΔᐃⲆ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ᐃⲆᐃⲆⵠⲆⲆ = function (a) {
      return a / px.w * 100;
    };
    this.ⵠⵠΔᐃⲆᐃΔ = function (a) {
      return a / px.ᐃⲆᐃ * 100;
    };
    this.ΔⲆΔᐃⵠΔᐃ = function (a, b) {
      a = this.ᐃⲆᐃⲆⵠⲆⲆ(a) - this.Ⲇⵠᐃᐃᐃ.x;
      return this.Ⲇⵠᐃᐃᐃ.x + b * a;
    };
    this.ⵠᐃΔΔᐃΔΔ = function (a, b) {
      a = Math.abs(this.ⵠⵠΔᐃⲆᐃΔ(a) - this.Ⲇⵠᐃᐃᐃ.y);
      return this.Ⲇⵠᐃᐃᐃ.y + b * a;
    };
    this.sample = {};
    this.ⲆᐃΔⵠΔ = {};
    this.ΔⲆⵠΔ = {};
    this.ⵠⵠᐃᐃᐃⵠᐃ = function (b, c, d, e) {
      for (var f = 0; c.length > f; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return true;
        }
      }
      return lh;
    };
    this.ⲆⲆⲆ = function (a, b, c, d) {
      c = this.ΔⲆΔᐃⵠΔᐃ(c, ⲆⲆⲆⲆⵠ.ⲆΔⵠᐃΔⲆΔ);
      d = this.ⵠᐃΔΔᐃΔΔ(d, ⲆⲆⲆⲆⵠ.ⲆΔⵠᐃΔⲆΔ);
      console.log("HIT", a, b, c, d, ⲆⲆⲆⲆⵠ.ⲆΔⵠᐃΔⲆΔ);
      if (a) {
        if (b === 1) {
          this.ⵠⵠᐃᐃᐃⵠᐃ(this.ΔⲆⵠΔ.ᐃⲆⵠᐃⲆᐃΔ, this.sample.ᐃⲆⵠᐃⲆᐃΔ, c, d);
        } else if (b === 0) {
          this.ⵠⵠᐃᐃᐃⵠᐃ(this.ΔⲆⵠΔ.ⵠⵠΔᐃⲆⵠⲆ, this.sample.ⵠⵠΔᐃⲆⵠⲆ, c, d);
        }
      } else {
        this.ⵠⵠᐃᐃᐃⵠᐃ(this.ΔⲆⵠΔ.ᐃΔΔⵠΔ, this.sample.ᐃΔΔⵠΔ, c, d);
      }
    };
    this.Ⲇⵠᐃᐃᐃ = {
      y: 0,
      x: 0
    };
    this.ΔⵠⲆⲆΔΔⲆ = {
      y: 0,
      x: 0
    };
    this.ᐃᐃⲆΔᐃ = {};
    this.ΔΔᐃᐃ = [];
    this.ⵠⵠⲆⵠᐃ = function (a, b) {
      for (var c in this.ᐃᐃⲆΔᐃ) {
        var d = this.ᐃᐃⲆΔᐃ[c];
        d.check(a);
        if (d.ⲆⵠⵠⲆⲆᐃⲆ) {
          if (px.ⲆⲆΔᐃΔ.now < 460000) {
            d.ⵠⵠᐃⵠⲆ();
          }
          if (b) {
            d.ᐃΔΔ(a, this.Ⲇⵠᐃᐃᐃ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⵠⲆⲆⵠⵠⵠΔⵠΔ = function () {
      var a = [];
      for (var b = 0; this.ΔΔᐃᐃ.length > b; b++) {
        if ((e = this.ΔΔᐃᐃ[b]).ⵠᐃⵠⲆⲆⵠⲆ) {
          a.push(b);
        } else if (!e.ⵠᐃⵠⲆⲆⵠⲆ && !px.ⲆⲆᐃΔⵠ[e.ᐃΔⲆⵠ]) {
          e.ⲆⲆᐃΔΔⵠᐃ();
          a.push(b);
        }
      }
      var c = px.ᐃᐃΔ[0];
      var d = 0;
      for (b = 0; c.length > b && a.length > d; b++) {
        var e = c[b];
        if ((px.mode != 1 || px.ΔΔᐃᐃ[e.id].ⵠΔᐃΔⲆ !== "spectator") && e.ΔⲆᐃⲆΔ === -1 && qx.ᐃΔⲆⵠ !== e.ᐃΔⲆⵠ) {
          this.ΔΔᐃᐃ[a[d]].ⵠΔⵠⵠⲆ(e.ᐃΔⲆⵠ);
          d++;
        }
      }
    };
    this.ᐃΔⵠⲆⵠᐃⲆⵠΔ = function () {
      this.ⵠⲆⲆⵠⵠⵠΔⵠΔ();
      for (var a = 0; this.ΔΔᐃᐃ.length > a; a++) {
        var b = this.ΔΔᐃᐃ[a];
        if (!b.ⵠᐃⵠⲆⲆⵠⲆ && b.check()) {
          b.ᐃΔΔ();
        }
      }
    };
    this.ᐃⲆⵠΔᐃΔⵠᐃΔ = function (a) {
      if (a.x === this.ΔⵠⲆⲆΔΔⲆ.x && a.y === this.ΔⵠⲆⲆΔΔⲆ.y) {
        return 0;
      } else {
        this.ΔⵠⲆⲆΔΔⲆ.x = a.x;
        this.ΔⵠⲆⲆΔΔⲆ.y = a.y;
        this.Ⲇⵠᐃᐃᐃ.x = this.ᐃⲆᐃⲆⵠⲆⲆ(a.x);
        this.Ⲇⵠᐃᐃᐃ.y = this.ⵠⵠΔᐃⲆᐃΔ(a.y);
        Howler.pos(this.Ⲇⵠᐃᐃᐃ.x, this.Ⲇⵠᐃᐃᐃ.y, 0);
        return 1;
      }
    };
    this.ⲆⵠⵠᐃⲆΔᐃⲆᐃ = function () {
      if (this.ⲆᐃΔᐃⲆ && this.loaded) {
        var a = px.ⲆⲆᐃΔⵠ[qx.ᐃΔⲆⵠ];
        if (a) {
          a.ΔⲆᐃⲆΔ = 0;
          var b = this.ᐃⲆⵠΔᐃΔⵠᐃΔ(a);
          if (px.mode !== 2 && px.mode !== 4 && px.mode !== 5) {
            this.ⵠⵠⲆⵠᐃ(a, b);
          }
          this.ᐃΔⵠⲆⵠᐃⲆⵠΔ();
        }
      }
    };
    this.ΔΔᐃⲆⵠⲆⵠⵠⵠ = function () {
      for (var b in hx) {
        var c = hx[b];
        if (typeof c === "object" && c.path) {
          c.ⵠⵠⵠⲆΔ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.Ⲇᐃ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(Kn);
          for (var h = 0; h < f; h++) {
            var j = c.ⵠⵠⵠⲆΔ.play(d);
            c.ⵠⵠⵠⲆΔ.stop(j);
            c.ⵠⵠⵠⲆΔ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(undefined, undefined);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            tx.sample[d] = g;
          } else {
            tx.sample[d] = g[0];
          }
          tx.ΔⲆⵠΔ[d] = c.ⵠⵠⵠⲆΔ;
        }
      }
    };
    this.ⲆᐃⲆⲆⵠΔᐃ = function (a, b, c) {
      for (var d = 0; d < a.length; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⲆⲆᐃⵠⲆᐃⵠ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; i < d; i++) {
        var j = a[i] = [];
        for (ᐃⵠᐃⲆ = 0; ᐃⵠᐃⲆ < e; ᐃⵠᐃⲆ++) {
          j[ᐃⵠᐃⲆ] = tx.sample[f + ᐃⵠᐃⲆ][i];
          c.ⵠⵠⵠⲆΔ.volume(g, j[ᐃⵠᐃⲆ]);
        }
      }
    };
    this.ⵠΔⵠⵠⲆ = function () {
      tx.ΔΔᐃⲆⵠⲆⵠⵠⵠ();
      tx.ⲆᐃΔⵠΔ.ᐃⲆⵠⲆᐃⲆⵠ = [];
      tx.ⲆᐃΔⵠΔ.ΔⵠⲆⲆΔ = [];
      tx.ⲆᐃΔⵠΔ.ᐃΔᐃⵠΔ = [];
      tx.ⲆⲆᐃⵠⲆᐃⵠ(tx.ⲆᐃΔⵠΔ.ᐃⲆⵠⲆᐃⲆⵠ, hx.ᐃΔⲆⲆΔⲆᐃ, 8, 3, "p", 0.15);
      tx.ⲆⲆᐃⵠⲆᐃⵠ(tx.ⲆᐃΔⵠΔ.ΔⵠⲆⲆΔ, hx.ᐃᐃⲆⲆΔⵠΔ, 8, 4, "w", 0.15);
      tx.ⲆⲆᐃⵠⲆᐃⵠ(tx.ⲆᐃΔⵠΔ.ᐃΔᐃⵠΔ, hx.ΔⵠⵠⵠᐃᐃⲆ, 8, 3, "d", 0.09);
      tx.ⲆᐃⲆⲆⵠΔᐃ(tx.sample.ᐃΔΔⵠΔ, tx.ΔⲆⵠΔ.ᐃΔΔⵠΔ, 0.15);
      tx.ⲆᐃⲆⲆⵠΔᐃ(tx.sample.ⵠⵠΔᐃⲆⵠⲆ, tx.ΔⲆⵠΔ.ⵠⵠΔᐃⲆⵠⲆ, 0.2);
      tx.ⲆᐃⲆⲆⵠΔᐃ(tx.sample.ᐃⲆⵠᐃⲆᐃΔ, tx.ΔⲆⵠΔ.ᐃⲆⵠᐃⲆᐃΔ, 1);
      tx.ᐃᐃⲆΔᐃ.ΔⵠΔⲆⵠⲆⵠᐃⲆ = new ix(12, this.sample.ⵠᐃΔⵠⲆⵠⵠ, this.sample.ΔᐃⵠᐃᐃΔⵠ, 5000, 0.05, 0.4, hx.ⲆⲆΔⵠΔΔⲆ.ⵠⵠⵠⲆΔ, 3000, {
        x: Sr.ⵠᐃΔΔΔᐃⲆ,
        y: Sr.ᐃᐃⲆⲆΔᐃᐃ,
        w: px.w,
        ᐃⲆᐃ: px.ᐃⲆᐃ
      }, {
        x: Sr.ⵠᐃΔΔΔᐃⲆ - 2300,
        y: Sr.ᐃᐃⲆⲆΔᐃᐃ - 4000,
        w: px.w,
        ᐃⲆᐃ: px.ᐃⲆᐃ
      }, {
        x: Sr.ⵠᐃΔΔΔᐃⲆ - 1500,
        y: Sr.ᐃᐃⲆⲆΔᐃᐃ - 2000,
        w: px.w,
        ᐃⲆᐃ: px.ᐃⲆᐃ
      });
      tx.ᐃᐃⲆΔᐃ.ᐃⵠᐃΔⲆᐃⵠⵠᐃ = new ix(12, this.sample.ⲆΔⲆΔⵠᐃⲆ, this.sample.ⵠⵠⲆᐃΔⵠⵠ, 5000, 0.03, 0.25, hx.ⲆⲆΔⵠΔΔⲆ.ⵠⵠⵠⲆΔ, 3000, {
        x: 0,
        y: Sr.ᐃᐃⲆⲆΔᐃᐃ + 800,
        w: Sr.ⵠᐃΔΔΔᐃⲆ - 2300,
        ᐃⲆᐃ: px.ᐃⲆᐃ
      }, {
        x: -100,
        y: Sr.ᐃᐃⲆⲆΔᐃᐃ - 300,
        w: Sr.ⵠᐃΔΔΔᐃⲆ - 100,
        ᐃⲆᐃ: px.ᐃⲆᐃ
      }, {
        x: -100,
        y: Sr.ᐃᐃⲆⲆΔᐃᐃ + 400,
        w: Sr.ⵠᐃΔΔΔᐃⲆ - 1400,
        ᐃⲆᐃ: px.ᐃⲆᐃ
      });
      tx.ᐃᐃⲆΔᐃ.ⵠᐃⵠᐃᐃⲆΔ = new ix(12, this.sample.ⲆΔⲆⵠⵠⵠᐃ, this.sample.ⲆⲆⵠΔⲆᐃΔ, 5000, 0.01, 0.22, hx.ⲆⲆΔⵠΔΔⲆ.ⵠⵠⵠⲆΔ, 3000, {
        x: -100,
        y: -100,
        w: px.w + 200,
        ᐃⲆᐃ: Sr.ᐃᐃⲆⲆΔᐃᐃ - 1000
      }, {
        x: -100,
        y: -100,
        w: px.w + 200,
        ᐃⲆᐃ: Sr.ᐃᐃⲆⲆΔᐃᐃ + 600
      }, {
        x: -100,
        y: -100,
        w: px.w + 200,
        ᐃⲆᐃ: Sr.ᐃᐃⲆⲆΔᐃᐃ + 100
      });
      for (var a = 0; a < 8; a++) {
        tx.ΔΔᐃᐃ[a] = new kx(a);
      }
      tx.ΔΔᐃᐃ[0].ⵠΔⵠⵠⲆ(qx.ᐃΔⲆⵠ);
      tx.loaded = 1;
    };
    this.ᐃⵠⲆΔΔⲆⵠΔⲆ = function () {
      if (!this.transition && px.ⲆⲆΔᐃΔ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ⲆⲆⲆⵠᐃ = function () {
      if (this.ⲆᐃΔᐃⲆ && this.loaded) {
        for (var a in tx.sample) {
          var b = tx.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              tx.ΔⲆⵠΔ[a].stop(b[c]);
            }
          } else {
            tx.ΔⲆⵠΔ[a].stop(b);
          }
        }
        for (c = 0; tx.ΔΔᐃᐃ.length > c; c++) {
          tx.ΔΔᐃᐃ[c].ⲆⲆᐃΔΔⵠᐃ();
        }
      }
    };
    this.select = function () {
      if (tx.ⲆᐃΔᐃⲆ) {
        tx.ⲆⲆⲆⵠᐃ();
      } else {
        if (!tx.loaded) {
          tx.ⵠΔⵠⵠⲆ();
        }
        tx.ΔΔᐃᐃ[0].ᐃΔⲆⵠ = qx.ᐃΔⲆⵠ;
        tx.ΔΔᐃᐃ[0].ⵠᐃⵠⲆⲆⵠⲆ = 0;
        tx.ᐃⵠⲆΔΔⲆⵠΔⲆ();
      }
      tx.ⲆᐃΔᐃⲆ = !tx.ⲆᐃΔᐃⲆ;
    };
  }();
  var ux = new function () {
    this.ΔᐃⲆΔᐃΔΔ = function () {
      this.ᐃΔⲆΔΔ = 81;
      this.ᐃⵠᐃᐃⵠ = 68;
      this.ⵠⲆΔⲆⲆ = 90;
      this.ⵠⲆΔΔⵠΔᐃ = 83;
    };
    this.ΔⵠⲆΔⵠⵠᐃ = function () {
      this.ᐃΔⲆΔΔ = 65;
      this.ᐃⵠᐃᐃⵠ = 68;
      this.ⵠⲆΔⲆⲆ = 87;
      this.ⵠΔᐃⵠᐃ = 83;
    };
    this.ⲆᐃⵠⲆᐃ = 0;
    this.ⵠⲆΔΔⵠΔᐃ = 1;
    this.ⲆᐃⲆᐃᐃᐃΔ = 49;
    this.ΔⲆᐃⵠⲆΔΔ = 50;
    this.ΔⲆᐃΔⲆⲆⵠ = 51;
    this.ⵠⲆⲆⲆⵠᐃⲆ = 52;
    this.ⵠΔΔᐃⲆⵠᐃⵠΔ = 53;
    this.ΔⲆⲆΔΔⵠᐃ = 17;
    this.ΔΔΔΔⲆΔΔ = 37;
    this.ᐃᐃⲆᐃΔⲆᐃ = 39;
    this.ΔⲆΔΔⵠᐃᐃ = 38;
    this.ᐃⲆΔᐃⵠⵠⲆ = 40;
    this.ⲆⵠᐃⵠⲆⲆⵠ = 32;
    this.ⵠⵠΔᐃΔΔᐃ = 82;
    this.ΔΔⲆᐃΔⵠᐃ = 71;
    this.ⲆⵠⲆⵠᐃⲆᐃ = 86;
    this.ⵠᐃᐃⲆΔⲆᐃ = 66;
    this.ΔⵠⲆΔⵠⵠᐃ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ⲆᐃⵠⲆᐃ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ⲆᐃⵠⲆᐃ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (b == this.ᐃΔⲆΔΔ || this.ΔΔΔΔⲆΔΔ == b) {
        this.ⵠᐃⵠⵠⵠᐃᐃ();
      } else if (this.ⵠⲆΔⲆⲆ == b || this.ΔⲆΔΔⵠᐃᐃ == b) {
        this.ΔⵠⵠⵠΔⵠᐃ();
      } else if (this.ⵠⲆΔΔⵠΔᐃ == b || this.ᐃΔⵠᐃⲆⵠΔᐃⲆ == b) {
        this.ⵠᐃⲆⵠᐃΔᐃ();
      } else if (this.ᐃⵠᐃᐃⵠ == b || this.ᐃᐃⲆᐃΔⲆᐃ == b) {
        this.ΔⵠᐃΔΔᐃᐃ();
      }
      this.keys[b] = this.ⵠⲆΔΔⵠΔᐃ;
      return b;
    };
    this.ⵠᐃⵠⵠⵠᐃᐃ = function () {
      this.keys[this.ᐃⵠᐃᐃⵠ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ᐃᐃⲆᐃΔⲆᐃ] = this.ⲆᐃⵠⲆᐃ;
    };
    this.ΔⵠᐃΔΔᐃᐃ = function () {
      this.keys[this.ᐃΔⲆΔΔ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ΔΔΔΔⲆΔΔ] = this.ⲆᐃⵠⲆᐃ;
    };
    this.ⵠᐃⲆⵠᐃΔᐃ = function () {
      this.keys[this.ⵠⲆΔⲆⲆ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ΔⲆΔΔⵠᐃᐃ] = this.ⲆᐃⵠⲆᐃ;
    };
    this.ΔⵠⵠⵠΔⵠᐃ = function () {
      this.keys[this.ⵠΔᐃⵠᐃ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ᐃⲆΔᐃⵠⵠⲆ] = this.ⲆᐃⵠⲆᐃ;
    };
    this.ⵠⲆΔᐃΔⵠⲆ = function () {
      this.keys[this.ᐃⵠᐃᐃⵠ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ᐃᐃⲆᐃΔⲆᐃ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ᐃΔⲆΔΔ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ΔΔΔΔⲆΔΔ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ⵠⲆΔⲆⲆ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ΔⲆΔΔⵠᐃᐃ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ⵠΔᐃⵠᐃ] = this.ⲆᐃⵠⲆᐃ;
      this.keys[this.ᐃⲆΔᐃⵠⵠⲆ] = this.ⲆᐃⵠⲆᐃ;
    };
    this.ᐃΔⲆΔΔⲆᐃ = function () {
      return this.keys[this.ᐃΔⲆΔΔ] || this.keys[this.ΔΔΔΔⲆΔΔ];
    };
    this.ⵠⲆᐃΔΔΔᐃ = function () {
      return this.keys[this.ᐃⵠᐃᐃⵠ] || this.keys[this.ᐃᐃⲆᐃΔⲆᐃ];
    };
    this.ᐃⵠⲆⲆⵠᐃᐃ = function () {
      return this.keys[this.ⵠⲆΔⲆⲆ] || this.keys[this.ΔⲆΔΔⵠᐃᐃ];
    };
    this.ⵠⵠⵠᐃΔΔⵠ = function () {
      return this.keys[this.ⵠΔᐃⵠᐃ] || this.keys[this.ᐃⲆΔᐃⵠⵠⲆ];
    };
    this.ᐃᐃⲆΔⵠΔⲆⲆⲆ = function () {
      return this.keys[this.ΔⲆⲆΔΔⵠᐃ];
    };
    this.ⲆΔⲆΔⵠⵠᐃⵠΔ = function () {
      return this.keys[this.ⲆᐃⲆᐃᐃᐃΔ];
    };
    this.ⵠⲆΔΔⲆⵠᐃⲆⵠ = function () {
      return this.keys[this.ΔⲆᐃⵠⲆΔΔ];
    };
    this.ΔΔⲆΔⵠᐃᐃᐃⵠ = function () {
      return this.keys[this.ΔⲆᐃΔⲆⲆⵠ];
    };
    this.ᐃⵠΔΔΔΔⵠΔΔ = function () {
      return this.keys[this.ⵠⲆⲆⲆⵠᐃⲆ];
    };
    this.ᐃΔᐃⲆᐃⲆᐃᐃᐃ = function () {
      return this.keys[this.ⲆⵠᐃⵠⲆⲆⵠ];
    };
    this.ⲆⲆΔᐃⵠᐃⵠⲆⲆ = function () {
      return this.keys[this.ⵠⵠΔᐃΔΔᐃ];
    };
    this.ᐃⵠⵠⵠᐃⲆᐃΔᐃ = function () {
      return this.keys[this.ΔΔⲆᐃΔⵠᐃ];
    };
    this.ΔⲆΔΔᐃᐃⲆⲆΔ = function () {
      return this.keys[this.ⲆⵠⲆⵠᐃⲆᐃ];
    };
    this.ⲆΔⲆΔⲆᐃΔⲆΔ = function () {
      return this.keys[this.ⵠᐃᐃⲆΔⲆᐃ];
    };
  }();
  var vx = new function () {
    this.ⵠⲆΔΔⵠΔᐃ = 0;
    this.ⲆᐃⵠⲆᐃ = 1;
    this.IDLE = 2;
    this.ᐃⵠⲆⵠⵠΔⲆ = 0;
    this.ⵠⲆΔΔⵠΔΔᐃᐃ = 1;
    this.ⵠΔⵠΔ = {
      x: 0,
      y: 0
    };
    this.ΔᐃⵠᐃᐃⲆⵠ = 0;
    this.Ⲇⵠⵠⵠⵠⵠⵠ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ⲆⵠᐃⲆ = this.ᐃⵠⲆⵠⵠΔⲆ;
    this.down = function () {
      this.state = this.ⵠⲆΔΔⵠΔᐃ;
    };
    this.up = function () {
      this.state = this.ⲆᐃⵠⲆᐃ;
    };
    this.ᐃΔΔ = function () {
      return (this.ⵠΔⵠΔ.x != this.ΔᐃⵠᐃᐃⲆⵠ || this.ⵠΔⵠΔ.y != this.Ⲇⵠⵠⵠⵠⵠⵠ) && (this.ΔᐃⵠᐃᐃⲆⵠ = this.ⵠΔⵠΔ.x, this.Ⲇⵠⵠⵠⵠⵠⵠ = this.ⵠΔⵠΔ.y, true);
    };
  }();
  var wx = 0;
  var xx = 0;
  const yx = String.fromCharCode;
  const zx = yx(101);
  const Ax = yx(118);
  const Bx = yx(97);
  const Cx = yx(108);
  var Dx = new function (b, c, f) {
    this.ⲆΔ = b;
    this.Ⲇ = c;
    this.ᐃΔᐃⵠᐃΔΔ = {
      translate: {
        y: 0,
        x: 0
      },
      style: document.getElementById("loading").style,
      ᐃΔΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃΔᐃⵠᐃΔΔ.style.position = "absolute";
    this.ᐃΔᐃⵠᐃΔΔ.style.display = "inline-block";
    this.ᐃΔᐃⵠᐃΔΔ.ᐃΔΔ();
    this.ΔᐃᐃᐃΔ = Rj;
    this.stop = function () {
      this.ΔᐃᐃᐃΔ = Cl;
    };
    this.ⵠⵠΔⵠᐃΔⵠ = {
      total: 1
    };
    var i = this;
    function j() { }
    var k = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ⲆΔΔⵠΔ = function () {
      i.ᐃΔΔ();
      if (++k == 40) {
        i.stop();
        j();
        return;
      }
      za.setTimeout(i.ⲆΔΔⵠΔ, 33);
    };
    this.ⲆⲆⲆⵠᐃ = function (a) {
      j = a;
      i.ⲆΔΔⵠΔ();
    };
    new Date().getTime();
    Object.keys(Δᐃ).length;
    console.log(at, undefined);
    for (var e in Δᐃ) {
      if (n(Δᐃ[e]) === 0) {
        0;
      }
    }
    console.log(Wa, undefined);
    function o() {
      if (this.ᐃⲆⵠᐃᐃᐃᐃ !== 0) {
        return this.ᐃⲆⵠᐃᐃᐃᐃ;
      } else {
        this.ᐃⲆⵠᐃᐃᐃᐃ = 2;
        this.src = this.ⲆⵠⵠᐃⲆ;
        return 0;
      }
    }
    function l(a) {
      this.ᐃⲆⵠᐃᐃᐃᐃ = 1;
    }
    var g = 0;
    function q() {
      console.log(Bg);
      if (g !== 1) {
        g = 1;
        console.log(Kn);
        if (Db !== zt) {
          zt();
        }
        Db();
        var a = ᐃⵠⲆΔ.ⵠⵠⲆΔΔⵠⵠ("server");
        if (a !== null) {
          ΔⵠⲆⵠ.ᐃⵠᐃΔⲆⲆⵠ = 1;
          ΔⵠⲆⵠ.ⵠᐃⵠᐃⲆ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        ΔⵠⲆⵠ.ᐃᐃᐃᐃΔⲆⲆⲆᐃ();
        setTimeout(f, 100);
      }
    }
    function d() {
      let a = function () {
        ΔⵠⲆⵠ.ⲆᐃⵠᐃᐃᐃΔ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(d, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function s() {
      this.ⲆᐃᐃΔⵠⵠΔ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⲆᐃᐃΔⵠⵠΔ}`, this);
      if (this.ⲆᐃᐃΔⵠⵠΔ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⲆᐃᐃΔⵠⵠΔ;
      var b = this.src;
      var c = n(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ΔⵠΔΔⵠΔⲆ) {
          if (b.indexOf(ΔⵠΔΔⵠΔⲆ[c]) !== -1) {
            Δᐃ[c] = new Image();
            Δᐃ[c].onload = l;
            Δᐃ[c].onerror = s;
            Δᐃ[c].ⲆᐃᐃΔⵠⵠΔ = a;
            Δᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function m(a) {
      for (var b in Δᐃ) {
        var c = Δᐃ[b];
        if (typeof c === "string" && n(c) === a) {
          Δᐃ[b] = new Image();
          Δᐃ[b].ᐃⲆⵠᐃᐃᐃᐃ = 0;
          Δᐃ[b].ⲆᐃᐃΔⵠⵠΔ = 0;
          Δᐃ[b].onload = l;
          Δᐃ[b].onerror = s;
          Δᐃ[b].ⵠΔⲆⲆΔΔⵠ = o;
          Δᐃ[b].ⲆⵠⵠᐃⲆ = c;
        }
      }
    }
    m(1);
    m(0);
    cu(1, "l", 20, "#000");
    d();
    Tp();
    this.ᐃΔΔ = function () {
      this.ᐃΔᐃⵠᐃΔΔ.translate.x = (Sn - 500) / 2;
      this.ᐃΔᐃⵠᐃΔΔ.translate.y = (Zn - 150) / 2;
      var a = 2500 / (40 - k + 1) - 48;
      this.ᐃΔᐃⵠᐃΔΔ.translate.y -= a;
      this.ᐃΔᐃⵠᐃΔΔ.ᐃΔΔ();
    };
    this.ᐃΔᐃⵠᐃΔΔ.ᐃΔΔ();
    this.ΔⵠⲆⲆ = function () {
      try {
        Cp();
      } catch (a) { }
      this.ᐃΔΔ();
    };
  }(qn, Hn, function () {
    xp();
    sx = new Tw(qn, Hn);
    (mx = new Rw(qn, Hn)).ⲆᐃⲆⲆⲆⲆⵠΔΔ();
    rx = new Uw(qn, Hn);
    px = new _f();
    qx = new Lw();
    Dx.ⲆⲆⲆⵠᐃ(function () {
      Dx.ᐃΔᐃⵠᐃΔΔ.style.display = "none";
      mx.ⲆᐃΔᐃⲆ();
    });
  });
  function Ex() {
    try {
      za.Widget.adsRefresh();
    } catch (a) { }
  }
  za.onbeforeunload = function () {
    if (sx.ΔᐃᐃᐃΔ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  Dq();
  (function b(a) {
    za.requestAnimationFrame(b);
    xx = (a - wx) / 1000;
    wx = a;
    xx = xx > 1 ? 1 : xx;
    if (sx.ΔᐃᐃᐃΔ) {
      sx.ΔⵠⲆⲆ();
    } else {
      Hn.clearRect(0, 0, Sn, Zn);
      if (Dx.ΔᐃᐃᐃΔ) {
        Dx.ΔⵠⲆⲆ();
      } else if (mx.ΔᐃᐃᐃΔ) {
        mx.ΔⵠⲆⲆ();
      } else if (rx.ΔᐃᐃᐃΔ) {
        rx.ΔⵠⲆⲆ();
      }
    }
  })(0);
  var Fx = 0;
  function Gx() {
    Hx.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", Qe);
    Hx.send();
  }
  var Hx = new XMLHttpRequest();
  Hx.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Ix = "https://token.starve.io/";
  var Jx = "https://token2.starve.io/";
  var Kx = 0;
  var Lx = 1;
  var Mx = 4;
  var Nx = undefined;
  var Ox = Fl;
  var Px = Fr;
  var Qx = 0;
  za.ⲆΔⵠΔⵠᐃⲆ = function () {
    Qx = 1;
  };
  var Rx = {
    ᐃⲆⵠⵠᐃⲆⲆⲆᐃ: "ACCESS_TOKEN"
  };
  var Sx = document.createElement("script");
  Sx.type = "text/javascript";
  Sx.async = wh;
  Sx.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Sx.addEventListener("load", function (a) {
    za.XPayStationWidget.init(Rx);
    za.XPayStationWidget.on("status-done", dy);
  }, false);
  document.getElementsByTagName("head")[0].appendChild(Sx);
  za.fbAsyncInit = function () {
    ey();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Tx = ls;
  var Ux = Ak;
  function Vx() {
    za.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Tx = a).isSignedIn.listen(Wx);
      Tx.currentUser.listen(Xx);
      if (Tx.isSignedIn.get()) {
        Tx.signIn();
      }
      Yx();
    });
  }
  function Wx(a) { }
  function Xx(a) {
    if (Ox === undefined && Ux !== Kn && (Ox = Ux.getAuthResponse().id_token) !== undefined) {
      Nx = Kx;
      Px = Ux.getBasicProfile().getId();
      za.ⲆΔⵠΔⵠᐃⲆ();
      return;
    }
    if (a !== undefined && fr === a.isSignedIn()) {
      Px = (Ux = a).id;
      Px = Ux.getBasicProfile().getId();
      Ox = Ux.getAuthResponse().id_token;
      Nx = Kx;
      za.ⲆΔⵠΔⵠᐃⲆ();
    }
  }
  function Yx() {
    if (Tx) {
      Ux = Tx.currentUser.get();
    }
  }
  function Zx() {
    if (mx.ΔᐃⵠᐃⲆ >= 300 || mx.ᐃᐃⲆΔᐃⵠⵠ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Ix + "changeNickname?token=" + Ox + "&userid=" + Px + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              mx.ΔᐃⵠᐃⲆ -= a;
            }
            mx.ᐃᐃⲆΔᐃⵠⵠ = 1;
            mx.ⲆᐃΔᐃ(mx.ΔⵠΔΔᐃ);
          }
        };
        b.send();
      }
    }
  }
  function $x(a) {
    if (Px) {
      var b = new XMLHttpRequest();
      b.open("GET", Ix + "xsolla?userid=" + Px + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          Rx.access_token = b.responseText;
          za.XPayStationWidget.init(Rx);
          za.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function _x(a, b) {
    if (mx.ΔᐃⵠᐃⲆ < b) {
      mx.ⲆᐃΔᐃ(mx.ⲆΔΔᐃᐃ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Ix + "buyKit?token=" + Ox + "&userid=" + Px + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          mx.ΔᐃⵠᐃⲆ -= b;
          mx.ᐃΔⵠΔⵠ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function by(b, c, d, e) {
    b = b === undefined ? mx.ᐃᐃΔⵠⲆⲆⲆ : b;
    c = Lq === c ? mx.ΔⲆⲆⲆⵠΔΔ : c;
    d = d === Ms ? mx.ⵠⲆⲆⵠⲆⵠⵠ : d;
    e = e === Ms ? mx.ᐃⲆᐃⲆΔᐃⲆ : e;
    if (mx.ᐃᐃΔⵠⲆⲆⲆ !== b || c !== mx.ΔⲆⲆⲆⵠΔΔ || mx.ⵠⲆⲆⵠⲆⵠⵠ !== d || mx.ᐃⲆᐃⲆΔᐃⲆ !== e) {
      mx.ᐃᐃΔⵠⲆⲆⲆ = b;
      mx.ΔⲆⲆⲆⵠΔΔ = c;
      mx.ⵠⲆⲆⵠⲆⵠⵠ = d;
      mx.ᐃⲆᐃⲆΔᐃⲆ = e;
      if (e === mx.ⲆᐃᐃⲆᐃⲆⲆ) {
        e = "0";
      } else if (e === mx.ⲆⵠᐃⵠⲆⵠᐃ) {
        e = "1";
      } else if (mx.ΔᐃΔⵠΔᐃⵠ === e) {
        e = "2";
      } else if (e === mx.ⲆⲆⲆᐃⵠᐃⵠ) {
        e = "3";
      } else if (e === mx.ᐃΔᐃΔΔⵠᐃ) {
        e = "4";
      } else if (mx.ⲆⲆⲆⲆΔⲆΔ === e) {
        e = "5";
      }
      if (mx.ΔⵠᐃᐃᐃⲆⲆ === c) {
        c = "total";
      } else if (mx.ᐃΔⲆⲆᐃⵠⲆ === c) {
        c = "normal";
      } else if (c === mx.ᐃᐃΔᐃⲆⵠᐃ) {
        c = "zombie";
      } else if (c === mx.ΔΔⵠΔⵠᐃⲆ) {
        c = "vampire";
      } else if (c === mx.ΔΔⵠⲆⵠⲆΔ) {
        c = "forest";
      }
      if (b === mx.ΔΔⲆⲆⵠⲆⵠ) {
        b = "all";
      }
      if (b === mx.ⲆΔⲆΔᐃⵠⵠ) {
        b = "week";
      }
      if (b === mx.ΔᐃⵠⲆᐃΔⵠ) {
        b = "today";
      }
      if (d === mx.ⲆᐃΔⵠⵠᐃᐃ) {
        d = "kill";
      } else if (d === mx.ᐃΔⵠⲆⵠⵠⲆ) {
        d = "score";
      } else if (mx.ΔⵠΔⵠⵠⲆΔ === d) {
        d = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", Ix + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + e);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
            ⵠᐃⵠΔΔ = a[c];
            var d = ⵠᐃⵠΔΔ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = za.decodeURIComponent(za.escape(za.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += mx.ΔΔΔΔⲆᐃΔ(ⵠᐃⵠΔΔ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ⵠᐃⵠΔΔ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ⵠᐃⵠΔΔ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ⵠᐃⵠΔΔ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function cy(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Ix + "setRegion?token=" + Ox + "&userid=" + Px + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          mx.ⲆᐃΔᐃ(mx.ᐃⵠⲆΔⵠ);
        } else {
          mx.ⲆᐃΔᐃ(mx.ⲆⲆᐃᐃΔ);
        }
      }
    };
    b.send();
  }
  function dy() {
    var a = new XMLHttpRequest();
    a.open("GET", Ix + "claimBread?userid=" + Px);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          mx.ΔᐃⵠᐃⲆ = b;
        }
      }
    };
    a.send();
  }
  function ey() {
    if (za.FB) {
      za.FB.init({
        version: "v15.0",
        xfbml: Qe,
        appId: "642017356260407",
        cookie: true
      });
    }
    if (Px === undefined) {
      (function () {
        try {
          if (za.FB && za.FB.getUserID()) {
            Px = za.FB.getUserID();
            if (Ox === undefined) {
              za.FB.getLoginStatus(function () {
                Nx = Lx;
                Ox = za.FB.getAuthResponse().accessToken;
                za.ⲆΔⵠΔⵠᐃⲆ(Px);
              });
            }
          }
        } catch (a) { }
        try {
          Px = Ux.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  function fy(a, b) {
    if (mx.ⵠⵠΔⲆⵠ <= 0) {
      if (b > mx.ΔᐃⵠᐃⲆ) {
        mx.ⲆᐃΔᐃ(mx.ⲆΔΔᐃᐃ);
      } else {
        mx.ⵠⵠΔⲆⵠ = 2;
        mx.ᐃᐃⲆⵠΔΔΔ = 0;
        mx.ΔⵠⵠᐃΔᐃΔ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Ix + "buySpin?token=" + Ox + "&userid=" + Px + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              mx.ⵠⵠᐃⵠⲆⲆⲆΔᐃ(a.rand * Math.PI * 2, a.type, a.id);
              mx.ΔᐃⵠᐃⲆ -= b;
            } else {
              mx.ⵠⵠΔⲆⵠ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
})();